ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E32_infer_design1_2015_Jul_15_1620
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x90tJj\xe4\xfeM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_15_1620
p67
sVparticipant
p68
VE32
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.91692534542471549
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F31.132746392941954
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P2\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F16.667000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.77999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'"\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p103
sg21
F1.8999999999999999
sg70
Vn
sa(dp104
g64
g65
sg20
F14.817
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.75999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\n\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p110
sg21
F1.2
sg70
Vn
sa(dp111
g64
g65
sg20
F7.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.49999999999999889
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x10\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V22-daim.png
p117
sg21
F1.7
sg70
Vn
sa(dp118
g64
g65
sg20
F7.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.619999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x0f\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p124
sg21
F1.7
sg70
Vn
sa(dp125
g64
g65
sg20
F6.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'!\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V44-crunch.png
p131
sg21
F1.7
sg70
Vn
sa(dp132
g64
g65
sg20
F4.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.63999999999999946
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x0e\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p138
sg21
F1.2
sg70
Vn
sa(dp139
g64
g65
sg20
F10.401
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.49999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x05\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p145
sg21
F1.3
sg70
Vn
sa(dp146
g64
g65
sg20
F9.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F1.5400000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x00\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p152
sg21
F1.1000000000000001
sg70
Vn
sa(dp153
g64
g65
sg20
F10.367000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.73999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x02\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p159
sg21
F1.6000000000000001
sg70
Vn
sa(dp160
g64
g65
sg20
F14.284000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1c\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p166
sg21
F1.7
sg70
Vn
sa(dp167
g64
g65
sg20
F8.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x13\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p173
sg21
F1
sg70
Vn
sa(dp174
g64
g65
sg20
F6.367
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.65999999999999948
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'$\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V48-twix.png
p180
sg21
F1.2
sg70
Vn
sa(dp181
g64
g65
sg20
F9.2509999999999994
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\r\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p187
sg21
F1.5
sg70
Vn
sa(dp188
g64
g65
sg20
F3.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.75999999999999979
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x08\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p194
sg21
F1
sg70
Vn
sa(dp195
g64
g65
sg20
F5.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1b\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p201
sg21
F1.3
sg70
Vn
sa(dp202
g64
g65
sg20
F8.75
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.41999999999999882
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x14\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p208
sg21
F1.7
sg70
Vn
sa(dp209
g64
g65
sg20
F12.016999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.1999999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x17\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p215
sg21
F1.8999999999999999
sg70
Vn
sa(dp216
g64
g65
sg20
F7.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x04\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p222
sg21
F1.5
sg70
Vn
sa(dp223
g64
g65
sg20
F3.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.71999999999999953
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x0b\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p229
sg21
F1.3
sg70
Vn
sa(dp230
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.63999999999999879
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x03\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V4-corn.png
p236
sg21
F1.8999999999999999
sg70
Vn
sa(dp237
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.55999999999999939
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x16\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p243
sg21
F1.2
sg70
Vn
sa(dp244
g64
g65
sg20
F7.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.4199999999999986
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x1d\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V40-sardines.png
p250
sg21
F1.8999999999999999
sg70
Vn
sa(dp251
g64
g65
sg20
F6.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x06\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V7-olives.png
p257
sg21
F1.8999999999999999
sg70
Vn
sa(dp258
g64
g65
sg20
F7.3840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.55999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x07\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p264
sg21
F1.8
sg70
Vn
sa(dp265
g64
g65
sg20
F18.434000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F1.02
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x01\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p271
sg21
F1.1000000000000001
sg70
Vn
sa(dp272
g64
g65
sg20
F5.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.99999999999999933
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x0c\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V18-mms.png
p278
sg21
F1.7
sg70
Vn
sa(dp279
g64
g65
sg20
F3.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.73999999999999955
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x11\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p285
sg21
F1.2
sg70
Vn
sa(dp286
g64
g65
sg20
F4.7510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.83999999999999897
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1e\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p292
sg21
F1.8999999999999999
sg70
Vn
sa(dp293
g64
g65
sg20
F4.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'#\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p299
sg21
F1.2
sg70
Vn
sa(dp300
g64
g65
sg20
F10.433999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.1600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x1f\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p306
sg21
F1
sg70
Vn
sa(dp307
g64
g65
sg20
F4.0339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0.71999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x19\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p313
sg21
F1.7
sg70
Vn
sa(dp314
g64
g65
sg20
F7.9509999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.73999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\t\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p320
sg21
F1.3999999999999999
sg70
Vn
sa(dp321
g64
g65
sg20
F4.1340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S"'\x00\x00\x00"
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V51-mars.png
p327
sg21
F1
sg70
Vn
sa(dp328
g64
g65
sg20
F2.8839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.55999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'&\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V50-polo.png
p334
sg21
F1.8
sg70
Vn
sa(dp335
g64
g65
sg20
F7.8840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.89999999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x18\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p341
sg21
F1
sg70
Vn
sa(dp342
g64
g65
sg20
F6.8339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.97999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x1a\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V35-raisins.png
p348
sg21
F1.8999999999999999
sg70
Vn
sa(dp349
g64
g65
sg20
F2.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x12\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p355
sg21
F1.3999999999999999
sg70
Vn
sa(dp356
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'%\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p362
sg21
F1.5
sg70
Vn
sa(dp363
g64
g65
sg20
F9.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.63999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x15\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V29-beans.png
p369
sg21
F1.7
sg70
Vn
sa(dp370
g64
g65
sg20
F11.117000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.69999999999999907
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S' \x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p376
sg21
F1.7
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F0.88344345711902861
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'22-daim.png'
p381
sg26
F2.5999999999999988
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F35.23247674742106
sg27
F16.367000000000001
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p390
sg26
F4.0000000000000009
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F3.0333245143074237
sg27
F6.4169999999999998
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p399
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F4.2167786911049916
sg27
F7.101
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p408
sg26
F1
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F17.283120384267022
sg27
F3.7839999999999998
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p417
sg26
F5.0999999999999996
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F2.1333419622942529
sg27
F3.0339999999999998
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'40-sardines.png'
p426
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.0500346678954884
sg27
F2.1669999999999998
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'4-corn.png'
p435
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.8334013766798307
sg27
F2.0510000000000002
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p444
sg26
F3.0999999999999996
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F9.4832949781730349
sg27
F6.601
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p453
sg26
F5.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F3.1332387568818376
sg27
F3.0169999999999999
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p462
sg26
F4.9000000000000012
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F5.2667232680878442
sg27
F2.117
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'51-mars.png'
p471
sg26
F5.5999999999999988
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.0168435793693789
sg27
F2.5169999999999999
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p480
sg26
F5.9999999999999982
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F3.3838203564400828
sg27
F1.8009999999999999
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'50-polo.png'
p489
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.650167865597723
sg27
F1.534
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p498
sg26
F5.5
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F4.7334246976824943
sg27
F5.2009999999999996
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'31-hobnobs.png'
p507
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F6.6499583186978271
sg27
F1.534
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'38-maltesers.png'
p516
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.5999099661075888
sg27
F1.151
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'48-twix.png'
p525
sg26
F4.9000000000000004
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.3335148456135357
sg27
F3.6339999999999999
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'18-mms.png'
p534
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F4.8833961308801008
sg27
F1.8839999999999999
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p543
sg26
F4.0000000000000009
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'left'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F6.5837067164484324
sg27
F1.3340000000000001
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p552
sg26
F4.9000000000000004
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F4.2667743005986267
sg27
F2.5009999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p561
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.1832149797237435
sg27
F0.80100000000000005
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p570
sg26
F4.6000000000000014
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F4.066541546735607
sg27
F4.117
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'49-yorkie.png'
p579
sg26
F2.4999999999999987
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F9.8166356290175827
sg27
F3.234
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'44-crunch.png'
p588
sg26
F3.5999999999999996
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F7.7833610068282724
sg27
F1.7509999999999999
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'25-kitkat.png'
p597
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.2835255082727599
sg27
F1.5509999999999999
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p606
sg26
F5
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.8168286402433296
sg27
F2.9510000000000001
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p615
sg26
F5.4000000000000004
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.4669303631462753
sg27
F2.9169999999999998
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p624
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.5668337720035197
sg27
F1.0009999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p633
sg26
F5.4000000000000004
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.8167739014606923
sg27
F4.117
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p642
sg26
F4.7000000000000011
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F6.0834287460711494
sg27
F2.5009999999999999
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'5-pineapple.png'
p651
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.5505059345960035
sg27
F0.70099999999999996
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p660
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F1.4000424225559982
sg27
F0.78400000000000003
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p669
sg26
F2.3999999999999995
sg28
F3
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F5.1667331894914241
sg27
F2.7669999999999999
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p678
sg26
F5.1000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.3999329449916331
sg27
F0.96699999999999997
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'7-olives.png'
p687
sg26
F3.9000000000000004
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F7.4000378609907784
sg27
F3.484
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p696
sg26
F5.8999999999999977
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.3167220136574542
sg27
F0.63400000000000001
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'35-raisins.png'
p705
sg26
F3.2999999999999994
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F2.0001205963790198
sg27
F1.2010000000000001
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'46-pistachios.png'
p714
sg26
F4.9000000000000021
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F2.9000774895885115
sg27
F1.8340000000000001
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p723
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.316839188863014
sg27
F0.66700000000000004
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'29-beans.png'
p732
sg26
F5.2999999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.5668272147540847
sg27
F0.91700000000000004
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F563.56815833648761
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F12.116672577694771
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'12-topic.png'
p744
sg83
S'12-topic.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'39-mackerel.png'
p749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0f\x10+ \x06.\x08'
tRp754
sa(dp755
g64
g65
sg82
S'11-snickers.png'
p756
sg83
S'11-snickers.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'54-frubes_yogurt.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0f\x10+(\x02i0'
tRp765
sa(dp766
g64
g65
sg82
S'32-hovis_crackers.png'
p767
sg83
S'32-hovis_crackers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0f\x10+0\x06Ex'
tRp776
sa(dp777
g64
g65
sg82
g744
sg83
S'39-mackerel.png'
p778
sg56
g57
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p781
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\x0f\x10+9\x05SH'
tRp785
sa(dp786
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p787
sg83
S'37-nakd_cashew_cookie.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'9-yu_mango_pieces.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x0f\x10,\x04\x06\xd2\x18'
tRp796
sa(dp797
g64
g65
sg82
g767
sg83
S'24-food_doctor_apple_walnut_bar.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S'\x07\xdf\x07\x0f\x10,\x0c\x0b\xa0\x90'
tRp805
sa(dp806
g64
g65
sg82
S'53-cheestrings.png'
p807
sg83
S'47-picnic.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'47-picnic.png'
p812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x0f\x10,\x17\x04\xed\xb8'
tRp816
sa(dp817
g64
g65
sg82
g787
sg83
S'9-yu_mango_pieces.png'
p818
sg56
g57
sS'practice_loop.thisN'
p819
I7
sS'practice_loop.thisTrialN'
p820
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p821
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p822
sS'practice_loop.thisIndex'
p823
g60
(g99
S'\x07\x00\x00\x00'
tRp824
sg34
g753
(S'\x07\xdf\x07\x0f\x10,\x1e\x04\xc2\xc0'
tRp825
sa(dp826
g64
g65
sg82
g807
sg83
S'53-cheestrings.png'
p827
sg56
g57
sS'practice_loop.thisN'
p828
I8
sS'practice_loop.thisTrialN'
p829
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p830
I0
sg84
g812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p831
sS'practice_loop.thisIndex'
p832
g60
(g99
S'\x08\x00\x00\x00'
tRp833
sg34
g753
(S'\x07\xdf\x07\x0f\x10,%\t\x99\x08'
tRp834
sa(dp835
g64
g65
sg82
S'15-walnut_whip.png'
p836
sg83
S'15-walnut_whip.png'
p837
sg56
g57
sS'practice_loop.thisN'
p838
I9
sS'practice_loop.thisTrialN'
p839
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p840
I0
sg84
S'28-maple_pecan.png'
p841
sg33
g841
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p842
sS'practice_loop.thisIndex'
p843
g60
(g99
S'\t\x00\x00\x00'
tRp844
sg34
g753
(S'\x07\xdf\x07\x0f\x10,,\x05\xd8\x18'
tRp845
sa(dp846
g64
g65
sg82
S'52-aero_mousse.png'
p847
sg83
S'14-discos_salt_vinegar.png'
p848
sg56
g57
sS'practice_loop.thisN'
p849
I10
sS'practice_loop.thisTrialN'
p850
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p851
I0
sg84
S'14-discos_salt_vinegar.png'
p852
sg33
g847
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x0f\x10,9\x08\xdd\x88'
tRp856
sa(dp857
g64
g65
sg82
g756
sg83
S'54-frubes_yogurt.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x0f\x10-\t\x02&\xc8'
tRp865
sa(dp866
g64
g65
sg82
g847
sg83
S'52-aero_mousse.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g852
sg33
g847
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0f\x10-\x11\x08`\x88'
tRp874
sa(dp875
g64
g65
sg82
g836
sg83
S'28-maple_pecan.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g841
sg33
g836
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0f\x10-\x18\x03r\xd0'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F81.148408241835568
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'4-corn.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'4-corn.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'10-bounty_redo.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'10-bounty_redo.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.6998715349209306
sg34
g753
(S'\x07\xdf\x07\x0f\x100\x0b\r\xa8\x18'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'40-sardines.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'40-sardines.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'5-pineapple.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'5-pineapple.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F4.1664081779745175
sg34
g753
(S'\x07\xdf\x07\x0f\x100\x12\t\xac\x90'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'44-crunch.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'44-crunch.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'26-walkers_smoky_bacon.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'26-walkers_smoky_bacon.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.5499816396995811
sg34
g753
(S'\x07\xdf\x07\x0f\x100\x1b\x0c\x8e\xd8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'17-jacobs_mini_cheddars_redo.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'8-liquorice_catherine_wheels.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'8-liquorice_catherine_wheels.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
S'17-jacobs_mini_cheddars_redo.png'
p960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p961
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.849908540618344
sg34
g753
(S'\x07\xdf\x07\x0f\x100"\x061\xf0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'36-fig_rolls.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'36-fig_rolls.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.6999753105283162
sg34
g753
(S'\x07\xdf\x07\x0f\x100)\x04\x97\xc8'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'43-mrporky_pork_crackles_redo.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'18-mms.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'18-mms.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.9332737098757207
sg34
g753
(S'\x07\xdf\x07\x0f\x1000\x00a\xa8'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'51-mars.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'51-mars.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.7332641876082562
sg34
g753
(S'\x07\xdf\x07\x0f\x1006\x0f:p'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'48-twix.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'48-twix.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'50-polo.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1028
I0
sg909
S'50-polo.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vn
sS'block_loop.thisTrialN'
p1031
I0
sg39
F1.2166803323561908
sg34
g753
(S'\x07\xdf\x07\x0f\x101\x01\x0b\xb8\x00'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'26-walkers_smoky_bacon.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'right'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1039
g60
(g99
S'\x08\x00\x00\x00'
tRp1040
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1041
I0
sg904
S'44-crunch.png'
p1042
sS'block_loop.thisRepN'
p1043
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1044
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1045
Nsg70
Vn
sS'block_loop.thisTrialN'
p1046
I0
sg39
F1.1666770252204515
sg34
g753
(S'\x07\xdf\x07\x0f\x101\x08\x00\x1f@'
tRp1047
sa(dp1048
S'trial_loop.thisTrialN'
p1049
I9
sg895
S'2-steamed_puddings.png'
p1050
sS'block_loop.thisIndex'
p1051
g889
sg38
S'left'
p1052
sg59
g63
sS'trial_loop.thisN'
p1053
I9
sg33
S'20-fruit_pastilles.png'
p1054
sg64
g65
sS'trial_loop.thisIndex'
p1055
g60
(g99
S'\t\x00\x00\x00'
tRp1056
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1057
I0
sg904
S'20-fruit_pastilles.png'
p1058
sS'block_loop.thisRepN'
p1059
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1060
I0
sg909
S'2-steamed_puddings.png'
p1061
sg55
g11
sS'block_loop.thisTrial'
p1062
Nsg70
Vn
sS'block_loop.thisTrialN'
p1063
I0
sg39
F1.7836652062060239
sg34
g753
(S'\x07\xdf\x07\x0f\x101\x0e\x03O\xa8'
tRp1064
sa(dp1065
S'trial_loop.thisTrialN'
p1066
I10
sg895
S'27-hartleys_raspberries_jelly.png'
p1067
sS'block_loop.thisIndex'
p1068
g889
sg38
S'right'
p1069
sg59
g63
sS'trial_loop.thisN'
p1070
I10
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1071
g60
(g99
S'\n\x00\x00\x00'
tRp1072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1073
I0
sg904
S'51-mars.png'
p1074
sS'block_loop.thisRepN'
p1075
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1076
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F2.2832389849600077
sg34
g753
(S'\x07\xdf\x07\x0f\x101\x15\x00\x84\xd0'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'38-maltesers.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'left'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
S'38-maltesers.png'
p1086
sg64
g65
sS'trial_loop.thisIndex'
p1087
g60
(g99
S'\x0b\x00\x00\x00'
tRp1088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1089
I0
sg904
S'6-sour_patch_kids.png'
p1090
sS'block_loop.thisRepN'
p1091
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1092
I0
sg909
S'6-sour_patch_kids.png'
p1093
sg55
g11
sS'block_loop.thisTrial'
p1094
Nsg70
Vn
sS'block_loop.thisTrialN'
p1095
I0
sg39
F1.399723112994252
sg34
g753
(S'\x07\xdf\x07\x0f\x101\x1c\x05[\x18'
tRp1096
sa(dp1097
S'trial_loop.thisTrialN'
p1098
I12
sg895
S'42-mrkipling_lemon_slices.png'
p1099
sS'block_loop.thisIndex'
p1100
g889
sg38
S'left'
p1101
sg59
g63
sS'trial_loop.thisN'
p1102
I12
sg33
S'16-skips_prawn.png'
p1103
sg64
g65
sS'trial_loop.thisIndex'
p1104
g60
(g99
S'\x0c\x00\x00\x00'
tRp1105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1106
I0
sg904
S'16-skips_prawn.png'
p1107
sS'block_loop.thisRepN'
p1108
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1109
I0
sg909
S'42-mrkipling_lemon_slices.png'
p1110
sg55
g11
sS'block_loop.thisTrial'
p1111
Nsg70
Vn
sS'block_loop.thisTrialN'
p1112
I0
sg39
F2.8497753999354245
sg34
g753
(S'\x07\xdf\x07\x0f\x101"\x0b\xdf\x10'
tRp1113
sa(dp1114
S'trial_loop.thisTrialN'
p1115
I13
sg895
S'33-ambrosia_rice.png'
p1116
sS'block_loop.thisIndex'
p1117
g889
sg38
S'right'
p1118
sg59
g63
sS'trial_loop.thisN'
p1119
I13
sg33
S'23-crunchie_redo.png'
p1120
sg64
g65
sS'trial_loop.thisIndex'
p1121
g60
(g99
S'\r\x00\x00\x00'
tRp1122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1123
I0
sg904
S'23-crunchie_redo.png'
p1124
sS'block_loop.thisRepN'
p1125
I0
sg907
S'33-ambrosia_rice.png'
p1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1127
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p1128
Nsg70
Vn
sS'block_loop.thisTrialN'
p1129
I0
sg39
F1.6999334011488827
sg34
g753
(S'\x07\xdf\x07\x0f\x101*\n\x02\x80'
tRp1130
sa(dp1131
S'trial_loop.thisTrialN'
p1132
I14
sg895
g1050
sS'block_loop.thisIndex'
p1133
g889
sg38
S'right'
p1134
sg59
g63
sS'trial_loop.thisN'
p1135
I14
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1136
g60
(g99
S'\x0e\x00\x00\x00'
tRp1137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1138
I0
sg904
g1058
sS'block_loop.thisRepN'
p1139
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1140
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1141
Nsg70
Vn
sS'block_loop.thisTrialN'
p1142
I0
sg39
F1.5003512405173751
sg34
g753
(S'\x07\xdf\x07\x0f\x1011\x06\x06\xf8'
tRp1143
sa(dp1144
S'trial_loop.thisTrialN'
p1145
I15
sg895
S'49-yorkie.png'
p1146
sS'block_loop.thisIndex'
p1147
g889
sg38
S'left'
p1148
sg59
g63
sS'trial_loop.thisN'
p1149
I15
sg33
S'49-yorkie.png'
p1150
sg64
g65
sS'trial_loop.thisIndex'
p1151
g60
(g99
S'\x0f\x00\x00\x00'
tRp1152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1153
I0
sg904
S'35-raisins.png'
p1154
sS'block_loop.thisRepN'
p1155
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1156
I0
sg909
S'35-raisins.png'
p1157
sg55
g11
sS'block_loop.thisTrial'
p1158
Nsg70
Vn
sS'block_loop.thisTrialN'
p1159
I0
sg39
F1.3832302039472779
sg34
g753
(S'\x07\xdf\x07\x0f\x1017\x0e8\xa0'
tRp1160
sa(dp1161
S'trial_loop.thisTrialN'
p1162
I16
sg895
S'7-olives.png'
p1163
sS'block_loop.thisIndex'
p1164
g889
sg38
S'right'
p1165
sg59
g63
sS'trial_loop.thisN'
p1166
I16
sg33
S'22-daim.png'
p1167
sg64
g65
sS'trial_loop.thisIndex'
p1168
g60
(g99
S'\x10\x00\x00\x00'
tRp1169
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1170
I0
sg904
S'22-daim.png'
p1171
sS'block_loop.thisRepN'
p1172
I0
sg907
S'7-olives.png'
p1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1174
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p1175
Nsg70
Vn
sS'block_loop.thisTrialN'
p1176
I0
sg39
F1.3499672707694117
sg34
g753
(S'\x07\xdf\x07\x0f\x102\x02\x05;\xd8'
tRp1177
sa(dp1178
S'trial_loop.thisTrialN'
p1179
I17
sg895
S'19-caramello_redo.png'
p1180
sS'block_loop.thisIndex'
p1181
g889
sg38
S'left'
p1182
sg59
g63
sS'trial_loop.thisN'
p1183
I17
sg33
S'19-caramello_redo.png'
p1184
sg64
g65
sS'trial_loop.thisIndex'
p1185
g60
(g99
S'\x11\x00\x00\x00'
tRp1186
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1187
I0
sg904
S'30-spaghetti_hoops.png'
p1188
sS'block_loop.thisRepN'
p1189
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1190
I0
sg909
S'30-spaghetti_hoops.png'
p1191
sg55
g11
sS'block_loop.thisTrial'
p1192
Nsg70
Vn
sS'block_loop.thisTrialN'
p1193
I0
sg39
F1.1499568932085822
sg34
g753
(S'\x07\xdf\x07\x0f\x102\x08\x0b\x0c '
tRp1194
sa(dp1195
S'trial_loop.thisTrialN'
p1196
I18
sg895
g1001
sS'block_loop.thisIndex'
p1197
g889
sg38
S'right'
p1198
sg59
g63
sS'trial_loop.thisN'
p1199
I18
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1200
g60
(g99
S'\x12\x00\x00\x00'
tRp1201
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1202
I0
sg904
g1009
sS'block_loop.thisRepN'
p1203
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1204
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1205
Nsg70
Vn
sS'block_loop.thisTrialN'
p1206
I0
sg39
F1.8165307130184374
sg34
g753
(S'\x07\xdf\x07\x0f\x102\x0e\r\xfe\x08'
tRp1207
sa(dp1208
S'trial_loop.thisTrialN'
p1209
I19
sg895
S'35-raisins.png'
p1210
sS'block_loop.thisIndex'
p1211
g889
sg38
S'right'
p1212
sg59
g63
sS'trial_loop.thisN'
p1213
I19
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1214
g60
(g99
S'\x13\x00\x00\x00'
tRp1215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1216
I0
sg904
S'49-yorkie.png'
p1217
sS'block_loop.thisRepN'
p1218
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1219
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p1220
Nsg70
Vn
sS'block_loop.thisTrialN'
p1221
I0
sg39
F1.1670040324243018
sg34
g753
(S'\x07\xdf\x07\x0f\x102\x15\x0b\xacH'
tRp1222
sa(dp1223
S'trial_loop.thisTrialN'
p1224
I20
sg895
S'41-peanuts_redo.png'
p1225
sS'block_loop.thisIndex'
p1226
g889
sg38
S'left'
p1227
sg59
g63
sS'trial_loop.thisN'
p1228
I20
sg33
S'45-chewy_nougat_redo.png'
p1229
sg64
g65
sS'trial_loop.thisIndex'
p1230
g60
(g99
S'\x14\x00\x00\x00'
tRp1231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1232
I0
sg904
S'45-chewy_nougat_redo.png'
p1233
sS'block_loop.thisRepN'
p1234
I0
sg907
S'41-peanuts_redo.png'
p1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1236
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1237
Nsg70
Vn
sS'block_loop.thisTrialN'
p1238
I0
sg39
F1.9833075224769345
sg34
g753
(S'\x07\xdf\x07\x0f\x102\x1b\x0e\x9e0'
tRp1239
sa(dp1240
S'trial_loop.thisTrialN'
p1241
I21
sg895
S'22-daim.png'
p1242
sS'block_loop.thisIndex'
p1243
g889
sg38
S'left'
p1244
sg59
g63
sS'trial_loop.thisN'
p1245
I21
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p1246
g60
(g99
S'\x15\x00\x00\x00'
tRp1247
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1248
I0
sg904
S'7-olives.png'
p1249
sS'block_loop.thisRepN'
p1250
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1251
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p1252
Nsg70
Vn
sS'block_loop.thisTrialN'
p1253
I0
sg39
F1.5166297560017483
sg34
g753
(S'\x07\xdf\x07\x0f\x102"\x0e\xf08'
tRp1254
sa(dp1255
S'trial_loop.thisTrialN'
p1256
I22
sg895
S'46-pistachios.png'
p1257
sS'block_loop.thisIndex'
p1258
g889
sg38
S'left'
p1259
sg59
g63
sS'trial_loop.thisN'
p1260
I22
sg33
S'46-pistachios.png'
p1261
sg64
g65
sS'trial_loop.thisIndex'
p1262
g60
(g99
S'\x16\x00\x00\x00'
tRp1263
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1264
I0
sg904
S'29-beans.png'
p1265
sS'block_loop.thisRepN'
p1266
I0
sg907
S'29-beans.png'
p1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1268
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p1269
Nsg70
Vn
sS'block_loop.thisTrialN'
p1270
I0
sg39
F1.9165273488633829
sg34
g753
(S'\x07\xdf\x07\x0f\x102)\x08\x1a8'
tRp1271
sa(dp1272
S'trial_loop.thisTrialN'
p1273
I23
sg895
g1001
sS'block_loop.thisIndex'
p1274
g889
sg38
S'left'
p1275
sg59
g63
sS'trial_loop.thisN'
p1276
I23
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1277
g60
(g99
S'\x17\x00\x00\x00'
tRp1278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1279
I0
sg904
g1009
sS'block_loop.thisRepN'
p1280
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1281
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1282
Nsg70
Vn
sS'block_loop.thisTrialN'
p1283
I0
sg39
F1.0999561519547569
sg34
g753
(S'\x07\xdf\x07\x0f\x1020\x077\xa8'
tRp1284
sa(dp1285
S'trial_loop.thisTrialN'
p1286
I24
sg895
g1225
sS'block_loop.thisIndex'
p1287
g889
sg38
S'right'
p1288
sg59
g63
sS'trial_loop.thisN'
p1289
I24
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p1290
g60
(g99
S'\x18\x00\x00\x00'
tRp1291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1292
I0
sg904
g1233
sS'block_loop.thisRepN'
p1293
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1294
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1295
Nsg70
Vn
sS'block_loop.thisTrialN'
p1296
I0
sg39
F2.9503097302740571
sg34
g753
(S'\x07\xdf\x07\x0f\x1026\tq\xf8'
tRp1297
sa(dp1298
S'trial_loop.thisTrialN'
p1299
I25
sg895
g896
sS'block_loop.thisIndex'
p1300
g889
sg38
S'right'
p1301
sg59
g63
sS'trial_loop.thisN'
p1302
I25
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1303
g60
(g99
S'\x19\x00\x00\x00'
tRp1304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1305
I0
sg904
g905
sS'block_loop.thisRepN'
p1306
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1307
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1308
Nsg70
Vn
sS'block_loop.thisTrialN'
p1309
I0
sg39
F1.1666108825265837
sg34
g753
(S'\x07\xdf\x07\x0f\x103\x02\t\x04\x98'
tRp1310
sa(dp1311
S'trial_loop.thisTrialN'
p1312
I26
sg895
S'30-spaghetti_hoops.png'
p1313
sS'block_loop.thisIndex'
p1314
g889
sg38
S'right'
p1315
sg59
g63
sS'trial_loop.thisN'
p1316
I26
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p1317
g60
(g99
S'\x1a\x00\x00\x00'
tRp1318
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1319
I0
sg904
S'19-caramello_redo.png'
p1320
sS'block_loop.thisRepN'
p1321
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1322
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1323
Nsg70
Vn
sS'block_loop.thisTrialN'
p1324
I0
sg39
F1.0166742312621864
sg34
g753
(S'\x07\xdf\x07\x0f\x103\x08\x0c1\x18'
tRp1325
sa(dp1326
S'trial_loop.thisTrialN'
p1327
I27
sg895
S'8-liquorice_catherine_wheels.png'
p1328
sS'block_loop.thisIndex'
p1329
g889
sg38
S'left'
p1330
sg59
g63
sS'trial_loop.thisN'
p1331
I27
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1332
g60
(g99
S'\x1b\x00\x00\x00'
tRp1333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1334
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1335
sS'block_loop.thisRepN'
p1336
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1337
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1338
Nsg70
Vn
sS'block_loop.thisTrialN'
p1339
I0
sg39
F2.33329161401889
sg34
g753
(S'\x07\xdf\x07\x0f\x103\x0e\r\x00 '
tRp1340
sa(dp1341
S'trial_loop.thisTrialN'
p1342
I28
sg895
S'31-hobnobs.png'
p1343
sS'block_loop.thisIndex'
p1344
g889
sg38
S'right'
p1345
sg59
g63
sS'trial_loop.thisN'
p1346
I28
sg33
S'25-kitkat.png'
p1347
sg64
g65
sS'trial_loop.thisIndex'
p1348
g60
(g99
S'\x1c\x00\x00\x00'
tRp1349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1350
I0
sg904
S'25-kitkat.png'
p1351
sS'block_loop.thisRepN'
p1352
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1353
I0
sg909
S'31-hobnobs.png'
p1354
sg55
g11
sS'block_loop.thisTrial'
p1355
Nsg70
Vn
sS'block_loop.thisTrialN'
p1356
I0
sg39
F0.96662673396531318
sg34
g753
(S'\x07\xdf\x07\x0f\x103\x16\x03G\xd8'
tRp1357
sa(dp1358
S'trial_loop.thisTrialN'
p1359
I29
sg895
g916
sS'block_loop.thisIndex'
p1360
g889
sg38
S'left'
p1361
sg59
g63
sS'trial_loop.thisN'
p1362
I29
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1363
g60
(g99
S'\x1d\x00\x00\x00'
tRp1364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1365
I0
sg904
g924
sS'block_loop.thisRepN'
p1366
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1367
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1368
Nsg70
Vn
sS'block_loop.thisTrialN'
p1369
I0
sg39
F1.4502889181339924
sg34
g753
(S'\x07\xdf\x07\x0f\x103\x1c\x03$\xb0'
tRp1370
sa(dp1371
S'trial_loop.thisTrialN'
p1372
I30
sg895
g1163
sS'block_loop.thisIndex'
p1373
g889
sg38
S'right'
p1374
sg59
g63
sS'trial_loop.thisN'
p1375
I30
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p1376
g60
(g99
S'\x1e\x00\x00\x00'
tRp1377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1378
I0
sg904
g1171
sS'block_loop.thisRepN'
p1379
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1380
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p1381
Nsg70
Vn
sS'block_loop.thisTrialN'
p1382
I0
sg39
F1.7999571212876617
sg34
g753
(S'\x07\xdf\x07\x0f\x103"\n\x9a\xd8'
tRp1383
sa(dp1384
S'trial_loop.thisTrialN'
p1385
I31
sg895
g1116
sS'block_loop.thisIndex'
p1386
g889
sg38
S'right'
p1387
sg59
g63
sS'trial_loop.thisN'
p1388
I31
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1389
g60
(g99
S'\x1f\x00\x00\x00'
tRp1390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1391
I0
sg904
g1124
sS'block_loop.thisRepN'
p1392
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1393
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p1394
Nsg70
Vn
sS'block_loop.thisTrialN'
p1395
I0
sg39
F1.4665682889108211
sg34
g753
(S'\x07\xdf\x07\x0f\x103)\x08\x0e\x80'
tRp1396
sa(dp1397
S'trial_loop.thisTrialN'
p1398
I32
sg895
g950
sS'block_loop.thisIndex'
p1399
g889
sg38
S'left'
p1400
sg59
g63
sS'trial_loop.thisN'
p1401
I32
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1402
g60
(g99
S' \x00\x00\x00'
tRp1403
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1404
I0
sg904
g958
sS'block_loop.thisRepN'
p1405
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1406
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1407
Nsg70
Vn
sS'block_loop.thisTrialN'
p1408
I0
sg39
F1.5999196594329987
sg34
g753
(S'\x07\xdf\x07\x0f\x1030\x00\x80\xe8'
tRp1409
sa(dp1410
S'trial_loop.thisTrialN'
p1411
I33
sg895
g1035
sS'block_loop.thisIndex'
p1412
g889
sg38
S'right'
p1413
sg59
g63
sS'trial_loop.thisN'
p1414
I33
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1415
g60
(g99
S'!\x00\x00\x00'
tRp1416
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1417
I0
sg904
g1042
sS'block_loop.thisRepN'
p1418
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1419
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1420
Nsg70
Vn
sS'block_loop.thisTrialN'
p1421
I0
sg39
F1.4333099172981747
sg34
g753
(S'\x07\xdf\x07\x0f\x1036\n\x1d\xd8'
tRp1422
sa(dp1423
S'trial_loop.thisTrialN'
p1424
I34
sg895
g896
sS'block_loop.thisIndex'
p1425
g889
sg38
S'right'
p1426
sg59
g63
sS'trial_loop.thisN'
p1427
I34
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1428
g60
(g99
S'"\x00\x00\x00'
tRp1429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1430
I0
sg904
g905
sS'block_loop.thisRepN'
p1431
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1432
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1433
Nsg70
Vn
sS'block_loop.thisTrialN'
p1434
I0
sg39
F1.1166839816078209
sg34
g753
(S'\x07\xdf\x07\x0f\x104\x01\x01\xdc\x90'
tRp1435
sa(dp1436
S'trial_loop.thisTrialN'
p1437
I35
sg895
g933
sS'block_loop.thisIndex'
p1438
g889
sg38
S'left'
p1439
sg59
g63
sS'trial_loop.thisN'
p1440
I35
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1441
g60
(g99
S'#\x00\x00\x00'
tRp1442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1443
I0
sg904
g941
sS'block_loop.thisRepN'
p1444
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1445
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1446
Nsg70
Vn
sS'block_loop.thisTrialN'
p1447
I0
sg39
F2.6332165192516186
sg34
g753
(S'\x07\xdf\x07\x0f\x104\x07\x04U`'
tRp1448
sa(dp1449
S'trial_loop.thisTrialN'
p1450
I36
sg895
g1257
sS'block_loop.thisIndex'
p1451
g889
sg38
S'left'
p1452
sg59
g63
sS'trial_loop.thisN'
p1453
I36
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p1454
g60
(g99
S'$\x00\x00\x00'
tRp1455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1456
I0
sg904
g1265
sS'block_loop.thisRepN'
p1457
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vn
sS'block_loop.thisTrialN'
p1460
I0
sg39
F1.2499874556961004
sg34
g753
(S'\x07\xdf\x07\x0f\x104\x0e\x0ec\x98'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
S'3-ellas_strawberries_apples.png'
p1464
sS'block_loop.thisIndex'
p1465
g889
sg38
S'right'
p1466
sg59
g63
sS'trial_loop.thisN'
p1467
I37
sg33
S'13-mccoys_steak_crisps.png'
p1468
sg64
g65
sS'trial_loop.thisIndex'
p1469
g60
(g99
S'%\x00\x00\x00'
tRp1470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1471
I0
sg904
S'13-mccoys_steak_crisps.png'
p1472
sS'block_loop.thisRepN'
p1473
I0
sg907
S'3-ellas_strawberries_apples.png'
p1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1475
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p1476
Nsg70
Vn
sS'block_loop.thisTrialN'
p1477
I0
sg39
F1.8499564370522421
sg34
g753
(S'\x07\xdf\x07\x0f\x104\x15\x03\x82p'
tRp1478
sa(dp1479
S'trial_loop.thisTrialN'
p1480
I38
sg895
g1328
sS'block_loop.thisIndex'
p1481
g889
sg38
S'left'
p1482
sg59
g63
sS'trial_loop.thisN'
p1483
I38
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1484
g60
(g99
S'&\x00\x00\x00'
tRp1485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1486
I0
sg904
g1335
sS'block_loop.thisRepN'
p1487
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1488
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1489
Nsg70
Vn
sS'block_loop.thisTrialN'
p1490
I0
sg39
F2.2665490733179467
sg34
g753
(S'\x07\xdf\x07\x0f\x104\x1c\x01\xad\xb0'
tRp1491
sa(dp1492
S'trial_loop.thisTrialN'
p1493
I39
sg895
S'1-treacle_cookies.png'
p1494
sS'block_loop.thisIndex'
p1495
g889
sg38
S'left'
p1496
sg59
g63
sS'trial_loop.thisN'
p1497
I39
sg33
S'21-nakd_banana_crunch.png'
p1498
sg64
g65
sS'trial_loop.thisIndex'
p1499
g60
(g99
S"'\x00\x00\x00"
tRp1500
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1501
I0
sg904
S'21-nakd_banana_crunch.png'
p1502
sS'block_loop.thisRepN'
p1503
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1504
I0
sg909
S'1-treacle_cookies.png'
p1505
sg55
g11
sS'block_loop.thisTrial'
p1506
Nsg70
Vn
sS'block_loop.thisTrialN'
p1507
I0
sg39
F1.3500051887804148
sg34
g753
(S'\x07\xdf\x07\x0f\x104#\x06Ex'
tRp1508
sa(dp1509
S'trial_loop.thisTrialN'
p1510
I40
sg895
S'5-pineapple.png'
p1511
sS'block_loop.thisIndex'
p1512
g889
sg38
S'right'
p1513
sg59
g63
sS'trial_loop.thisN'
p1514
I40
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1515
g60
(g99
S'(\x00\x00\x00'
tRp1516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1517
I0
sg904
S'40-sardines.png'
p1518
sS'block_loop.thisRepN'
p1519
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1520
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1521
Nsg70
Vn
sS'block_loop.thisTrialN'
p1522
I0
sg39
F1.2999092248528541
sg34
g753
(S'\x07\xdf\x07\x0f\x104)\x0c\x11\xd8'
tRp1523
sa(dp1524
S'trial_loop.thisTrialN'
p1525
I41
sg895
g1328
sS'block_loop.thisIndex'
p1526
g889
sg38
S'right'
p1527
sg59
g63
sS'trial_loop.thisN'
p1528
I41
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1529
g60
(g99
S')\x00\x00\x00'
tRp1530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1531
I0
sg904
g1335
sS'block_loop.thisRepN'
p1532
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vn
sS'block_loop.thisTrialN'
p1535
I0
sg39
F1.3666494847711874
sg34
g753
(S'\x07\xdf\x07\x0f\x1040\x01\xe8H'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
S'29-beans.png'
p1539
sS'block_loop.thisIndex'
p1540
g889
sg38
S'left'
p1541
sg59
g63
sS'trial_loop.thisN'
p1542
I42
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p1543
g60
(g99
S'*\x00\x00\x00'
tRp1544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1545
I0
sg904
S'46-pistachios.png'
p1546
sS'block_loop.thisRepN'
p1547
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1548
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p1549
Nsg70
Vn
sS'block_loop.thisTrialN'
p1550
I0
sg39
F2.2666585508814023
sg34
g753
(S'\x07\xdf\x07\x0f\x1046\x07\xf3('
tRp1551
sa(dp1552
S'trial_loop.thisTrialN'
p1553
I43
sg895
g1018
sS'block_loop.thisIndex'
p1554
g889
sg38
S'left'
p1555
sg59
g63
sS'trial_loop.thisN'
p1556
I43
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
g1026
sS'block_loop.thisRepN'
p1560
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1561
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1562
Nsg70
Vn
sS'block_loop.thisTrialN'
p1563
I0
sg39
F0.8999235367637084
sg34
g753
(S'\x07\xdf\x07\x0f\x105\x01\x0c\x8a\xf0'
tRp1564
sa(dp1565
S'trial_loop.thisTrialN'
p1566
I44
sg895
S'13-mccoys_steak_crisps.png'
p1567
sS'block_loop.thisIndex'
p1568
g889
sg38
S'left'
p1569
sg59
g63
sS'trial_loop.thisN'
p1570
I44
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p1571
g60
(g99
S',\x00\x00\x00'
tRp1572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1573
I0
sg904
S'3-ellas_strawberries_apples.png'
p1574
sS'block_loop.thisRepN'
p1575
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1576
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p1577
Nsg70
Vn
sS'block_loop.thisTrialN'
p1578
I0
sg39
F1.3002912559350079
sg34
g753
(S'\x07\xdf\x07\x0f\x105\x07\x0b\xacH'
tRp1579
sa(dp1580
S'trial_loop.thisTrialN'
p1581
I45
sg895
S'50-polo.png'
p1582
sS'block_loop.thisIndex'
p1583
g889
sg38
S'right'
p1584
sg59
g63
sS'trial_loop.thisN'
p1585
I45
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1586
g60
(g99
S'-\x00\x00\x00'
tRp1587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1588
I0
sg904
S'48-twix.png'
p1589
sS'block_loop.thisRepN'
p1590
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1591
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1592
Nsg70
Vn
sS'block_loop.thisTrialN'
p1593
I0
sg39
F1.3666708671080414
sg34
g753
(S'\x07\xdf\x07\x0f\x105\x0e\x01\x82\xb8'
tRp1594
sa(dp1595
S'trial_loop.thisTrialN'
p1596
I46
sg895
g984
sS'block_loop.thisIndex'
p1597
g889
sg38
S'right'
p1598
sg59
g63
sS'trial_loop.thisN'
p1599
I46
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1600
g60
(g99
S'.\x00\x00\x00'
tRp1601
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1602
I0
sg904
g992
sS'block_loop.thisRepN'
p1603
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1604
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg70
Vn
sS'block_loop.thisTrialN'
p1606
I0
sg39
F1.5166608316649217
sg34
g753
(S'\x07\xdf\x07\x0f\x105\x14\x07\x8d\x98'
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I47
sg895
g1464
sS'block_loop.thisIndex'
p1610
g889
sg38
S'right'
p1611
sg59
g63
sS'trial_loop.thisN'
p1612
I47
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p1613
g60
(g99
S'/\x00\x00\x00'
tRp1614
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1615
I0
sg904
g1472
sS'block_loop.thisRepN'
p1616
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1617
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg70
Vn
sS'block_loop.thisTrialN'
p1619
I0
sg39
F1.2166367123891177
sg34
g753
(S'\x07\xdf\x07\x0f\x105\x1b\x00\xb7\x98'
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I48
sg895
S'20-fruit_pastilles.png'
p1623
sS'block_loop.thisIndex'
p1624
g889
sg38
S'left'
p1625
sg59
g63
sS'trial_loop.thisN'
p1626
I48
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p1627
g60
(g99
S'0\x00\x00\x00'
tRp1628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1629
I0
sg904
S'2-steamed_puddings.png'
p1630
sS'block_loop.thisRepN'
p1631
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1632
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p1633
Nsg70
Vn
sS'block_loop.thisTrialN'
p1634
I0
sg39
F1.4832345374343276
sg34
g753
(S'\x07\xdf\x07\x0f\x105!\x04a\x18'
tRp1635
sa(dp1636
S'trial_loop.thisTrialN'
p1637
I49
sg895
S'25-kitkat.png'
p1638
sS'block_loop.thisIndex'
p1639
g889
sg38
S'left'
p1640
sg59
g63
sS'trial_loop.thisN'
p1641
I49
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p1642
g60
(g99
S'1\x00\x00\x00'
tRp1643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1644
I0
sg904
S'31-hobnobs.png'
p1645
sS'block_loop.thisRepN'
p1646
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1647
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p1648
Nsg70
Vn
sS'block_loop.thisTrialN'
p1649
I0
sg39
F0.81703505106725061
sg34
g753
(S"\x07\xdf\x07\x0f\x105'\x0cT@"
tRp1650
sa(dp1651
S'trial_loop.thisTrialN'
p1652
I50
sg895
g1035
sS'block_loop.thisIndex'
p1653
g889
sg38
S'right'
p1654
sg59
g63
sS'trial_loop.thisN'
p1655
I50
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1656
g60
(g99
S'2\x00\x00\x00'
tRp1657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1658
I0
sg904
g1042
sS'block_loop.thisRepN'
p1659
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1660
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1661
Nsg70
Vn
sS'block_loop.thisTrialN'
p1662
I0
sg39
F1.2500039913693399
sg34
g753
(S'\x07\xdf\x07\x0f\x105-\n\nP'
tRp1663
sa(dp1664
S'trial_loop.thisTrialN'
p1665
I51
sg895
g1582
sS'block_loop.thisIndex'
p1666
g889
sg38
S'right'
p1667
sg59
g63
sS'trial_loop.thisN'
p1668
I51
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p1669
g60
(g99
S'3\x00\x00\x00'
tRp1670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1671
I0
sg904
g1589
sS'block_loop.thisRepN'
p1672
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1673
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1674
Nsg70
Vn
sS'block_loop.thisTrialN'
p1675
I0
sg39
F0.86667172240140644
sg34
g753
(S'\x07\xdf\x07\x0f\x1053\x0eg\x80'
tRp1676
sa(dp1677
S'trial_loop.thisTrialN'
p1678
I52
sg895
S'45-chewy_nougat_redo.png'
p1679
sS'block_loop.thisIndex'
p1680
g889
sg38
S'left'
p1681
sg59
g63
sS'trial_loop.thisN'
p1682
I52
sg33
g1229
sg64
g65
sS'trial_loop.thisIndex'
p1683
g60
(g99
S'4\x00\x00\x00'
tRp1684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1685
I0
sg904
S'41-peanuts_redo.png'
p1686
sS'block_loop.thisRepN'
p1687
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1688
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p1689
Nsg70
Vn
sS'block_loop.thisTrialN'
p1690
I0
sg39
F1.6499087116771989
sg34
g753
(S'\x07\xdf\x07\x0f\x1059\x0c\xd5('
tRp1691
sa(dp1692
S'trial_loop.thisTrialN'
p1693
I53
sg895
S'16-skips_prawn.png'
p1694
sS'block_loop.thisIndex'
p1695
g889
sg38
S'left'
p1696
sg59
g63
sS'trial_loop.thisN'
p1697
I53
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p1698
g60
(g99
S'5\x00\x00\x00'
tRp1699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1700
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1701
sS'block_loop.thisRepN'
p1702
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1703
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg70
Vn
sS'block_loop.thisTrialN'
p1705
I0
sg39
F1.616568231891506
sg34
g753
(S'\x07\xdf\x07\x0f\x106\x04\x08%\xf0'
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I54
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1709
sS'block_loop.thisIndex'
p1710
g889
sg38
S'right'
p1711
sg59
g63
sS'trial_loop.thisN'
p1712
I54
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'6\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
S'36-fig_rolls.png'
p1716
sS'block_loop.thisRepN'
p1717
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1718
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1719
Nsg70
Vn
sS'block_loop.thisTrialN'
p1720
I0
sg39
F1.4998414856108866
sg34
g753
(S'\x07\xdf\x07\x0f\x106\x0b\x02\xbb8'
tRp1721
sa(dp1722
S'trial_loop.thisTrialN'
p1723
I55
sg895
g1694
sS'block_loop.thisIndex'
p1724
g889
sg38
S'left'
p1725
sg59
g63
sS'trial_loop.thisN'
p1726
I55
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p1727
g60
(g99
S'7\x00\x00\x00'
tRp1728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1729
I0
sg904
g1701
sS'block_loop.thisRepN'
p1730
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1731
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p1732
Nsg70
Vn
sS'block_loop.thisTrialN'
p1733
I0
sg39
F1.6498037956780536
sg34
g753
(S'\x07\xdf\x07\x0f\x106\x11\n\xec\xe0'
tRp1734
sa(dp1735
S'trial_loop.thisTrialN'
p1736
I56
sg895
g1567
sS'block_loop.thisIndex'
p1737
g889
sg38
S'right'
p1738
sg59
g63
sS'trial_loop.thisN'
p1739
I56
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p1740
g60
(g99
S'8\x00\x00\x00'
tRp1741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1742
I0
sg904
g1574
sS'block_loop.thisRepN'
p1743
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1744
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p1745
Nsg70
Vn
sS'block_loop.thisTrialN'
p1746
I0
sg39
F2.2165836841932105
sg34
g753
(S'\x07\xdf\x07\x0f\x106\x18\x05\xff('
tRp1747
sa(dp1748
S'trial_loop.thisTrialN'
p1749
I57
sg895
g1582
sS'block_loop.thisIndex'
p1750
g889
sg38
S'right'
p1751
sg59
g63
sS'trial_loop.thisN'
p1752
I57
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1753
g60
(g99
S'9\x00\x00\x00'
tRp1754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1755
I0
sg904
g1589
sS'block_loop.thisRepN'
p1756
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1757
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1758
Nsg70
Vn
sS'block_loop.thisTrialN'
p1759
I0
sg39
F0.86668027533596614
sg34
g753
(S'\x07\xdf\x07\x0f\x106\x1f\t\xdfX'
tRp1760
sa(dp1761
S'trial_loop.thisTrialN'
p1762
I58
sg895
S'23-crunchie_redo.png'
p1763
sS'block_loop.thisIndex'
p1764
g889
sg38
S'right'
p1765
sg59
g63
sS'trial_loop.thisN'
p1766
I58
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1767
g60
(g99
S':\x00\x00\x00'
tRp1768
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1769
I0
sg904
S'33-ambrosia_rice.png'
p1770
sS'block_loop.thisRepN'
p1771
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1772
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p1773
Nsg70
Vn
sS'block_loop.thisTrialN'
p1774
I0
sg39
F2.6166263918466939
sg34
g753
(S'\x07\xdf\x07\x0f\x106%\x08I\x18'
tRp1775
sa(dp1776
S'trial_loop.thisTrialN'
p1777
I59
sg895
g1709
sS'block_loop.thisIndex'
p1778
g889
sg38
S'left'
p1779
sg59
g63
sS'trial_loop.thisN'
p1780
I59
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1781
g60
(g99
S';\x00\x00\x00'
tRp1782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1783
I0
sg904
g1716
sS'block_loop.thisRepN'
p1784
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1785
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1786
Nsg70
Vn
sS'block_loop.thisTrialN'
p1787
I0
sg39
F1.4169857861625133
sg34
g753
(S'\x07\xdf\x07\x0f\x106-\x02\xdax'
tRp1788
sa(dp1789
S'trial_loop.thisTrialN'
p1790
I60
sg895
g933
sS'block_loop.thisIndex'
p1791
g889
sg38
S'left'
p1792
sg59
g63
sS'trial_loop.thisN'
p1793
I60
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1794
g60
(g99
S'<\x00\x00\x00'
tRp1795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1796
I0
sg904
g941
sS'block_loop.thisRepN'
p1797
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1798
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1799
Nsg70
Vn
sS'block_loop.thisTrialN'
p1800
I0
sg39
F0.99993414240361744
sg34
g753
(S'\x07\xdf\x07\x0f\x1063\t\xdbp'
tRp1801
sa(dp1802
S'trial_loop.thisTrialN'
p1803
I61
sg895
S'6-sour_patch_kids.png'
p1804
sS'block_loop.thisIndex'
p1805
g889
sg38
S'right'
p1806
sg59
g63
sS'trial_loop.thisN'
p1807
I61
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1808
g60
(g99
S'=\x00\x00\x00'
tRp1809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1810
I0
sg904
S'38-maltesers.png'
p1811
sS'block_loop.thisRepN'
p1812
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1813
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1814
Nsg70
Vn
sS'block_loop.thisTrialN'
p1815
I0
sg39
F1.1997295562059662
sg34
g753
(S'\x07\xdf\x07\x0f\x1069\nk\xf8'
tRp1816
sa(dp1817
S'trial_loop.thisTrialN'
p1818
I62
sg895
S'18-mms.png'
p1819
sS'block_loop.thisIndex'
p1820
g889
sg38
S'left'
p1821
sg59
g63
sS'trial_loop.thisN'
p1822
I62
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p1823
g60
(g99
S'>\x00\x00\x00'
tRp1824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1825
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1826
sS'block_loop.thisRepN'
p1827
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1828
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1829
Nsg70
Vn
sS'block_loop.thisTrialN'
p1830
I0
sg39
F3.1332721133276209
sg34
g753
(S'\x07\xdf\x07\x0f\x107\x03\r\xd6\xf8'
tRp1831
sa(dp1832
S'trial_loop.thisTrialN'
p1833
I63
sg895
g1582
sS'block_loop.thisIndex'
p1834
g889
sg38
S'right'
p1835
sg59
g63
sS'trial_loop.thisN'
p1836
I63
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1837
g60
(g99
S'?\x00\x00\x00'
tRp1838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1839
I0
sg904
g1589
sS'block_loop.thisRepN'
p1840
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1841
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p1842
Nsg70
Vn
sS'block_loop.thisTrialN'
p1843
I0
sg39
F1.0499876267549553
sg34
g753
(S'\x07\xdf\x07\x0f\x107\x0c\x01@P'
tRp1844
sa(dp1845
S'trial_loop.thisTrialN'
p1846
I64
sg895
g1804
sS'block_loop.thisIndex'
p1847
g889
sg38
S'right'
p1848
sg59
g63
sS'trial_loop.thisN'
p1849
I64
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1850
g60
(g99
S'@\x00\x00\x00'
tRp1851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1852
I0
sg904
g1811
sS'block_loop.thisRepN'
p1853
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1854
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1855
Nsg70
Vn
sS'block_loop.thisTrialN'
p1856
I0
sg39
F1.3000534843513378
sg34
g753
(S'\x07\xdf\x07\x0f\x107\x12\x02\x88p'
tRp1857
sa(dp1858
S'trial_loop.thisTrialN'
p1859
I65
sg895
g1035
sS'block_loop.thisIndex'
p1860
g889
sg38
S'right'
p1861
sg59
g63
sS'trial_loop.thisN'
p1862
I65
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1863
g60
(g99
S'A\x00\x00\x00'
tRp1864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1865
I0
sg904
g1042
sS'block_loop.thisRepN'
p1866
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1867
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1868
Nsg70
Vn
sS'block_loop.thisTrialN'
p1869
I0
sg39
F1.1166680161295517
sg34
g753
(S'\x07\xdf\x07\x0f\x107\x18\x07\x9d8'
tRp1870
sa(dp1871
S'trial_loop.thisTrialN'
p1872
I66
sg895
g1328
sS'block_loop.thisIndex'
p1873
g889
sg38
S'right'
p1874
sg59
g63
sS'trial_loop.thisN'
p1875
I66
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p1876
g60
(g99
S'B\x00\x00\x00'
tRp1877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1878
I0
sg904
g1335
sS'block_loop.thisRepN'
p1879
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1880
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p1881
Nsg70
Vn
sS'block_loop.thisTrialN'
p1882
I0
sg39
F2.4665987943790242
sg34
g753
(S'\x07\xdf\x07\x0f\x107\x1e\t\xdbp'
tRp1883
sa(dp1884
S'trial_loop.thisTrialN'
p1885
I67
sg895
g1082
sS'block_loop.thisIndex'
p1886
g889
sg38
S'left'
p1887
sg59
g63
sS'trial_loop.thisN'
p1888
I67
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1889
g60
(g99
S'C\x00\x00\x00'
tRp1890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1891
I0
sg904
g1090
sS'block_loop.thisRepN'
p1892
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1893
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1894
Nsg70
Vn
sS'block_loop.thisTrialN'
p1895
I0
sg39
F1.3996860502775235
sg34
g753
(S'\x07\xdf\x07\x0f\x107&\x02F\x08'
tRp1896
sa(dp1897
S'trial_loop.thisTrialN'
p1898
I68
sg895
g1180
sS'block_loop.thisIndex'
p1899
g889
sg38
S'left'
p1900
sg59
g63
sS'trial_loop.thisN'
p1901
I68
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p1902
g60
(g99
S'D\x00\x00\x00'
tRp1903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1904
I0
sg904
g1188
sS'block_loop.thisRepN'
p1905
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1906
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p1907
Nsg70
Vn
sS'block_loop.thisTrialN'
p1908
I0
sg39
F1.6000351240518285
sg34
g753
(S'\x07\xdf\x07\x0f\x107,\x08\xcd\xe8'
tRp1909
sa(dp1910
S'trial_loop.thisTrialN'
p1911
I69
sg895
g916
sS'block_loop.thisIndex'
p1912
g889
sg38
S'left'
p1913
sg59
g63
sS'trial_loop.thisN'
p1914
I69
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1915
g60
(g99
S'E\x00\x00\x00'
tRp1916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1917
I0
sg904
g924
sS'block_loop.thisRepN'
p1918
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1919
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1920
Nsg70
Vn
sS'block_loop.thisTrialN'
p1921
I0
sg39
F1.4337210283592867
sg34
g753
(S'\x07\xdf\x07\x0f\x1073\x03(\x98'
tRp1922
sa(dp1923
S'trial_loop.thisTrialN'
p1924
I70
sg895
S'10-bounty_redo.png'
p1925
sS'block_loop.thisIndex'
p1926
g889
sg38
S'left'
p1927
sg59
g63
sS'trial_loop.thisN'
p1928
I70
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1929
g60
(g99
S'F\x00\x00\x00'
tRp1930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1931
I0
sg904
S'4-corn.png'
p1932
sS'block_loop.thisRepN'
p1933
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1934
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1935
Nsg70
Vn
sS'block_loop.thisTrialN'
p1936
I0
sg39
F2.8165874474852899
sg34
g753
(S'\x07\xdf\x07\x0f\x1079\nd('
tRp1937
sa(dp1938
S'trial_loop.thisTrialN'
p1939
I71
sg895
S'21-nakd_banana_crunch.png'
p1940
sS'block_loop.thisIndex'
p1941
g889
sg38
S'left'
p1942
sg59
g63
sS'trial_loop.thisN'
p1943
I71
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p1944
g60
(g99
S'G\x00\x00\x00'
tRp1945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1946
I0
sg904
S'1-treacle_cookies.png'
p1947
sS'block_loop.thisRepN'
p1948
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1949
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p1950
Nsg70
Vn
sS'block_loop.thisTrialN'
p1951
I0
sg39
F1.416602329592024
sg34
g753
(S'\x07\xdf\x07\x0f\x108\x05\x08\n\x98'
tRp1952
sa(dp1953
S'trial_loop.thisTrialN'
p1954
I72
sg895
g1763
sS'block_loop.thisIndex'
p1955
g889
sg38
S'right'
p1956
sg59
g63
sS'trial_loop.thisN'
p1957
I72
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p1958
g60
(g99
S'H\x00\x00\x00'
tRp1959
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1960
I0
sg904
g1770
sS'block_loop.thisRepN'
p1961
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1962
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p1963
Nsg70
Vn
sS'block_loop.thisTrialN'
p1964
I0
sg39
F2.6998806580513701
sg34
g753
(S'\x07\xdf\x07\x0f\x108\x0b\x0e\xcd\x10'
tRp1965
sa(dp1966
S'trial_loop.thisTrialN'
p1967
I73
sg895
g933
sS'block_loop.thisIndex'
p1968
g889
sg38
S'left'
p1969
sg59
g63
sS'trial_loop.thisN'
p1970
I73
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1971
g60
(g99
S'I\x00\x00\x00'
tRp1972
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1973
I0
sg904
g941
sS'block_loop.thisRepN'
p1974
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1975
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1976
Nsg70
Vn
sS'block_loop.thisTrialN'
p1977
I0
sg39
F1.2166595202143071
sg34
g753
(S'\x07\xdf\x07\x0f\x108\x13\n\xcd\xa0'
tRp1978
sa(dp1979
S'trial_loop.thisTrialN'
p1980
I74
sg895
g1146
sS'block_loop.thisIndex'
p1981
g889
sg38
S'left'
p1982
sg59
g63
sS'trial_loop.thisN'
p1983
I74
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1984
g60
(g99
S'J\x00\x00\x00'
tRp1985
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1986
I0
sg904
g1154
sS'block_loop.thisRepN'
p1987
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1988
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p1989
Nsg70
Vn
sS'block_loop.thisTrialN'
p1990
I0
sg39
F1.783711392053192
sg34
g753
(S'\x07\xdf\x07\x0f\x108\x19\x0e\xb5\xa0'
tRp1991
sa(dp1992
S'trial_loop.thisTrialN'
p1993
I75
sg895
g967
sS'block_loop.thisIndex'
p1994
g889
sg38
S'right'
p1995
sg59
g63
sS'trial_loop.thisN'
p1996
I75
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1997
g60
(g99
S'K\x00\x00\x00'
tRp1998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1999
I0
sg904
g975
sS'block_loop.thisRepN'
p2000
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2001
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2002
Nsg70
Vn
sS'block_loop.thisTrialN'
p2003
I0
sg39
F1.5332900174707902
sg34
g753
(S'\x07\xdf\x07\x0f\x108 \x0b\xea\xc8'
tRp2004
sa(dp2005
S'trial_loop.thisTrialN'
p2006
I76
sg895
g1925
sS'block_loop.thisIndex'
p2007
g889
sg38
S'right'
p2008
sg59
g63
sS'trial_loop.thisN'
p2009
I76
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2010
g60
(g99
S'L\x00\x00\x00'
tRp2011
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2012
I0
sg904
g1932
sS'block_loop.thisRepN'
p2013
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2014
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2015
Nsg70
Vn
sS'block_loop.thisTrialN'
p2016
I0
sg39
F1.3665961714787045
sg34
g753
(S"\x07\xdf\x07\x0f\x108'\x05O`"
tRp2017
sa(dp2018
S'trial_loop.thisTrialN'
p2019
I77
sg895
g1679
sS'block_loop.thisIndex'
p2020
g889
sg38
S'left'
p2021
sg59
g63
sS'trial_loop.thisN'
p2022
I77
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p2023
g60
(g99
S'M\x00\x00\x00'
tRp2024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2025
I0
sg904
g1686
sS'block_loop.thisRepN'
p2026
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2027
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2028
Nsg70
Vn
sS'block_loop.thisTrialN'
p2029
I0
sg39
F1.3167086140592801
sg34
g753
(S'\x07\xdf\x07\x0f\x108-\x0bZ@'
tRp2030
sa(dp2031
S'trial_loop.thisTrialN'
p2032
I78
sg895
g967
sS'block_loop.thisIndex'
p2033
g889
sg38
S'right'
p2034
sg59
g63
sS'trial_loop.thisN'
p2035
I78
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2036
g60
(g99
S'N\x00\x00\x00'
tRp2037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2038
I0
sg904
g975
sS'block_loop.thisRepN'
p2039
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2040
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2041
Nsg70
Vn
sS'block_loop.thisTrialN'
p2042
I0
sg39
F1.2666722355770617
sg34
g753
(S'\x07\xdf\x07\x0f\x1084\x01o0'
tRp2043
sa(dp2044
S'trial_loop.thisTrialN'
p2045
I79
sg895
g1257
sS'block_loop.thisIndex'
p2046
g889
sg38
S'right'
p2047
sg59
g63
sS'trial_loop.thisN'
p2048
I79
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p2049
g60
(g99
S'O\x00\x00\x00'
tRp2050
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2051
I0
sg904
g1265
sS'block_loop.thisRepN'
p2052
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2053
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2054
Nsg70
Vn
sS'block_loop.thisTrialN'
p2055
I0
sg39
F1.6835388508497999
sg34
g753
(S'\x07\xdf\x07\x0f\x108:\x06\n\xe0'
tRp2056
sa(dp2057
S'trial_loop.thisTrialN'
p2058
I80
sg895
g1099
sS'block_loop.thisIndex'
p2059
g889
sg38
S'left'
p2060
sg59
g63
sS'trial_loop.thisN'
p2061
I80
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2062
g60
(g99
S'P\x00\x00\x00'
tRp2063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2064
I0
sg904
g1107
sS'block_loop.thisRepN'
p2065
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2066
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p2067
Nsg70
Vn
sS'block_loop.thisTrialN'
p2068
I0
sg39
F1.6665207916139479
sg34
g753
(S'\x07\xdf\x07\x0f\x109\x05\x01\x96@'
tRp2069
sa(dp2070
S'trial_loop.thisTrialN'
p2071
I81
sg895
g1343
sS'block_loop.thisIndex'
p2072
g889
sg38
S'right'
p2073
sg59
g63
sS'trial_loop.thisN'
p2074
I81
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2075
g60
(g99
S'Q\x00\x00\x00'
tRp2076
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2077
I0
sg904
g1351
sS'block_loop.thisRepN'
p2078
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2079
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2080
Nsg70
Vn
sS'block_loop.thisTrialN'
p2081
I0
sg39
F1.4000338696214385
sg34
g753
(S'\x07\xdf\x07\x0f\x109\x0b\x0cc\xe0'
tRp2082
sa(dp2083
S'trial_loop.thisTrialN'
p2084
I82
sg895
g1511
sS'block_loop.thisIndex'
p2085
g889
sg38
S'right'
p2086
sg59
g63
sS'trial_loop.thisN'
p2087
I82
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2088
g60
(g99
S'R\x00\x00\x00'
tRp2089
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2090
I0
sg904
g1518
sS'block_loop.thisRepN'
p2091
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2092
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2093
Nsg70
Vn
sS'block_loop.thisTrialN'
p2094
I0
sg39
F1.1333185842731837
sg34
g753
(S'\x07\xdf\x07\x0f\x109\x12\x03\xa5\x98'
tRp2095
sa(dp2096
S'trial_loop.thisTrialN'
p2097
I83
sg895
g1539
sS'block_loop.thisIndex'
p2098
g889
sg38
S'left'
p2099
sg59
g63
sS'trial_loop.thisN'
p2100
I83
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p2101
g60
(g99
S'S\x00\x00\x00'
tRp2102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2103
I0
sg904
g1546
sS'block_loop.thisRepN'
p2104
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2105
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2106
Nsg70
Vn
sS'block_loop.thisTrialN'
p2107
I0
sg39
F1.6499152689266339
sg34
g753
(S'\x07\xdf\x07\x0f\x109\x18\x06\x1eh'
tRp2108
sa(dp2109
S'trial_loop.thisTrialN'
p2110
I84
sg895
g1709
sS'block_loop.thisIndex'
p2111
g889
sg38
S'left'
p2112
sg59
g63
sS'trial_loop.thisN'
p2113
I84
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2114
g60
(g99
S'T\x00\x00\x00'
tRp2115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2116
I0
sg904
g1716
sS'block_loop.thisRepN'
p2117
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2118
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2119
Nsg70
Vn
sS'block_loop.thisTrialN'
p2120
I0
sg39
F1.5170314588340261
sg34
g753
(S'\x07\xdf\x07\x0f\x109\x1f\x01o0'
tRp2121
sa(dp2122
S'trial_loop.thisTrialN'
p2123
I85
sg895
g1804
sS'block_loop.thisIndex'
p2124
g889
sg38
S'right'
p2125
sg59
g63
sS'trial_loop.thisN'
p2126
I85
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2127
g60
(g99
S'U\x00\x00\x00'
tRp2128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2129
I0
sg904
g1811
sS'block_loop.thisRepN'
p2130
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2131
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2132
Nsg70
Vn
sS'block_loop.thisTrialN'
p2133
I0
sg39
F0.96639209845670848
sg34
g753
(S'\x07\xdf\x07\x0f\x109%\t\xdbp'
tRp2134
sa(dp2135
S'trial_loop.thisTrialN'
p2136
I86
sg895
g1694
sS'block_loop.thisIndex'
p2137
g889
sg38
S'left'
p2138
sg59
g63
sS'trial_loop.thisN'
p2139
I86
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2140
g60
(g99
S'V\x00\x00\x00'
tRp2141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2142
I0
sg904
g1701
sS'block_loop.thisRepN'
p2143
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2144
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p2145
Nsg70
Vn
sS'block_loop.thisTrialN'
p2146
I0
sg39
F1.9164994092780034
sg34
g753
(S'\x07\xdf\x07\x0f\x109+\t\xb4`'
tRp2147
sa(dp2148
S'trial_loop.thisTrialN'
p2149
I87
sg895
g1638
sS'block_loop.thisIndex'
p2150
g889
sg38
S'left'
p2151
sg59
g63
sS'trial_loop.thisN'
p2152
I87
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2153
g60
(g99
S'W\x00\x00\x00'
tRp2154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2155
I0
sg904
g1645
sS'block_loop.thisRepN'
p2156
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2157
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2158
Nsg70
Vn
sS'block_loop.thisTrialN'
p2159
I0
sg39
F1.1333325540663282
sg34
g753
(S'\x07\xdf\x07\x0f\x1092\t\x10P'
tRp2160
sa(dp2161
S'trial_loop.thisTrialN'
p2162
I88
sg895
g1257
sS'block_loop.thisIndex'
p2163
g889
sg38
S'right'
p2164
sg59
g63
sS'trial_loop.thisN'
p2165
I88
sg33
g1261
sg64
g65
sS'trial_loop.thisIndex'
p2166
g60
(g99
S'X\x00\x00\x00'
tRp2167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2168
I0
sg904
g1265
sS'block_loop.thisRepN'
p2169
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2170
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2171
Nsg70
Vn
sS'block_loop.thisTrialN'
p2172
I0
sg39
F1.2666839245875963
sg34
g753
(S'\x07\xdf\x07\x0f\x1098\x0b\x89 '
tRp2173
sa(dp2174
S'trial_loop.thisTrialN'
p2175
I89
sg895
g1313
sS'block_loop.thisIndex'
p2176
g889
sg38
S'right'
p2177
sg59
g63
sS'trial_loop.thisN'
p2178
I89
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2179
g60
(g99
S'Y\x00\x00\x00'
tRp2180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2181
I0
sg904
g1320
sS'block_loop.thisRepN'
p2182
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2183
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2184
Nsg70
Vn
sS'block_loop.thisTrialN'
p2185
I0
sg39
F1.1001403251484589
sg34
g753
(S'\x07\xdf\x07\x0f\x10:\x03\x00\xe2\x90'
tRp2186
sa(dp2187
S'trial_loop.thisTrialN'
p2188
I90
sg895
g1343
sS'block_loop.thisIndex'
p2189
g889
sg38
S'right'
p2190
sg59
g63
sS'trial_loop.thisN'
p2191
I90
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2192
g60
(g99
S'Z\x00\x00\x00'
tRp2193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2194
I0
sg904
g1351
sS'block_loop.thisRepN'
p2195
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2196
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2197
Nsg70
Vn
sS'block_loop.thisTrialN'
p2198
I0
sg39
F1.0833226896811539
sg34
g753
(S'\x07\xdf\x07\x0f\x10:\t\x02\xe2H'
tRp2199
sa(dp2200
S'trial_loop.thisTrialN'
p2201
I91
sg895
g1494
sS'block_loop.thisIndex'
p2202
g889
sg38
S'right'
p2203
sg59
g63
sS'trial_loop.thisN'
p2204
I91
sg33
g1505
sg64
g65
sS'trial_loop.thisIndex'
p2205
g60
(g99
S'[\x00\x00\x00'
tRp2206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2207
I0
sg904
g1502
sS'block_loop.thisRepN'
p2208
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2209
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2210
Nsg70
Vn
sS'block_loop.thisTrialN'
p2211
I0
sg39
F1.1165670915006558
sg34
g753
(S'\x07\xdf\x07\x0f\x10:\x0f\x04\xa3\x80'
tRp2212
sa(dp2213
S'trial_loop.thisTrialN'
p2214
I92
sg895
g1804
sS'block_loop.thisIndex'
p2215
g889
sg38
S'right'
p2216
sg59
g63
sS'trial_loop.thisN'
p2217
I92
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2218
g60
(g99
S'\\\x00\x00\x00'
tRp2219
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2220
I0
sg904
g1811
sS'block_loop.thisRepN'
p2221
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2222
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2223
Nsg70
Vn
sS'block_loop.thisTrialN'
p2224
I0
sg39
F0.88305714956914017
sg34
g753
(S'\x07\xdf\x07\x0f\x10:\x15\x06\xe1\xb8'
tRp2225
sa(dp2226
S'trial_loop.thisTrialN'
p2227
I93
sg895
g1180
sS'block_loop.thisIndex'
p2228
g889
sg38
S'left'
p2229
sg59
g63
sS'trial_loop.thisN'
p2230
I93
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2231
g60
(g99
S']\x00\x00\x00'
tRp2232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2233
I0
sg904
g1188
sS'block_loop.thisRepN'
p2234
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2235
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vn
sS'block_loop.thisTrialN'
p2237
I0
sg39
F2.283315961372864
sg34
g753
(S'\x07\xdf\x07\x0f\x10:\x1b\x05\xc8x'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g950
sS'block_loop.thisIndex'
p2241
g889
sg38
S'left'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g958
sS'block_loop.thisRepN'
p2247
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vn
sS'block_loop.thisTrialN'
p2250
I0
sg39
F2.3499658452810763
sg34
g753
(S'\x07\xdf\x07\x0f\x10:"\n\x9a\xd8'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g1343
sS'block_loop.thisIndex'
p2254
g889
sg38
S'right'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g1351
sS'block_loop.thisRepN'
p2260
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vn
sS'block_loop.thisTrialN'
p2263
I0
sg39
F0.81666242821302149
sg34
g753
(S'\x07\xdf\x07\x0f\x10:*\x01!\x10'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1001
sS'block_loop.thisIndex'
p2267
g889
sg38
S'right'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1009
sS'block_loop.thisRepN'
p2273
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vn
sS'block_loop.thisTrialN'
p2276
I0
sg39
F1.5833614629855219
sg34
g753
(S'\x07\xdf\x07\x0f\x10:/\x0e\x19`'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1940
sS'block_loop.thisIndex'
p2280
g889
sg38
S'right'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1947
sS'block_loop.thisRepN'
p2286
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vn
sS'block_loop.thisTrialN'
p2289
I0
sg39
F2.8999511912534217
sg34
g753
(S'\x07\xdf\x07\x0f\x10:6\x085\x90'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g1018
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g1026
sS'block_loop.thisRepN'
p2299
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vn
sS'block_loop.thisTrialN'
p2302
I0
sg39
F1.3833000529139099
sg34
g753
(S'\x07\xdf\x07\x0f\x10;\x02\x07O\x18'
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1242
sS'block_loop.thisIndex'
p2306
g889
sg38
S'right'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1249
sS'block_loop.thisRepN'
p2312
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vn
sS'block_loop.thisTrialN'
p2315
I0
sg39
F1.8836555698990196
sg34
g753
(S'\x07\xdf\x07\x0f\x10;\x08\r\x94\x90'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1694
sS'block_loop.thisIndex'
p2319
g889
sg38
S'left'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1701
sS'block_loop.thisRepN'
p2325
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vn
sS'block_loop.thisTrialN'
p2328
I0
sg39
F1.4832259844997679
sg34
g753
(S'\x07\xdf\x07\x0f\x10;\x0f\x0c8\xe8'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1225
sS'block_loop.thisIndex'
p2332
g889
sg38
S'right'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g1229
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1233
sS'block_loop.thisRepN'
p2338
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vn
sS'block_loop.thisTrialN'
p2341
I0
sg39
F1.2166064920193094
sg34
g753
(S'\x07\xdf\x07\x0f\x10;\x16\x04\xe9\xd0'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1082
sS'block_loop.thisIndex'
p2345
g889
sg38
S'left'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1090
sS'block_loop.thisRepN'
p2351
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vn
sS'block_loop.thisTrialN'
p2354
I0
sg39
F1.1664087481694878
sg34
g753
(S'\x07\xdf\x07\x0f\x10;\x1c\x08\xcd\xe8'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g1210
sS'block_loop.thisIndex'
p2358
g889
sg38
S'right'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1217
sS'block_loop.thisRepN'
p2364
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vn
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.5999763939007607
sg34
g753
(S'\x07\xdf\x07\x0f\x10;"\x0b\xc3\xb8'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g1925
sS'block_loop.thisIndex'
p2371
g889
sg38
S'right'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g1932
sS'block_loop.thisRepN'
p2377
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vn
sS'block_loop.thisTrialN'
p2380
I0
sg39
F1.5169998129758824
sg34
g753
(S'\x07\xdf\x07\x0f\x10;)\x06\x1eh'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1623
sS'block_loop.thisIndex'
p2384
g889
sg38
S'left'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1630
sS'block_loop.thisRepN'
p2390
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vn
sS'block_loop.thisTrialN'
p2393
I0
sg39
F1.9499867144413656
sg34
g753
(S'\x07\xdf\x07\x0f\x10;/\x0e\x8a\xa8'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1082
sS'block_loop.thisIndex'
p2397
g889
sg38
S'left'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1090
sS'block_loop.thisRepN'
p2403
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vn
sS'block_loop.thisTrialN'
p2406
I0
sg39
F0.96639808551117312
sg34
g753
(S'\x07\xdf\x07\x0f\x10;6\x0e[\xc8'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g1210
sS'block_loop.thisIndex'
p2410
g889
sg38
S'right'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1217
sS'block_loop.thisRepN'
p2416
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vn
sS'block_loop.thisTrialN'
p2419
I0
sg39
F0.99999201726132014
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00\x00\x0es8'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g1464
sS'block_loop.thisIndex'
p2423
g889
sg38
S'left'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g1472
sS'block_loop.thisRepN'
p2429
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vn
sS'block_loop.thisTrialN'
p2432
I0
sg39
F2.0332463975037172
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00\x06\x0e\xc9('
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1116
sS'block_loop.thisIndex'
p2436
g889
sg38
S'right'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1124
sS'block_loop.thisRepN'
p2442
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vn
sS'block_loop.thisTrialN'
p2445
I0
sg39
F2.0503345908045958
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00\x0e\x00\x8c\xa0'
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1099
sS'block_loop.thisIndex'
p2449
g889
sg38
S'right'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1107
sS'block_loop.thisRepN'
p2455
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vn
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.9829833662524834
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00\x15\x01\xcc\xf0'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1464
sS'block_loop.thisIndex'
p2462
g889
sg38
S'left'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1472
sS'block_loop.thisRepN'
p2468
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vn
sS'block_loop.thisTrialN'
p2471
I0
sg39
F1.3499949252582155
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00\x1c\x02\x1b\x10'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1494
sS'block_loop.thisIndex'
p2475
g889
sg38
S'right'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1502
sS'block_loop.thisRepN'
p2481
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vn
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.4333064961247146
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00"\x07\xebX'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1163
sS'block_loop.thisIndex'
p2488
g889
sg38
S'left'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1171
sS'block_loop.thisRepN'
p2494
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vn
sS'block_loop.thisTrialN'
p2497
I0
sg39
F1.5000022807826099
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00(\x0f&\xe8'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1067
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1074
sS'block_loop.thisRepN'
p2507
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.400357740747495
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x00/\x08\x12h'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1163
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1171
sS'block_loop.thisRepN'
p2520
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F1.2833293609710381
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x005\x0e\x96`'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1819
sS'block_loop.thisIndex'
p2527
g889
sg38
S'left'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1826
sS'block_loop.thisRepN'
p2533
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.9666523927689923
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01\x00\x04.P'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1539
sS'block_loop.thisIndex'
p2540
g889
sg38
S'left'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1546
sS'block_loop.thisRepN'
p2546
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F2.5666239400061386
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01\x07\x04A\xd8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1925
sS'block_loop.thisIndex'
p2553
g889
sg38
S'right'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1932
sS'block_loop.thisRepN'
p2559
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F3.666516800244608
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01\x0e\r]\xe0'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1623
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1630
sS'block_loop.thisRepN'
p2572
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.4170944084335133
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01\x17\x08\x9f\x08'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1819
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1826
sS'block_loop.thisRepN'
p2585
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.5333228037206936
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01\x1e\x00]\xc0'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1494
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1502
sS'block_loop.thisRepN'
p2598
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.3666426424233578
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01$\t\x04\x98'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1050
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1058
sS'block_loop.thisRepN'
p2611
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.1999197164532234
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x01*\x0f\x0fx'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1679
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1686
sS'block_loop.thisRepN'
p2624
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.5831713027373553
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x011\x03v\xb8'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g950
sS'block_loop.thisIndex'
p2631
g889
sg38
S'right'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g958
sS'block_loop.thisRepN'
p2637
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.850142035735189
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x017\x0c\xd9\x10'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1539
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1546
sS'block_loop.thisRepN'
p2650
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.3665978820654345
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02\x02\x0b\x00h'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1067
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1074
sS'block_loop.thisRepN'
p2663
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.2165811183140249
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02\t\x01\xc9\x08'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g984
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g992
sS'block_loop.thisRepN'
p2676
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.0833127112573493
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02\x0f\x05\xb1\x08'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1940
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1947
sS'block_loop.thisRepN'
p2689
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.1999716042573709
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02\x15\x07r@'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1623
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1630
sS'block_loop.thisRepN'
p2702
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.1166614588801167
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02\x1b\x0b\x1b\xc0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1313
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1320
sS'block_loop.thisRepN'
p2715
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.2499965788265399
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02!\rY\xf8'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1050
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1058
sS'block_loop.thisRepN'
p2728
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.7832156069389384
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02(\x02t\xe8'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1638
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1645
sS'block_loop.thisRepN'
p2741
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.5832756485406208
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02.\x0e\xf08'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1035
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1042
sS'block_loop.thisRepN'
p2754
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.266663682642502
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x025\t\x0ch'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1582
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1589
sS'block_loop.thisRepN'
p2767
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F1.1336695396921641
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x02;\r\xa8\x18'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1242
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1249
sS'block_loop.thisRepN'
p2780
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.1500141978713145
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03\x06\x00\xde\xa8'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1328
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1335
sS'block_loop.thisRepN'
p2793
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.5165721662415308
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03\x0c\x03\x95\xf8'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1709
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1716
sS'block_loop.thisRepN'
p2806
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.5500084388950199
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03\x12\x0c\x028'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1638
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1645
sS'block_loop.thisRepN'
p2819
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.2840381141577382
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03\x19\x05\xa5P'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1001
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1009
sS'block_loop.thisRepN'
p2832
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.1669510042283946
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03\x1f\n\x7f\x80'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1511
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1518
sS'block_loop.thisRepN'
p2845
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F1.2499264447615133
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03%\rqh'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1225
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1233
sS'block_loop.thisRepN'
p2858
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.7498771228383703
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x03,\x02\x90@'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g916
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g924
sS'block_loop.thisRepN'
p2871
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.2166771962802159
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x032\x0e\x8e\x90'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1539
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1546
sS'block_loop.thisRepN'
p2884
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.2664988961014387
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x039\x034P'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g916
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g924
sS'block_loop.thisRepN'
p2897
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.1836255205880661
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04\x03\x07\xd0\x00'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1464
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1472
sS'block_loop.thisRepN'
p2910
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.1832611655709115
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04\t\x0b\x00h'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1163
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1171
sS'block_loop.thisRepN'
p2923
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.4999538141519224
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04\x0f\x0eoP'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1925
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1932
sS'block_loop.thisRepN'
p2936
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.7999619679503667
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04\x16\x07\x1cP'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1940
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1947
sS'block_loop.thisRepN'
p2949
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.1665798068634103
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04\x1d\x04\x8f\xf8'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1313
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1320
sS'block_loop.thisRepN'
p2962
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.4336052786438813
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04#\x07\xc0`'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g967
sS'block_loop.thisIndex'
p2969
g889
sg38
S'right'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g975
sS'block_loop.thisRepN'
p2975
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F1.0999803852701007
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x04)\x0e\xbdp'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1567
sS'block_loop.thisIndex'
p2982
g889
sg38
S'right'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1574
sS'block_loop.thisRepN'
p2988
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.0500038773298002
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x040\x01z\xe8'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1763
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1770
sS'block_loop.thisRepN'
p3001
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.0831704474439903
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x046\x02\xc3\x08'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1018
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1026
sS'block_loop.thisRepN'
p3014
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.116681700825211
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x00\x04\x84@'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1116
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1124
sS'block_loop.thisRepN'
p3027
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.3003733641089639
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x06\x06\xfd\x10'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g984
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g992
sS'block_loop.thisRepN'
p3040
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F1.1833504011901823
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x0c\x0c\x15\xc0'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1623
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1630
sS'block_loop.thisRepN'
p3053
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.5166026717088243
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x13\x00\x03\xe8'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1494
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1502
sS'block_loop.thisRepN'
p3066
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.0499941840043903
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x19\x08p('
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g896
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g905
sS'block_loop.thisRepN'
p3079
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.5499950392977553
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05\x1f\t\xb8H'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1257
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1267
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1265
sS'block_loop.thisRepN'
p3092
I0
sg907
g1267
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1261
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.96701532229781151
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05&\x03[`'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1679
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1686
sS'block_loop.thisRepN'
p3105
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.6333539364022727
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x05,\x03r\xd0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1099
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1107
sS'block_loop.thisRepN'
p3118
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.0664776848234396
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x052\r\x88\xd8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1242
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1249
sS'block_loop.thisRepN'
p3131
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.96662017671496869
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x058\x0f\x0fx'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1343
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1354
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1351
sS'block_loop.thisRepN'
p3144
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.94999412698507513
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06\x02\x0f&\xe8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1819
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1826
sS'block_loop.thisRepN'
p3157
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.3166946442661356
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06\x08\x0e\xc5@'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1511
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1518
sS'block_loop.thisRepN'
p3170
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.1166754286732612
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06\x0f\x04\xd6H'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g984
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g992
sS'block_loop.thisRepN'
p3183
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.91668500795913133
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06\x15\x07\x10\x98'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g933
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g941
sS'block_loop.thisRepN'
p3196
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.4166664766016765
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06\x1b\x06tX'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1804
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1811
sS'block_loop.thisRepN'
p3209
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F2.0996984235234777
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06!\r2\xe8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1819
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1826
sS'block_loop.thisRepN'
p3222
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.7003416612305955
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x06)\x00'\x10"
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1694
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1701
sS'block_loop.thisRepN'
p3235
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.2998841362441453
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x06/\x0b30'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1180
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1188
sS'block_loop.thisRepN'
p3248
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.5166682442077217
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x066\x01\x05\xb8'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1763
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1770
sS'block_loop.thisRepN'
p3261
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.1832754204624507
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07\x00\tq\xf8'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1180
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1188
sS'block_loop.thisRepN'
p3274
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F1.1332273529687882
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07\x06\x0c\xe0\xe0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1567
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1574
sS'block_loop.thisRepN'
p3287
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.2499840345217308
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07\r\x00\x17p'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1146
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1154
sS'block_loop.thisRepN'
p3300
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F2.0666230847127736
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07\x13\x04x\x88'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1709
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1716
sS'block_loop.thisRepN'
p3313
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.5999818107593455
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07\x1a\x05\xf7X'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1940
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1498
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1947
sS'block_loop.thisRepN'
p3326
I0
sg907
g1498
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1505
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.083315562235839
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07!\x00R\x08'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1067
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1074
sS'block_loop.thisRepN'
p3339
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F1.0666265058862336
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x07'\x02\x13@"
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1018
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1026
sS'block_loop.thisRepN'
p3352
I0
sg907
g1022
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1029
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F1.150353749378155
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x07-\x03\x99\xe0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1067
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1074
sS'block_loop.thisRepN'
p3365
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.98329896954237483
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x073\x06MH'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1210
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1217
sS'block_loop.thisRepN'
p3378
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.79987900448395521
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x079\x06\xa38'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1679
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1686
sS'block_loop.thisRepN'
p3391
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F1.4999144706534935
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08\x03\x04\x1a\xc8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1116
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1120
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1124
sS'block_loop.thisRepN'
p3404
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.99992017260956345
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08\t\x0cLp'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1511
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1518
sS'block_loop.thisRepN'
p3417
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.000281961746623
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08\x0f\x0c\xdc\xf8'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1763
sS'block_loop.thisIndex'
p3424
g889
sg38
S'right'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1126
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1770
sS'block_loop.thisRepN'
p3430
I0
sg907
g1126
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1120
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.1166360851739228
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08\x15\r/\x00'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1146
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1154
sS'block_loop.thisRepN'
p3443
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.93332103611373896
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08\x1c\x00e\x90'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g950
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g960
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g958
sS'block_loop.thisRepN'
p3456
I0
sg907
g960
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g954
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F2.0666387650935576
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08!\x0f\x0b\x90'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1210
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1217
sS'block_loop.thisRepN'
p3469
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.85001431190994481
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08)\x01H '
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1099
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1107
sS'block_loop.thisRepN'
p3482
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1110
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.93359130884982733
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08.\x0e\xb9\x88'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1146
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1154
sS'block_loop.thisRepN'
p3495
I0
sg907
g1150
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1157
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.86665889299911214
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x084\x0eW\xe0'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1050
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1054
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1058
sS'block_loop.thisRepN'
p3508
I0
sg907
g1054
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1061
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.3167126054295295
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x08:\x0c\xc1\xa0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1082
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1090
sS'block_loop.thisRepN'
p3521
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.1997309816943016
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t\x05\x02\xd6\x90'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g967
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g975
sS'block_loop.thisRepN'
p3534
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F2.1499648759481715
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t\x0b\x06\x80\x10'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g896
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g905
sS'block_loop.thisRepN'
p3547
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.3836963388885124
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t\x12\t/\x90'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1567
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1474
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1574
sS'block_loop.thisRepN'
p3560
I0
sg907
g1474
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1468
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.0998081861853279
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t\x19\x002\xc8'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1242
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1173
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1249
sS'block_loop.thisRepN'
p3573
I0
sg907
g1173
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1167
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.0166696696969666
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t\x1f\x022\x80'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1638
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1645
sS'block_loop.thisRepN'
p3586
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1354
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F1.3833254266201038
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t%\x03\x01\x88'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1225
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1235
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1233
sS'block_loop.thisRepN'
p3599
I0
sg907
g1235
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1229
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F2.2166455504211626
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t+\t\x85\x80'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1313
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1184
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1320
sS'block_loop.thisRepN'
p3612
I0
sg907
g1184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1191
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.0337256469438216
sg34
g753
(S'\x07\xdf\x07\x0f\x11\t2\r+\x18'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F112.79755517213016
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'16-skips_prawn.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'16-skips_prawn.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'42-mrkipling_lemon_slices.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'42-mrkipling_lemon_slices.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.6164356614044664
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x0f \x07\xebX'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'44-crunch.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'44-crunch.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F1.2833022766772046
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x0f'\x02F\x08"
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'29-beans.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'29-beans.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'46-pistachios.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'46-pistachios.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.1499560379152172
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x0f-\x07 8'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'20-fruit_pastilles.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'20-fruit_pastilles.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'2-steamed_puddings.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'2-steamed_puddings.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.3166687003649713
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x0f3\t\xd3\xa0'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'36-fig_rolls.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
S'36-fig_rolls.png'
p3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3716
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.4666791919644311
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x0f9\x0f*\xd0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'48-twix.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'left'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'48-twix.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'50-polo.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3732
I1
sg3647
S'50-polo.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F1.2499834643258509
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10\x04\x07\x9d8'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'13-mccoys_steak_crisps.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'right'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
S'3-ellas_strawberries_apples.png'
p3743
sg64
g65
sS'trial_loop.thisIndex'
p3744
g60
(g99
S'\x06\x00\x00\x00'
tRp3745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3746
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3747
sS'block_loop.thisRepN'
p3748
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3749
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3750
sg55
g11
sS'block_loop.thisTrial'
p3751
Nsg70
Vn
sS'block_loop.thisTrialN'
p3752
I0
sg39
F1.3166444670496276
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10\n\x0b\xfeP'
tRp3753
sa(dp3754
S'trial_loop.thisTrialN'
p3755
I7
sg3633
S'27-hartleys_raspberries_jelly.png'
p3756
sS'block_loop.thisIndex'
p3757
g3627
sg38
S'right'
p3758
sg59
g63
sS'trial_loop.thisN'
p3759
I7
sg33
S'51-mars.png'
p3760
sg64
g65
sS'trial_loop.thisIndex'
p3761
g60
(g99
S'\x07\x00\x00\x00'
tRp3762
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3763
I0
sg3642
S'51-mars.png'
p3764
sS'block_loop.thisRepN'
p3765
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3766
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3767
sg55
g11
sS'block_loop.thisTrial'
p3768
Nsg70
Vn
sS'block_loop.thisTrialN'
p3769
I0
sg39
F0.99993157652261289
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10\x11\x02\x0fX'
tRp3770
sa(dp3771
S'trial_loop.thisTrialN'
p3772
I8
sg3633
g3634
sS'block_loop.thisIndex'
p3773
g3627
sg38
S'left'
p3774
sg59
g63
sS'trial_loop.thisN'
p3775
I8
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3779
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3780
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vn
sS'block_loop.thisTrialN'
p3782
I0
sg39
F1.4831740966965299
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10\x17\x02\x9f\xe0'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
S'21-nakd_banana_crunch.png'
p3786
sS'block_loop.thisIndex'
p3787
g3627
sg38
S'left'
p3788
sg59
g63
sS'trial_loop.thisN'
p3789
I9
sg33
S'21-nakd_banana_crunch.png'
p3790
sg64
g65
sS'trial_loop.thisIndex'
p3791
g60
(g99
S'\t\x00\x00\x00'
tRp3792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3793
I0
sg3642
S'1-treacle_cookies.png'
p3794
sS'block_loop.thisRepN'
p3795
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3796
I1
sg3647
S'1-treacle_cookies.png'
p3797
sg55
g11
sS'block_loop.thisTrial'
p3798
Nsg70
Vn
sS'block_loop.thisTrialN'
p3799
I0
sg39
F1.2999816397004906
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10\x1d\nT\x88'
tRp3800
sa(dp3801
S'trial_loop.thisTrialN'
p3802
I10
sg3633
S'40-sardines.png'
p3803
sS'block_loop.thisIndex'
p3804
g3627
sg38
S'left'
p3805
sg59
g63
sS'trial_loop.thisN'
p3806
I10
sg33
S'40-sardines.png'
p3807
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
S'5-pineapple.png'
p3811
sS'block_loop.thisRepN'
p3812
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3813
I1
sg3647
S'5-pineapple.png'
p3814
sg55
g11
sS'block_loop.thisTrial'
p3815
Nsg70
Vn
sS'block_loop.thisTrialN'
p3816
I0
sg39
F1.1170303754624911
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10$\x00*\xf8'
tRp3817
sa(dp3818
S'trial_loop.thisTrialN'
p3819
I11
sg3633
g3756
sS'block_loop.thisIndex'
p3820
g3627
sg38
S'right'
p3821
sg59
g63
sS'trial_loop.thisN'
p3822
I11
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p3823
g60
(g99
S'\x0b\x00\x00\x00'
tRp3824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3825
I0
sg3642
g3764
sS'block_loop.thisRepN'
p3826
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3827
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vn
sS'block_loop.thisTrialN'
p3829
I0
sg39
F0.96665952021430712
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x10*\x02eH'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'3-ellas_strawberries_apples.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'left'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p3837
g60
(g99
S'\x0c\x00\x00\x00'
tRp3838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3839
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3840
sS'block_loop.thisRepN'
p3841
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3842
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p3843
Nsg70
Vn
sS'block_loop.thisTrialN'
p3844
I0
sg39
F0.83333238300656376
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x100\x02|\xb8'
tRp3845
sa(dp3846
S'trial_loop.thisTrialN'
p3847
I13
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3848
sS'block_loop.thisIndex'
p3849
g3627
sg38
S'left'
p3850
sg59
g63
sS'trial_loop.thisN'
p3851
I13
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3852
sg64
g65
sS'trial_loop.thisIndex'
p3853
g60
(g99
S'\r\x00\x00\x00'
tRp3854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3855
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3856
sS'block_loop.thisRepN'
p3857
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3858
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3859
sg55
g11
sS'block_loop.thisTrial'
p3860
Nsg70
Vn
sS'block_loop.thisTrialN'
p3861
I0
sg39
F1.9000358653065632
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x106\x00qH'
tRp3862
sa(dp3863
S'trial_loop.thisTrialN'
p3864
I14
sg3633
S'38-maltesers.png'
p3865
sS'block_loop.thisIndex'
p3866
g3627
sg38
S'left'
p3867
sg59
g63
sS'trial_loop.thisN'
p3868
I14
sg33
S'38-maltesers.png'
p3869
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
S'6-sour_patch_kids.png'
p3873
sS'block_loop.thisRepN'
p3874
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3875
I1
sg3647
S'6-sour_patch_kids.png'
p3876
sg55
g11
sS'block_loop.thisTrial'
p3877
Nsg70
Vn
sS'block_loop.thisTrialN'
p3878
I0
sg39
F1.7496900986661785
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11\x00\x0e\xd0\xf8'
tRp3879
sa(dp3880
S'trial_loop.thisTrialN'
p3881
I15
sg3633
g3756
sS'block_loop.thisIndex'
p3882
g3627
sg38
S'right'
p3883
sg59
g63
sS'trial_loop.thisN'
p3884
I15
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
g3764
sS'block_loop.thisRepN'
p3888
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3889
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p3890
Nsg70
Vn
sS'block_loop.thisTrialN'
p3891
I0
sg39
F0.95035392043700995
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11\x07\x0bN\x88'
tRp3892
sa(dp3893
S'trial_loop.thisTrialN'
p3894
I16
sg3633
S'5-pineapple.png'
p3895
sS'block_loop.thisIndex'
p3896
g3627
sg38
S'right'
p3897
sg59
g63
sS'trial_loop.thisN'
p3898
I16
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p3899
g60
(g99
S'\x10\x00\x00\x00'
tRp3900
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3901
I0
sg3642
S'40-sardines.png'
p3902
sS'block_loop.thisRepN'
p3903
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3904
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p3905
Nsg70
Vn
sS'block_loop.thisTrialN'
p3906
I0
sg39
F1.0832981712692344
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11\r\x0b+`'
tRp3907
sa(dp3908
S'trial_loop.thisTrialN'
p3909
I17
sg3633
S'35-raisins.png'
p3910
sS'block_loop.thisIndex'
p3911
g3627
sg38
S'right'
p3912
sg59
g63
sS'trial_loop.thisN'
p3913
I17
sg33
S'49-yorkie.png'
p3914
sg64
g65
sS'trial_loop.thisIndex'
p3915
g60
(g99
S'\x11\x00\x00\x00'
tRp3916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3917
I0
sg3642
S'49-yorkie.png'
p3918
sS'block_loop.thisRepN'
p3919
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3920
I1
sg3647
S'35-raisins.png'
p3921
sg55
g11
sS'block_loop.thisTrial'
p3922
Nsg70
Vn
sS'block_loop.thisTrialN'
p3923
I0
sg39
F1.2999177777883233
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11\x13\x0c\xec\x98'
tRp3924
sa(dp3925
S'trial_loop.thisTrialN'
p3926
I18
sg3633
g3895
sS'block_loop.thisIndex'
p3927
g3627
sg38
S'right'
p3928
sg59
g63
sS'trial_loop.thisN'
p3929
I18
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p3930
g60
(g99
S'\x12\x00\x00\x00'
tRp3931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3932
I0
sg3642
g3902
sS'block_loop.thisRepN'
p3933
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3934
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p3935
Nsg70
Vn
sS'block_loop.thisTrialN'
p3936
I0
sg39
F1.2666180669903042
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11\x1a\x02\xc3\x08'
tRp3937
sa(dp3938
S'trial_loop.thisTrialN'
p3939
I19
sg3633
S'43-mrporky_pork_crackles_redo.png'
p3940
sS'block_loop.thisIndex'
p3941
g3627
sg38
S'left'
p3942
sg59
g63
sS'trial_loop.thisN'
p3943
I19
sg33
S'18-mms.png'
p3944
sg64
g65
sS'trial_loop.thisIndex'
p3945
g60
(g99
S'\x13\x00\x00\x00'
tRp3946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3947
I0
sg3642
S'18-mms.png'
p3948
sS'block_loop.thisRepN'
p3949
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3950
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3951
sg55
g11
sS'block_loop.thisTrial'
p3952
Nsg70
Vn
sS'block_loop.thisTrialN'
p3953
I0
sg39
F1.7832597971018913
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11 \x07^\xb8'
tRp3954
sa(dp3955
S'trial_loop.thisTrialN'
p3956
I20
sg3633
S'1-treacle_cookies.png'
p3957
sS'block_loop.thisIndex'
p3958
g3627
sg38
S'right'
p3959
sg59
g63
sS'trial_loop.thisN'
p3960
I20
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p3961
g60
(g99
S'\x14\x00\x00\x00'
tRp3962
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3963
I0
sg3642
S'21-nakd_banana_crunch.png'
p3964
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3966
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F1.0837449195560112
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x11'\x04\x93\xe0"
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
g3671
sS'block_loop.thisIndex'
p3972
g3627
sg38
S'left'
p3973
sg59
g63
sS'trial_loop.thisN'
p3974
I21
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3975
g60
(g99
S'\x15\x00\x00\x00'
tRp3976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3977
I0
sg3642
g3679
sS'block_loop.thisRepN'
p3978
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3979
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3980
Nsg70
Vn
sS'block_loop.thisTrialN'
p3981
I0
sg39
F1.0999344845204178
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x11-\x06U\x18'
tRp3982
sa(dp3983
S'trial_loop.thisTrialN'
p3984
I22
sg3633
S'30-spaghetti_hoops.png'
p3985
sS'block_loop.thisIndex'
p3986
g3627
sg38
S'right'
p3987
sg59
g63
sS'trial_loop.thisN'
p3988
I22
sg33
S'19-caramello_redo.png'
p3989
sg64
g65
sS'trial_loop.thisIndex'
p3990
g60
(g99
S'\x16\x00\x00\x00'
tRp3991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3992
I0
sg3642
S'19-caramello_redo.png'
p3993
sS'block_loop.thisRepN'
p3994
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3995
I1
sg3647
S'30-spaghetti_hoops.png'
p3996
sg55
g11
sS'block_loop.thisTrial'
p3997
Nsg70
Vn
sS'block_loop.thisTrialN'
p3998
I0
sg39
F1.3666577526082619
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x113\x08T\xd0'
tRp3999
sa(dp4000
S'trial_loop.thisTrialN'
p4001
I23
sg3633
S'26-walkers_smoky_bacon.png'
p4002
sS'block_loop.thisIndex'
p4003
g3627
sg38
S'right'
p4004
sg59
g63
sS'trial_loop.thisN'
p4005
I23
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4006
g60
(g99
S'\x17\x00\x00\x00'
tRp4007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4008
I0
sg3642
S'44-crunch.png'
p4009
sS'block_loop.thisRepN'
p4010
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4011
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4012
Nsg70
Vn
sS'block_loop.thisTrialN'
p4013
I0
sg39
F1.7831640042331856
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x119\x0e_\xb0'
tRp4014
sa(dp4015
S'trial_loop.thisTrialN'
p4016
I24
sg3633
S'46-pistachios.png'
p4017
sS'block_loop.thisIndex'
p4018
g3627
sg38
S'right'
p4019
sg59
g63
sS'trial_loop.thisN'
p4020
I24
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4021
g60
(g99
S'\x18\x00\x00\x00'
tRp4022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4023
I0
sg3642
S'29-beans.png'
p4024
sS'block_loop.thisRepN'
p4025
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4026
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4027
Nsg70
Vn
sS'block_loop.thisTrialN'
p4028
I0
sg39
F1.6166249663583585
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12\x04\x0b\x94\xd8'
tRp4029
sa(dp4030
S'trial_loop.thisTrialN'
p4031
I25
sg3633
S'36-fig_rolls.png'
p4032
sS'block_loop.thisIndex'
p4033
g3627
sg38
S'right'
p4034
sg59
g63
sS'trial_loop.thisN'
p4035
I25
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4036
g60
(g99
S'\x19\x00\x00\x00'
tRp4037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4038
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4039
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4041
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vn
sS'block_loop.thisTrialN'
p4043
I0
sg39
F1.9503051687088373
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12\x0b\x06l\x88'
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
g3940
sS'block_loop.thisIndex'
p4047
g3627
sg38
S'right'
p4048
sg59
g63
sS'trial_loop.thisN'
p4049
I26
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4050
g60
(g99
S'\x1a\x00\x00\x00'
tRp4051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4052
I0
sg3642
g3948
sS'block_loop.thisRepN'
p4053
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4054
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p4055
Nsg70
Vn
sS'block_loop.thisTrialN'
p4056
I0
sg39
F1.3000229788840443
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12\x12\x06\x03\x10'
tRp4057
sa(dp4058
S'trial_loop.thisTrialN'
p4059
I27
sg3633
g3957
sS'block_loop.thisIndex'
p4060
g3627
sg38
S'right'
p4061
sg59
g63
sS'trial_loop.thisN'
p4062
I27
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4063
g60
(g99
S'\x1b\x00\x00\x00'
tRp4064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4065
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4066
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4067
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4068
Nsg70
Vn
sS'block_loop.thisTrialN'
p4069
I0
sg39
F0.99989764988094976
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12\x18\x0b\x17\xd8'
tRp4070
sa(dp4071
S'trial_loop.thisTrialN'
p4072
I28
sg3633
g3722
sS'block_loop.thisIndex'
p4073
g3627
sg38
S'left'
p4074
sg59
g63
sS'trial_loop.thisN'
p4075
I28
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4076
g60
(g99
S'\x1c\x00\x00\x00'
tRp4077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4078
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4079
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4080
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4081
Nsg70
Vn
sS'block_loop.thisTrialN'
p4082
I0
sg39
F1.1999197164532234
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12\x1e\x0b\xacH'
tRp4083
sa(dp4084
S'trial_loop.thisTrialN'
p4085
I29
sg3633
g3910
sS'block_loop.thisIndex'
p4086
g3627
sg38
S'right'
p4087
sg59
g63
sS'trial_loop.thisN'
p4088
I29
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p4089
g60
(g99
S'\x1d\x00\x00\x00'
tRp4090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4091
I0
sg3642
g3918
sS'block_loop.thisRepN'
p4092
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4093
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p4094
Nsg70
Vn
sS'block_loop.thisTrialN'
p4095
I0
sg39
F0.94995278780061199
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12$\x0f\x17H'
tRp4096
sa(dp4097
S'trial_loop.thisTrialN'
p4098
I30
sg3633
S'23-crunchie_redo.png'
p4099
sS'block_loop.thisIndex'
p4100
g3627
sg38
S'right'
p4101
sg59
g63
sS'trial_loop.thisN'
p4102
I30
sg33
S'33-ambrosia_rice.png'
p4103
sg64
g65
sS'trial_loop.thisIndex'
p4104
g60
(g99
S'\x1e\x00\x00\x00'
tRp4105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4106
I0
sg3642
S'33-ambrosia_rice.png'
p4107
sS'block_loop.thisRepN'
p4108
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4109
I1
sg3647
S'23-crunchie_redo.png'
p4110
sg55
g11
sS'block_loop.thisTrial'
p4111
Nsg70
Vn
sS'block_loop.thisTrialN'
p4112
I0
sg39
F2.3003639558810391
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x12*\x0e\xf08'
tRp4113
sa(dp4114
S'trial_loop.thisTrialN'
p4115
I31
sg3633
g3985
sS'block_loop.thisIndex'
p4116
g3627
sg38
S'right'
p4117
sg59
g63
sS'trial_loop.thisN'
p4118
I31
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4119
g60
(g99
S'\x1f\x00\x00\x00'
tRp4120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4121
I0
sg3642
g3993
sS'block_loop.thisRepN'
p4122
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4123
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p4124
Nsg70
Vn
sS'block_loop.thisTrialN'
p4125
I0
sg39
F1.4999660733592464
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x122\x04\xbe\xd8'
tRp4126
sa(dp4127
S'trial_loop.thisTrialN'
p4128
I32
sg3633
S'51-mars.png'
p4129
sS'block_loop.thisIndex'
p4130
g3627
sg38
S'left'
p4131
sg59
g63
sS'trial_loop.thisN'
p4132
I32
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4133
g60
(g99
S' \x00\x00\x00'
tRp4134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4135
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4136
sS'block_loop.thisRepN'
p4137
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4138
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4139
Nsg70
Vn
sS'block_loop.thisTrialN'
p4140
I0
sg39
F1.1833378568853732
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x128\x0c\xf0\x80'
tRp4141
sa(dp4142
S'trial_loop.thisTrialN'
p4143
I33
sg3633
g3634
sS'block_loop.thisIndex'
p4144
g3627
sg38
S'left'
p4145
sg59
g63
sS'trial_loop.thisN'
p4146
I33
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4147
g60
(g99
S'!\x00\x00\x00'
tRp4148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4149
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4150
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4151
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4152
Nsg70
Vn
sS'block_loop.thisTrialN'
p4153
I0
sg39
F1.1665581394290712
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13\x03\x00\xde\xa8'
tRp4154
sa(dp4155
S'trial_loop.thisTrialN'
p4156
I34
sg3633
g3910
sS'block_loop.thisIndex'
p4157
g3627
sg38
S'right'
p4158
sg59
g63
sS'trial_loop.thisN'
p4159
I34
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p4160
g60
(g99
S'"\x00\x00\x00'
tRp4161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4162
I0
sg3642
g3918
sS'block_loop.thisRepN'
p4163
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4164
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p4165
Nsg70
Vn
sS'block_loop.thisTrialN'
p4166
I0
sg39
F1.1999134443003641
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13\t\x04\x0f\x10'
tRp4167
sa(dp4168
S'trial_loop.thisTrialN'
p4169
I35
sg3633
g3833
sS'block_loop.thisIndex'
p4170
g3627
sg38
S'left'
p4171
sg59
g63
sS'trial_loop.thisN'
p4172
I35
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4173
g60
(g99
S'#\x00\x00\x00'
tRp4174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4175
I0
sg3642
g3840
sS'block_loop.thisRepN'
p4176
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4177
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4178
Nsg70
Vn
sS'block_loop.thisTrialN'
p4179
I0
sg39
F0.81663391842994315
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13\x0f\x07z\x10'
tRp4180
sa(dp4181
S'trial_loop.thisTrialN'
p4182
I36
sg3633
g3895
sS'block_loop.thisIndex'
p4183
g3627
sg38
S'right'
p4184
sg59
g63
sS'trial_loop.thisN'
p4185
I36
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4186
g60
(g99
S'$\x00\x00\x00'
tRp4187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4188
I0
sg3642
g3902
sS'block_loop.thisRepN'
p4189
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4190
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4191
Nsg70
Vn
sS'block_loop.thisTrialN'
p4192
I0
sg39
F1.0832964606815949
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13\x15\x050 '
tRp4193
sa(dp4194
S'trial_loop.thisTrialN'
p4195
I37
sg3633
g3865
sS'block_loop.thisIndex'
p4196
g3627
sg38
S'left'
p4197
sg59
g63
sS'trial_loop.thisN'
p4198
I37
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4199
g60
(g99
S'%\x00\x00\x00'
tRp4200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4201
I0
sg3642
g3873
sS'block_loop.thisRepN'
p4202
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4203
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p4204
Nsg70
Vn
sS'block_loop.thisTrialN'
p4205
I0
sg39
F1.0497213453882068
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13\x1b\x07/\xd8'
tRp4206
sa(dp4207
S'trial_loop.thisTrialN'
p4208
I38
sg3633
S'4-corn.png'
p4209
sS'block_loop.thisIndex'
p4210
g3627
sg38
S'left'
p4211
sg59
g63
sS'trial_loop.thisN'
p4212
I38
sg33
S'4-corn.png'
p4213
sg64
g65
sS'trial_loop.thisIndex'
p4214
g60
(g99
S'&\x00\x00\x00'
tRp4215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4216
I0
sg3642
S'10-bounty_redo.png'
p4217
sS'block_loop.thisRepN'
p4218
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4219
I1
sg3647
S'10-bounty_redo.png'
p4220
sg55
g11
sS'block_loop.thisTrial'
p4221
Nsg70
Vn
sS'block_loop.thisTrialN'
p4222
I0
sg39
F1.0333290758726434
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13!\x089x'
tRp4223
sa(dp4224
S'trial_loop.thisTrialN'
p4225
I39
sg3633
S'45-chewy_nougat_redo.png'
p4226
sS'block_loop.thisIndex'
p4227
g3627
sg38
S'right'
p4228
sg59
g63
sS'trial_loop.thisN'
p4229
I39
sg33
S'45-chewy_nougat_redo.png'
p4230
sg64
g65
sS'trial_loop.thisIndex'
p4231
g60
(g99
S"'\x00\x00\x00"
tRp4232
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4233
I0
sg3642
S'41-peanuts_redo.png'
p4234
sS'block_loop.thisRepN'
p4235
I1
sg3645
S'41-peanuts_redo.png'
p4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4237
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p4238
Nsg70
Vn
sS'block_loop.thisTrialN'
p4239
I0
sg39
F2.1165317393706573
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x13'\tG\x00"
tRp4240
sa(dp4241
S'trial_loop.thisTrialN'
p4242
I40
sg3633
g3654
sS'block_loop.thisIndex'
p4243
g3627
sg38
S'left'
p4244
sg59
g63
sS'trial_loop.thisN'
p4245
I40
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4246
g60
(g99
S'(\x00\x00\x00'
tRp4247
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4248
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4249
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4250
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4251
Nsg70
Vn
sS'block_loop.thisTrialN'
p4252
I0
sg39
F0.90037484661752387
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13.\x0b\xb8\x00'
tRp4253
sa(dp4254
S'trial_loop.thisTrialN'
p4255
I41
sg3633
g3671
sS'block_loop.thisIndex'
p4256
g3627
sg38
S'left'
p4257
sg59
g63
sS'trial_loop.thisN'
p4258
I41
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4259
g60
(g99
S')\x00\x00\x00'
tRp4260
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4261
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4262
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4263
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4264
Nsg70
Vn
sS'block_loop.thisTrialN'
p4265
I0
sg39
F1.2499598012072966
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x134\n\x9e\xc0'
tRp4266
sa(dp4267
S'trial_loop.thisTrialN'
p4268
I42
sg3633
S'19-caramello_redo.png'
p4269
sS'block_loop.thisIndex'
p4270
g3627
sg38
S'left'
p4271
sg59
g63
sS'trial_loop.thisN'
p4272
I42
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4273
g60
(g99
S'*\x00\x00\x00'
tRp4274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4275
I0
sg3642
S'30-spaghetti_hoops.png'
p4276
sS'block_loop.thisRepN'
p4277
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4278
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p4279
Nsg70
Vn
sS'block_loop.thisTrialN'
p4280
I0
sg39
F1.0333228037206936
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x13:\x0e\xff\xd8'
tRp4281
sa(dp4282
S'trial_loop.thisTrialN'
p4283
I43
sg3633
g4226
sS'block_loop.thisIndex'
p4284
g3627
sg38
S'right'
p4285
sg59
g63
sS'trial_loop.thisN'
p4286
I43
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4287
g60
(g99
S'+\x00\x00\x00'
tRp4288
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4289
I0
sg3642
g4234
sS'block_loop.thisRepN'
p4290
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4291
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p4292
Nsg70
Vn
sS'block_loop.thisTrialN'
p4293
I0
sg39
F2.5166012462195795
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14\x05\x00\xc78'
tRp4294
sa(dp4295
S'trial_loop.thisTrialN'
p4296
I44
sg3633
S'31-hobnobs.png'
p4297
sS'block_loop.thisIndex'
p4298
g3627
sg38
S'right'
p4299
sg59
g63
sS'trial_loop.thisN'
p4300
I44
sg33
S'25-kitkat.png'
p4301
sg64
g65
sS'trial_loop.thisIndex'
p4302
g60
(g99
S',\x00\x00\x00'
tRp4303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4304
I0
sg3642
S'25-kitkat.png'
p4305
sS'block_loop.thisRepN'
p4306
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4307
I1
sg3647
S'31-hobnobs.png'
p4308
sg55
g11
sS'block_loop.thisTrial'
p4309
Nsg70
Vn
sS'block_loop.thisTrialN'
p4310
I0
sg39
F0.9832467966407421
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14\x0c\t/\x90'
tRp4311
sa(dp4312
S'trial_loop.thisTrialN'
p4313
I45
sg3633
g4209
sS'block_loop.thisIndex'
p4314
g3627
sg38
S'left'
p4315
sg59
g63
sS'trial_loop.thisN'
p4316
I45
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p4317
g60
(g99
S'-\x00\x00\x00'
tRp4318
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4319
I0
sg3642
g4217
sS'block_loop.thisRepN'
p4320
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4321
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p4322
Nsg70
Vn
sS'block_loop.thisTrialN'
p4323
I0
sg39
F1.0004558714181258
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14\x12\tG\x00'
tRp4324
sa(dp4325
S'trial_loop.thisTrialN'
p4326
I46
sg3633
S'22-daim.png'
p4327
sS'block_loop.thisIndex'
p4328
g3627
sg38
S'right'
p4329
sg59
g63
sS'trial_loop.thisN'
p4330
I46
sg33
S'7-olives.png'
p4331
sg64
g65
sS'trial_loop.thisIndex'
p4332
g60
(g99
S'.\x00\x00\x00'
tRp4333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4334
I0
sg3642
S'7-olives.png'
p4335
sS'block_loop.thisRepN'
p4336
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4337
I1
sg3647
S'22-daim.png'
p4338
sg55
g11
sS'block_loop.thisTrial'
p4339
Nsg70
Vn
sS'block_loop.thisTrialN'
p4340
I0
sg39
F0.99991047928324406
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14\x18\t\xd7\x88'
tRp4341
sa(dp4342
S'trial_loop.thisTrialN'
p4343
I47
sg3633
S'41-peanuts_redo.png'
p4344
sS'block_loop.thisIndex'
p4345
g3627
sg38
S'left'
p4346
sg59
g63
sS'trial_loop.thisN'
p4347
I47
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4348
g60
(g99
S'/\x00\x00\x00'
tRp4349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4350
I0
sg3642
S'45-chewy_nougat_redo.png'
p4351
sS'block_loop.thisRepN'
p4352
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4353
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vn
sS'block_loop.thisTrialN'
p4355
I0
sg39
F1.8333326681049584
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14\x1e\nh\x10'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
S'33-ambrosia_rice.png'
p4359
sS'block_loop.thisIndex'
p4360
g3627
sg38
S'left'
p4361
sg59
g63
sS'trial_loop.thisN'
p4362
I48
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p4363
g60
(g99
S'0\x00\x00\x00'
tRp4364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4365
I0
sg3642
S'23-crunchie_redo.png'
p4366
sS'block_loop.thisRepN'
p4367
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4368
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4369
Nsg70
Vn
sS'block_loop.thisTrialN'
p4370
I0
sg39
F1.0666564411576474
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14%\x08T\xd0'
tRp4371
sa(dp4372
S'trial_loop.thisTrialN'
p4373
I49
sg3633
g3671
sS'block_loop.thisIndex'
p4374
g3627
sg38
S'left'
p4375
sg59
g63
sS'trial_loop.thisN'
p4376
I49
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4377
g60
(g99
S'1\x00\x00\x00'
tRp4378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4379
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4380
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4381
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4382
Nsg70
Vn
sS'block_loop.thisTrialN'
p4383
I0
sg39
F0.76665427441457723
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x14+\t\xdbp'
tRp4384
sa(dp4385
S'trial_loop.thisTrialN'
p4386
I50
sg3633
g3756
sS'block_loop.thisIndex'
p4387
g3627
sg38
S'right'
p4388
sg59
g63
sS'trial_loop.thisN'
p4389
I50
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p4390
g60
(g99
S'2\x00\x00\x00'
tRp4391
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4392
I0
sg3642
g3764
sS'block_loop.thisRepN'
p4393
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4394
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg70
Vn
sS'block_loop.thisTrialN'
p4396
I0
sg39
F1.4000452735344879
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x141\x06\xd9\xe8'
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I51
sg3633
g3865
sS'block_loop.thisIndex'
p4400
g3627
sg38
S'left'
p4401
sg59
g63
sS'trial_loop.thisN'
p4402
I51
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p4403
g60
(g99
S'3\x00\x00\x00'
tRp4404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4405
I0
sg3642
g3873
sS'block_loop.thisRepN'
p4406
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4407
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p4408
Nsg70
Vn
sS'block_loop.thisTrialN'
p4409
I0
sg39
F1.0330137576802372
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x147\r]\xe0'
tRp4410
sa(dp4411
S'trial_loop.thisTrialN'
p4412
I52
sg3633
g4017
sS'block_loop.thisIndex'
p4413
g3627
sg38
S'right'
p4414
sg59
g63
sS'trial_loop.thisN'
p4415
I52
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4416
g60
(g99
S'4\x00\x00\x00'
tRp4417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4418
I0
sg3642
g4024
sS'block_loop.thisRepN'
p4419
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4420
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg70
Vn
sS'block_loop.thisTrialN'
p4422
I0
sg39
F0.98333831304171326
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15\x01\x0ekh'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I53
sg3633
g3985
sS'block_loop.thisIndex'
p4426
g3627
sg38
S'right'
p4427
sg59
g63
sS'trial_loop.thisN'
p4428
I53
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4429
g60
(g99
S'5\x00\x00\x00'
tRp4430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4431
I0
sg3642
g3993
sS'block_loop.thisRepN'
p4432
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4433
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p4434
Nsg70
Vn
sS'block_loop.thisTrialN'
p4435
I0
sg39
F1.2832928684492799
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15\x07\x0e\xbdp'
tRp4436
sa(dp4437
S'trial_loop.thisTrialN'
p4438
I54
sg3633
g3739
sS'block_loop.thisIndex'
p4439
g3627
sg38
S'right'
p4440
sg59
g63
sS'trial_loop.thisN'
p4441
I54
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4442
g60
(g99
S'6\x00\x00\x00'
tRp4443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4444
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4445
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4446
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4447
Nsg70
Vn
sS'block_loop.thisTrialN'
p4448
I0
sg39
F0.95001550932101964
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15\x0e\x04U`'
tRp4449
sa(dp4450
S'trial_loop.thisTrialN'
p4451
I55
sg3633
g3786
sS'block_loop.thisIndex'
p4452
g3627
sg38
S'left'
p4453
sg59
g63
sS'trial_loop.thisN'
p4454
I55
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4455
g60
(g99
S'7\x00\x00\x00'
tRp4456
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4457
I0
sg3642
g3794
sS'block_loop.thisRepN'
p4458
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4459
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4460
Nsg70
Vn
sS'block_loop.thisTrialN'
p4461
I0
sg39
F1.0171811351910947
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15\x14\x03\xf3\xb8'
tRp4462
sa(dp4463
S'trial_loop.thisTrialN'
p4464
I56
sg3633
S'18-mms.png'
p4465
sS'block_loop.thisIndex'
p4466
g3627
sg38
S'left'
p4467
sg59
g63
sS'trial_loop.thisN'
p4468
I56
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4469
g60
(g99
S'8\x00\x00\x00'
tRp4470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4471
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4472
sS'block_loop.thisRepN'
p4473
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vn
sS'block_loop.thisTrialN'
p4476
I0
sg39
F1.1333245713267388
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15\x1a\x04\xc2\xc0'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3705
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vn
sS'block_loop.thisTrialN'
p4489
I0
sg39
F1.3999702928067563
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15 \x07;\x90'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
g4226
sS'block_loop.thisIndex'
p4493
g3627
sg38
S'right'
p4494
sg59
g63
sS'trial_loop.thisN'
p4495
I58
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4496
g60
(g99
S':\x00\x00\x00'
tRp4497
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4498
I0
sg3642
g4234
sS'block_loop.thisRepN'
p4499
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4500
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vn
sS'block_loop.thisTrialN'
p4502
I0
sg39
F1.0666969250487455
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15&\r\xfe\x08'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
g3688
sS'block_loop.thisIndex'
p4506
g3627
sg38
S'left'
p4507
sg59
g63
sS'trial_loop.thisN'
p4508
I59
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4509
g60
(g99
S';\x00\x00\x00'
tRp4510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4511
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4512
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4513
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4514
Nsg70
Vn
sS'block_loop.thisTrialN'
p4515
I0
sg39
F1.0166616869582867
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x15-\x00>\x80'
tRp4516
sa(dp4517
S'trial_loop.thisTrialN'
p4518
I60
sg3633
g4099
sS'block_loop.thisIndex'
p4519
g3627
sg38
S'right'
p4520
sg59
g63
sS'trial_loop.thisN'
p4521
I60
sg33
g4110
sg64
g65
sS'trial_loop.thisIndex'
p4522
g60
(g99
S'<\x00\x00\x00'
tRp4523
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4524
I0
sg3642
g4107
sS'block_loop.thisRepN'
p4525
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4526
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4527
Nsg70
Vn
sS'block_loop.thisTrialN'
p4528
I0
sg39
F0.8170019797189525
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x153\x01\r\x88'
tRp4529
sa(dp4530
S'trial_loop.thisTrialN'
p4531
I61
sg3633
g3722
sS'block_loop.thisIndex'
p4532
g3627
sg38
S'left'
p4533
sg59
g63
sS'trial_loop.thisN'
p4534
I61
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4535
g60
(g99
S'=\x00\x00\x00'
tRp4536
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4537
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4538
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4539
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4540
Nsg70
Vn
sS'block_loop.thisTrialN'
p4541
I0
sg39
F1.2166609457044615
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x158\x0e\x05\xd8'
tRp4542
sa(dp4543
S'trial_loop.thisTrialN'
p4544
I62
sg3633
g3705
sS'block_loop.thisIndex'
p4545
g3627
sg38
S'right'
p4546
sg59
g63
sS'trial_loop.thisN'
p4547
I62
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4548
g60
(g99
S'>\x00\x00\x00'
tRp4549
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4550
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4551
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4552
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4553
Nsg70
Vn
sS'block_loop.thisTrialN'
p4554
I0
sg39
F1.0500024518405553
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16\x03\x02m\x18'
tRp4555
sa(dp4556
S'trial_loop.thisTrialN'
p4557
I63
sg3633
g3848
sS'block_loop.thisIndex'
p4558
g3627
sg38
S'left'
p4559
sg59
g63
sS'trial_loop.thisN'
p4560
I63
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4561
g60
(g99
S'?\x00\x00\x00'
tRp4562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4563
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4564
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4565
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4566
Nsg70
Vn
sS'block_loop.thisTrialN'
p4567
I0
sg39
F1.5166562700997019
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16\t\x03\xb58'
tRp4568
sa(dp4569
S'trial_loop.thisTrialN'
p4570
I64
sg3633
g3803
sS'block_loop.thisIndex'
p4571
g3627
sg38
S'left'
p4572
sg59
g63
sS'trial_loop.thisN'
p4573
I64
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4574
g60
(g99
S'@\x00\x00\x00'
tRp4575
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4576
I0
sg3642
g3811
sS'block_loop.thisRepN'
p4577
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4578
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4579
Nsg70
Vn
sS'block_loop.thisTrialN'
p4580
I0
sg39
F0.96656059126962646
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16\x0f\x0c!x'
tRp4581
sa(dp4582
S'trial_loop.thisTrialN'
p4583
I65
sg3633
S'10-bounty_redo.png'
p4584
sS'block_loop.thisIndex'
p4585
g3627
sg38
S'right'
p4586
sg59
g63
sS'trial_loop.thisN'
p4587
I65
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p4588
g60
(g99
S'A\x00\x00\x00'
tRp4589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4590
I0
sg3642
S'4-corn.png'
p4591
sS'block_loop.thisRepN'
p4592
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4593
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p4594
Nsg70
Vn
sS'block_loop.thisTrialN'
p4595
I0
sg39
F1.8836664036161892
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16\x15\x0c8\xe8'
tRp4596
sa(dp4597
S'trial_loop.thisTrialN'
p4598
I66
sg3633
g3957
sS'block_loop.thisIndex'
p4599
g3627
sg38
S'right'
p4600
sg59
g63
sS'trial_loop.thisN'
p4601
I66
sg33
g3797
sg64
g65
sS'trial_loop.thisIndex'
p4602
g60
(g99
S'B\x00\x00\x00'
tRp4603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4604
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4605
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4606
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4607
Nsg70
Vn
sS'block_loop.thisTrialN'
p4608
I0
sg39
F0.9833271942270585
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16\x1c\n\xdd@'
tRp4609
sa(dp4610
S'trial_loop.thisTrialN'
p4611
I67
sg3633
g3688
sS'block_loop.thisIndex'
p4612
g3627
sg38
S'left'
p4613
sg59
g63
sS'trial_loop.thisN'
p4614
I67
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4615
g60
(g99
S'C\x00\x00\x00'
tRp4616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4617
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4618
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4619
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4620
Nsg70
Vn
sS'block_loop.thisTrialN'
p4621
I0
sg39
F1.2832823198295955
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16"\x0b/H'
tRp4622
sa(dp4623
S'trial_loop.thisTrialN'
p4624
I68
sg3633
g3739
sS'block_loop.thisIndex'
p4625
g3627
sg38
S'right'
p4626
sg59
g63
sS'trial_loop.thisN'
p4627
I68
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4628
g60
(g99
S'D\x00\x00\x00'
tRp4629
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4630
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4631
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4632
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4633
Nsg70
Vn
sS'block_loop.thisTrialN'
p4634
I0
sg39
F0.79996567422222142
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16)\x00\xc78'
tRp4635
sa(dp4636
S'trial_loop.thisTrialN'
p4637
I69
sg3633
g3985
sS'block_loop.thisIndex'
p4638
g3627
sg38
S'right'
p4639
sg59
g63
sS'trial_loop.thisN'
p4640
I69
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p4641
g60
(g99
S'E\x00\x00\x00'
tRp4642
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4643
I0
sg3642
g3993
sS'block_loop.thisRepN'
p4644
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4645
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p4646
Nsg70
Vn
sS'block_loop.thisTrialN'
p4647
I0
sg39
F1.1833187553311291
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16.\rFp'
tRp4648
sa(dp4649
S'trial_loop.thisTrialN'
p4650
I70
sg3633
g3895
sS'block_loop.thisIndex'
p4651
g3627
sg38
S'right'
p4652
sg59
g63
sS'trial_loop.thisN'
p4653
I70
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4654
g60
(g99
S'F\x00\x00\x00'
tRp4655
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4656
I0
sg3642
g3902
sS'block_loop.thisRepN'
p4657
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4658
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4659
Nsg70
Vn
sS'block_loop.thisTrialN'
p4660
I0
sg39
F0.83371954585072672
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x165\x01s\x18'
tRp4661
sa(dp4662
S'trial_loop.thisTrialN'
p4663
I71
sg3633
g3940
sS'block_loop.thisIndex'
p4664
g3627
sg38
S'right'
p4665
sg59
g63
sS'trial_loop.thisN'
p4666
I71
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p4667
g60
(g99
S'G\x00\x00\x00'
tRp4668
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4669
I0
sg3642
g3948
sS'block_loop.thisRepN'
p4670
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4671
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p4672
Nsg70
Vn
sS'block_loop.thisTrialN'
p4673
I0
sg39
F1.1165841973697752
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x16:\x0e\xa6\x00'
tRp4674
sa(dp4675
S'trial_loop.thisTrialN'
p4676
I72
sg3633
g3910
sS'block_loop.thisIndex'
p4677
g3627
sg38
S'right'
p4678
sg59
g63
sS'trial_loop.thisN'
p4679
I72
sg33
g3921
sg64
g65
sS'trial_loop.thisIndex'
p4680
g60
(g99
S'H\x00\x00\x00'
tRp4681
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4682
I0
sg3642
g3918
sS'block_loop.thisRepN'
p4683
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4684
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p4685
Nsg70
Vn
sS'block_loop.thisTrialN'
p4686
I0
sg39
F0.91667816561221116
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17\x05\x01\xa1\xf8'
tRp4687
sa(dp4688
S'trial_loop.thisTrialN'
p4689
I73
sg3633
g3739
sS'block_loop.thisIndex'
p4690
g3627
sg38
S'right'
p4691
sg59
g63
sS'trial_loop.thisN'
p4692
I73
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p4693
g60
(g99
S'I\x00\x00\x00'
tRp4694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4695
I0
sg3642
g3747
sS'block_loop.thisRepN'
p4696
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4697
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p4698
Nsg70
Vn
sS'block_loop.thisTrialN'
p4699
I0
sg39
F0.90001277238297916
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17\x0b\x01\x01\xd0'
tRp4700
sa(dp4701
S'trial_loop.thisTrialN'
p4702
I74
sg3633
g3957
sS'block_loop.thisIndex'
p4703
g3627
sg38
S'right'
p4704
sg59
g63
sS'trial_loop.thisN'
p4705
I74
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4706
g60
(g99
S'J\x00\x00\x00'
tRp4707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4708
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4709
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4710
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4711
Nsg70
Vn
sS'block_loop.thisTrialN'
p4712
I0
sg39
F1.2832982853069552
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17\x10\x0f*\xd0'
tRp4713
sa(dp4714
S'trial_loop.thisTrialN'
p4715
I75
sg3633
S'49-yorkie.png'
p4716
sS'block_loop.thisIndex'
p4717
g3627
sg38
S'left'
p4718
sg59
g63
sS'trial_loop.thisN'
p4719
I75
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p4720
g60
(g99
S'K\x00\x00\x00'
tRp4721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4722
I0
sg3642
S'35-raisins.png'
p4723
sS'block_loop.thisRepN'
p4724
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4725
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p4726
Nsg70
Vn
sS'block_loop.thisTrialN'
p4727
I0
sg39
F1.1170366476144409
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17\x17\x04\xc2\xc0'
tRp4728
sa(dp4729
S'trial_loop.thisTrialN'
p4730
I76
sg3633
g4327
sS'block_loop.thisIndex'
p4731
g3627
sg38
S'right'
p4732
sg59
g63
sS'trial_loop.thisN'
p4733
I76
sg33
g4331
sg64
g65
sS'trial_loop.thisIndex'
p4734
g60
(g99
S'L\x00\x00\x00'
tRp4735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4736
I0
sg3642
g4335
sS'block_loop.thisRepN'
p4737
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4738
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p4739
Nsg70
Vn
sS'block_loop.thisTrialN'
p4740
I0
sg39
F1.1999966928651702
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17\x1d\x06\xfd\x10'
tRp4741
sa(dp4742
S'trial_loop.thisTrialN'
p4743
I77
sg3633
g4002
sS'block_loop.thisIndex'
p4744
g3627
sg38
S'right'
p4745
sg59
g63
sS'trial_loop.thisN'
p4746
I77
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4747
g60
(g99
S'M\x00\x00\x00'
tRp4748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4749
I0
sg3642
g4009
sS'block_loop.thisRepN'
p4750
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4751
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4752
Nsg70
Vn
sS'block_loop.thisTrialN'
p4753
I0
sg39
F1.0999826660527106
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17#\n\xa6\x90'
tRp4754
sa(dp4755
S'trial_loop.thisTrialN'
p4756
I78
sg3633
g3722
sS'block_loop.thisIndex'
p4757
g3627
sg38
S'left'
p4758
sg59
g63
sS'trial_loop.thisN'
p4759
I78
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4760
g60
(g99
S'N\x00\x00\x00'
tRp4761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4762
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4763
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4764
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4765
Nsg70
Vn
sS'block_loop.thisTrialN'
p4766
I0
sg39
F0.88336191914186202
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17)\x0c\xa6H'
tRp4767
sa(dp4768
S'trial_loop.thisTrialN'
p4769
I79
sg3633
g4226
sS'block_loop.thisIndex'
p4770
g3627
sg38
S'right'
p4771
sg59
g63
sS'trial_loop.thisN'
p4772
I79
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p4773
g60
(g99
S'O\x00\x00\x00'
tRp4774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4775
I0
sg3642
g4234
sS'block_loop.thisRepN'
p4776
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4777
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p4778
Nsg70
Vn
sS'block_loop.thisTrialN'
p4779
I0
sg39
F1.2499974341189954
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17/\x0bRp'
tRp4780
sa(dp4781
S'trial_loop.thisTrialN'
p4782
I80
sg3633
g3654
sS'block_loop.thisIndex'
p4783
g3627
sg38
S'left'
p4784
sg59
g63
sS'trial_loop.thisN'
p4785
I80
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4786
g60
(g99
S'P\x00\x00\x00'
tRp4787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4788
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4789
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4790
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4791
Nsg70
Vn
sS'block_loop.thisTrialN'
p4792
I0
sg39
F0.85038779005935794
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x176\x00m`'
tRp4793
sa(dp4794
S'trial_loop.thisTrialN'
p4795
I81
sg3633
g4716
sS'block_loop.thisIndex'
p4796
g3627
sg38
S'left'
p4797
sg59
g63
sS'trial_loop.thisN'
p4798
I81
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p4799
g60
(g99
S'Q\x00\x00\x00'
tRp4800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4801
I0
sg3642
g4723
sS'block_loop.thisRepN'
p4802
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4803
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p4804
Nsg70
Vn
sS'block_loop.thisTrialN'
p4805
I0
sg39
F0.78332993116600846
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x17;\r\xe2\xb0'
tRp4806
sa(dp4807
S'trial_loop.thisTrialN'
p4808
I82
sg3633
S'2-steamed_puddings.png'
p4809
sS'block_loop.thisIndex'
p4810
g3627
sg38
S'right'
p4811
sg59
g63
sS'trial_loop.thisN'
p4812
I82
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4813
g60
(g99
S'R\x00\x00\x00'
tRp4814
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4815
I0
sg3642
S'20-fruit_pastilles.png'
p4816
sS'block_loop.thisRepN'
p4817
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4818
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4819
Nsg70
Vn
sS'block_loop.thisTrialN'
p4820
I0
sg39
F0.86663408948879805
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18\x05\x0b\x1b\xc0'
tRp4821
sa(dp4822
S'trial_loop.thisTrialN'
p4823
I83
sg3633
g3722
sS'block_loop.thisIndex'
p4824
g3627
sg38
S'left'
p4825
sg59
g63
sS'trial_loop.thisN'
p4826
I83
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4827
g60
(g99
S'S\x00\x00\x00'
tRp4828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4829
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4830
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4831
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4832
Nsg70
Vn
sS'block_loop.thisTrialN'
p4833
I0
sg39
F0.93327485026657087
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18\x0b\t\x89h'
tRp4834
sa(dp4835
S'trial_loop.thisTrialN'
p4836
I84
sg3633
g3688
sS'block_loop.thisIndex'
p4837
g3627
sg38
S'left'
p4838
sg59
g63
sS'trial_loop.thisN'
p4839
I84
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4840
g60
(g99
S'T\x00\x00\x00'
tRp4841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4842
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4843
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4844
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4845
Nsg70
Vn
sS'block_loop.thisTrialN'
p4846
I0
sg39
F1.0499149268098336
sg34
g753
(S"\x07\xdf\x07\x0f\x11\x18\x11\t'\xc0"
tRp4847
sa(dp4848
S'trial_loop.thisTrialN'
p4849
I85
sg3633
g4297
sS'block_loop.thisIndex'
p4850
g3627
sg38
S'right'
p4851
sg59
g63
sS'trial_loop.thisN'
p4852
I85
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p4853
g60
(g99
S'U\x00\x00\x00'
tRp4854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4855
I0
sg3642
g4305
sS'block_loop.thisRepN'
p4856
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4857
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p4858
Nsg70
Vn
sS'block_loop.thisTrialN'
p4859
I0
sg39
F1.1999525027022173
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18\x17\no\xe0'
tRp4860
sa(dp4861
S'trial_loop.thisTrialN'
p4862
I86
sg3633
g3957
sS'block_loop.thisIndex'
p4863
g3627
sg38
S'right'
p4864
sg59
g63
sS'trial_loop.thisN'
p4865
I86
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p4866
g60
(g99
S'V\x00\x00\x00'
tRp4867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4868
I0
sg3642
g3964
sS'block_loop.thisRepN'
p4869
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4870
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p4871
Nsg70
Vn
sS'block_loop.thisTrialN'
p4872
I0
sg39
F0.88330033801230456
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18\x1d\r\xda\xe0'
tRp4873
sa(dp4874
S'trial_loop.thisTrialN'
p4875
I87
sg3633
g3895
sS'block_loop.thisIndex'
p4876
g3627
sg38
S'right'
p4877
sg59
g63
sS'trial_loop.thisN'
p4878
I87
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p4879
g60
(g99
S'W\x00\x00\x00'
tRp4880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4881
I0
sg3642
g3902
sS'block_loop.thisRepN'
p4882
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4883
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p4884
Nsg70
Vn
sS'block_loop.thisTrialN'
p4885
I0
sg39
F0.81664874351736216
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18#\x0c\x87\x08'
tRp4886
sa(dp4887
S'trial_loop.thisTrialN'
p4888
I88
sg3633
g3848
sS'block_loop.thisIndex'
p4889
g3627
sg38
S'left'
p4890
sg59
g63
sS'trial_loop.thisN'
p4891
I88
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p4892
g60
(g99
S'X\x00\x00\x00'
tRp4893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4894
I0
sg3642
g3856
sS'block_loop.thisRepN'
p4895
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4896
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p4897
Nsg70
Vn
sS'block_loop.thisTrialN'
p4898
I0
sg39
F1.7999599722661515
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x18)\n=\x18'
tRp4899
sa(dp4900
S'trial_loop.thisTrialN'
p4901
I89
sg3633
S'6-sour_patch_kids.png'
p4902
sS'block_loop.thisIndex'
p4903
g3627
sg38
S'right'
p4904
sg59
g63
sS'trial_loop.thisN'
p4905
I89
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4906
g60
(g99
S'Y\x00\x00\x00'
tRp4907
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4908
I0
sg3642
S'38-maltesers.png'
p4909
sS'block_loop.thisRepN'
p4910
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4911
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p4912
Nsg70
Vn
sS'block_loop.thisTrialN'
p4913
I0
sg39
F1.0162862131255679
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x180\x07\xb0\xc0'
tRp4914
sa(dp4915
S'trial_loop.thisTrialN'
p4916
I90
sg3633
g4032
sS'block_loop.thisIndex'
p4917
g3627
sg38
S'left'
p4918
sg59
g63
sS'trial_loop.thisN'
p4919
I90
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4920
g60
(g99
S'Z\x00\x00\x00'
tRp4921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4922
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4923
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4924
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4925
Nsg70
Vn
sS'block_loop.thisTrialN'
p4926
I0
sg39
F1.1503146909763018
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x186\x08\x7f\xc8'
tRp4927
sa(dp4928
S'trial_loop.thisTrialN'
p4929
I91
sg3633
S'50-polo.png'
p4930
sS'block_loop.thisIndex'
p4931
g3627
sg38
S'right'
p4932
sg59
g63
sS'trial_loop.thisN'
p4933
I91
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p4934
g60
(g99
S'[\x00\x00\x00'
tRp4935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4936
I0
sg3642
S'48-twix.png'
p4937
sS'block_loop.thisRepN'
p4938
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4939
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4940
Nsg70
Vn
sS'block_loop.thisTrialN'
p4941
I0
sg39
F1.6499757096653411
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\x00\x0bq\xb0'
tRp4942
sa(dp4943
S'trial_loop.thisTrialN'
p4944
I92
sg3633
S'42-mrkipling_lemon_slices.png'
p4945
sS'block_loop.thisIndex'
p4946
g3627
sg38
S'right'
p4947
sg59
g63
sS'trial_loop.thisN'
p4948
I92
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4949
g60
(g99
S'\\\x00\x00\x00'
tRp4950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4951
I0
sg3642
S'16-skips_prawn.png'
p4952
sS'block_loop.thisRepN'
p4953
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vn
sS'block_loop.thisTrialN'
p4956
I0
sg39
F0.99982837111019762
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\x07\x06\x83\xf8'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
g3940
sS'block_loop.thisIndex'
p4960
g3627
sg38
S'right'
p4961
sg59
g63
sS'trial_loop.thisN'
p4962
I93
sg33
g3951
sg64
g65
sS'trial_loop.thisIndex'
p4963
g60
(g99
S']\x00\x00\x00'
tRp4964
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4965
I0
sg3642
g3948
sS'block_loop.thisRepN'
p4966
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4967
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p4968
Nsg70
Vn
sS'block_loop.thisTrialN'
p4969
I0
sg39
F1.0333476072310077
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\r\x07\x14\x80'
tRp4970
sa(dp4971
S'trial_loop.thisTrialN'
p4972
I94
sg3633
g4129
sS'block_loop.thisIndex'
p4973
g3627
sg38
S'left'
p4974
sg59
g63
sS'trial_loop.thisN'
p4975
I94
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p4976
g60
(g99
S'^\x00\x00\x00'
tRp4977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4978
I0
sg3642
g4136
sS'block_loop.thisRepN'
p4979
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4980
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p4981
Nsg70
Vn
sS'block_loop.thisTrialN'
p4982
I0
sg39
F0.90000108337153506
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\x13\x08\x1e '
tRp4983
sa(dp4984
S'trial_loop.thisTrialN'
p4985
I95
sg3633
g4032
sS'block_loop.thisIndex'
p4986
g3627
sg38
S'left'
p4987
sg59
g63
sS'trial_loop.thisN'
p4988
I95
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4989
g60
(g99
S'_\x00\x00\x00'
tRp4990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4991
I0
sg3642
g4039
sS'block_loop.thisRepN'
p4992
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4993
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p4994
Nsg70
Vn
sS'block_loop.thisTrialN'
p4995
I0
sg39
F0.9670304324818062
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\x19\x07\x04\xe0'
tRp4996
sa(dp4997
S'trial_loop.thisTrialN'
p4998
I96
sg3633
g4716
sS'block_loop.thisIndex'
p4999
g3627
sg38
S'left'
p5000
sg59
g63
sS'trial_loop.thisN'
p5001
I96
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p5002
g60
(g99
S'`\x00\x00\x00'
tRp5003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5004
I0
sg3642
g4723
sS'block_loop.thisRepN'
p5005
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5006
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p5007
Nsg70
Vn
sS'block_loop.thisTrialN'
p5008
I0
sg39
F0.98327045976020599
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19\x1f\x07\x1cP'
tRp5009
sa(dp5010
S'trial_loop.thisTrialN'
p5011
I97
sg3633
g4002
sS'block_loop.thisIndex'
p5012
g3627
sg38
S'right'
p5013
sg59
g63
sS'trial_loop.thisN'
p5014
I97
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5015
g60
(g99
S'a\x00\x00\x00'
tRp5016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5017
I0
sg3642
g4009
sS'block_loop.thisRepN'
p5018
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5019
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5020
Nsg70
Vn
sS'block_loop.thisTrialN'
p5021
I0
sg39
F1.4833217773684737
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19%\x073\xc0'
tRp5022
sa(dp5023
S'trial_loop.thisTrialN'
p5024
I98
sg3633
S'7-olives.png'
p5025
sS'block_loop.thisIndex'
p5026
g3627
sg38
S'left'
p5027
sg59
g63
sS'trial_loop.thisN'
p5028
I98
sg33
g4331
sg64
g65
sS'trial_loop.thisIndex'
p5029
g60
(g99
S'b\x00\x00\x00'
tRp5030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5031
I0
sg3642
S'22-daim.png'
p5032
sS'block_loop.thisRepN'
p5033
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5034
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5035
Nsg70
Vn
sS'block_loop.thisTrialN'
p5036
I0
sg39
F1.5666826701581158
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x19+\x0f&\xe8'
tRp5037
sa(dp5038
S'trial_loop.thisTrialN'
p5039
I99
sg3633
g4129
sS'block_loop.thisIndex'
p5040
g3627
sg38
S'left'
p5041
sg59
g63
sS'trial_loop.thisN'
p5042
I99
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5043
g60
(g99
S'c\x00\x00\x00'
tRp5044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5045
I0
sg3642
g4136
sS'block_loop.thisRepN'
p5046
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5047
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5048
Nsg70
Vn
sS'block_loop.thisTrialN'
p5049
I0
sg39
F1.0666935038752854
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x192\t\x08\x80'
tRp5050
sa(dp5051
S'trial_loop.thisTrialN'
p5052
I100
sg3633
g3848
sS'block_loop.thisIndex'
p5053
g3627
sg38
S'left'
p5054
sg59
g63
sS'trial_loop.thisN'
p5055
I100
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5056
g60
(g99
S'd\x00\x00\x00'
tRp5057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5058
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5059
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5060
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5061
Nsg70
Vn
sS'block_loop.thisTrialN'
p5062
I0
sg39
F2.5670045455999571
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x198\n\x8b8'
tRp5063
sa(dp5064
S'trial_loop.thisTrialN'
p5065
I101
sg3633
g4902
sS'block_loop.thisIndex'
p5066
g3627
sg38
S'right'
p5067
sg59
g63
sS'trial_loop.thisN'
p5068
I101
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5069
g60
(g99
S'e\x00\x00\x00'
tRp5070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5071
I0
sg3642
g4909
sS'block_loop.thisRepN'
p5072
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5073
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5074
Nsg70
Vn
sS'block_loop.thisTrialN'
p5075
I0
sg39
F0.93298119950941327
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a\x04\x04h\xe8'
tRp5076
sa(dp5077
S'trial_loop.thisTrialN'
p5078
I102
sg3633
g4129
sS'block_loop.thisIndex'
p5079
g3627
sg38
S'left'
p5080
sg59
g63
sS'trial_loop.thisN'
p5081
I102
sg33
g3767
sg64
g65
sS'trial_loop.thisIndex'
p5082
g60
(g99
S'f\x00\x00\x00'
tRp5083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5084
I0
sg3642
g4136
sS'block_loop.thisRepN'
p5085
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5086
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5087
Nsg70
Vn
sS'block_loop.thisTrialN'
p5088
I0
sg39
F1.3333181281159341
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a\n\x04\x03X'
tRp5089
sa(dp5090
S'trial_loop.thisTrialN'
p5091
I103
sg3633
g4209
sS'block_loop.thisIndex'
p5092
g3627
sg38
S'left'
p5093
sg59
g63
sS'trial_loop.thisN'
p5094
I103
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5095
g60
(g99
S'g\x00\x00\x00'
tRp5096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5097
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5098
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5099
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5100
Nsg70
Vn
sS'block_loop.thisTrialN'
p5101
I0
sg39
F1.2498908075331201
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a\x10\t\x95 '
tRp5102
sa(dp5103
S'trial_loop.thisTrialN'
p5104
I104
sg3633
g4945
sS'block_loop.thisIndex'
p5105
g3627
sg38
S'right'
p5106
sg59
g63
sS'trial_loop.thisN'
p5107
I104
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5108
g60
(g99
S'h\x00\x00\x00'
tRp5109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5110
I0
sg3642
g4952
sS'block_loop.thisRepN'
p5111
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5112
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5113
Nsg70
Vn
sS'block_loop.thisTrialN'
p5114
I0
sg39
F1.1998655478664659
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a\x16\r\xf68'
tRp5115
sa(dp5116
S'trial_loop.thisTrialN'
p5117
I105
sg3633
g4809
sS'block_loop.thisIndex'
p5118
g3627
sg38
S'right'
p5119
sg59
g63
sS'trial_loop.thisN'
p5120
I105
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5121
g60
(g99
S'i\x00\x00\x00'
tRp5122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5123
I0
sg3642
g4816
sS'block_loop.thisRepN'
p5124
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5125
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5126
Nsg70
Vn
sS'block_loop.thisTrialN'
p5127
I0
sg39
F1.0833112857690139
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a\x1d\x02\x1e\xf8'
tRp5128
sa(dp5129
S'trial_loop.thisTrialN'
p5130
I106
sg3633
S'8-liquorice_catherine_wheels.png'
p5131
sS'block_loop.thisIndex'
p5132
g3627
sg38
S'right'
p5133
sg59
g63
sS'trial_loop.thisN'
p5134
I106
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5135
g60
(g99
S'j\x00\x00\x00'
tRp5136
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5137
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p5138
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F1.1333559320873974
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a#\x03\xe4\x18'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4930
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'right'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g3733
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4937
sS'block_loop.thisRepN'
p5152
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F1.1333160183921791
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a)\x06\x97\x80'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4209
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'left'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4220
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F1.3666486294778224
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a/\t\x10P'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g3803
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5178
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F1.2999522746249568
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1a5\x0f\x1b0'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g5025
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'left'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4338
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.1170759911146888
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x00\x04\xf1\xa0'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4902
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4909
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.91628530081197823
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x06\x07+\xf0'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4344
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'left'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g4230
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4351
sS'block_loop.thisRepN'
p5217
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F1.3166387650935576
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x0c\x06\x8f\xb0'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4359
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4366
sS'block_loop.thisRepN'
p5230
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F1.7500002850974852
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x12\x0b\xe2\xf8'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4269
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'left'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4276
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F1.1999661873978766
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x19\x08\x9f\x08'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3756
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3764
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F1.0169670267259789
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b\x1f\x0c\n\x08'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4269
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'left'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4276
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F1.4166388221128727
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b%\x0c\xd9\x10'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4930
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'right'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4937
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F1.216628159454558
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b,\x04YH'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g4017
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g4024
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vn
sS'block_loop.thisTrialN'
p5298
I0
sg39
F1.0665828859200701
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b2\x08=`'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g3833
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'left'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g3840
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vn
sS'block_loop.thisTrialN'
p5311
I0
sg39
F0.80001328555863438
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1b8\t\xc4\x00'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4297
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'right'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4305
sS'block_loop.thisRepN'
p5321
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vn
sS'block_loop.thisTrialN'
p5324
I0
sg39
F1.0170348800074862
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c\x02\x07;\x90'
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g4226
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'right'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g4234
sS'block_loop.thisRepN'
p5334
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vn
sS'block_loop.thisTrialN'
p5337
I0
sg39
F1.4333053557338644
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c\x08\x08\n\x98'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g5131
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'right'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g5138
sS'block_loop.thisRepN'
p5347
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vn
sS'block_loop.thisTrialN'
p5350
I0
sg39
F1.1332695474475258
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c\x0e\x0f\x0b\x90'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g4584
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g4591
sS'block_loop.thisRepN'
p5360
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vn
sS'block_loop.thisTrialN'
p5363
I0
sg39
F1.2999277562112184
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c\x15\x02|\xb8'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g3786
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'left'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vn
sS'block_loop.thisTrialN'
p5376
I0
sg39
F1.2999950392968458
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c\x1b\x07\x95h'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g3705
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'right'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vn
sS'block_loop.thisTrialN'
p5389
I0
sg39
F1.3836065330742713
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c!\x0c\xae\x18'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3634
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'left'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vn
sS'block_loop.thisTrialN'
p5402
I0
sg39
F1.1665370421887928
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c(\x03\xb1P'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
S'25-kitkat.png'
p5406
sS'block_loop.thisIndex'
p5407
g3627
sg38
S'left'
p5408
sg59
g63
sS'trial_loop.thisN'
p5409
I127
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p5410
g60
(g99
S'\x7f\x00\x00\x00'
tRp5411
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5412
I0
sg3642
S'31-hobnobs.png'
p5413
sS'block_loop.thisRepN'
p5414
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F1.0499730867650214
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c.\x06\xa38'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4945
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'right'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4952
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F1.0332081943961384
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c4\x07\xebX'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4344
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'left'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4351
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F1.1166477741844574
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1c:\x08\xf8\xe0'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3833
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3840
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.85000176760695467
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d\x04\x0b30'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4465
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'left'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4472
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F1.4333327251242736
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d\n\t\xa0\xd8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4359
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4366
sS'block_loop.thisRepN'
p5479
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.88333597523887875
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d\x11\x01[\xa8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4584
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4591
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.2833074084373948
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d\x17\x00\x07\xd0'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3848
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3856
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F1.4832641876073467
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d\x1d\x04\xe2\x00'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3634
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'left'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.2335957563755073
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d#\x0c\xd5('
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3833
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3840
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.86667685416250606
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d*\x01\xb5\x80'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4129
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3760
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4136
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3760
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3767
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.94998101248347666
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d0\x00#('
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3786
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F1.0500072985032602
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1d5\x0e\xff\xd8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3803
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F1.3333269661488885
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x00\x01\x05\xb8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4902
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4909
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F1.1167618133149517
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x06\x06\xd6\x00'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4002
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4009
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F1.2833458966451872
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x0c\t\x10P'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g5131
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3859
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g5138
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F1.2166512523781421
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x12\r\xea\x80'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4032
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0832545513021614
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x19\x02Q\xc0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4297
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4308
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4305
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.96666864334656566
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e\x1f\x04\x16\xe0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4099
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4107
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.96705552109051496
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e%\x04.P'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4017
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4024
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F1.0166713802827871
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e+\x04E\xc0'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3910
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3921
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3918
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F1.0333037021664495
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e1\x04\xd6H'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4209
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4217
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.2998493543109362
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1e7\x05\xdf\xe8'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4465
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3951
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4472
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F1.0665572271154815
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f\x01\n\xf8\x98'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4584
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4591
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.066896778624141
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f\x07\x0c{P'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g5406
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g5413
sS'block_loop.thisRepN'
p5726
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.99993499769698246
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f\r\x0e\x01\xf0'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3803
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3807
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3811
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3807
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3814
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.94992969487611845
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f\x13\x0e\x92x'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4327
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'right'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4338
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4335
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F1.333222620345623
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f\x19\x0eoP'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3865
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F1.3829622119937994
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f \x04\xba\xf0'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3705
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.2499526737610722
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f&\x0b\x04P'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4809
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4816
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.94995649407246674
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f-\x00#('
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g5025
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g4338
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5804
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F1.2999129311265278
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f2\x0f\x03\xc0'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g5131
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g5138
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F1.1832771310491808
sg34
g753
(S'\x07\xdf\x07\x0f\x11\x1f9\x04\xd6H'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g5025
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'left'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4331
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g5032
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F1.216562301857266
sg34
g753
(S'\x07\xdf\x07\x0f\x11 \x03\x08E0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4099
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4107
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.96668489392141055
sg34
g753
(S'\x07\xdf\x07\x0f\x11 \t\x0c)H'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g5131
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3852
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g5138
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3852
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3859
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.94993083526969713
sg34
g753
(S'\x07\xdf\x07\x0f\x11 \x0f\x0c\x06 '
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4032
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4039
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3709
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.80000159654809977
sg34
g753
(S'\x07\xdf\x07\x0f\x11 \x15\x0b\xdf\x10'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g5406
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g5413
sS'block_loop.thisRepN'
p5882
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.249980328249876
sg34
g753
(S'\x07\xdf\x07\x0f\x11 \x1b\tZ\x88'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4809
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4816
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.88333055838120345
sg34
g753
(S'\x07\xdf\x07\x0f\x11 !\r} '
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3786
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3790
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3794
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3790
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g3797
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.98364935476638493
sg34
g753
(S"\x07\xdf\x07\x0f\x11 '\x0cc\xe0"
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4327
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g4331
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4335
sS'block_loop.thisRepN'
p5921
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.99998488981509581
sg34
g753
(S'\x07\xdf\x07\x0f\x11 -\x0c{P'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4584
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4213
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4591
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4213
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g4220
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.1166606035858422
sg34
g753
(S'\x07\xdf\x07\x0f\x11 3\r\x0b\xd8'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g3739
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3743
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g3747
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3743
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3750
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F1.0832938948024093
sg34
g753
(S'\x07\xdf\x07\x0f\x11 :\x00\x03\xe8'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3865
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3873
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.149724823582801
sg34
g753
(S'\x07\xdf\x07\x0f\x11!\x04\x01\xc9\x08'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4359
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4366
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.9836818559178937
sg34
g753
(S'\x07\xdf\x07\x0f\x11!\n\x04\xba\xf0'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3688
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.2499843196183065
sg34
g753
(S'\x07\xdf\x07\x0f\x11!\x10\x04\xd2`'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4465
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4472
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.9999432655331475
sg34
g753
(S'\x07\xdf\x07\x0f\x11!\x16\t3x'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4359
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4366
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.0333213782323583
sg34
g753
(S'\x07\xdf\x07\x0f\x11!\x1c\t\xc4\x00'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4344
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4351
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.6166523357496771
sg34
g753
(S'\x07\xdf\x07\x0f\x11!"\n\xcd\xa0'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4327
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'right'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4331
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4335
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.88370802789904701
sg34
g753
(S'\x07\xdf\x07\x0f\x11!)\x05f\xd0'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4809
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4816
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.2332450860540121
sg34
g753
(S'\x07\xdf\x07\x0f\x11!/\x04\x0f\x10'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4269
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4276
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F1.4499770211150462
sg34
g753
(S'\x07\xdf\x07\x0f\x11!5\x081\xa8'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3940
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3948
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F1.4999372784805018
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x00\x00ix'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4269
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4276
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F1.183387749004396
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x06\x08\\\xa0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4099
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4107
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.93330393024371006
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x0c\x0b\xc7\xa0'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g5406
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g5413
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F1.5333179570570792
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x12\x0b+`'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4017
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4024
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.93333586120024847
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x19\x04\x8f\xf8'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4930
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4937
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.88333911131667264
sg34
g753
(S'\x07\xdf\x07\x0f\x11"\x1f\x04.P'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4902
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3869
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4909
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3869
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3876
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.99974483744881582
sg34
g753
(S'\x07\xdf\x07\x0f\x11"%\x02\xd6\x90'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3985
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3989
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3993
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3989
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3996
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.85030625208128185
sg34
g753
(S'\x07\xdf\x07\x0f\x11"+\x03k\x00'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4716
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4723
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.91666676169916173
sg34
g753
(S'\x07\xdf\x07\x0f\x11"1\x01\x9a('
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3671
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F1.2165597359762614
sg34
g753
(S'\x07\xdf\x07\x0f\x11"7\x00\xbb\x80'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4945
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4952
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.183208422473399
sg34
g753
(S'\x07\xdf\x07\x0f\x11#\x01\x04\xa3\x80'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g5025
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4338
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g5032
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4331
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g4338
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.2000003991361154
sg34
g753
(S'\x07\xdf\x07\x0f\x11#\x07\x08\x0e\x80'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4945
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4952
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.98357893560387311
sg34
g753
(S'\x07\xdf\x07\x0f\x11#\r\x0b}h'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4930
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4937
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3726
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.3666514804554026
sg34
g753
(S'\x07\xdf\x07\x0f\x11#\x13\x0b\xcfp'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g5406
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g5413
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.0833144218449888
sg34
g753
(S'\x07\xdf\x07\x0f\x11#\x1a\x02\x98\x10'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3654
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.233348576563003
sg34
g753
(S'\x07\xdf\x07\x0f\x11# \x04]0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4465
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4472
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3951
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.2998849915384199
sg34
g753
(S'\x07\xdf\x07\x0f\x11#&\x08\x7f\xc8'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g3654
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.96703927051385108
sg34
g753
(S'\x07\xdf\x07\x0f\x11#,\r\x94\x90'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4297
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4301
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4305
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4301
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4308
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.2332730256403011
sg34
g753
(S'\x07\xdf\x07\x0f\x11#2\rqh'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4716
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3914
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4723
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3914
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3921
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.9165749601997959
sg34
g753
(S'\x07\xdf\x07\x0f\x11#9\x02Q\xc0'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4002
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4009
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.93332246160207433
sg34
g753
(S'\x07\xdf\x07\x0f\x11$\x03\x01\xb1\x98'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4344
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4236
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4351
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4236
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4230
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.8666255365551478
sg34
g753
(S'\x07\xdf\x07\x0f\x11$\t\x01\x15X'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F304.44228536695664
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'8-liquorice_catherine_wheels.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'8-liquorice_catherine_wheels.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'17-jacobs_mini_cheddars_redo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
S'17-jacobs_mini_cheddars_redo.png'
p6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6385
I2
sS'img_wrong'
p6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F1.9331516880065465
sg34
g753
(S'\x07\xdf\x07\x0f\x11*\x0b\x06\x0e\xc8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'13-mccoys_steak_crisps.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'3-ellas_strawberries_apples.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6386
S'13-mccoys_steak_crisps.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.1166740031821973
sg34
g753
(S'\x07\xdf\x07\x0f\x11*\x12\x05f\xd0'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'20-fruit_pastilles.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'20-fruit_pastilles.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'2-steamed_puddings.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6386
S'2-steamed_puddings.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F1.0665902984637796
sg34
g753
(S'\x07\xdf\x07\x0f\x11*\x18\x07\xa5\x08'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'1-treacle_cookies.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'21-nakd_banana_crunch.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'21-nakd_banana_crunch.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6386
S'1-treacle_cookies.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F1.1165465644571668
sg34
g753
(S"\x07\xdf\x07\x0f\x11*\x1e\t'\xc0"
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'51-mars.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'51-mars.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6386
S'27-hartleys_raspberries_jelly.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.91666562130740203
sg34
g753
(S'\x07\xdf\x07\x0f\x11*$\x0be\xf8'
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'2-steamed_puddings.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6464
g60
(g99
S'\x05\x00\x00\x00'
tRp6465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6466
I0
sg6380
S'20-fruit_pastilles.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6469
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vn
sS'block_loop.thisTrialN'
p6471
I0
sg39
F1.0336806014875037
sg34
g753
(S'\x07\xdf\x07\x0f\x11**\n\xc5\xd0'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'40-sardines.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'left'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'5-pineapple.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'5-pineapple.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
S'40-sardines.png'
p6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6486
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vn
sS'block_loop.thisTrialN'
p6488
I0
sg39
F1.1833216063096188
sg34
g753
(S'\x07\xdf\x07\x0f\x11*0\x0b\xcfp'
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
S'7-olives.png'
p6492
sS'block_loop.thisIndex'
p6493
g6365
sg38
S'left'
p6494
sg59
g63
sS'trial_loop.thisN'
p6495
I7
sg33
S'7-olives.png'
p6496
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
S'22-daim.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6502
I2
sg6386
S'22-daim.png'
p6503
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vn
sS'block_loop.thisTrialN'
p6505
I0
sg39
F1.1499902496543655
sg34
g753
(S'\x07\xdf\x07\x0f\x11*6\x0e\xff\xd8'
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'6-sour_patch_kids.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'right'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'6-sour_patch_kids.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'38-maltesers.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
S'38-maltesers.png'
p6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6520
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vn
sS'block_loop.thisTrialN'
p6522
I0
sg39
F0.91640190582256764
sg34
g753
(S'\x07\xdf\x07\x0f\x11+\x01\x02t\xe8'
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
g6392
sS'block_loop.thisIndex'
p6526
g6365
sg38
S'right'
p6527
sg59
g63
sS'trial_loop.thisN'
p6528
I9
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6529
g60
(g99
S'\t\x00\x00\x00'
tRp6530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6531
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6532
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6533
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vn
sS'block_loop.thisTrialN'
p6535
I0
sg39
F1.2999437216894876
sg34
g753
(S'\x07\xdf\x07\x0f\x11+\x07\x01\xd4\xc0'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
S'46-pistachios.png'
p6539
sS'block_loop.thisIndex'
p6540
g6365
sg38
S'right'
p6541
sg59
g63
sS'trial_loop.thisN'
p6542
I10
sg33
S'29-beans.png'
p6543
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
S'29-beans.png'
p6547
sS'block_loop.thisRepN'
p6548
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6549
I2
sg6386
S'46-pistachios.png'
p6550
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vn
sS'block_loop.thisTrialN'
p6552
I0
sg39
F1.2670055149319523
sg34
g753
(S'\x07\xdf\x07\x0f\x11+\r\x06\xedp'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'21-nakd_banana_crunch.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'left'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6560
g60
(g99
S'\x0b\x00\x00\x00'
tRp6561
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6562
I0
sg6380
S'1-treacle_cookies.png'
p6563
sS'block_loop.thisRepN'
p6564
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6565
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p6566
Nsg70
Vn
sS'block_loop.thisTrialN'
p6567
I0
sg39
F0.94997046386561124
sg34
g753
(S'\x07\xdf\x07\x0f\x11+\x13\x0b\x89 '
tRp6568
sa(dp6569
S'trial_loop.thisTrialN'
p6570
I12
sg6371
S'29-beans.png'
p6571
sS'block_loop.thisIndex'
p6572
g6365
sg38
S'left'
p6573
sg59
g63
sS'trial_loop.thisN'
p6574
I12
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6575
g60
(g99
S'\x0c\x00\x00\x00'
tRp6576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6577
I0
sg6380
S'46-pistachios.png'
p6578
sS'block_loop.thisRepN'
p6579
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6580
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p6581
Nsg70
Vn
sS'block_loop.thisTrialN'
p6582
I0
sg39
F1.1000057589772041
sg34
g753
(S"\x07\xdf\x07\x0f\x11+\x19\x0b'x"
tRp6583
sa(dp6584
S'trial_loop.thisTrialN'
p6585
I13
sg6371
S'26-walkers_smoky_bacon.png'
p6586
sS'block_loop.thisIndex'
p6587
g6365
sg38
S'right'
p6588
sg59
g63
sS'trial_loop.thisN'
p6589
I13
sg33
S'44-crunch.png'
p6590
sg64
g65
sS'trial_loop.thisIndex'
p6591
g60
(g99
S'\r\x00\x00\x00'
tRp6592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6593
I0
sg6380
S'44-crunch.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6596
I2
sg6386
S'26-walkers_smoky_bacon.png'
p6597
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vn
sS'block_loop.thisTrialN'
p6599
I0
sg39
F1.2331701053262805
sg34
g753
(S"\x07\xdf\x07\x0f\x11+\x1f\r'0"
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6603
sS'block_loop.thisIndex'
p6604
g6365
sg38
S'right'
p6605
sg59
g63
sS'trial_loop.thisN'
p6606
I14
sg33
S'18-mms.png'
p6607
sg64
g65
sS'trial_loop.thisIndex'
p6608
g60
(g99
S'\x0e\x00\x00\x00'
tRp6609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6610
I0
sg6380
S'18-mms.png'
p6611
sS'block_loop.thisRepN'
p6612
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6613
I2
sg6386
S'43-mrporky_pork_crackles_redo.png'
p6614
sg55
g11
sS'block_loop.thisTrial'
p6615
Nsg70
Vn
sS'block_loop.thisTrialN'
p6616
I0
sg39
F1.1666148738950142
sg34
g753
(S'\x07\xdf\x07\x0f\x11+&\x02\x07\x88'
tRp6617
sa(dp6618
S'trial_loop.thisTrialN'
p6619
I15
sg6371
S'31-hobnobs.png'
p6620
sS'block_loop.thisIndex'
p6621
g6365
sg38
S'right'
p6622
sg59
g63
sS'trial_loop.thisN'
p6623
I15
sg33
S'25-kitkat.png'
p6624
sg64
g65
sS'trial_loop.thisIndex'
p6625
g60
(g99
S'\x0f\x00\x00\x00'
tRp6626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6627
I0
sg6380
S'25-kitkat.png'
p6628
sS'block_loop.thisRepN'
p6629
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6630
I2
sg6386
S'31-hobnobs.png'
p6631
sg55
g11
sS'block_loop.thisTrial'
p6632
Nsg70
Vn
sS'block_loop.thisTrialN'
p6633
I0
sg39
F0.76668221400177572
sg34
g753
(S'\x07\xdf\x07\x0f\x11+,\x04\xf9p'
tRp6634
sa(dp6635
S'trial_loop.thisTrialN'
p6636
I16
sg6371
S'33-ambrosia_rice.png'
p6637
sS'block_loop.thisIndex'
p6638
g6365
sg38
S'left'
p6639
sg59
g63
sS'trial_loop.thisN'
p6640
I16
sg33
S'33-ambrosia_rice.png'
p6641
sg64
g65
sS'trial_loop.thisIndex'
p6642
g60
(g99
S'\x10\x00\x00\x00'
tRp6643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6644
I0
sg6380
S'23-crunchie_redo.png'
p6645
sS'block_loop.thisRepN'
p6646
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6647
I2
sg6386
S'23-crunchie_redo.png'
p6648
sg55
g11
sS'block_loop.thisTrial'
p6649
Nsg70
Vn
sS'block_loop.thisTrialN'
p6650
I0
sg39
F0.89987763601311599
sg34
g753
(S'\x07\xdf\x07\x0f\x11+2\x01\xf7\xe8'
tRp6651
sa(dp6652
S'trial_loop.thisTrialN'
p6653
I17
sg6371
S'5-pineapple.png'
p6654
sS'block_loop.thisIndex'
p6655
g6365
sg38
S'right'
p6656
sg59
g63
sS'trial_loop.thisN'
p6657
I17
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p6658
g60
(g99
S'\x11\x00\x00\x00'
tRp6659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6660
I0
sg6380
S'40-sardines.png'
p6661
sS'block_loop.thisRepN'
p6662
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6663
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p6664
Nsg70
Vn
sS'block_loop.thisTrialN'
p6665
I0
sg39
F0.94999897364687058
sg34
g753
(S'\x07\xdf\x07\x0f\x11+8\x01\x1d('
tRp6666
sa(dp6667
S'trial_loop.thisTrialN'
p6668
I18
sg6371
S'25-kitkat.png'
p6669
sS'block_loop.thisIndex'
p6670
g6365
sg38
S'left'
p6671
sg59
g63
sS'trial_loop.thisN'
p6672
I18
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p6673
g60
(g99
S'\x12\x00\x00\x00'
tRp6674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6675
I0
sg6380
S'31-hobnobs.png'
p6676
sS'block_loop.thisRepN'
p6677
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6678
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p6679
Nsg70
Vn
sS'block_loop.thisTrialN'
p6680
I0
sg39
F0.71665068218135275
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x02\x00\xbb\x80'
tRp6681
sa(dp6682
S'trial_loop.thisTrialN'
p6683
I19
sg6371
S'42-mrkipling_lemon_slices.png'
p6684
sS'block_loop.thisIndex'
p6685
g6365
sg38
S'right'
p6686
sg59
g63
sS'trial_loop.thisN'
p6687
I19
sg33
S'16-skips_prawn.png'
p6688
sg64
g65
sS'trial_loop.thisIndex'
p6689
g60
(g99
S'\x13\x00\x00\x00'
tRp6690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6691
I0
sg6380
S'16-skips_prawn.png'
p6692
sS'block_loop.thisRepN'
p6693
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6694
I2
sg6386
S'42-mrkipling_lemon_slices.png'
p6695
sg55
g11
sS'block_loop.thisTrial'
p6696
Nsg70
Vn
sS'block_loop.thisTrialN'
p6697
I0
sg39
F1.1832346514729579
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x07\x0cD\xa0'
tRp6698
sa(dp6699
S'trial_loop.thisTrialN'
p6700
I20
sg6371
S'41-peanuts_redo.png'
p6701
sS'block_loop.thisIndex'
p6702
g6365
sg38
S'left'
p6703
sg59
g63
sS'trial_loop.thisN'
p6704
I20
sg33
S'41-peanuts_redo.png'
p6705
sg64
g65
sS'trial_loop.thisIndex'
p6706
g60
(g99
S'\x14\x00\x00\x00'
tRp6707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6708
I0
sg6380
S'45-chewy_nougat_redo.png'
p6709
sS'block_loop.thisRepN'
p6710
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6711
I2
sg6386
S'45-chewy_nougat_redo.png'
p6712
sg55
g11
sS'block_loop.thisTrial'
p6713
Nsg70
Vn
sS'block_loop.thisTrialN'
p6714
I0
sg39
F0.83334008064775844
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x0e\x002\xc8'
tRp6715
sa(dp6716
S'trial_loop.thisTrialN'
p6717
I21
sg6371
g6492
sS'block_loop.thisIndex'
p6718
g6365
sg38
S'left'
p6719
sg59
g63
sS'trial_loop.thisN'
p6720
I21
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6721
g60
(g99
S'\x15\x00\x00\x00'
tRp6722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6723
I0
sg6380
g6500
sS'block_loop.thisRepN'
p6724
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6725
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p6726
Nsg70
Vn
sS'block_loop.thisTrialN'
p6727
I0
sg39
F1.0503918954673281
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x13\ri\x98'
tRp6728
sa(dp6729
S'trial_loop.thisTrialN'
p6730
I22
sg6371
S'27-hartleys_raspberries_jelly.png'
p6731
sS'block_loop.thisIndex'
p6732
g6365
sg38
S'right'
p6733
sg59
g63
sS'trial_loop.thisN'
p6734
I22
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6735
g60
(g99
S'\x16\x00\x00\x00'
tRp6736
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6737
I0
sg6380
S'51-mars.png'
p6738
sS'block_loop.thisRepN'
p6739
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6740
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p6741
Nsg70
Vn
sS'block_loop.thisTrialN'
p6742
I0
sg39
F0.80004721220029751
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x19\x0e\xb1\xb8'
tRp6743
sa(dp6744
S'trial_loop.thisTrialN'
p6745
I23
sg6371
S'19-caramello_redo.png'
p6746
sS'block_loop.thisIndex'
p6747
g6365
sg38
S'left'
p6748
sg59
g63
sS'trial_loop.thisN'
p6749
I23
sg33
S'19-caramello_redo.png'
p6750
sg64
g65
sS'trial_loop.thisIndex'
p6751
g60
(g99
S'\x17\x00\x00\x00'
tRp6752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6753
I0
sg6380
S'30-spaghetti_hoops.png'
p6754
sS'block_loop.thisRepN'
p6755
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6756
I2
sg6386
S'30-spaghetti_hoops.png'
p6757
sg55
g11
sS'block_loop.thisTrial'
p6758
Nsg70
Vn
sS'block_loop.thisTrialN'
p6759
I0
sg39
F1.2166541033566318
sg34
g753
(S'\x07\xdf\x07\x0f\x11,\x1f\x0c)H'
tRp6760
sa(dp6761
S'trial_loop.thisTrialN'
p6762
I24
sg6371
g6603
sS'block_loop.thisIndex'
p6763
g6365
sg38
S'right'
p6764
sg59
g63
sS'trial_loop.thisN'
p6765
I24
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6766
g60
(g99
S'\x18\x00\x00\x00'
tRp6767
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6768
I0
sg6380
g6611
sS'block_loop.thisRepN'
p6769
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6770
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p6771
Nsg70
Vn
sS'block_loop.thisTrialN'
p6772
I0
sg39
F1.3832729686200764
sg34
g753
(S'\x07\xdf\x07\x0f\x11,&\x00\xcf\x08'
tRp6773
sa(dp6774
S'trial_loop.thisTrialN'
p6775
I25
sg6371
S'4-corn.png'
p6776
sS'block_loop.thisIndex'
p6777
g6365
sg38
S'left'
p6778
sg59
g63
sS'trial_loop.thisN'
p6779
I25
sg33
S'4-corn.png'
p6780
sg64
g65
sS'trial_loop.thisIndex'
p6781
g60
(g99
S'\x19\x00\x00\x00'
tRp6782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6783
I0
sg6380
S'10-bounty_redo.png'
p6784
sS'block_loop.thisRepN'
p6785
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6786
I2
sg6386
S'10-bounty_redo.png'
p6787
sg55
g11
sS'block_loop.thisTrial'
p6788
Nsg70
Vn
sS'block_loop.thisTrialN'
p6789
I0
sg39
F1.3939367675829999
sg34
g753
(S'\x07\xdf\x07\x0f\x11,,\x07\x14\x80'
tRp6790
sa(dp6791
S'trial_loop.thisTrialN'
p6792
I26
sg6371
g6637
sS'block_loop.thisIndex'
p6793
g6365
sg38
S'left'
p6794
sg59
g63
sS'trial_loop.thisN'
p6795
I26
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p6796
g60
(g99
S'\x1a\x00\x00\x00'
tRp6797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6798
I0
sg6380
g6645
sS'block_loop.thisRepN'
p6799
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6800
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p6801
Nsg70
Vn
sS'block_loop.thisTrialN'
p6802
I0
sg39
F0.9170442312151863
sg34
g753
(S'\x07\xdf\x07\x0f\x11,2\x0e\x8e\x90'
tRp6803
sa(dp6804
S'trial_loop.thisTrialN'
p6805
I27
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6806
sS'block_loop.thisIndex'
p6807
g6365
sg38
S'right'
p6808
sg59
g63
sS'trial_loop.thisN'
p6809
I27
sg33
S'36-fig_rolls.png'
p6810
sg64
g65
sS'trial_loop.thisIndex'
p6811
g60
(g99
S'\x1b\x00\x00\x00'
tRp6812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6813
I0
sg6380
S'36-fig_rolls.png'
p6814
sS'block_loop.thisRepN'
p6815
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6816
I2
sg6386
S'34-hula_hoops_bbq_beef_redo.png'
p6817
sg55
g11
sS'block_loop.thisTrial'
p6818
Nsg70
Vn
sS'block_loop.thisTrialN'
p6819
I0
sg39
F0.89999224533858069
sg34
g753
(S'\x07\xdf\x07\x0f\x11,8\r\xaf\xe8'
tRp6820
sa(dp6821
S'trial_loop.thisTrialN'
p6822
I28
sg6371
S'22-daim.png'
p6823
sS'block_loop.thisIndex'
p6824
g6365
sg38
S'right'
p6825
sg59
g63
sS'trial_loop.thisN'
p6826
I28
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6827
g60
(g99
S'\x1c\x00\x00\x00'
tRp6828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6829
I0
sg6380
S'7-olives.png'
p6830
sS'block_loop.thisRepN'
p6831
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6832
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p6833
Nsg70
Vn
sS'block_loop.thisTrialN'
p6834
I0
sg39
F0.81666727487572643
sg34
g753
(S'\x07\xdf\x07\x0f\x11-\x02\x0c\x96\xa8'
tRp6835
sa(dp6836
S'trial_loop.thisTrialN'
p6837
I29
sg6371
S'48-twix.png'
p6838
sS'block_loop.thisIndex'
p6839
g6365
sg38
S'left'
p6840
sg59
g63
sS'trial_loop.thisN'
p6841
I29
sg33
S'48-twix.png'
p6842
sg64
g65
sS'trial_loop.thisIndex'
p6843
g60
(g99
S'\x1d\x00\x00\x00'
tRp6844
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6845
I0
sg6380
S'50-polo.png'
p6846
sS'block_loop.thisRepN'
p6847
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6848
I2
sg6386
S'50-polo.png'
p6849
sg55
g11
sS'block_loop.thisTrial'
p6850
Nsg70
Vn
sS'block_loop.thisTrialN'
p6851
I0
sg39
F0.88330832075189392
sg34
g753
(S'\x07\xdf\x07\x0f\x11-\x08\nL\xb8'
tRp6852
sa(dp6853
S'trial_loop.thisTrialN'
p6854
I30
sg6371
S'44-crunch.png'
p6855
sS'block_loop.thisIndex'
p6856
g6365
sg38
S'left'
p6857
sg59
g63
sS'trial_loop.thisN'
p6858
I30
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p6859
g60
(g99
S'\x1e\x00\x00\x00'
tRp6860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6861
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6862
sS'block_loop.thisRepN'
p6863
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6864
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p6865
Nsg70
Vn
sS'block_loop.thisTrialN'
p6866
I0
sg39
F1.0999302080526832
sg34
g753
(S'\x07\xdf\x07\x0f\x11-\x0e\t3x'
tRp6867
sa(dp6868
S'trial_loop.thisTrialN'
p6869
I31
sg6371
S'35-raisins.png'
p6870
sS'block_loop.thisIndex'
p6871
g6365
sg38
S'right'
p6872
sg59
g63
sS'trial_loop.thisN'
p6873
I31
sg33
S'49-yorkie.png'
p6874
sg64
g65
sS'trial_loop.thisIndex'
p6875
g60
(g99
S'\x1f\x00\x00\x00'
tRp6876
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6877
I0
sg6380
S'49-yorkie.png'
p6878
sS'block_loop.thisRepN'
p6879
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6880
I2
sg6386
S'35-raisins.png'
p6881
sg55
g11
sS'block_loop.thisTrial'
p6882
Nsg70
Vn
sS'block_loop.thisTrialN'
p6883
I0
sg39
F1.099775399936334
sg34
g753
(S'\x07\xdf\x07\x0f\x11-\x14\x0b30'
tRp6884
sa(dp6885
S'trial_loop.thisTrialN'
p6886
I32
sg6371
g6776
sS'block_loop.thisIndex'
p6887
g6365
sg38
S'left'
p6888
sg59
g63
sS'trial_loop.thisN'
p6889
I32
sg33
g6780
sg64
g65
sS'trial_loop.thisIndex'
p6890
g60
(g99
S' \x00\x00\x00'
tRp6891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6892
I0
sg6380
g6784
sS'block_loop.thisRepN'
p6893
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6894
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p6895
Nsg70
Vn
sS'block_loop.thisTrialN'
p6896
I0
sg39
F1.3832994827189395
sg34
g753
(S'\x07\xdf\x07\x0f\x11-\x1a\r2\xe8'
tRp6897
sa(dp6898
S'trial_loop.thisTrialN'
p6899
I33
sg6371
S'18-mms.png'
p6900
sS'block_loop.thisIndex'
p6901
g6365
sg38
S'left'
p6902
sg59
g63
sS'trial_loop.thisN'
p6903
I33
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6904
g60
(g99
S'!\x00\x00\x00'
tRp6905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6906
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6907
sS'block_loop.thisRepN'
p6908
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6909
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p6910
Nsg70
Vn
sS'block_loop.thisTrialN'
p6911
I0
sg39
F1.2333052416961436
sg34
g753
(S'\x07\xdf\x07\x0f\x11-!\x04:\x08'
tRp6912
sa(dp6913
S'trial_loop.thisTrialN'
p6914
I34
sg6371
g6776
sS'block_loop.thisIndex'
p6915
g6365
sg38
S'left'
p6916
sg59
g63
sS'trial_loop.thisN'
p6917
I34
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p6918
g60
(g99
S'"\x00\x00\x00'
tRp6919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6920
I0
sg6380
g6784
sS'block_loop.thisRepN'
p6921
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6922
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p6923
Nsg70
Vn
sS'block_loop.thisTrialN'
p6924
I0
sg39
F1.2999579765819362
sg34
g753
(S"\x07\xdf\x07\x0f\x11-'\x08\\\xa0"
tRp6925
sa(dp6926
S'trial_loop.thisTrialN'
p6927
I35
sg6371
g6684
sS'block_loop.thisIndex'
p6928
g6365
sg38
S'right'
p6929
sg59
g63
sS'trial_loop.thisN'
p6930
I35
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p6931
g60
(g99
S'#\x00\x00\x00'
tRp6932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6933
I0
sg6380
g6692
sS'block_loop.thisRepN'
p6934
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6935
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p6936
Nsg70
Vn
sS'block_loop.thisTrialN'
p6937
I0
sg39
F0.91658579391696549
sg34
g753
(S'\x07\xdf\x07\x0f\x11--\ruP'
tRp6938
sa(dp6939
S'trial_loop.thisTrialN'
p6940
I36
sg6371
g6571
sS'block_loop.thisIndex'
p6941
g6365
sg38
S'left'
p6942
sg59
g63
sS'trial_loop.thisN'
p6943
I36
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6944
g60
(g99
S'$\x00\x00\x00'
tRp6945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6946
I0
sg6380
g6578
sS'block_loop.thisRepN'
p6947
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6948
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p6949
Nsg70
Vn
sS'block_loop.thisTrialN'
p6950
I0
sg39
F1.183428803091374
sg34
g753
(S'\x07\xdf\x07\x0f\x11-3\x0c\x96\xa8'
tRp6951
sa(dp6952
S'trial_loop.thisTrialN'
p6953
I37
sg6371
g6372
sS'block_loop.thisIndex'
p6954
g6365
sg38
S'right'
p6955
sg59
g63
sS'trial_loop.thisN'
p6956
I37
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p6957
g60
(g99
S'%\x00\x00\x00'
tRp6958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6959
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6960
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6961
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6962
Nsg70
Vn
sS'block_loop.thisTrialN'
p6963
I0
sg39
F1.1166768541625061
sg34
g753
(S'\x07\xdf\x07\x0f\x11-:\x00\xc3P'
tRp6964
sa(dp6965
S'trial_loop.thisTrialN'
p6966
I38
sg6371
g6654
sS'block_loop.thisIndex'
p6967
g6365
sg38
S'right'
p6968
sg59
g63
sS'trial_loop.thisN'
p6969
I38
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p6970
g60
(g99
S'&\x00\x00\x00'
tRp6971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6972
I0
sg6380
g6661
sS'block_loop.thisRepN'
p6973
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6974
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p6975
Nsg70
Vn
sS'block_loop.thisTrialN'
p6976
I0
sg39
F1.0333188123513537
sg34
g753
(S'\x07\xdf\x07\x0f\x11.\x04\x02\xfd\xa0'
tRp6977
sa(dp6978
S'trial_loop.thisTrialN'
p6979
I39
sg6371
g6556
sS'block_loop.thisIndex'
p6980
g6365
sg38
S'left'
p6981
sg59
g63
sS'trial_loop.thisN'
p6982
I39
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6983
g60
(g99
S"'\x00\x00\x00"
tRp6984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6985
I0
sg6380
g6563
sS'block_loop.thisRepN'
p6986
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6987
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p6988
Nsg70
Vn
sS'block_loop.thisTrialN'
p6989
I0
sg39
F0.93334755021169258
sg34
g753
(S'\x07\xdf\x07\x0f\x11.\n\x04\x07@'
tRp6990
sa(dp6991
S'trial_loop.thisTrialN'
p6992
I40
sg6371
g6669
sS'block_loop.thisIndex'
p6993
g6365
sg38
S'left'
p6994
sg59
g63
sS'trial_loop.thisN'
p6995
I40
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p6996
g60
(g99
S'(\x00\x00\x00'
tRp6997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6998
I0
sg6380
g6676
sS'block_loop.thisRepN'
p6999
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7000
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7001
Nsg70
Vn
sS'block_loop.thisTrialN'
p7002
I0
sg39
F0.83335319514844741
sg34
g753
(S'\x07\xdf\x07\x0f\x11.\x10\x03\xa5\x98'
tRp7003
sa(dp7004
S'trial_loop.thisTrialN'
p7005
I41
sg6371
g6586
sS'block_loop.thisIndex'
p7006
g6365
sg38
S'right'
p7007
sg59
g63
sS'trial_loop.thisN'
p7008
I41
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7009
g60
(g99
S')\x00\x00\x00'
tRp7010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7011
I0
sg6380
g6594
sS'block_loop.thisRepN'
p7012
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7013
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p7014
Nsg70
Vn
sS'block_loop.thisTrialN'
p7015
I0
sg39
F0.91664851543828263
sg34
g753
(S'\x07\xdf\x07\x0f\x11.\x16\x01\x9a('
tRp7016
sa(dp7017
S'trial_loop.thisTrialN'
p7018
I42
sg6371
S'10-bounty_redo.png'
p7019
sS'block_loop.thisIndex'
p7020
g6365
sg38
S'right'
p7021
sg59
g63
sS'trial_loop.thisN'
p7022
I42
sg33
g6780
sg64
g65
sS'trial_loop.thisIndex'
p7023
g60
(g99
S'*\x00\x00\x00'
tRp7024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7025
I0
sg6380
S'4-corn.png'
p7026
sS'block_loop.thisRepN'
p7027
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7028
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p7029
Nsg70
Vn
sS'block_loop.thisTrialN'
p7030
I0
sg39
F1.0166668187193864
sg34
g753
(S'\x07\xdf\x07\x0f\x11.\x1c\x00\xbb\x80'
tRp7031
sa(dp7032
S'trial_loop.thisTrialN'
p7033
I43
sg6371
S'38-maltesers.png'
p7034
sS'block_loop.thisIndex'
p7035
g6365
sg38
S'left'
p7036
sg59
g63
sS'trial_loop.thisN'
p7037
I43
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7038
g60
(g99
S'+\x00\x00\x00'
tRp7039
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7040
I0
sg6380
S'6-sour_patch_kids.png'
p7041
sS'block_loop.thisRepN'
p7042
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7043
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p7044
Nsg70
Vn
sS'block_loop.thisTrialN'
p7045
I0
sg39
F0.88309449738517287
sg34
g753
(S'\x07\xdf\x07\x0f\x11."\x01\x8a\x88'
tRp7046
sa(dp7047
S'trial_loop.thisTrialN'
p7048
I44
sg6371
g6731
sS'block_loop.thisIndex'
p7049
g6365
sg38
S'right'
p7050
sg59
g63
sS'trial_loop.thisN'
p7051
I44
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7052
g60
(g99
S',\x00\x00\x00'
tRp7053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7054
I0
sg6380
g6738
sS'block_loop.thisRepN'
p7055
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7056
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7057
Nsg70
Vn
sS'block_loop.thisTrialN'
p7058
I0
sg39
F0.7500054168576753
sg34
g753
(S'\x07\xdf\x07\x0f\x11.(\x006\xb0'
tRp7059
sa(dp7060
S'trial_loop.thisTrialN'
p7061
I45
sg6371
g6475
sS'block_loop.thisIndex'
p7062
g6365
sg38
S'left'
p7063
sg59
g63
sS'trial_loop.thisN'
p7064
I45
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7065
g60
(g99
S'-\x00\x00\x00'
tRp7066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7067
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7068
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7069
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p7070
Nsg70
Vn
sS'block_loop.thisTrialN'
p7071
I0
sg39
F1.1500073555234849
sg34
g753
(S'\x07\xdf\x07\x0f\x11.-\x0c8\xe8'
tRp7072
sa(dp7073
S'trial_loop.thisTrialN'
p7074
I46
sg6371
g6460
sS'block_loop.thisIndex'
p7075
g6365
sg38
S'right'
p7076
sg59
g63
sS'trial_loop.thisN'
p7077
I46
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7078
g60
(g99
S'.\x00\x00\x00'
tRp7079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7080
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7081
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7082
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7083
Nsg70
Vn
sS'block_loop.thisTrialN'
p7084
I0
sg39
F1.0835248240382498
sg34
g753
(S'\x07\xdf\x07\x0f\x11.3\x0e\xf08'
tRp7085
sa(dp7086
S'trial_loop.thisTrialN'
p7087
I47
sg6371
g6539
sS'block_loop.thisIndex'
p7088
g6365
sg38
S'right'
p7089
sg59
g63
sS'trial_loop.thisN'
p7090
I47
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7091
g60
(g99
S'/\x00\x00\x00'
tRp7092
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7093
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7094
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7095
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7096
Nsg70
Vn
sS'block_loop.thisTrialN'
p7097
I0
sg39
F0.79997536754854082
sg34
g753
(S'\x07\xdf\x07\x0f\x11.:\x01o0'
tRp7098
sa(dp7099
S'trial_loop.thisTrialN'
p7100
I48
sg6371
g6746
sS'block_loop.thisIndex'
p7101
g6365
sg38
S'left'
p7102
sg59
g63
sS'trial_loop.thisN'
p7103
I48
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p7104
g60
(g99
S'0\x00\x00\x00'
tRp7105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7106
I0
sg6380
g6754
sS'block_loop.thisRepN'
p7107
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7108
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7109
Nsg70
Vn
sS'block_loop.thisTrialN'
p7110
I0
sg39
F0.96663044023625844
sg34
g753
(S'\x07\xdf\x07\x0f\x11/\x03\x0e)\x00'
tRp7111
sa(dp7112
S'trial_loop.thisTrialN'
p7113
I49
sg6371
g6372
sS'block_loop.thisIndex'
p7114
g6365
sg38
S'right'
p7115
sg59
g63
sS'trial_loop.thisN'
p7116
I49
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7117
g60
(g99
S'1\x00\x00\x00'
tRp7118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7119
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7120
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7121
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7122
Nsg70
Vn
sS'block_loop.thisTrialN'
p7123
I0
sg39
F0.98332491344444861
sg34
g753
(S'\x07\xdf\x07\x0f\x11/\t\x0e@p'
tRp7124
sa(dp7125
S'trial_loop.thisTrialN'
p7126
I50
sg6371
g6654
sS'block_loop.thisIndex'
p7127
g6365
sg38
S'right'
p7128
sg59
g63
sS'trial_loop.thisN'
p7129
I50
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7130
g60
(g99
S'2\x00\x00\x00'
tRp7131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7132
I0
sg6380
g6661
sS'block_loop.thisRepN'
p7133
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7134
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p7135
Nsg70
Vn
sS'block_loop.thisTrialN'
p7136
I0
sg39
F0.99993927416471706
sg34
g753
(S'\x07\xdf\x07\x0f\x11/\x0f\x0e\x96`'
tRp7137
sa(dp7138
S'trial_loop.thisTrialN'
p7139
I51
sg6371
S'16-skips_prawn.png'
p7140
sS'block_loop.thisIndex'
p7141
g6365
sg38
S'left'
p7142
sg59
g63
sS'trial_loop.thisN'
p7143
I51
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7144
g60
(g99
S'3\x00\x00\x00'
tRp7145
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7146
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7147
sS'block_loop.thisRepN'
p7148
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7149
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p7150
Nsg70
Vn
sS'block_loop.thisTrialN'
p7151
I0
sg39
F1.1669367493377649
sg34
g753
(S'\x07\xdf\x07\x0f\x11/\x15\x0e\xecP'
tRp7152
sa(dp7153
S'trial_loop.thisTrialN'
p7154
I52
sg6371
S'49-yorkie.png'
p7155
sS'block_loop.thisIndex'
p7156
g6365
sg38
S'left'
p7157
sg59
g63
sS'trial_loop.thisN'
p7158
I52
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p7159
g60
(g99
S'4\x00\x00\x00'
tRp7160
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7161
I0
sg6380
S'35-raisins.png'
p7162
sS'block_loop.thisRepN'
p7163
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7164
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p7165
Nsg70
Vn
sS'block_loop.thisTrialN'
p7166
I0
sg39
F0.71670342527977482
sg34
g753
(S'\x07\xdf\x07\x0f\x11/\x1c\x02\xd6\x90'
tRp7167
sa(dp7168
S'trial_loop.thisTrialN'
p7169
I53
sg6371
g6509
sS'block_loop.thisIndex'
p7170
g6365
sg38
S'right'
p7171
sg59
g63
sS'trial_loop.thisN'
p7172
I53
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7173
g60
(g99
S'5\x00\x00\x00'
tRp7174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7175
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7176
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7177
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p7178
Nsg70
Vn
sS'block_loop.thisTrialN'
p7179
I0
sg39
F0.78305167569124023
sg34
g753
(S'\x07\xdf\x07\x0f\x11/!\x0e%\x18'
tRp7180
sa(dp7181
S'trial_loop.thisTrialN'
p7182
I54
sg6371
g7140
sS'block_loop.thisIndex'
p7183
g6365
sg38
S'left'
p7184
sg59
g63
sS'trial_loop.thisN'
p7185
I54
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7186
g60
(g99
S'6\x00\x00\x00'
tRp7187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7188
I0
sg6380
g7147
sS'block_loop.thisRepN'
p7189
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7190
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p7191
Nsg70
Vn
sS'block_loop.thisTrialN'
p7192
I0
sg39
F1.1498630960268201
sg34
g753
(S"\x07\xdf\x07\x0f\x11/'\x0bb\x10"
tRp7193
sa(dp7194
S'trial_loop.thisTrialN'
p7195
I55
sg6371
g6392
sS'block_loop.thisIndex'
p7196
g6365
sg38
S'right'
p7197
sg59
g63
sS'trial_loop.thisN'
p7198
I55
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7199
g60
(g99
S'7\x00\x00\x00'
tRp7200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7201
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vn
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.93337548979798157
sg34
g753
(S'\x07\xdf\x07\x0f\x11/-\x0e\x19`'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6475
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'left'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vn
sS'block_loop.thisTrialN'
p7218
I0
sg39
F1.3169118888072262
sg34
g753
(S'\x07\xdf\x07\x0f\x11/3\r\xb7\xb8'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6603
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'right'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6611
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vn
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.89992353676461789
sg34
g753
(S'\x07\xdf\x07\x0f\x11/:\x03\xc8\xc0'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
S'30-spaghetti_hoops.png'
p7235
sS'block_loop.thisIndex'
p7236
g6365
sg38
S'right'
p7237
sg59
g63
sS'trial_loop.thisN'
p7238
I58
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p7239
g60
(g99
S':\x00\x00\x00'
tRp7240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7241
I0
sg6380
S'19-caramello_redo.png'
p7242
sS'block_loop.thisRepN'
p7243
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7244
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7245
Nsg70
Vn
sS'block_loop.thisTrialN'
p7246
I0
sg39
F1.0998409724343219
sg34
g753
(S'\x07\xdf\x07\x0f\x110\x04\x02\xaf\x80'
tRp7247
sa(dp7248
S'trial_loop.thisTrialN'
p7249
I59
sg6371
S'45-chewy_nougat_redo.png'
p7250
sS'block_loop.thisIndex'
p7251
g6365
sg38
S'right'
p7252
sg59
g63
sS'trial_loop.thisN'
p7253
I59
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7254
g60
(g99
S';\x00\x00\x00'
tRp7255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7256
I0
sg6380
S'41-peanuts_redo.png'
p7257
sS'block_loop.thisRepN'
p7258
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7259
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p7260
Nsg70
Vn
sS'block_loop.thisTrialN'
p7261
I0
sg39
F1.3166521646908222
sg34
g753
(S'\x07\xdf\x07\x0f\x110\n\x04\xe9\xd0'
tRp7262
sa(dp7263
S'trial_loop.thisTrialN'
p7264
I60
sg6371
g6556
sS'block_loop.thisIndex'
p7265
g6365
sg38
S'left'
p7266
sg59
g63
sS'trial_loop.thisN'
p7267
I60
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7268
g60
(g99
S'<\x00\x00\x00'
tRp7269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7270
I0
sg6380
g6563
sS'block_loop.thisRepN'
p7271
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7272
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7273
Nsg70
Vn
sS'block_loop.thisTrialN'
p7274
I0
sg39
F0.98326675348835124
sg34
g753
(S'\x07\xdf\x07\x0f\x110\x10\n=\x18'
tRp7275
sa(dp7276
S'trial_loop.thisTrialN'
p7277
I61
sg6371
g6838
sS'block_loop.thisIndex'
p7278
g6365
sg38
S'left'
p7279
sg59
g63
sS'trial_loop.thisN'
p7280
I61
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p7281
g60
(g99
S'=\x00\x00\x00'
tRp7282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7283
I0
sg6380
g6846
sS'block_loop.thisRepN'
p7284
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7285
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p7286
Nsg70
Vn
sS'block_loop.thisTrialN'
p7287
I0
sg39
F1.0166260497298936
sg34
g753
(S'\x07\xdf\x07\x0f\x110\x16\nT\x88'
tRp7288
sa(dp7289
S'trial_loop.thisTrialN'
p7290
I62
sg6371
g6443
sS'block_loop.thisIndex'
p7291
g6365
sg38
S'left'
p7292
sg59
g63
sS'trial_loop.thisN'
p7293
I62
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7294
g60
(g99
S'>\x00\x00\x00'
tRp7295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7296
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7297
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7298
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7299
Nsg70
Vn
sS'block_loop.thisTrialN'
p7300
I0
sg39
F0.91664537936230772
sg34
g753
(S'\x07\xdf\x07\x0f\x110\x1c\x0b#\x90'
tRp7301
sa(dp7302
S'trial_loop.thisTrialN'
p7303
I63
sg6371
g6637
sS'block_loop.thisIndex'
p7304
g6365
sg38
S'left'
p7305
sg59
g63
sS'trial_loop.thisN'
p7306
I63
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p7307
g60
(g99
S'?\x00\x00\x00'
tRp7308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7309
I0
sg6380
g6645
sS'block_loop.thisRepN'
p7310
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7311
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p7312
Nsg70
Vn
sS'block_loop.thisTrialN'
p7313
I0
sg39
F0.89999623670701112
sg34
g753
(S'\x07\xdf\x07\x0f\x110"\nH\xd0'
tRp7314
sa(dp7315
S'trial_loop.thisTrialN'
p7316
I64
sg6371
g7235
sS'block_loop.thisIndex'
p7317
g6365
sg38
S'right'
p7318
sg59
g63
sS'trial_loop.thisN'
p7319
I64
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7320
g60
(g99
S'@\x00\x00\x00'
tRp7321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7322
I0
sg6380
g7242
sS'block_loop.thisRepN'
p7323
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7324
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7325
Nsg70
Vn
sS'block_loop.thisTrialN'
p7326
I0
sg39
F0.96668004725688661
sg34
g753
(S'\x07\xdf\x07\x0f\x110(\tj('
tRp7327
sa(dp7328
S'trial_loop.thisTrialN'
p7329
I65
sg6371
g6637
sS'block_loop.thisIndex'
p7330
g6365
sg38
S'left'
p7331
sg59
g63
sS'trial_loop.thisN'
p7332
I65
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p7333
g60
(g99
S'A\x00\x00\x00'
tRp7334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7335
I0
sg6380
g6645
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vn
sS'block_loop.thisTrialN'
p7339
I0
sg39
F0.71665296296487213
sg34
g753
(S'\x07\xdf\x07\x0f\x110.\tG\x00'
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6731
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'right'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6738
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vn
sS'block_loop.thisTrialN'
p7352
I0
sg39
F0.81683633788452426
sg34
g753
(S'\x07\xdf\x07\x0f\x1104\x05\x8d\xe0'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
g6426
sS'block_loop.thisIndex'
p7356
g6365
sg38
S'right'
p7357
sg59
g63
sS'trial_loop.thisN'
p7358
I67
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7359
g60
(g99
S'C\x00\x00\x00'
tRp7360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7361
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7362
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7363
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7364
Nsg70
Vn
sS'block_loop.thisTrialN'
p7365
I0
sg39
F0.88376333687665465
sg34
g753
(S'\x07\xdf\x07\x0f\x110:\x03C\xf0'
tRp7366
sa(dp7367
S'trial_loop.thisTrialN'
p7368
I68
sg6371
g6838
sS'block_loop.thisIndex'
p7369
g6365
sg38
S'left'
p7370
sg59
g63
sS'trial_loop.thisN'
p7371
I68
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p7372
g60
(g99
S'D\x00\x00\x00'
tRp7373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7374
I0
sg6380
g6846
sS'block_loop.thisRepN'
p7375
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7376
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vn
sS'block_loop.thisTrialN'
p7378
I0
sg39
F1.1666530770035024
sg34
g753
(S'\x07\xdf\x07\x0f\x111\x04\x01\xf0\x18'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g7155
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'left'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6881
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vn
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.96663899316990864
sg34
g753
(S'\x07\xdf\x07\x0f\x111\n\x05\x1c\x98'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
g7019
sS'block_loop.thisIndex'
p7395
g6365
sg38
S'right'
p7396
sg59
g63
sS'trial_loop.thisN'
p7397
I70
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p7398
g60
(g99
S'F\x00\x00\x00'
tRp7399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7400
I0
sg6380
g7026
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7402
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vn
sS'block_loop.thisTrialN'
p7404
I0
sg39
F1.2333177859982243
sg34
g753
(S'\x07\xdf\x07\x0f\x111\x10\x04\xf9p'
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
g6823
sS'block_loop.thisIndex'
p7408
g6365
sg38
S'right'
p7409
sg59
g63
sS'trial_loop.thisN'
p7410
I71
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7411
g60
(g99
S'G\x00\x00\x00'
tRp7412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7413
I0
sg6380
g6830
sS'block_loop.thisRepN'
p7414
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7415
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p7416
Nsg70
Vn
sS'block_loop.thisTrialN'
p7417
I0
sg39
F1.0166143607202685
sg34
g753
(S'\x07\xdf\x07\x0f\x111\x16\t\x1c\x08'
tRp7418
sa(dp7419
S'trial_loop.thisTrialN'
p7420
I72
sg6371
g6426
sS'block_loop.thisIndex'
p7421
g6365
sg38
S'right'
p7422
sg59
g63
sS'trial_loop.thisN'
p7423
I72
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7424
g60
(g99
S'H\x00\x00\x00'
tRp7425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7426
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7427
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7428
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7429
Nsg70
Vn
sS'block_loop.thisTrialN'
p7430
I0
sg39
F0.98369953198380244
sg34
g753
(S'\x07\xdf\x07\x0f\x111\x1c\t\xeb\x10'
tRp7431
sa(dp7432
S'trial_loop.thisTrialN'
p7433
I73
sg6371
g6443
sS'block_loop.thisIndex'
p7434
g6365
sg38
S'left'
p7435
sg59
g63
sS'trial_loop.thisN'
p7436
I73
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7437
g60
(g99
S'I\x00\x00\x00'
tRp7438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7439
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7440
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7441
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p7442
Nsg70
Vn
sS'block_loop.thisTrialN'
p7443
I0
sg39
F0.79987073664597119
sg34
g753
(S'\x07\xdf\x07\x0f\x111"\n\x02\x80'
tRp7444
sa(dp7445
S'trial_loop.thisTrialN'
p7446
I74
sg6371
g6746
sS'block_loop.thisIndex'
p7447
g6365
sg38
S'left'
p7448
sg59
g63
sS'trial_loop.thisN'
p7449
I74
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p7450
g60
(g99
S'J\x00\x00\x00'
tRp7451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7452
I0
sg6380
g6754
sS'block_loop.thisRepN'
p7453
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7454
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7455
Nsg70
Vn
sS'block_loop.thisTrialN'
p7456
I0
sg39
F1.2163493337830005
sg34
g753
(S'\x07\xdf\x07\x0f\x111(\x07z\x10'
tRp7457
sa(dp7458
S'trial_loop.thisTrialN'
p7459
I75
sg6371
g6409
sS'block_loop.thisIndex'
p7460
g6365
sg38
S'left'
p7461
sg59
g63
sS'trial_loop.thisN'
p7462
I75
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7463
g60
(g99
S'K\x00\x00\x00'
tRp7464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7465
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7466
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7467
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7468
Nsg70
Vn
sS'block_loop.thisTrialN'
p7469
I0
sg39
F1.3999728586877609
sg34
g753
(S'\x07\xdf\x07\x0f\x111.\x0bb\x10'
tRp7470
sa(dp7471
S'trial_loop.thisTrialN'
p7472
I76
sg6371
g7034
sS'block_loop.thisIndex'
p7473
g6365
sg38
S'left'
p7474
sg59
g63
sS'trial_loop.thisN'
p7475
I76
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7476
g60
(g99
S'L\x00\x00\x00'
tRp7477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7478
I0
sg6380
g7041
sS'block_loop.thisRepN'
p7479
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7480
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p7481
Nsg70
Vn
sS'block_loop.thisTrialN'
p7482
I0
sg39
F1.4329524046279403
sg34
g753
(S'\x07\xdf\x07\x0f\x1115\x02\xa3\xc8'
tRp7483
sa(dp7484
S'trial_loop.thisTrialN'
p7485
I77
sg6371
g6900
sS'block_loop.thisIndex'
p7486
g6365
sg38
S'left'
p7487
sg59
g63
sS'trial_loop.thisN'
p7488
I77
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7489
g60
(g99
S'M\x00\x00\x00'
tRp7490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7491
I0
sg6380
g6907
sS'block_loop.thisRepN'
p7492
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7493
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7494
Nsg70
Vn
sS'block_loop.thisTrialN'
p7495
I0
sg39
F1.9170539245442342
sg34
g753
(S'\x07\xdf\x07\x0f\x111;\t\xdfX'
tRp7496
sa(dp7497
S'trial_loop.thisTrialN'
p7498
I78
sg6371
g7140
sS'block_loop.thisIndex'
p7499
g6365
sg38
S'left'
p7500
sg59
g63
sS'trial_loop.thisN'
p7501
I78
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7502
g60
(g99
S'N\x00\x00\x00'
tRp7503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7504
I0
sg6380
g7147
sS'block_loop.thisRepN'
p7505
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7506
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p7507
Nsg70
Vn
sS'block_loop.thisTrialN'
p7508
I0
sg39
F0.96658111831493443
sg34
g753
(S'\x07\xdf\x07\x0f\x112\x06\x08\xfc\xc8'
tRp7509
sa(dp7510
S'trial_loop.thisTrialN'
p7511
I79
sg6371
g6460
sS'block_loop.thisIndex'
p7512
g6365
sg38
S'right'
p7513
sg59
g63
sS'trial_loop.thisN'
p7514
I79
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7515
g60
(g99
S'O\x00\x00\x00'
tRp7516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7517
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7518
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7519
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7520
Nsg70
Vn
sS'block_loop.thisTrialN'
p7521
I0
sg39
F1.0497672461369802
sg34
g753
(S'\x07\xdf\x07\x0f\x112\x0c\t\x148'
tRp7522
sa(dp7523
S'trial_loop.thisTrialN'
p7524
I80
sg6371
g7019
sS'block_loop.thisIndex'
p7525
g6365
sg38
S'right'
p7526
sg59
g63
sS'trial_loop.thisN'
p7527
I80
sg33
g6780
sg64
g65
sS'trial_loop.thisIndex'
p7528
g60
(g99
S'P\x00\x00\x00'
tRp7529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7530
I0
sg6380
g7026
sS'block_loop.thisRepN'
p7531
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7532
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p7533
Nsg70
Vn
sS'block_loop.thisTrialN'
p7534
I0
sg39
F1.3666278173368482
sg34
g753
(S'\x07\xdf\x07\x0f\x112\x12\n\\X'
tRp7535
sa(dp7536
S'trial_loop.thisTrialN'
p7537
I81
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7538
sS'block_loop.thisIndex'
p7539
g6365
sg38
S'left'
p7540
sg59
g63
sS'trial_loop.thisN'
p7541
I81
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7542
g60
(g99
S'Q\x00\x00\x00'
tRp7543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7544
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7545
sS'block_loop.thisRepN'
p7546
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7547
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7548
Nsg70
Vn
sS'block_loop.thisTrialN'
p7549
I0
sg39
F1.2166566692376364
sg34
g753
(S'\x07\xdf\x07\x0f\x112\x19\x01$\xf8'
tRp7550
sa(dp7551
S'trial_loop.thisTrialN'
p7552
I82
sg6371
S'50-polo.png'
p7553
sS'block_loop.thisIndex'
p7554
g6365
sg38
S'right'
p7555
sg59
g63
sS'trial_loop.thisN'
p7556
I82
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p7557
g60
(g99
S'R\x00\x00\x00'
tRp7558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7559
I0
sg6380
S'48-twix.png'
p7560
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.95034850357842515
sg34
g753
(S'\x07\xdf\x07\x0f\x112\x1f\x05\x0c\xf8'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
S'36-fig_rolls.png'
p7568
sS'block_loop.thisIndex'
p7569
g6365
sg38
S'left'
p7570
sg59
g63
sS'trial_loop.thisN'
p7571
I83
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p7572
g60
(g99
S'S\x00\x00\x00'
tRp7573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7574
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7575
sS'block_loop.thisRepN'
p7576
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7577
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p7578
Nsg70
Vn
sS'block_loop.thisTrialN'
p7579
I0
sg39
F1.0999900785955106
sg34
g753
(S'\x07\xdf\x07\x0f\x112%\x04\xabP'
tRp7580
sa(dp7581
S'trial_loop.thisTrialN'
p7582
I84
sg6371
g6870
sS'block_loop.thisIndex'
p7583
g6365
sg38
S'right'
p7584
sg59
g63
sS'trial_loop.thisN'
p7585
I84
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p7586
g60
(g99
S'T\x00\x00\x00'
tRp7587
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7588
I0
sg6380
g6878
sS'block_loop.thisRepN'
p7589
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7590
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p7591
Nsg70
Vn
sS'block_loop.thisTrialN'
p7592
I0
sg39
F0.93335296706936788
sg34
g753
(S'\x07\xdf\x07\x0f\x112+\x06\xe5\xa0'
tRp7593
sa(dp7594
S'trial_loop.thisTrialN'
p7595
I85
sg6371
g6838
sS'block_loop.thisIndex'
p7596
g6365
sg38
S'left'
p7597
sg59
g63
sS'trial_loop.thisN'
p7598
I85
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p7599
g60
(g99
S'U\x00\x00\x00'
tRp7600
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7601
I0
sg6380
g6846
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vn
sS'block_loop.thisTrialN'
p7605
I0
sg39
F0.79993944522175298
sg34
g753
(S'\x07\xdf\x07\x0f\x1121\x06Ex'
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g6806
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'right'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g6814
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vn
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.76668706066448067
sg34
g753
(S'\x07\xdf\x07\x0f\x1127\x03\xc0\xf0'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g6669
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'left'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g6676
sS'block_loop.thisRepN'
p7628
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vn
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.85003255816991441
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x01\x00\xbfh'
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g7235
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'right'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g7242
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vn
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.98367130730002827
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x06\x0e0\xd0'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6571
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'left'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g6578
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vn
sS'block_loop.thisTrialN'
p7657
I0
sg39
F1.099985802127776
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x0c\x0e\x86\xc0'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g6776
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g6784
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F1.5665278620399476
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x13\x01D8'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g6426
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'right'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.89993551087172818
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x19\nd('
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g7155
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6881
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.84996670057444135
sg34
g753
(S'\x07\xdf\x07\x0f\x113\x1f\tJ\xe8'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g7568
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'left'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g7575
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vn
sS'block_loop.thisTrialN'
p7709
I0
sg39
F0.93364006057709048
sg34
g753
(S'\x07\xdf\x07\x0f\x113%\x07}\xf8'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
S'23-crunchie_redo.png'
p7713
sS'block_loop.thisIndex'
p7714
g6365
sg38
S'right'
p7715
sg59
g63
sS'trial_loop.thisN'
p7716
I94
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p7717
g60
(g99
S'^\x00\x00\x00'
tRp7718
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7719
I0
sg6380
S'33-ambrosia_rice.png'
p7720
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F1.0331526003192266
sg34
g753
(S'\x07\xdf\x07\x0f\x113+\x07\x18h'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g6701
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'left'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g6709
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.78335444957883738
sg34
g753
(S'\x07\xdf\x07\x0f\x1131\x08%\xf0'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g6855
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'left'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g6862
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.83333523398505349
sg34
g753
(S'\x07\xdf\x07\x0f\x1137\x05b\xe8'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6426
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'right'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.80001328555772488
sg34
g753
(S'\x07\xdf\x07\x0f\x114\x01\x03S\x90'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g6372
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'right'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F1.0999048343455797
sg34
g753
(S'\x07\xdf\x07\x0f\x114\x07\x00\xcf\x08'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6460
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F1.1169839045178378
sg34
g753
(S'\x07\xdf\x07\x0f\x114\r\x02\xca\xd8'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g7538
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g7545
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F1.3165948600289994
sg34
g753
(S'\x07\xdf\x07\x0f\x114\x13\x05\t\x10'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6684
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6692
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.98324337546546303
sg34
g753
(S'\x07\xdf\x07\x0f\x114\x19\n\\X'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6900
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6907
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F1.1499765649587061
sg34
g753
(S'\x07\xdf\x07\x0f\x114\x1f\n\xb2H'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g7538
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g7545
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.96666835824726149
sg34
g753
(S'\x07\xdf\x07\x0f\x114%\re\xb0'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g7034
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g7041
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.71681660911599465
sg34
g753
(S'\x07\xdf\x07\x0f\x114+\r} '
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6806
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6814
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F1.233332040888854
sg34
g753
(S'\x07\xdf\x07\x0f\x1141\t\x89h'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g7713
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7720
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F1.6332495905990072
sg34
g753
(S'\x07\xdf\x07\x0f\x1147\r\xac\x00'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6746
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'left'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6757
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6754
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F1.1166608886833274
sg34
g753
(S'\x07\xdf\x07\x0f\x115\x02\x08\x7f\xc8'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6392
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.81661909334434313
sg34
g753
(S'\x07\xdf\x07\x0f\x115\x08\n\xf8\x98'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6603
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6611
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.83333038732234854
sg34
g753
(S'\x07\xdf\x07\x0f\x115\x0e\x08t\x10'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g7250
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'right'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g7257
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.98332348795520375
sg34
g753
(S'\x07\xdf\x07\x0f\x115\x14\x06\xa38'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7019
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'right'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6780
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7026
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F1.2999685251998017
sg34
g753
(S'\x07\xdf\x07\x0f\x115\x1a\x06\xba\xa8'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6475
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'left'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.9666672178555018
sg34
g753
(S'\x07\xdf\x07\x0f\x115 \x0b\xd3X'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6571
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'left'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6578
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F1.5332991406012297
sg34
g753
(S'\x07\xdf\x07\x0f\x115&\x0b\xea\xc8'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g7568
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'left'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7575
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.96705152972208452
sg34
g753
(S'\x07\xdf\x07\x0f\x115-\x05O`'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g7155
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'left'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g7162
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F0.73327302564030106
sg34
g753
(S'\x07\xdf\x07\x0f\x1153\x05,8'
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g6475
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8007
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vn
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.94992085684498306
sg34
g753
(S'\x07\xdf\x07\x0f\x1159\x01\xb1\x98'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g7140
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'left'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g7147
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vn
sS'block_loop.thisTrialN'
p8023
I0
sg39
F1.416458355190116
sg34
g753
(S'\x07\xdf\x07\x0f\x116\x03\x01\x8a\x88'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6620
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'right'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vn
sS'block_loop.thisTrialN'
p8036
I0
sg39
F1.2666502830452373
sg34
g753
(S'\x07\xdf\x07\x0f\x116\t\x08M\x00'
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g7568
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'left'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g7575
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vn
sS'block_loop.thisTrialN'
p8049
I0
sg39
F1.2833333523394685
sg34
g753
(S'\x07\xdf\x07\x0f\x116\x0f\x0c\xe8\xb0'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6900
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'left'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6907
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vn
sS'block_loop.thisTrialN'
p8062
I0
sg39
F1.2333443000952684
sg34
g753
(S'\x07\xdf\x07\x0f\x116\x16\x02\x80\xa0'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g6372
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'right'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vn
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.94993853290907282
sg34
g753
(S'\x07\xdf\x07\x0f\x116\x1c\x06h\xa0'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g7713
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'right'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g7720
sS'block_loop.thisRepN'
p8085
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vn
sS'block_loop.thisTrialN'
p8088
I0
sg39
F0.90000336415505444
sg34
g753
(S'\x07\xdf\x07\x0f\x116"\x06A\x90'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g7250
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8098
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vn
sS'block_loop.thisTrialN'
p8101
I0
sg39
F1.2499401294571726
sg34
g753
(S'\x07\xdf\x07\x0f\x116(\x05(P'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
S'3-ellas_strawberries_apples.png'
p8105
sS'block_loop.thisIndex'
p8106
g6365
sg38
S'left'
p8107
sg59
g63
sS'trial_loop.thisN'
p8108
I124
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8109
g60
(g99
S'|\x00\x00\x00'
tRp8110
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8111
I0
sg6380
S'13-mccoys_steak_crisps.png'
p8112
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.96704297678661533
sg34
g753
(S'\x07\xdf\x07\x0f\x116.\t\x89h'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6539
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'right'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6550
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F1.1332142384708277
sg34
g753
(S'\x07\xdf\x07\x0f\x1164\t\xa0\xd8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6509
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.81645202601976052
sg34
g753
(S'\x07\xdf\x07\x0f\x116:\x0c\x19\xa8'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g7553
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.8666529059446475
sg34
g753
(S'\x07\xdf\x07\x0f\x117\x04\t\xcf\xb8'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7713
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7720
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.0166633975459263
sg34
g753
(S'\x07\xdf\x07\x0f\x117\n\x08=`'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6539
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.95000011404044926
sg34
g753
(S'\x07\xdf\x07\x0f\x117\x10\t\x0ch'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6409
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F1.1166654502503661
sg34
g753
(S'\x07\xdf\x07\x0f\x117\x16\x08\xe5X'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6870
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6878
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.86671078080325969
sg34
g753
(S'\x07\xdf\x07\x0f\x117\x1c\x0b#\x90'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7235
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F1.5333755468182062
sg34
g753
(S'\x07\xdf\x07\x0f\x117"\t\x918'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7568
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'left'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7575
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.86669424513092963
sg34
g753
(S'\x07\xdf\x07\x0f\x117)\x02\xf5\xd0'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6855
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6597
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6862
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.93371447110985173
sg34
g753
(S'\x07\xdf\x07\x0f\x117/\x01cx'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6870
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6878
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.91668757384104538
sg34
g753
(S'\x07\xdf\x07\x0f\x1175\x01\x01\xd0'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6556
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6563
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F1.2332904166069056
sg34
g753
(S'\x07\xdf\x07\x0f\x117;\x00#('
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g8105
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g8112
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.96665068218135275
sg34
g753
(S'\x07\xdf\x07\x0f\x118\x05\x04I\xa8'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7235
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7242
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F1.0165878466214053
sg34
g753
(S'\x07\xdf\x07\x0f\x118\x0b\x04"\x98'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6620
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.2503389813100512
sg34
g753
(S'\x07\xdf\x07\x0f\x118\x11\x04\xf1\xa0'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6823
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6830
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.3333494888756832
sg34
g753
(S'\x07\xdf\x07\x0f\x118\x17\tR\xb8'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6392
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.0333644280017324
sg34
g753
(S'\x07\xdf\x07\x0f\x118\x1d\x0e\xe0\x98'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6900
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6907
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F1.0830909051528579
sg34
g753
(S'\x07\xdf\x07\x0f\x118$\x00\xab\xe0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6669
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6676
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F1.0166839245885058
sg34
g753
(S'\x07\xdf\x07\x0f\x118*\x02m\x18'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6684
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6692
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F1.1167769234980369
sg34
g753
(S'\x07\xdf\x07\x0f\x1180\x03< '
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6556
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6563
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6386
g6437
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.0666584368427721
sg34
g753
(S'\x07\xdf\x07\x0f\x1186\x05vp'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7250
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F1.0666832403530861
sg34
g753
(S'\x07\xdf\x07\x0f\x119\x00\x06\xfd\x10'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7140
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7147
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F1.4332241028532735
sg34
g753
(S'\x07\xdf\x07\x0f\x119\x06\x08\x83\xb0'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7034
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7041
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.88299214726612263
sg34
g753
(S'\x07\xdf\x07\x0f\x119\r\x00}\x00'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g8105
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g8112
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.95033824005622591
sg34
g753
(S'\x07\xdf\x07\x0f\x119\x12\x0eg\x80'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6586
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F1.0000011403917597
sg34
g753
(S'\x07\xdf\x07\x0f\x119\x18\x0e\x05\xd8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7553
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6849
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.98333346637991781
sg34
g753
(S'\x07\xdf\x07\x0f\x119\x1e\x0e\x96`'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6806
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6814
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.1999758807251055
sg34
g753
(S'\x07\xdf\x07\x0f\x119$\x0e\xecP'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6571
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6578
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F1.19998813993152
sg34
g753
(S'\x07\xdf\x07\x0f\x119+\x03\x15\x10'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7538
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7545
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F1.2166697837365064
sg34
g753
(S'\x07\xdf\x07\x0f\x1191\x06\xbe\x90'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g6654
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g6661
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.98337680124859617
sg34
g753
(S'\x07\xdf\x07\x0f\x1197\n\xa6\x90'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6409
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F1.3333047285177599
sg34
g753
(S'\x07\xdf\x07\x0f\x11:\x01\n\xbe\x00'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6492
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F1.7332875656302349
sg34
g753
(S'\x07\xdf\x07\x0f\x11:\x08\x01\t\xa0'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6701
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.91665051112431684
sg34
g753
(S'\x07\xdf\x07\x0f\x11:\x0e\x0c\xcdX'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6620
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F1.0336985626508977
sg34
g753
(S'\x07\xdf\x07\x0f\x11:\x14\x0c-0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7553
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.0333014213829301
sg34
g753
(S'\x07\xdf\x07\x0f\x11:\x1a\r6\xd0'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7155
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7162
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.0000265140970441
sg34
g753
(S'\x07\xdf\x07\x0f\x11: \x0e\x05\xd8'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6806
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6810
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6814
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6810
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6386
g6817
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.96668831509487063
sg34
g753
(S'\x07\xdf\x07\x0f\x11:&\x0e\x96`'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6731
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6738
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F1.0333296460685233
sg34
g753
(S'\x07\xdf\x07\x0f\x11:,\x0e\xad\xd0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6492
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F1.567015094218732
sg34
g753
(S'\x07\xdf\x07\x0f\x11:3\x00y\x18'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7553
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.5665960004207591
sg34
g753
(S'\x07\xdf\x07\x0f\x11:9\t\x9c\xf0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6603
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6607
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6386
g6614
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.86669196434741025
sg34
g753
(S'\x07\xdf\x07\x0f\x11;\x04\x03~\x88'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g6654
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6485
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g6661
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6485
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6386
g6479
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F1.0499813546011865
sg34
g753
(S'\x07\xdf\x07\x0f\x11;\n\x01\xe8H'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7250
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7257
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.0833084347887052
sg34
g753
(S'\x07\xdf\x07\x0f\x11;\x10\x030h'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6509
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.90010115270706592
sg34
g753
(S'\x07\xdf\x07\x0f\x11;\x16\x04\xf5\x88'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6492
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.9333258827773534
sg34
g753
(S'\x07\xdf\x07\x0f\x11;\x1c\x03\xdcH'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6586
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F1.0998372661633766
sg34
g753
(S'\x07\xdf\x07\x0f\x11;"\x03v\xb8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6509
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.84974689015325566
sg34
g753
(S'\x07\xdf\x07\x0f\x11;(\x05vp'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6443
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.76656960036052624
sg34
g753
(S'\x07\xdf\x07\x0f\x11;.\x03\xa5\x98'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6460
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.84976998307683971
sg34
g753
(S'\x07\xdf\x07\x0f\x11;4\x00\xa7\xf8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6701
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.91667759541633131
sg34
g753
(S'\x07\xdf\x07\x0f\x11;9\x0e\x19`'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6855
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6862
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F1.0499819247979758
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00\x03\r:\xb8'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6776
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6780
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6784
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F1.3999511912516027
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00\t\x0e\x82\xd8'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6838
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6842
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6846
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6842
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6386
g6849
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.96669373195254593
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00\x10\x06\x03\x10'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g8105
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g8112
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.76660181641454983
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00\x16\x05\xdf\xe8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6746
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6750
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6754
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6750
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6386
g6757
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.88367837772602797
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00\x1c\x02\xde`'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6539
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.94995877485598612
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00"\x01\x86\xa0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6855
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6862
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.91668329737331078
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00(\x01cx'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6684
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6692
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6386
g6695
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.96656743361745612
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00.\x00\x84\xd0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7713
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6641
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7720
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F1.1833042153430142
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x004\x00\x9c@'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6823
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6830
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.93343108387489337
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x00:\x04\x0b('
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6701
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6709
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6386
g6712
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.98333631735658855
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01\x04\x03k\x00'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6870
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6874
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6878
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6874
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6386
g6881
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.80001014948174998
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01\n\x03\xc0\xf0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6409
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.98333090049891325
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01\x10\x018\x80'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g8105
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g8112
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.90001020650197461
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01\x16\x01O\xf0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6620
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6631
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6628
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.81668238505881163
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01\x1c\x00u0'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6637
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6648
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6645
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6641
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6386
g6648
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.78372963831498055
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01!\rm\x80'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g7019
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6787
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g7026
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6780
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6386
g6787
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.5166659634251118
sg34
g753
(S"\x07\xdf\x07\x0f\x12\x01'\nk\xf8"
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6731
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6738
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.86666545025036612
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x01.\x03\x95\xf8'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7034
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7041
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6519
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6386
g6513
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.79971051167194673
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x014\x02>8'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6586
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6594
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6590
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6386
g6597
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.95001978578875423
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x019\x0e\xbdp'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7538
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7545
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F1.1336641228335793
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x02\x03\x0e\x96`'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6823
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6830
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6496
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6386
g6503
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.96657113988840138
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x02\n\x01\xcc\xf0'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6669
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'left'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6676
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6386
g6631
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.79993744953753776
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x02\x10\x01\xe4`'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6443
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6451
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6386
g6454
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.7000115179525892
sg34
g753
(S'\x07\xdf\x07\x0f\x12\x02\x15\x0e\xa2\x18'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I43
sg56
g57
sg58
Vn
sg42
I557
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I43
sg55
g11
sg56
g57
sg45
F0.01
sg42
I557
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g634
sg51
F30.559999999999999
sg46
F1.5400000000000005
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I83751248
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xb8\x1e\xc5?\\\x8f\x82?\xa4p=?\n\xd7#?{\x14.?\x00\x00\x00?H\xe1z?)\\\x0f?\\\x8fB?\xa4p=?\\\x8fB?\xecQ8?\x00\x00\x80?\\\x8fB?\n\xd7#?R\xb8\x1e?\x00\x00\x00?\xa4p=?\x14\xaeG?\\\x8fB?=\n\xd7>\n\xd7#?)\\\x0f?\x9a\x99\x99?fff?\xecQ8?H\xe1z?\x00\x00\x80?H\xe1z?=\n\xd7>=\nW?\xe1z\x94?333?\\\x8f\x82?\x14\xaeG?H\xe1z?\xc3\xf5(?\xaeGa?)\\\x0f?333?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\x10X\x11A\xd5x\x93A;\xdf%AT\xe3\xb5@\x10X\xe5@\x7fj&A\xdd$\xd2@\xbaI\xec@\xa8\xc6k@\x98n\xfe@o\x12mAT\xe3}@\x10X\xa5@\x19\x04\x14AT\xe3\x95@\x10X\xed@\xdd$\xe2@\xdb\xf9n@\xee|7@\xdd$\nA\x00\x00\x0cAw\xbe\x17Ab\x100@\xa2E@A\xbaI\xfc@\x87\x16\x81@!\xb0\xda@w\xbe\xb3@D\x8bdA!\xb0\xea@1\x08\x98@\xaa\xf1&A;\xdf1A!\xb0\xca@\x04V\x85A\x98n\x96@w\xbe\xcb@!\xb0\n@u\x938@\xbaI\x84@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xe0@\x00\x00\xc0A\x00\x00\x00A\x00\x00\x98A\x00\x00\x88A\x00\x00\xc0@\x00\x00\xb0A\x00\x00\xb8A\x00\x00PA\x00\x00\xf8A\x00\x00\x80?\x00\x00\x90A\x00\x00\xc8A\x00\x00@A\x00\x00\xa0@\x00\x00@@\x00\x00\x00@\x00\x00\xd0A\x00\x00\x10B\x00\x00 A\x00\x00pA\x00\x00\x18B\x00\x00\xa0A\x00\x00\x80A\x00\x00\x08B\x00\x00\xf0A\x00\x00\x0cB\x00\x00`A\x00\x00\x10A\x00\x00\xa8A\x00\x00\xd8A\x00\x00\xe8A\x00\x00\x1cB\x00\x00\x80@\x00\x00\x00\x00\x00\x00\xe0A\x00\x000A\x00\x00\x14B\x00\x00\x04B\x00\x00\x00B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\xcd\xcc\x8c?\xcd\xcc\x8c?\xcd\xcc\xcc?33\xf3?\x00\x00\xc0?ff\xa6?33\xf3?ff\xe6?\x00\x00\x80?33\xb3?\x9a\x99\x99?ff\xa6?\x9a\x99\xd9?\x00\x00\xc0?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?\x9a\x99\x99?33\xb3?\x00\x00\x80?\x9a\x99\xd9?\x9a\x99\xd9?\x9a\x99\x99?33\xf3?\x00\x00\x80?\x9a\x99\xd9?33\xf3?ff\xa6?\x9a\x99\xd9?33\xf3?33\xf3?\x00\x00\x80?\x9a\x99\xd9?\x9a\x99\xd9?33\xf3?\x9a\x99\x99?\x9a\x99\x99?\x00\x00\xc0?ff\xe6?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'"\x00\x00\x00\n\x00\x00\x00\x10\x00\x00\x00\x0f\x00\x00\x00!\x00\x00\x00\x0e\x00\x00\x00\x05\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x1c\x00\x00\x00\x13\x00\x00\x00$\x00\x00\x00\r\x00\x00\x00\x08\x00\x00\x00\x1b\x00\x00\x00\x14\x00\x00\x00\x17\x00\x00\x00\x04\x00\x00\x00\x0b\x00\x00\x00\x03\x00\x00\x00\x16\x00\x00\x00\x1d\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00\x00\x11\x00\x00\x00\x1e\x00\x00\x00#\x00\x00\x00\x1f\x00\x00\x00\x19\x00\x00\x00\t\x00\x00\x00\'\x00\x00\x00&\x00\x00\x00\x18\x00\x00\x00\x1a\x00\x00\x00\x12\x00\x00\x00%\x00\x00\x00\x15\x00\x00\x00 \x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g152
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g271
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g159
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g236
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g222
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g145
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g257
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g264
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g194
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g320
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g110
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g229
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g278
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g187
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g138
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g124
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g117
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g285
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g355
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g173
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g208
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g369
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g243
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g215
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g341
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g313
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g348
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g201
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g166
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g250
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g292
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g306
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g376
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g131
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g103
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g299
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g180
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g362
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g334
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g327
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I83751248
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'ff&@\x00\x00\x80@\x00\x00\xc0@\x00\x00\x80?33\xa3@\x00\x00\xc0@\x00\x00\xc0@ffF@33\xa3@\xcd\xcc\x9c@33\xb3@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xb0@\x00\x00\xa0@\x00\x00\xc0@\xcd\xcc\x9c@\x00\x00\xc0@\x00\x00\x80@\xcd\xcc\x9c@\x00\x00\xc0@33\x93@\x00\x00 @fff@\x00\x00\xa0@\x00\x00\xa0@\xcd\xcc\xac@\x00\x00\xc0@\xcd\xcc\xac@ff\x96@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99\x19@33\xa3@\x9a\x99y@\xcd\xcc\xbc@33S@\xcd\xcc\x9c@\x00\x00\xc0@\x9a\x99\xa9@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x0e\xee\x0cB\xfd!B@\xda\xef\x86@\xd5C\x8aA\xad\x88\x08@\xc53\x03@\xe5\xac\xea?\x94\xbb\x17A\xfc\x86H@\xff\x88\xa8@\xf7\x13\x01@\x83\x90X@\xb38\xd3?7x\x97@u\xcc\xd4@\xda\xc9\xcc?\x9d\xb0\xaa?\xc8D\x9c@\xba\xad\xd2@j\x89\x88@\x97s\x97?\x1c!\x82@\xf1\x10\x1dAK\x11\xf9@\x90J\xa4?\xd7\x8d\xe8?`\xc4\xbb?\x02\x8e\xc8?\x0c\x8c\xe8?s\xab\xc2@\xfav\xc6?\x974\xb3?\xe1U\xa5@\x011\xb3?\x1c\xcd\xec@Y\x8a\xa8?\xfa\x01\x00@\xdf\x9a9@0\x8e\xa8?\xe6F$@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'33\x83@\xcd\xccL@\x9a\x99y@33S@\x9a\x99\x89@33s@fff@\xcd\xccl@ffF@\xcd\xccl@\x00\x00`@\xcd\xcc,@ffF@\xcd\xccL@\x00\x00@@\x00\x00@@\x9a\x99Y@\x9a\x99y@333@\x9a\x99y@ff\x86@\xcd\xccL@ff\x86@ff\x86@\x00\x00@@\x9a\x99\x89@333@\x00\x00`@\xcd\xccL@ff\x86@\x9a\x999@ffF@\x00\x00@@\x00\x00@@\x9a\x99Y@\xcd\xccl@ff\x86@\x9a\x999@\x9a\x99y@ff\x86@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'@\x1d+\x05\xc0\xc6\xba\x0c\x80\xf0\xb8\x0c\xc0\x16%\x03`\xfb\xb8\x0c\xa0\xfa\xb8\x0c\xa0\xc6\xba\x0c\x80\xc7\xba\x0c`\xfa\xb8\x0c\xa0\xc5\xba\x0c\xe0\xcb\xba\x0c\x80\xc6\xba\x0c\x00\xcd\xba\x0c`\xc6\xba\x0c\x00\xcc\xba\x0c\xe0\xf5\xb8\x0c@\xc4\xba\x0c\xe0\xc7\xba\x0c@\xcc\xba\x0c\xe0\x15%\x03\x80\xc3\xba\x0c\x00\xcb\xba\x0c\x80\x19+\x05\xa0\xf9\xb8\x0c\x80\x17+\x05\xe0\x19+\x05@\x1a+\x05`\x19+\x05`\x1d+\x05@\x18+\x05\xe0\xc5\xba\x0c\x00\x1d+\x05@\xf52\r@\xf02\r\x80\xfa2\r\x00\xfc2\r\xe0\xfb2\r\xe0\xfa2\r@\xfc2\r\xa0\xf62\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\x9e\xef\x82A\x10X\xcd@d;\xe3@\x0e-r@\x0e-B@!\xb0\n@\x96C\x03@d;\xd3@\x87\x16A@\xee|\x07@\x87\x16!@+\x87\xe6?\x1dZ\xc4?\x98n\xa6@\x1dZ\xc4?\xf8S\x93?u\x93h@\xe9&\xf1?\x83\xc0\xaa?b\x10 @V\x0eM?w\xbe\x83@\xdb\xf9N@\xc5 \xe0?+\x87\xc6?/\xdd<@!\xb0:@\xc5 \x80?w\xbe\x83@b\x10 @\xbct3?9\xb4H?\x87\x161@P\x8dw?\xdb\xf9^@\xd3M"?^\xba\x99?\x83\xc0\xea?\x83\xc0*?\x83\xc0j?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I83751248
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xb0\x01i\r\xe8\x00i\r\x80\x86L\r\xc0\x00i\r\xb0\x86L\r\x80\x86L\r\x10\x01i\r\xb0\x86L\r\x10\x01i\r\x00\x02i\r`\x01i\r\xe8\x00i\r`\x01i\r8\x01i\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\x98o\xe1\x04Pl\xe1\x04 c\xe1\x040b\xe1\x040e\xe1\x04\x00h\xe1\x04\xc8c\xe1\x04\xc8\xc6\x05\x05@\xc4\x05\x05h\xcc\x05\x05\x00\xce\x05\x05\xd0\xc4\x05\x05@\xca\x05\x05@\xc1\x05\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g744
sg83
g778
sg84
g749
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g767
sg83
g798
sg84
g772
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g787
sg83
g818
sg84
g792
sg85
g822
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g807
sg83
g827
sg84
g812
sg85
g831
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g836
sg83
g837
sg84
g841
sg85
g842
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g847
sg83
g848
sg84
g852
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g756
sg83
g858
sg84
g761
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g847
sg83
g867
sg84
g852
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g836
sg83
g876
sg84
g841
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I83751248
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I83751248
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xe0\xd51\r\xc0\xefj\r \xd0r\r8\x9fj\rH\xd0r\r\x00\xd31\r\x80\xd11\r\xc0\xd31\r\x10\xc7r\rP\xc6r\r \xe0r\rp\xd0r\r\x98\xd0r\r\xa0\xc7r\rP\xc6r\r\xc0\xd0r\r`\xd51\r\xb0\xc6r\r\x80\xd11\r\xc0\xd0r\r\x00\xc8r\r\xe8\xd0r\r(\xd2r\r\x80\xd11\r\x10\xd1r\r\xb0\xd1r\r\xb0\xc6r\r\xc8\x9ej\r`\xd1r\r\xc0\xefj\r\xe8\xd0r\r\x80\xc6r\r8\x9fj\r \xd0r\r\xe0\xd51\r \xd0r\r8\xd1r\r0\xc8r\r\xc8\x9ej\r\xe0\xc6r\r\xc0\xefj\r8\x9fj\r8\xd1r\r\xc0\xd31\r\x00\x9fj\r\xc0\xd31\r\x00\xd31\r\x00\x9fj\rP\xc6r\rP\xd2r\r \xd0r\r@\xd41\r\x00\xc8r\r\x98\xd0r\rp\x9fj\r\x98\xd0r\r\x00\x9fj\r\xc0\xd31\r\x80\xc6r\rH\xd0r\r\x10\xc7r\rp\xd0r\r\xa8\x9fj\r\xc0\xd31\rp\xd0r\r \xd0r\r\xc8\x9ej\rp\xd0r\r\xb0\xc6r\r\xc0\xefj\r\xe0\xd51\r\xe0\xc6r\r\x80\xc6r\r \xd0r\r\xc0\xd0r\rp\x9fj\r\xe0\xd51\r\x10\xd1r\rH\xd0r\r8\xd1r\r\x98\xd0r\r`\xd1r\r\xd8\xd1r\r8\xd1r\rH\xd0r\rp\xd0r\r\x98\xd0r\r`\xd1r\r(\xd2r\r\xb0\xc6r\r`\xd1r\r`\xc8r\rp\xd0r\r\xb0\xc6r\r8\x9fj\r`\xd1r\r\x80\xd11\r\xe0\xc6r\r\xc0\xd31\r\xe8\xd0r\r\x98\xd0r\r\x00\xc8r\rp\xd0r\r\x00\xd2r\r\xb0\xd1r\rP\xc6r\rp\xd0r\r\xc0\xd0r\r\x00\x9fj\r\x80\xc6r\r\x98\xd0r\r\x00\x9fj\r\xe0\xc6r\r\xe8\xd0r\r\x80\xd11\r\xe8\xd0r\r\x00\xd31\r8\xd1r\r\xe0\xd51\rP\xc6r\r\x00\xd31\r\xe0\xc6r\rP\xc6r\r\x10\xd1r\r\xc8\x9ej\r8\xd1r\r \xe0r\r\x00\xd31\r\xe0\xc6r\rP\xc6r\r\xb0\xc6r\rP\xc6r\r`\xd1r\r \xd0r\r@\xd41\r\xe8\xd0r\r\xc8\x9ej\rp\x9fj\r`\xd1r\r\x80\xd11\r\xc0\xefj\r\x10\xd1r\r\xd8\xd1r\r8\xd1r\r\xc0\xefj\r\x00\x9fj\r\xe8\xd0r\r\xe0\xd51\r\xe0\xc6r\r\xb0\xc6r\rH\xd0r\r\x00\x9fj\r\x80\xc6r\r\xc0\xd31\r\x80\xc6r\r\x00\xd31\rP\xc6r\r\xe0\xc6r\r\xe0\xd51\r8\xd1r\r\x10\xd1r\r\x98\xd0r\r\xe8\xd0r\rP\xd2r\r\x00\xd31\r\xc0\xefj\r\xa8\x9fj\r\x10\xc7r\rp\xd0r\r\xa8\x9fj\r\x98\xd0r\r\xb0\xc6r\r\x80\xc6r\r\xb0\xc6r\r\x00\x9fj\r\xc0\xd0r\rH\xd0r\r\xe0\xc6r\r\x80\xd11\r\xc0\xd31\r \xe0r\r\xc0\xd0r\r\x10\xd1r\r\xa0\xc7r\r\xd8\xd1r\r\x80\xc6r\r\xc0\xd0r\r\xc8\x9ej\r\xc0\xd0r\r\x98\xd0r\r\xc0\xd0r\rP\xc6r\rp\xd0r\rp\x9fj\r\xe0\xd51\r\x00\x9fj\r\xe8\xd0r\r`\xd1r\r\x10\xd1r\r\xb0\xc6r\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'`:L\r\x00:L\r\xe0:L\r\x807L\r\xa06L\r\xa05L\r\xa0:L\r\xc08L\r\xc0;L\r\x80:L\r@<L\r`;L\r :L\r`8L\r\xc09L\r`5L\r@6L\r\x80;L\r\xc0:L\r\xa0=L\r\xc0<L\r@;L\r\xe0|3\r\xa0{3\r z3\r\xe0z3\r\xa0}3\r`\x7f3\r\xa0z3\r`~3\r`}3\r@w3\r\xc0v3\r\x00w3\r`|3\r\xa0|3\r v3\r\xe0u3\r\x80u3\r`z3\r\xa0~3\r\xe0y3\r\xe0{3\r\xe0~3\r\xa0v3\r`x3\r`v3\r`y3\r\xa0x3\r`{3\r\xe0}3\r\xe0x3\r }3\r\xc0p3\r ~3\r\x80w3\r\x80p3\r\x00q3\r\xa0y3\r {3\r \x7f3\r |3\r\xe0p3\r y3\r\xa0p3\r`p3\r@p3\r q3\r`\xb00\r\xe0w3\r 2#\x03\xe0\xfe2\r@\xf32\r\x00\xf22\r\xa0\xfc2\r`\xff2\r \xff2\r@\xff2\r\x80\xff2\r`\xf22\r\xc0\xff2\r\xe0\xff2\r@\xf22\r\x80\xf02\r`\xf12\r@\xfe2\r`\xf32\r@\xf12\r \xf12\r\xc0\xf12\r\xa0\xf12\r\xc0\xfe2\r\xa0\xf22\r\xe0\xf22\r`\xfb2\r \xf32\r\x00\xf32\r\xa0\xff2\r\x80\xf12\r\xe0\xf12\r\x00\xff2\r@\xf42\r\xc0\xf32\r`\xfe2\r \xf22\r\xc0\xf22\r\x80\xfe2\r\xa0\xfe2\r\xa0\xf32\r \xf02\r\x80\xb10\r x3\r\x80\xf22\r\x00\xf42\r@\xbb0\r\x80\xf32\r\xc0\xe13\r\xa0@\xbb\x0c\xa0S$\x03`%2\r`-2\r\xa0/2\r\xc0/2\r\x80%2\r@\xb00\r @\xbb\x0c\x00=L\r\xe09L\r\xa0<L\r\xe0=L\r\xa0;L\r\x00<L\r\x80>L\r`<L\r >L\r`?L\r\xc0>L\r\xe0>L\r\x80?L\r =L\r 8L\r\xe0;L\r@9L\r\xc0?L\r\xe0?L\r\xa0?L\r <L\r\x00;L\r\xc0=L\r\x80=L\r@?L\r\xe0<L\r ?L\r\x809L\r@=L\r\x808L\r\xa0>L\r`=L\r\x00>L\r@:L\r`>L\r\xe0\xf32\r\xe08L\r\x00[$\x03\x80<L\r \x91\xb8\x0c\xe0\x91\xb8\x0c\xa0\x90\xb8\x0c\xc0\x91\xb8\x0c\xa0\x93\xb8\x0c\x00.2\r \xf42\r\x00\x94\xb8\x0c \x92\xb8\x0c\x00"K\r\xc0!K\r\xa0!K\r`#K\r@!K\r@ K\r@"K\r\xa0#K\r\xe0"K\r  K\r\x80#K\r\xa0(K\r\x00#K\r\xe0!K\r\xe0\x1d+\x05@\x19+\x05\xe0\xf52\r\x00\xf72\r\xa0\xfa2\r\xc0\xf82\r\x80\xf82\r\x80\xf72\r \xf62\r \xf82\r@\xf82\r\x00\xf82\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'd\x95\xd9?7S\x85@\xcce\xc6?\xce\xc9\xec?\xca\x98\xd9?\x83u\xf7?\x9a\xdb\xdd?.\xbc\x9b?\xacU\x95?$O\xe4?\x96 \x12@!*\xb3?\xb8b6@k\x97\xd9?\x82\x0b\xc0?\xb0\r\xb1?\xba\xcb\xac?\xca1\x93?\x14\x84\xe8?c`\x95?\x05\xdd\xfd?\xed \xc2?\xc5P\xf5?]\xcb\x8c?\xe0\xd1<@\x81S\x95?b"\x82?\xa6T\x15@\xdatw?\x11\xa3\xb9?\xffd\xe6?\x82\xb8\xbb?+\xca\xcc?\xb3v\xb7?\x80\xef\x8e?\x9f\x86(@\x97\xff\x9f?_\xcb\xec?$\x0f\x11@\xf8\xcc\xac?mc\xa6?_\xee\xae?\xef\x10\x11@daf?\xf2o\xa6?\x12\xef\xae?\xf1!\xc2?\xc0\xba\x9b?\xa1\xda\xbd?6)Q?!\x00\xa0?3\xde]?50\xd3?\xb5\xeb\xce?\xce\xfa\xbf?\xc5,\xd3?\x82\xdc\r@\xc2\xde]?\xcfv\'@\xca_\xb5?\xaf\xfb\x7f?\xbd\x90\x99?\x88\x87H@\xffe\x86?\'h\xa6?\xfa\xee\x8e?\xc1\xdc\x1d@\xea(\xb3?\xf3\xcd\xcc?,\x84\xb7?\xf8B4@:S\xb5?\xd8\xca,@\x80\xbb\x9b?\xa8P\xe4?\xd9B\xc4?\xa0\xec\xae?\xe8\x89\xa8?Q"\xa2?3~\xd7?\x8eP\xd5?O4\xb3?\x95\x10\x91?l0\xd3?\x16.\xc2?yew?\xdaO\xf5?\x0b\x11\x91?\xb3"\xa2?f\xd1\x8c?Q\xaa\x8a?\xac\xeb\x8e?\t\x10b?\xd9!\x12@\xd7e\x16@\xca\x10Q?\x97\xab\xca?\xcd\x989@\xfa\x0f\xb1?\xa0\x1b\xf1?Y\xda\xbd?\xc3\xb9\x9b?\xe2L\x95?\x07\xcc\xcc?\r-\xc2?*\x99\xf9?\xddew?z\xff\x7f?\xb5 \x02@\xaf8\x03@f\xd2\xfd?\xa2\xcc\xac?\x96v\xb7?\x13\x00\xc0?\xec>\xb3?#D\xa4?D\xbb\xfb?\x91C$@6\xa8j@Yc\xb5?\xecC\xc4?%\xee\xae?\xf8\x96\x99?[\xa5\xca?t\xd1\xec?\xae\xec\xae?\xee\xb8\x9b?\xfe\xa9\x8a?\xab\x98\x99?\xc3\xee\x8e?\xe3\xff\x9f?i@\xe4?\xc7\xa8\xca?\t"\xa2?\x15\x1c\x91?\xaa3\x93?\t\x1f\xc2?\xadf\xc6?\\[\xa4?\xa7^\x95?\x97\xfd\x9f?\xf9\xfb\xdf?\x14\xbc\x9b?\xa3\x1c\xa2?\x0b\x81\x97?\x1au\x97?}\xfe\xbf?\'e\xe6?}R\x95?a\x80\xb7?(\xcc\x8c?\x87f\x86?T\xa5\x8a?m\xef\x8e?\xa2r\xa6?\x07x\x97?\t \xc2?6f\x86?=f\xc6?Q\x8ew?\xbe\x11\xd1?W\x82\x88?ktw?\xd12s?s\x89\xa8?8\xef\x8e?\xde\xabj?TU\xb5?ua\x06@\xcc\xa4\xd9?\x9ab\xa6?/"\xc2?\x92u\x97?\x98\r\x91?z\xff\x9f?\x8dC\x04@4\xcc\xcc?\x16\xaa\x8a?8\x87\x88?\xcb>\x93?{\xb9{?\xdf\xc4L?3\xfd\xbf?\xc5\xfa\x7f?=\t\x80?\xee\xed\x8e?!\xeen?\xcfC\x04@\x8a\x9aY?\xd7\xffn?[\xdd]?\n\x8a\xa8?\xc9\x90\x99?\x06\x99\t@\xf6\x1c\xb1?\x84\xc6\x8c?;"\x82?\xcf\x10\xb1?\x85\xdd\r@\x1fQ\x84?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x00\xc5\x05\x05\x88\xc1\x05\x05\xb0#\xb1\x04p*\xb1\x04(!\xb1\x048&\xb1\x04\x88\'\xb1\x04\xe0 \xb1\x04\x00"\xb1\x04`(\xb1\x04\xd8%\xb1\x04\x90(\xb1\x04\xd8(\xb1\x04 )\xb1\x04\xd0*\xb1\x04\x88-\xb1\x04\xe0#\xb1\x04x(\xb1\x04\x18%\xb1\x04\xa8+\xb1\x04\x08/\xb1\x04\x18(\xb1\x04P)\xb1\x04\x80&\xb1\x04P \xb1\x040(\xb1\x04P/\xb1\x04p\'\xb1\x04\x98,\xb1\x04\xe8*\xb1\x04@-\xb1\x04`.\xb1\x04\xc8&\xb1\x04\xf0%\xb1\x04\x10!\xb1\x04\x08)\xb1\x04\x18"\xb1\x04\xf8#\xb1\x04\x00(\xb1\x04 ,\xb1\x04X$\xb1\x04 &\xb1\x04\xf8)\xb1\x04\xb8!\xb1\x04\x10$\xb1\x04\xb8\'\xb1\x04\x98&\xb1\x04\xf0(\xb1\x04\x00%\xb1\x04\xb0,\xb1\x04\x18+\xb1\x04@\'\xb1\x04\x00.\xb1\x04p-\xb1\x04\xb8-\xb1\x04\x00+\xb1\x04\xe0/\xb1\x04X*\xb1\x040%\xb1\x048 \xb1\x04p$\xb1\x040.\xb1\x04@*\xb1\x04\xd0!\xb1\x04\xa0\'\xb1\x04X\'\xb1\x04h#\xb1\x04 /\xb1\x04\xc8#\xb1\x04\x80/\xb1\x048#\xb1\x04\xf0+\xb1\x04(*\xb1\x04X!\xb1\x04\xe8-\xb1\x04\xa0-\xb1\x04\xd8.\xb1\x04\xf8&\xb1\x04\xc8,\xb1\x04\x88*\xb1\x04\xe8\'\xb1\x04\xe0,\xb1\x04\xa0*\xb1\x04\xa8.\xb1\x04\x90"\xb1\x04\xe0&\xb1\x04\xb0&\xb1\x04\x98/\xb1\x04x"\xb1\x04\x90.\xb1\x04H"\xb1\x04x.\xb1\x04\xb0)\xb1\x04\xd0-\xb1\x04\xb0/\xb1\x04@!\xb1\x04h&\xb1\x04\xc0(\xb1\x04\xe8!\xb1\x04\x98 \xb1\x04`+\xb1\x04H+\xb1\x04\xf0.\xb1\x048,\xb1\x04x+\xb1\x04\x10*\xb1\x04h/\xb1\x04X-\xb1\x04 #\xb1\x04\x18.\xb1\x04`%\xb1\x04\xc8 \xb1\x04\x98)\xb1\x04\xc0+\xb1\x04\x08#\xb1\x04h,\xb1\x048/\xb1\x04\xc8/\xb1\x04(\'\xb1\x04P&\xb1\x04\x08&\xb1\x04\xa8%\xb1\x04\xe8$\xb1\x04P,\xb1\x04H.\xb1\x04\xd0$\xb1\x04\x90+\xb1\x04\xc8)\xb1\x04\xd8+\xb1\x04\xa0\xb1\xdc\x0cH\xbe\xdc\x0c`\xbb\xdc\x0c\x18\xbe\xdc\x0c\x10\xba\xdc\x0c\xb8\xba\xdc\x0c\xc0\xbb\xdc\x0c\x10\xbd\xdc\x0cX\xbd\xdc\x0c\x88\xb1\xdc\x0c@\xba\xdc\x0c@\xbd\xdc\x0c\xb0\xbc\xdc\x0cp\xbd\xdc\x0ch\xbc\xdc\x0cP\xbf\xdc\x0c\xb0\xb6\xdc\x0c\x88\xb4\xdc\x0cX\xb7\xdc\x0c\xf8\xb9\xdc\x0c\x80\xb9\xdc\x0c\xb8\xbd\xdc\x0c`\xb2\xdc\x0c\xd8\xb2\xdc\x0c\xa0\xba\xdc\x0c\xd0\xb7\xdc\x0c\xd0\xb4\xdc\x0cP\xb9\xdc\x0cx\xbb\xdc\x0c\xa8\xb5\xdc\x0c\x18\xb5\xdc\x0c\xe0\xbf\xdc\x0c\xf0\xb2\xdc\x0c\xe8\xb7\xdc\x0c \xb9\xdc\x0c\xf8\xb6\xdc\x0c\x90\xb2\xdc\x0c\x80)\xb1\x04p!\xb1\x04\xf0"\xb1\x04\x88$\xb1\x040+\xb1\x04\xf8,\xb1\x048)\xb1\x04\x80#\xb1\x04H%\xb1\x04\xa8"\xb1\x04\x80 \xb1\x04\xa0$\xb1\x04\x88!\xb1\x04\x98#\xb1\x04H(\xb1\x04\xd0\'\xb1\x04\xb8*\xb1\x04P#\xb1\x04\x10\'\xb1\x04\xc0.\xb1\x04\x08,\xb1\x04\xd8"\xb1\x04\x88\xba\xdc\x0c\xa8(\xb1\x04\xb8$\xb1\x04(-\xb1\x04\xb0 \xb1\x040"\xb1\x04x%\xb1\x04@$\xb1\x04h)\xb1\x04  \xb1\x04\xc0%\xb1\x04($\xb1\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g937
sg895
g1035
sg909
g944
sg904
g1042
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1005
sg895
g1067
sg909
g1012
sg904
g1074
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1103
sg895
g1099
sg909
g1110
sg904
g1107
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1126
sg895
g1116
sg909
g1120
sg904
g1124
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1150
sg895
g1146
sg909
g1157
sg904
g1154
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1173
sg895
g1163
sg909
g1167
sg904
g1171
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1150
sg895
g1210
sg909
g1157
sg904
g1217
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1235
sg895
g1225
sg909
g1229
sg904
g1233
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1173
sg895
g1242
sg909
g1167
sg904
g1249
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1267
sg895
g1257
sg909
g1261
sg904
g1265
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1235
sg895
g1225
sg909
g1229
sg904
g1233
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1184
sg895
g1313
sg909
g1191
sg904
g1320
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g960
sg895
g1328
sg909
g954
sg904
g1335
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1347
sg895
g1343
sg909
g1354
sg904
g1351
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1173
sg895
g1163
sg909
g1167
sg904
g1171
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1126
sg895
g1116
sg909
g1120
sg904
g1124
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g937
sg895
g1035
sg909
g944
sg904
g1042
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1267
sg895
g1257
sg909
g1261
sg904
g1265
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1474
sg895
g1464
sg909
g1468
sg904
g1472
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g960
sg895
g1328
sg909
g954
sg904
g1335
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1498
sg895
g1494
sg909
g1505
sg904
g1502
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g920
sg895
g1511
sg909
g927
sg904
g1518
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g960
sg895
g1328
sg909
g954
sg904
g1335
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1267
sg895
g1539
sg909
g1261
sg904
g1546
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1474
sg895
g1567
sg909
g1468
sg904
g1574
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1022
sg895
g1582
sg909
g1029
sg904
g1589
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1474
sg895
g1464
sg909
g1468
sg904
g1472
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1054
sg895
g1623
sg909
g1061
sg904
g1630
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1347
sg895
g1638
sg909
g1354
sg904
g1645
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g937
sg895
g1035
sg909
g944
sg904
g1042
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1022
sg895
g1582
sg909
g1029
sg904
g1589
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1235
sg895
g1679
sg909
g1229
sg904
g1686
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1103
sg895
g1694
sg909
g1110
sg904
g1701
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g971
sg895
g1709
sg909
g978
sg904
g1716
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1103
sg895
g1694
sg909
g1110
sg904
g1701
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1474
sg895
g1567
sg909
g1468
sg904
g1574
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1022
sg895
g1582
sg909
g1029
sg904
g1589
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1126
sg895
g1763
sg909
g1120
sg904
g1770
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g971
sg895
g1709
sg909
g978
sg904
g1716
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1086
sg895
g1804
sg909
g1093
sg904
g1811
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g988
sg895
g1819
sg909
g995
sg904
g1826
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1022
sg895
g1582
sg909
g1029
sg904
g1589
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1086
sg895
g1804
sg909
g1093
sg904
g1811
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g937
sg895
g1035
sg909
g944
sg904
g1042
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g960
sg895
g1328
sg909
g954
sg904
g1335
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g900
sg895
g1925
sg909
g910
sg904
g1932
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1498
sg895
g1940
sg909
g1505
sg904
g1947
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1126
sg895
g1763
sg909
g1120
sg904
g1770
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1150
sg895
g1146
sg909
g1157
sg904
g1154
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g900
sg895
g1925
sg909
g910
sg904
g1932
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1235
sg895
g1679
sg909
g1229
sg904
g1686
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1267
sg895
g1257
sg909
g1261
sg904
g1265
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1103
sg895
g1099
sg909
g1110
sg904
g1107
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1347
sg895
g1343
sg909
g1354
sg904
g1351
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g920
sg895
g1511
sg909
g927
sg904
g1518
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1267
sg895
g1539
sg909
g1261
sg904
g1546
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g971
sg895
g1709
sg909
g978
sg904
g1716
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1086
sg895
g1804
sg909
g1093
sg904
g1811
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1103
sg895
g1694
sg909
g1110
sg904
g1701
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1347
sg895
g1638
sg909
g1354
sg904
g1645
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1267
sg895
g1257
sg909
g1261
sg904
g1265
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1184
sg895
g1313
sg909
g1191
sg904
g1320
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1347
sg895
g1343
sg909
g1354
sg904
g1351
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1498
sg895
g1494
sg909
g1505
sg904
g1502
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1086
sg895
g1804
sg909
g1093
sg904
g1811
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1347
sg895
g1343
sg909
g1354
sg904
g1351
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1498
sg895
g1940
sg909
g1505
sg904
g1947
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1173
sg895
g1242
sg909
g1167
sg904
g1249
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1103
sg895
g1694
sg909
g1110
sg904
g1701
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1235
sg895
g1225
sg909
g1229
sg904
g1233
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1150
sg895
g1210
sg909
g1157
sg904
g1217
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g900
sg895
g1925
sg909
g910
sg904
g1932
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1054
sg895
g1623
sg909
g1061
sg904
g1630
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1150
sg895
g1210
sg909
g1157
sg904
g1217
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1474
sg895
g1464
sg909
g1468
sg904
g1472
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1126
sg895
g1116
sg909
g1120
sg904
g1124
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1103
sg895
g1099
sg909
g1110
sg904
g1107
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1474
sg895
g1464
sg909
g1468
sg904
g1472
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1498
sg895
g1494
sg909
g1505
sg904
g1502
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1173
sg895
g1163
sg909
g1167
sg904
g1171
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1005
sg895
g1067
sg909
g1012
sg904
g1074
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1173
sg895
g1163
sg909
g1167
sg904
g1171
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g988
sg895
g1819
sg909
g995
sg904
g1826
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1267
sg895
g1539
sg909
g1261
sg904
g1546
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g900
sg895
g1925
sg909
g910
sg904
g1932
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1054
sg895
g1623
sg909
g1061
sg904
g1630
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g988
sg895
g1819
sg909
g995
sg904
g1826
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1498
sg895
g1494
sg909
g1505
sg904
g1502
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1235
sg895
g1679
sg909
g1229
sg904
g1686
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1267
sg895
g1539
sg909
g1261
sg904
g1546
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1005
sg895
g1067
sg909
g1012
sg904
g1074
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1498
sg895
g1940
sg909
g1505
sg904
g1947
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1054
sg895
g1623
sg909
g1061
sg904
g1630
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1184
sg895
g1313
sg909
g1191
sg904
g1320
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1347
sg895
g1638
sg909
g1354
sg904
g1645
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g937
sg895
g1035
sg909
g944
sg904
g1042
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1022
sg895
g1582
sg909
g1029
sg904
g1589
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1173
sg895
g1242
sg909
g1167
sg904
g1249
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g960
sg895
g1328
sg909
g954
sg904
g1335
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g971
sg895
g1709
sg909
g978
sg904
g1716
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1347
sg895
g1638
sg909
g1354
sg904
g1645
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g920
sg895
g1511
sg909
g927
sg904
g1518
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1235
sg895
g1225
sg909
g1229
sg904
g1233
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1267
sg895
g1539
sg909
g1261
sg904
g1546
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1474
sg895
g1464
sg909
g1468
sg904
g1472
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1173
sg895
g1163
sg909
g1167
sg904
g1171
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g900
sg895
g1925
sg909
g910
sg904
g1932
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1498
sg895
g1940
sg909
g1505
sg904
g1947
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1184
sg895
g1313
sg909
g1191
sg904
g1320
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1474
sg895
g1567
sg909
g1468
sg904
g1574
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1126
sg895
g1763
sg909
g1120
sg904
g1770
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1126
sg895
g1116
sg909
g1120
sg904
g1124
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1054
sg895
g1623
sg909
g1061
sg904
g1630
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1498
sg895
g1494
sg909
g1505
sg904
g1502
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1267
sg895
g1257
sg909
g1261
sg904
g1265
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1235
sg895
g1679
sg909
g1229
sg904
g1686
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1103
sg895
g1099
sg909
g1110
sg904
g1107
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1173
sg895
g1242
sg909
g1167
sg904
g1249
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1347
sg895
g1343
sg909
g1354
sg904
g1351
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g988
sg895
g1819
sg909
g995
sg904
g1826
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g920
sg895
g1511
sg909
g927
sg904
g1518
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1086
sg895
g1804
sg909
g1093
sg904
g1811
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g988
sg895
g1819
sg909
g995
sg904
g1826
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1103
sg895
g1694
sg909
g1110
sg904
g1701
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1126
sg895
g1763
sg909
g1120
sg904
g1770
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1184
sg895
g1180
sg909
g1191
sg904
g1188
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1474
sg895
g1567
sg909
g1468
sg904
g1574
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1150
sg895
g1146
sg909
g1157
sg904
g1154
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g971
sg895
g1709
sg909
g978
sg904
g1716
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1498
sg895
g1940
sg909
g1505
sg904
g1947
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1005
sg895
g1067
sg909
g1012
sg904
g1074
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1022
sg895
g1018
sg909
g1029
sg904
g1026
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1005
sg895
g1067
sg909
g1012
sg904
g1074
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1150
sg895
g1210
sg909
g1157
sg904
g1217
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1235
sg895
g1679
sg909
g1229
sg904
g1686
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1126
sg895
g1116
sg909
g1120
sg904
g1124
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g920
sg895
g1511
sg909
g927
sg904
g1518
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1126
sg895
g1763
sg909
g1120
sg904
g1770
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1150
sg895
g1146
sg909
g1157
sg904
g1154
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g960
sg895
g950
sg909
g954
sg904
g958
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1150
sg895
g1210
sg909
g1157
sg904
g1217
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1103
sg895
g1099
sg909
g1110
sg904
g1107
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1150
sg895
g1146
sg909
g1157
sg904
g1154
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1054
sg895
g1050
sg909
g1061
sg904
g1058
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1474
sg895
g1567
sg909
g1468
sg904
g1574
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1173
sg895
g1242
sg909
g1167
sg904
g1249
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1347
sg895
g1638
sg909
g1354
sg904
g1645
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1235
sg895
g1225
sg909
g1229
sg904
g1233
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1184
sg895
g1313
sg909
g1191
sg904
g1320
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I83751248
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\xa0\x92\xb9\x0cx\x92\xb9\x0cP\x92\xb9\x0c@\x84\xcb\x1eH[\xcb\x1e`\xf92\r\xa0Z\xcb\x1e\x80\xf42\r\xa0\x92\xb9\x0cp\x84\xcb\x1e\x00\x92\xb9\x0c\x80\xf42\r\xa0Z\xcb\x1e\xd8Z\xcb\x1e\xd8\x91\xb9\x0c\x80\xf42\r\x00\x92\xb9\x0c\x88\x91\xb9\x0c\x00\x92\xb9\x0c\xc0\xfa2\r\x90\x85\xcb\x1eP\x92\xb9\x0c\xa0\x84\xcb\x1e\x00\x85\xcb\x1eP\x92\xb9\x0c(\x92\xb9\x0c\xc0\xfa2\rp\x84\xcb\x1e`\xf92\r\x88\x91\xb9\x0c\xd0\x84\xcb\x1e\xa0\x84\xcb\x1e\x80\xf42\r\xa0\x92\xb9\x0c\x88\x91\xb9\x0c\xa0Z\xcb\x1e\x00\x92\xb9\x0c\xc0\x85\xcb\x1e@\xfb2\rP\x86\xcb\x1e\x00\x85\xcb\x1e\xe8\x90\xb9\x0c\xa0\x84\xcb\x1e\xb0\x91\xb9\x0c`\x91\xb9\x0c@\xfb2\r8\x91\xb9\x0c\xb0\x91\xb9\x0c\xd0\x84\xcb\x1eP\x92\xb9\x0c\x80[\xcb\x1e\xd8\x91\xb9\x0cP\x92\xb9\x0c\xa0\x84\xcb\x1e\xa0Z\xcb\x1ep\x84\xcb\x1e\xc0\xfa2\r(\x92\xb9\x0c\xb0\x91\xb9\x0c@\x84\xcb\x1e \x86\xcb\x1e`\xf92\r(\x92\xb9\x0c\xd8Z\xcb\x1e\x00\x92\xb9\x0c@\xfb2\r\x90\x85\xcb\x1e@\x84\xcb\x1e\xa0Z\xcb\x1e\xa0\x84\xcb\x1e\x00\x92\xb9\x0c\xc0\xfa2\r\x98\x90\xb9\x0c\xa0Z\xcb\x1ep\x84\xcb\x1e\x88\x91\xb9\x0c8\x91\xb9\x0cx\x92\xb9\x0c`\xf92\r\xb0\x91\xb9\x0cx\x92\xb9\x0c\x88\x91\xb9\x0c@\x84\xcb\x1e`\xf92\r@\x84\xcb\x1e`\x91\xb9\x0cp\x84\xcb\x1e\x00\x92\xb9\x0c\xd8Z\xcb\x1e\xc0\x85\xcb\x1e(\x92\xb9\x0c\xe0\xf92\r\xa0\x92\xb9\x0c\xf0[\xcb\x1e\x80\xf42\r(\x92\xb9\x0c\x88\x91\xb9\x0cx\x92\xb9\x0c8\x91\xb9\x0c\x80\xf42\r\xd8Z\xcb\x1e\xd8\x91\xb9\x0c\x80[\xcb\x1e@\xfb2\r\xa0\x92\xb9\x0c@\x84\xcb\x1e\xd8Z\xcb\x1e\xe0\xf92\rp\x90\xb9\x0c\x00\x92\xb9\x0c`\xf02\r\xd8\x91\xb9\x0cP\x86\xcb\x1e\xd0\x84\xcb\x1e\xa0\x84\xcb\x1e\x80\xf42\r\xa0\x84\xcb\x1e`\xf92\rP\x92\xb9\x0c\xa0Z\xcb\x1e`\x91\xb9\x0c\xb0\x91\xb9\x0c\xd8Z\xcb\x1e@\xfb2\rp\x84\xcb\x1e(\x92\xb9\x0c\xa0\x92\xb9\x0c`\x91\xb9\x0c\xa0\x92\xb9\x0c\xb0\x91\xb9\x0c\xa0Z\xcb\x1e\xc0\xfa2\r\xd0\x84\xcb\x1e@\xfb2\r\xd8Z\xcb\x1e\xa0\x92\xb9\x0c\xa0Z\xcb\x1e\x80\xf42\rp\x84\xcb\x1e\x00\x92\xb9\x0c\xd8\x91\xb9\x0cx\x92\xb9\x0c\xb8[\xcb\x1e(\x92\xb9\x0cH\x90\xb9\x0c\xd0\x84\xcb\x1eP\x92\xb9\x0c\x98\x90\xb9\x0c@\xfb2\r\xf0[\xcb\x1e@\xfb2\r`\x91\xb9\x0c\x00\x92\xb9\x0c`\xf02\r\xd8\x91\xb9\x0c(\x92\xb9\x0c@\x84\xcb\x1e`\xf02\r\xd8Z\xcb\x1e8\x91\xb9\x0c\xd0\x84\xcb\x1e\xd8Z\xcb\x1eH[\xcb\x1e`\x91\xb9\x0c@\x84\xcb\x1ep\x84\xcb\x1e8\x91\xb9\x0c@\xfb2\r\xa0Z\xcb\x1e\xd8\x91\xb9\x0c\xd0\x84\xcb\x1e0\x85\xcb\x1e\xc0\xfa2\r\xd0\x84\xcb\x1e\xb0\x91\xb9\x0c8\x91\xb9\x0c0\x85\xcb\x1e\xa0\x84\xcb\x1e\xc0\xfa2\r\xa0\x84\xcb\x1e\xd0\x84\xcb\x1e`\x91\xb9\x0c\xe8\x90\xb9\x0c`\xf92\r\xd8\x91\xb9\x0c\xa0\x84\xcb\x1e\x88\x91\xb9\x0cP\x92\xb9\x0c\xa0\x92\xb9\x0c`\xf02\r\xa0\x92\xb9\x0c`\xf92\r`\x91\xb9\x0cx\x92\xb9\x0c\xc0\xfa2\rx\x92\xb9\x0c`\x91\xb9\x0c\x88\x91\xb9\x0cx\x92\xb9\x0c\xb0\x91\xb9\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S"\xc0#K\r\x00'K\r`'K\r`(K\r\xc0&K\r`\xf72\r\xe0(K\r`&K\r\x80(K\r )K\r\xe0&K\r\xa0%K\r 'K\r`%K\r &K\r\xc0(K\r\x00%K\r` K\r@)K\r`)K\r\x00)K\r\x80)K\r\xa0)K\r\xc0)K\r\xe0)K\r\x00*K\r *K\r\x80*K\r\xa0*K\r\xa0'K\r\x80'K\r\x00+K\r\xe0*K\r@(K\r +K\r@+K\r\xa0+K\r\xc0+K\r (K\r\x00,K\r\xe0+K\r`*K\r ,K\r@,K\r\xa0,K\r\xc0,K\r\xc0'K\r\x00-K\r\xe0,K\r@-K\r -K\r\x80-K\r`-K\r\xc0-K\r\xe0-K\r\x00.K\r`+K\r\xa0&K\r .K\r\x80.K\r\xa0.K\r\xc0.K\r\xe0.K\r\x00(K\r /K\r\xa0/K\r@.K\r\x80+K\r@'K\r@/K\r\xa0-K\r\x00/K\r %K\r\xc0*K\r\xe0/K\r\x80,K\r`.K\r\x80/K\r`/K\r\xa0\x17+\x05`,K\r@*K\r \x82\xe5\x1e\xa0\x80\xe5\x1e`\x81\xe5\x1e\x00\x81\xe5\x1e@\x80\xe5\x1e\xc0\x81\xe5\x1e \x81\xe5\x1e\xa0\x81\xe5\x1e@\x82\xe5\x1e\xa0\x82\xe5\x1e`\x82\xe5\x1e\x80\x82\xe5\x1e\xc0\x82\xe5\x1e\xe0\x82\xe5\x1e@\x83\xe5\x1e \x83\xe5\x1e\xe0\x81\xe5\x1e`\x83\xe5\x1e\x80\x83\xe5\x1e\xe0\x83\xe5\x1e\x00\x84\xe5\x1e`\x80\xe5\x1e\x80\x80\xe5\x1e \x84\xe5\x1e@\x84\xe5\x1e`\x84\xe5\x1e\x80\x84\xe5\x1e\xe0\x84\xe5\x1e\xc0\x84\xe5\x1e\xe0\x80\xe5\x1e@\x85\xe5\x1e \x85\xe5\x1e\x80\x85\xe5\x1e`\x85\xe5\x1e\x00\x83\xe5\x1e\xa0\x85\xe5\x1e\x00\x86\xe5\x1e \x86\xe5\x1e\xa0\x84\xe5\x1e\x00\x85\xe5\x1e@\x86\xe5\x1e`\x86\xe5\x1e\x80\x86\xe5\x1e\xa0\x86\xe5\x1e\xc0\x86\xe5\x1e \x87\xe5\x1e@\x87\xe5\x1e\x00\x82\xe5\x1e\x80\x87\xe5\x1e`\x87\xe5\x1e\xc0\x87\xe5\x1e\xe0\x87\xe5\x1e\xc0\x85\xe5\x1e \x88\xe5\x1e\x00\x88\xe5\x1e`\x88\xe5\x1e\x80\x88\xe5\x1e\xc0\x83\xe5\x1e\xe0\x85\xe5\x1e\xe0\x88\xe5\x1e\xc0\x88\xe5\x1e\xc0\x80\xe5\x1e@\x89\xe5\x1e \x89\xe5\x1e \x80\xe5\x1e`\x89\xe5\x1e\xc0\x89\xe5\x1e\xe0\x89\xe5\x1e\x80\x81\xe5\x1e \x8a\xe5\x1e\x00\x8a\xe5\x1e\x00\x89\xe5\x1e\x80\x8a\xe5\x1e\xa0\x8a\xe5\x1e@\x88\xe5\x1e\xe0\x8a\xe5\x1e\xc0\x8a\xe5\x1e\xa0\x88\xe5\x1e\x00\x8b\xe5\x1e \x8b\xe5\x1e@\x8b\xe5\x1e`\x8b\xe5\x1e\xc0\x8b\xe5\x1e\xa0\x8b\xe5\x1e\x00\x8c\xe5\x1e \x8c\xe5\x1e@\x8c\xe5\x1e`\x8c\xe5\x1e\x80\x89\xe5\x1e\xa0\x8c\xe5\x1e\x80\x8c\xe5\x1e`\x8a\xe5\x1e\x00\x8d\xe5\x1e\x80\x8d\xe5\x1e@\x8d\xe5\x1e \x8d\xe5\x1e\xa0\x89\xe5\x1e\xa0\x8d\xe5\x1e\xc0\x8d\xe5\x1e\xa0\x87\xe5\x1e\x80\x8b\xe5\x1e\xe0\x8d\xe5\x1e\x00\x8e\xe5\x1e \x8e\xe5\x1e\x80\x8e\xe5\x1e\xa0\x8e\xe5\x1e`\x8d\xe5\x1e\xe0\x86\xe5\x1e\xc0\x8e\xe5\x1e \x8f\xe5\x1e\xa0\x8f\xe5\x1e@\x81\xe5\x1e\xe0\x8c\xe5\x1e\xe0\x8b\xe5\x1e\xe0\x8f\xe5\x1e`\x8e\xe5\x1e@\x8e\xe5\x1e\x80\x8f\xe5\x1e"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S']\xe7\xce?@C\xa4?\xc21\x93?\x9a\x88\xa8?%\xbc\xbb?u\xff\x9f?\xce\x87\xa8?\x84\xfb\x7f?\xa6\xd8\xbd?\xcce\xa6?\xda\xfa\x8e?\x00ww?EUU?`4\xf3?\xd8\xf5\xdf?eJs?\x84\xa9\x8a?\xb5c\xa6?\x8a \xa2?\xdbA\xe4?\'\xb8\x8a?\xa7\xca\x8c?\xa4\xee\xae?\xb8>\xe4?\x91\xed\xce?\x9a\xa3\xf9?\'g\xa6?K\xf9\x7f?\xf8\x96\x99?\x1b0s?*9\x13@\xe3\xfe\xbf?\x9dw\x97?\xc7Q\x95?\xc4\x96\x99?\xec\x0eQ?u\xa9\x8a?E]\x86?!D\x84?Bu\x07@\xf7~f?\xaf\xfe\x9f?\xecC\x84?\xff\x0f!@\x10\xb6{?\xf0\x0e\x80?"\xfa\x7f?\xa5\xaa\xea?3\x88\x88?tCD?\xaf4\xb3?\xcb9\x84?\x0f\xbc{?\xf1B\xa4?74s?\xfe2\x82?\xc8\x10\x91?:2\xb3?\x86\x89\x88?\xf8!\x82?\x0b\'Q?\x8c\xbb\x9b?{f\x86?\xcb!\xc2?\x84pw?\xfb\x1b\xf1?U\xbb{?\x98B\xa4?\x8d\xcaL?\xfdv\x97?\xa5nU?;\xec\x8e?l\xabj?=gf?\x1eC\xa4?\x0f\xfb\x8e?~\x99\x99?;\xcc\x8c?\x02$b?\xea\xff\x9f?\x04\xb3Y?O\x88H?\xbb\xdb]?\x1a\xebn?\x9dc\x86?\x0b\x98\x99?\xf9\x1fb?\xe4\x0fQ?\x17e\xe6?\xab\x15\x82?\x83=\x93?g2\xd3?\xc1\xf4\x7f?\xbcD\x84?yff?N\x8fw?\x9d\xb7{?}\xdd\xbd?\x0f\x89\xc8?j\x89\x88?\xcdI$@\xdb\xd7n?+\xaa\xaa?l\xfc\x9f?2\x95\x99?\xf2\xa9\x8a?\xcf\x11\x91?\x80\x10\x91?X\xee\xae?\xd6d\xa6?Y\xfc\x8e?\xac\x91j?\x9e\x87\xa8?\x02\x00\xe0?~\x98\x99?\xfa+\x82?lT\xb5?y\xba\x9b?\xca\x85\x88?\xac\xcdL?3.\x82?\x8dv\xb7?\xfa\x0e\x91?\x08d\xa6?=f\xa6?\x05\x1a\xb1?\x16Q\x95?\x85e\x86?+@\x84?P\xee\x8e?\xb7\x99Y?rw\xb7?N"b?kC\xa4?\x9a\xdb\xbd?w\xe6\x9d?\x89\xde]?\xf51s?\xa4f\x86?u\xaa\xaa?\r\xf2\x8e?\xaeD\xa4?:\xbb\x9b?\x16\xa8\x8a?\x99ww?\xf3\x90w?J"\x82?LC\x84?wa\xa6?\xf2\x84\x88?\x13\x90\x88?\xbd\xfb\x7f?\x98.s?\n\xa7\xaa?\xe8\x04\xb1?s\xfe\x9f?Y0s?\x8cc\xa6?\xa0u\x97?P\xb8\x9b?\xa9xw?\xab.s?\xe8\xccL?[\xff\x9f?\xf4!b?r\xd0{?\x02\xff\x7f?\xbc\xee\x8e?`\xa9\x8a?/*\x93?\x93\xd2{?|\xff\x9f?H\xfc\x7f?\xe0C\x84?w\xee\xce?\xb0:b?\xfa\xda\x9d?\xd9\x98\xb9?\xf2\xfd\xbf?@y\x97?\x02\xedn?\xc3C\xc4?\x19\xefn?\x83"b?G\xef\x7f?\xac\xadY?\xac\xaaj?;\xb8\x9b?`s\x97?\x9d\x99\x99?\xd4\xcb{?p\xee\xae?\x0c\xaa\x8a?^\xde\x9d?\xa2b\xa6?\xe3\x8fw?\xe4\xdb\x9d?\xa8\xa4j?9\xeen?\x96\xed\xee?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'\x90\xbe\xdc\x0c\xa0\xb4\xdc\x0c\xa8\xcb\x05\x05\x98\xcc\x05\x05\xc0\xc5\x05\x05\xd8\xc2\x05\x05P\xcc\x05\x05\x08\xc9\x05\x05p\xc1\x05\x05\xc0\xce\x05\x05\xc0\xcb\x05\x05\xd0\xcd\x05\x05\xa0\xca\x05\x050\xcb\x05\x050\xce\x05\x058\xcf\x05\x05@\xc7\x05\x050\xc2\x05\x05\xd0\xca\x05\x05 \xcc\x05\x05\xa0\xc4\x05\x05h\xcf\x05\x05\xb0\xcc\x05\x05\x98\xc9\x05\x05\x08\xcf\x05\x05`\xc5\x05\x05\xa8\xc8\x05\x05\x90\xc2\x05\x05\x90\xcb\x05\x05\x98\xcf\x05\x05H\xc2\x05\x05P\xcf\x05\x05\x00\xc8\x05\x05x\xc8\x05\x05\x00\xc2\x05\x05\xc8\xcc\x05\x05X\xc1\x05\x05h\xc9\x05\x05\xd8\xcb\x05\x05\xf8\xcc\x05\x05\xf0\xc8\x05\x05\x08\xc3\x05\x05\xb8\xca\x05\x05p\xcd\x05\x05h\xc6\x05\x05\x10\xc7\x05\x05\xe0\xc3\x05\x05\xc8\xc3\x05\x05\x98\xc6\x05\x05\x88\xcd\x05\x05H\xce\x05\x058\xc6\x05\x05\xa8\xce\x05\x05\x10\xc4\x05\x05\x90\xce\x05\x05\x80\xc3\x05\x05\xf0\xc2\x05\x05\x18\xcb\x05\x05\x90\xc5\x05\x05\xb0\xcf\x05\x05\xb0\xc9\x05\x05\xb0\xc0\x05\x05\x00\xcb\x05\x05\x18\xc5\x05\x05`\xcb\x05\x05\x18\xc2\x05\x05\xe0\xc9\x05\x05\x10\xcd\x05\x05\xa8\xc5\x05\x05\xe0\xcc\x05\x05\xd0\xc1\x05\x05(\xc7\x05\x05\xb0\xc6\x05\x05\x88\xc4\x05\x05X\xca\x05\x05\xa0\xc7\x05\x05p\xc4\x05\x05`\xc2\x05\x05\xd8\xc5\x05\x050\xc5\x05\x05\xe8\xc7\x05\x050\xc8\x05\x05\xd0\xc7\x05\x05X\xc4\x05\x05P\xc0\x05\x05\xb8gf\x02H\xceH\x02\xe0\xc0H\x02\xc8f\xe1\x04\x88d\xe1\x04\xc0e\xe1\x04\x00\xbe\xdc\x0c`\xbe\xdc\x0ch\xb9\xdc\x0c\xc8\xb9\xdc\x0c \xbc\xdc\x0cP\xb6\xdc\x0c\x08\xb9\xdc\x0ch\xb0\xdc\x0c\xc8\xb3\xdc\x0c0\xbb\xdc\x0c(\xb7\xdc\x0c\xd0\xbd\xdc\x0c\xc0\xb5\xdc\x0c\xe0\xbc\xdc\x0c\xc8\xb6\xdc\x0c\x98\xb9\xdc\x0c\xd0\xba\xdc\x0c\x80\xb6\xdc\x0c\x18\xbb\xdc\x0c\x08\xbf\xdc\x0c\x00\xb2\xdc\x0c`\xb8\xdc\x0cx\xb8\xdc\x0c\xd8\xb8\xdc\x0ch\xb6\xdc\x0c\x00\xb5\xdc\x0c8\xb6\xdc\x0c8\xb3\xdc\x0c\x08\xb3\xdc\x0c\xa8\xbe\xdc\x0c\xb0\xbf\xdc\x0c\xa8\xbb\xdc\x0c\xa8\xb2\xdc\x0c\x80\xb0\xdc\x0c\x80O\xb2\x048@\xb2\x04\x80I\xb2\x04hF\xb2\x04\x00K\xb2\x04\xf8F\xb2\x04\xb0O\xb2\x04\x98C\xb2\x04\x90N\xb2\x04\x10G\xb2\x04\xc0H\xb2\x04\x00N\xb2\x04\x98@\xb2\x04\x08F\xb2\x040K\xb2\x04`E\xb2\x04\xc0N\xb2\x04PL\xb2\x048F\xb2\x04 F\xb2\x04\xa8K\xb2\x04\x98I\xb2\x04\xe8G\xb2\x04\xb0I\xb2\x04hL\xb2\x04pJ\xb2\x04XJ\xb2\x04(J\xb2\x04HH\xb2\x048O\xb2\x04\xd0D\xb2\x04\xa0D\xb2\x04\x18B\xb2\x048C\xb2\x04\xb0F\xb2\x04\xb8M\xb2\x04\x80L\xb2\x04hO\xb2\x04\xc8O\xb2\x04\xb8\xc1\x05\x05\xe8\xcd\x05\x05(\xcd\x05\x05\xb8\xc7\x05\x05x\xcb\x05\x05H\xc8\x05\x05 \xcf\x05\x05(\xca\x05\x058\xcc\x05\x05\xc8\xc0\x05\x05(\xc4\x05\x05\x88\xca\x05\x05\x10\xc1\x05\x05P\xc6\x05\x05\xf8\xc3\x05\x05\xf8\xc6\x05\x05\x80\xcc\x05\x05\xe0\xcf\x05\x05x\xc2\x05\x05X\xc7\x05\x05h\xc0\x05\x05\xe8\xc1\x05\x05\xb8\xc4\x05\x05\x88\xc7\x05\x05\xf8\xc9\x05\x05p\xca\x05\x05\xe8\xca\x05\x05\xc0\xc8\x05\x05\x80\xcf\x05\x05\xa0\xcd\x05\x05\x08\xc6\x05\x05\x08\xcc\x05\x05`\xce\x05\x05`\xc8\x05\x05\xc8\xcf\x05\x05 \xc9\x05\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3743
sg3633
g3833
sg3647
g3750
sg3642
g3840
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3807
sg3633
g3895
sg3647
g3814
sg3642
g3902
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3914
sg3633
g3910
sg3647
g3921
sg3642
g3918
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3807
sg3633
g3895
sg3647
g3814
sg3642
g3902
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3944
sg3633
g3940
sg3647
g3951
sg3642
g3948
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3790
sg3633
g3957
sg3647
g3797
sg3642
g3964
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3989
sg3633
g3985
sg3647
g3996
sg3642
g3993
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3658
sg3633
g4002
sg3647
g3665
sg3642
g4009
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3675
sg3633
g4017
sg3647
g3682
sg3642
g4024
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3715
sg3633
g4032
sg3647
g3709
sg3642
g4039
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3944
sg3633
g3940
sg3647
g3951
sg3642
g3948
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3790
sg3633
g3957
sg3647
g3797
sg3642
g3964
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3914
sg3633
g3910
sg3647
g3921
sg3642
g3918
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3989
sg3633
g3985
sg3647
g3996
sg3642
g3993
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3760
sg3633
g4129
sg3647
g3767
sg3642
g4136
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3914
sg3633
g3910
sg3647
g3921
sg3642
g3918
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3743
sg3633
g3833
sg3647
g3750
sg3642
g3840
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3807
sg3633
g3895
sg3647
g3814
sg3642
g3902
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4213
sg3633
g4209
sg3647
g4220
sg3642
g4217
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g4236
sg3633
g4226
sg3647
g4230
sg3642
g4234
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3989
sg3633
g4269
sg3647
g3996
sg3642
g4276
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4236
sg3633
g4226
sg3647
g4230
sg3642
g4234
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g4301
sg3633
g4297
sg3647
g4308
sg3642
g4305
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4213
sg3633
g4209
sg3647
g4220
sg3642
g4217
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4331
sg3633
g4327
sg3647
g4338
sg3642
g4335
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g4236
sg3633
g4344
sg3647
g4230
sg3642
g4351
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4103
sg3633
g4359
sg3647
g4110
sg3642
g4366
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3675
sg3633
g4017
sg3647
g3682
sg3642
g4024
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3989
sg3633
g3985
sg3647
g3996
sg3642
g3993
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3944
sg3633
g4465
sg3647
g3951
sg3642
g4472
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4236
sg3633
g4226
sg3647
g4230
sg3642
g4234
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4213
sg3633
g4584
sg3647
g4220
sg3642
g4591
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3790
sg3633
g3957
sg3647
g3797
sg3642
g3964
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3989
sg3633
g3985
sg3647
g3996
sg3642
g3993
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3807
sg3633
g3895
sg3647
g3814
sg3642
g3902
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3944
sg3633
g3940
sg3647
g3951
sg3642
g3948
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3914
sg3633
g3910
sg3647
g3921
sg3642
g3918
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3790
sg3633
g3957
sg3647
g3797
sg3642
g3964
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3914
sg3633
g4716
sg3647
g3921
sg3642
g4723
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4331
sg3633
g4327
sg3647
g4338
sg3642
g4335
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3658
sg3633
g4002
sg3647
g3665
sg3642
g4009
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4236
sg3633
g4226
sg3647
g4230
sg3642
g4234
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3914
sg3633
g4716
sg3647
g3921
sg3642
g4723
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3692
sg3633
g4809
sg3647
g3699
sg3642
g4816
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4301
sg3633
g4297
sg3647
g4308
sg3642
g4305
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3790
sg3633
g3957
sg3647
g3797
sg3642
g3964
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3807
sg3633
g3895
sg3647
g3814
sg3642
g3902
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3869
sg3633
g4902
sg3647
g3876
sg3642
g4909
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3715
sg3633
g4032
sg3647
g3709
sg3642
g4039
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3726
sg3633
g4930
sg3647
g3733
sg3642
g4937
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3638
sg3633
g4945
sg3647
g3648
sg3642
g4952
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3944
sg3633
g3940
sg3647
g3951
sg3642
g3948
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3760
sg3633
g4129
sg3647
g3767
sg3642
g4136
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3715
sg3633
g4032
sg3647
g3709
sg3642
g4039
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3914
sg3633
g4716
sg3647
g3921
sg3642
g4723
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3658
sg3633
g4002
sg3647
g3665
sg3642
g4009
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4331
sg3633
g5025
sg3647
g4338
sg3642
g5032
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3760
sg3633
g4129
sg3647
g3767
sg3642
g4136
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3869
sg3633
g4902
sg3647
g3876
sg3642
g4909
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3760
sg3633
g4129
sg3647
g3767
sg3642
g4136
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4213
sg3633
g4209
sg3647
g4220
sg3642
g4217
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3638
sg3633
g4945
sg3647
g3648
sg3642
g4952
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3692
sg3633
g4809
sg3647
g3699
sg3642
g4816
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3852
sg3633
g5131
sg3647
g3859
sg3642
g5138
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3726
sg3633
g4930
sg3647
g3733
sg3642
g4937
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4213
sg3633
g4209
sg3647
g4220
sg3642
g4217
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4331
sg3633
g5025
sg3647
g4338
sg3642
g5032
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3869
sg3633
g4902
sg3647
g3876
sg3642
g4909
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4236
sg3633
g4344
sg3647
g4230
sg3642
g4351
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4103
sg3633
g4359
sg3647
g4110
sg3642
g4366
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3989
sg3633
g4269
sg3647
g3996
sg3642
g4276
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3760
sg3633
g3756
sg3647
g3767
sg3642
g3764
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3989
sg3633
g4269
sg3647
g3996
sg3642
g4276
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3726
sg3633
g4930
sg3647
g3733
sg3642
g4937
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3675
sg3633
g4017
sg3647
g3682
sg3642
g4024
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3743
sg3633
g3833
sg3647
g3750
sg3642
g3840
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4301
sg3633
g4297
sg3647
g4308
sg3642
g4305
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g4236
sg3633
g4226
sg3647
g4230
sg3642
g4234
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3852
sg3633
g5131
sg3647
g3859
sg3642
g5138
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g4213
sg3633
g4584
sg3647
g4220
sg3642
g4591
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g4301
sg3633
g5406
sg3647
g4308
sg3642
g5413
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3638
sg3633
g4945
sg3647
g3648
sg3642
g4952
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4236
sg3633
g4344
sg3647
g4230
sg3642
g4351
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3743
sg3633
g3833
sg3647
g3750
sg3642
g3840
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3944
sg3633
g4465
sg3647
g3951
sg3642
g4472
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g4103
sg3633
g4359
sg3647
g4110
sg3642
g4366
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4213
sg3633
g4584
sg3647
g4220
sg3642
g4591
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3852
sg3633
g3848
sg3647
g3859
sg3642
g3856
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3743
sg3633
g3833
sg3647
g3750
sg3642
g3840
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3760
sg3633
g4129
sg3647
g3767
sg3642
g4136
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3869
sg3633
g4902
sg3647
g3876
sg3642
g4909
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3658
sg3633
g4002
sg3647
g3665
sg3642
g4009
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3852
sg3633
g5131
sg3647
g3859
sg3642
g5138
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3715
sg3633
g4032
sg3647
g3709
sg3642
g4039
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4301
sg3633
g4297
sg3647
g4308
sg3642
g4305
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3675
sg3633
g4017
sg3647
g3682
sg3642
g4024
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3914
sg3633
g3910
sg3647
g3921
sg3642
g3918
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4213
sg3633
g4209
sg3647
g4220
sg3642
g4217
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3944
sg3633
g4465
sg3647
g3951
sg3642
g4472
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4213
sg3633
g4584
sg3647
g4220
sg3642
g4591
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g4301
sg3633
g5406
sg3647
g4308
sg3642
g5413
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3807
sg3633
g3803
sg3647
g3814
sg3642
g3811
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4331
sg3633
g4327
sg3647
g4338
sg3642
g4335
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3715
sg3633
g3705
sg3647
g3709
sg3642
g3713
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3692
sg3633
g4809
sg3647
g3699
sg3642
g4816
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g4331
sg3633
g5025
sg3647
g4338
sg3642
g5032
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3852
sg3633
g5131
sg3647
g3859
sg3642
g5138
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4331
sg3633
g5025
sg3647
g4338
sg3642
g5032
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3852
sg3633
g5131
sg3647
g3859
sg3642
g5138
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3715
sg3633
g4032
sg3647
g3709
sg3642
g4039
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g4301
sg3633
g5406
sg3647
g4308
sg3642
g5413
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3692
sg3633
g4809
sg3647
g3699
sg3642
g4816
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3790
sg3633
g3786
sg3647
g3797
sg3642
g3794
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g4331
sg3633
g4327
sg3647
g4338
sg3642
g4335
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4213
sg3633
g4584
sg3647
g4220
sg3642
g4591
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3743
sg3633
g3739
sg3647
g3750
sg3642
g3747
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3869
sg3633
g3865
sg3647
g3876
sg3642
g3873
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4103
sg3633
g4359
sg3647
g4110
sg3642
g4366
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3944
sg3633
g4465
sg3647
g3951
sg3642
g4472
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4103
sg3633
g4359
sg3647
g4110
sg3642
g4366
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4236
sg3633
g4344
sg3647
g4230
sg3642
g4351
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4331
sg3633
g4327
sg3647
g4338
sg3642
g4335
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3692
sg3633
g4809
sg3647
g3699
sg3642
g4816
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3989
sg3633
g4269
sg3647
g3996
sg3642
g4276
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3944
sg3633
g3940
sg3647
g3951
sg3642
g3948
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3989
sg3633
g4269
sg3647
g3996
sg3642
g4276
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4301
sg3633
g5406
sg3647
g4308
sg3642
g5413
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3675
sg3633
g4017
sg3647
g3682
sg3642
g4024
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3726
sg3633
g4930
sg3647
g3733
sg3642
g4937
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3869
sg3633
g4902
sg3647
g3876
sg3642
g4909
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3989
sg3633
g3985
sg3647
g3996
sg3642
g3993
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3914
sg3633
g4716
sg3647
g3921
sg3642
g4723
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3638
sg3633
g4945
sg3647
g3648
sg3642
g4952
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4331
sg3633
g5025
sg3647
g4338
sg3642
g5032
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3638
sg3633
g4945
sg3647
g3648
sg3642
g4952
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3726
sg3633
g4930
sg3647
g3733
sg3642
g4937
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4301
sg3633
g5406
sg3647
g4308
sg3642
g5413
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3944
sg3633
g4465
sg3647
g3951
sg3642
g4472
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4301
sg3633
g4297
sg3647
g4308
sg3642
g4305
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3914
sg3633
g4716
sg3647
g3921
sg3642
g4723
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3658
sg3633
g4002
sg3647
g3665
sg3642
g4009
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4236
sg3633
g4344
sg3647
g4230
sg3642
g4351
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I83751248
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'hS\x0c\x1f0S\x0c\x1f\x90{\x0b\x1f\xc0{\x0b\x1f`a\x0c\x1f\x90{\x0b\x1fPr\x0c\x1f\xc0p\x0c\x1f\xe0|\x0b\x1f0S\x0c\x1f\x10q\x0c\x1f\xc0{\x0b\x1f\x10q\x0c\x1f8q\x0c\x1f\x80a\x0c\x1f`q\x0c\x1f\xf0{\x0b\x1f\x98p\x0c\x1f\xa0r\x0c\x1f\x88q\x0c\x1f\xb0q\x0c\x1f\xc0p\x0c\x1f`a\x0c\x1f |\x0b\x1f\x80a\x0c\x1f\xa0a\x0c\x1f\xf0{\x0b\x1f\xd8q\x0c\x1f\xc0p\x0c\x1f\xc0a\x0c\x1f8q\x0c\x1f\x00r\x0c\x1f\xa0a\x0c\x1f\x80a\x0c\x1f\xc8r\x0c\x1f\x88q\x0c\x1f\x10q\x0c\x1f\xf8R\x0c\x1f\x98p\x0c\x1f\xc0{\x0b\x1f`q\x0c\x1f8q\x0c\x1f\xa0a\x0c\x1f\xe8p\x0c\x1f`a\x0c\x1f\x98p\x0c\x1f\x90{\x0b\x1f\x10q\x0c\x1f |\x0b\x1f\xf8R\x0c\x1fPr\x0c\x1f\x88q\x0c\x1f\x00r\x0c\x1f\xe8p\x0c\x1f\x88q\x0c\x1f0S\x0c\x1f\x98p\x0c\x1f\x80a\x0c\x1f |\x0b\x1f\xb0q\x0c\x1f\xc0{\x0b\x1f\xc0a\x0c\x1f\xa0S\x0c\x1f\xf0{\x0b\x1f\xa0}\x0b\x1f\xf0{\x0b\x1f\xa0S\x0c\x1f\xc0{\x0b\x1f\xc0a\x0c\x1f\xf0r\x0c\x1f\xc8r\x0c\x1f\xc0p\x0c\x1f\xc0{\x0b\x1f\xa0S\x0c\x1f |\x0b\x1f\x90{\x0b\x1f\xe8p\x0c\x1f\x80a\x0c\x1f\x88q\x0c\x1f\x80|\x0b\x1f\xa0a\x0c\x1fhS\x0c\x1f\xc0a\x0c\x1f\xd8q\x0c\x1f\x00r\x0c\x1f\x00b\x0c\x1f\xd8q\x0c\x1f`q\x0c\x1f\xa0}\x0b\x1f\x10q\x0c\x1f\xc8r\x0c\x1f\xc0{\x0b\x1f\xf0r\x0c\x1f\xd8q\x0c\x1f\xf0{\x0b\x1f\xb0q\x0c\x1f8q\x0c\x1f\xc0{\x0b\x1f\xf8R\x0c\x1f\x90{\x0b\x1fhS\x0c\x1f\x88q\x0c\x1f\x80a\x0c\x1f\xf8R\x0c\x1f\xe8p\x0c\x1f\xd8q\x0c\x1f\xf0{\x0b\x1f\xa0}\x0b\x1f0S\x0c\x1f\x80a\x0c\x1f\xb0q\x0c\x1f\xa0a\x0c\x1f\x98p\x0c\x1f\x10q\x0c\x1f\xd8q\x0c\x1f\x00r\x0c\x1f\x98p\x0c\x1f\x88q\x0c\x1f`q\x0c\x1f\xd8q\x0c\x1f\x80a\x0c\x1f\xf8R\x0c\x1f\xf0{\x0b\x1f\xb0q\x0c\x1f0S\x0c\x1fxr\x0c\x1f\xe8p\x0c\x1f\x00b\x0c\x1f\xf0{\x0b\x1f\x10q\x0c\x1f\x80|\x0b\x1f\x00r\x0c\x1f |\x0b\x1f\xd8q\x0c\x1f\x10}\x0b\x1f\x00r\x0c\x1f\xc0{\x0b\x1f0S\x0c\x1f |\x0b\x1f\xa0r\x0c\x1f\xc0p\x0c\x1f0S\x0c\x1f\x80a\x0c\x1f`q\x0c\x1f\x88q\x0c\x1f\xc0{\x0b\x1f\xb0q\x0c\x1f\x88q\x0c\x1f\xe8p\x0c\x1f0S\x0c\x1f8q\x0c\x1f\x00b\x0c\x1f\xd8q\x0c\x1f\x10q\x0c\x1f\xf8R\x0c\x1fPr\x0c\x1f\x90{\x0b\x1f\xc0p\x0c\x1fp}\x0b\x1f`q\x0c\x1f\xc0a\x0c\x1f\x00r\x0c\x1f\xd8q\x0c\x1f`a\x0c\x1f\xc0p\x0c\x1f\xc0a\x0c\x1f\x80a\x0c\x1f\x98p\x0c\x1fp}\x0b\x1f\xe0|\x0b\x1f\xc0p\x0c\x1f8q\x0c\x1f\xe0|\x0b\x1f`a\x0c\x1f\x80|\x0b\x1f\xb0q\x0c\x1f8q\x0c\x1f\xa0a\x0c\x1f\xc0a\x0c\x1f0S\x0c\x1f |\x0b\x1f\x10q\x0c\x1f8q\x0c\x1f\x88q\x0c\x1f\xf0{\x0b\x1f\xc0p\x0c\x1f\xb0q\x0c\x1f\x00r\x0c\x1f\x90{\x0b\x1f0S\x0c\x1f\xa0r\x0c\x1f@}\x0b\x1f\xc8r\x0c\x1f\xa0S\x0c\x1f\xe8p\x0c\x1f8q\x0c\x1fhS\x0c\x1f\xc0p\x0c\x1f`q\x0c\x1f`a\x0c\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@d\x0c\x1f\xc0b\x0c\x1f\xe0\x18+\x05 b\x0c\x1f c\x0c\x1f\xc0d\x0c\x1f@c\x0c\x1f\xa0b\x0c\x1f\x00c\x0c\x1f`b\x0c\x1f`c\x0c\x1f\xe0d\x0c\x1f d\x0c\x1f\x80d\x0c\x1f\x00e\x0c\x1f@e\x0c\x1f e\x0c\x1f\x80e\x0c\x1f\xa0e\x0c\x1f\xc0c\x0c\x1f\x80c\x0c\x1f\xc0e\x0c\x1f f\x0c\x1f\x00f\x0c\x1f`f\x0c\x1f@f\x0c\x1f\xa0f\x0c\x1f@b\x0c\x1f g\x0c\x1f`d\x0c\x1f\x80f\x0c\x1f\xa0\x19+\x05\xe0f\x0c\x1f\xe0b\x0c\x1f\xa0d\x0c\x1f h\x0c\x1f@h\x0c\x1f\x00g\x0c\x1f\xe0c\x0c\x1f`g\x0c\x1f\x80h\x0c\x1f\xa0g\x0c\x1f\xc0g\x0c\x1f\xc0h\x0c\x1f\x00i\x0c\x1f`h\x0c\x1f\xa0i\x0c\x1f\x00h\x0c\x1f@i\x0c\x1f`e\x0c\x1f\x00d\x0c\x1f\x80i\x0c\x1f\x80g\x0c\x1f\x00j\x0c\x1f\xe0h\x0c\x1f\xc0i\x0c\x1f j\x0c\x1f\xe0g\x0c\x1f\xa0h\x0c\x1f@k\x0c\x1f\xc0j\x0c\x1f i\x0c\x1f\xe0i\x0c\x1f`k\x0c\x1f\x80j\x0c\x1f\xa0k\x0c\x1f k\x0c\x1f@g\x0c\x1f\x00l\x0c\x1f\xe0e\x0c\x1f\xa0l\x0c\x1f@j\x0c\x1f\xc0l\x0c\x1f\x80l\x0c\x1f@\x8a\xe5\x1e\xc0f\x0c\x1f@l\x0c\x1f\x00m\x0c\x1f\xe0j\x0c\x1f\xe0k\x0c\x1f m\x0c\x1f`m\x0c\x1f\xe0m\x0c\x1f@n\x0c\x1f\x00n\x0c\x1f\xa0n\x0c\x1f`j\x0c\x1f n\x0c\x1f\xc0m\x0c\x1f\x80b\x0c\x1f o\x0c\x1f`o\x0c\x1f\x00o\x0c\x1f@o\x0c\x1f l\x0c\x1f\xe0l\x0c\x1f\x80m\x0c\x1f\xa0j\x0c\x1f\xe0o\x0c\x1f\xa0m\x0c\x1f`i\x0c\x1f\xe0n\x0c\x1f`l\x0c\x1f\x80n\x0c\x1f\xc0n\x0c\x1f\xc0o\x0c\x1f\x00k\x0c\x1f`n\x0c\x1f\x80k\x0c\x1f\xc0k\x0c\x1f@m\x0c\x1f\xa0o\x0c\x1f \xf02\x1f@\xf22\x1f\x80\xf02\x1f\x80\xf12\x1f \xf12\x1f@\xf02\x1f\xe0\xf12\x1f`\xf22\x1f\xc0\xf22\x1f\x80\xf22\x1f\xa0\xf02\x1f\xe0\xf22\x1f\xa0\xf22\x1f \xf32\x1f@\xf32\x1f@\xf12\x1f\xc0\xf32\x1f\x80\xf32\x1f\xc0\xf12\x1f`\xf02\x1f\xc0\xf02\x1f\xe0\xf32\x1f@\xf42\x1f \xf42\x1f\xe0\xf02\x1f`\xf42\x1f\xc0\xf42\x1f\xe0\xf42\x1f\xa0\xf32\x1f`\xf12\x1f\x80o\x0c\x1f\x00\xf12\x1f@\xf52\x1f \xf52\x1f\x00\xf32\x1f`\xf52\x1f`\xf62\x1f\x80\xf62\x1f\x00\xf22\x1f\x00\xf52\x1f\xa0\xf12\x1f\x80\xf52\x1f\xc0\xf52\x1f\xa0\xf42\x1f`\xf72\x1f`\xf32\x1f\xa0\xf62\x1f@\xf62\x1f\x00\xf42\x1f\xa0\xf72\x1f@\xf82\x1f \xf62\x1f\xe0\xf72\x1f\xc0\xf72\x1f\x00\xf72\x1f@\xf72\x1f\x00\xf92\x1f\xa0\xf52\x1f\x80\xf42\x1f\xc0\xf62\x1f`\xf82\x1f\x00\xf62\x1f\x80\xf82\x1f\xe0\xf52\x1f \xf92\x1f\xc0\xf82\x1f\xa0\xf92\x1f\x80\xf92\x1f`\xfa2\x1f\xe0\xf62\x1f\x00\xf82\x1f \xf72\x1f\xe0\xf92\x1f\x80\xf72\x1f\xe0\xf82\x1f@\xfb2\x1f\xe0\xfa2\x1f\x80\xfb2\x1f\xc0\xfa2\x1f`\xf92\x1f\x00\xfb2\x1f\x00\xfa2\x1f \xfc2\x1f\xc0\xfb2\x1f\xe0\xfb2\x1f\xa0\xfb2\x1f\xa0\xfa2\x1f\xe0\xfc2\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x84q\xf7?,\xef\x8e?\x08\x86\x88?\xff\xea\x8e?\x99\xaaj?\xa5O\x84?\x15w\x97?\xe12\x93?Q\x99j?\x8ed\xa6?=-\xa2?D1s?\xfd\xcc\x8c?\x85\xd8\x9d?\xa3S\x95?IED?a^f?"3s?kv7?<t\x97?\xc7UU?>s\x86?\xe5\xcfL?R\xbb\x9b?\x17\x0f\xb1?\x85l\xb2?i\xc3j?\xe4ef?\x1b\x11Q?~ b?\x83\xca\x8c?q\xc5\x8c?\xf5\x0f\xb1?\xf2\xdc\x9d?\x06e\xa6?^\xa5j?\x98z\x97?D\xef\x8e?\xcaC\x84?\xdd\xefn?\xa3VU?z\xa9j?#"\x82?{\x12b?[\x00@?q3\x93?\xf1\xb0\x8a?0\xcbL?\x18uw?.\xbb{?\x05\xfc\x7f?/^\x95?\xe0y7?\x13vH?\xb7.\x93?\xb2\xf1n?\x92\x90\xa8?daf?\x97\xc7\x8c?\x0f\x88\xa8?_\xb7{?\xcd \x82?F\xa9j?\'ff?Xxw?\x92v7?0\x1cQ?P>b?\xe3T\x95?\xa7uw?[\xdd\x9d?k \x82?\xbc\xd3{?T\xc4L?V\xb1\x9b?P2\xb3?\xfcj\xb7?\x06b\xf5?\xdcqw?\xc6^\x86?\xa9\xed\xae?h\xbb\x9b?\nJs?z\xcc\x8c?8\xf0n?\xd5\xc8L?\x9aED?\xbc\x9bY?\xe2\xd1{?V\xcc\x8c?\xfc\x83\xc8?,bf?k\x97Y?\t\x03o?X>\x84?\xeb\x89H?uUU?\xac\xcdL?\xae\xc9\x8c?T\xf9\x8e?.\x86\xa8?\xd6\xb5{?o2\x93?\x94ww?K\x817?\xd3\xdd\x9d?S\x0e\xd1?\xbe\xee\x8e?\xf3\rQ?$UU?\x17\xbb{?^e\xa6?\x81ww?%C\xc4?\xb0\x90w?\xc8\xb7;?\x03.s?\x82N\xb5?\x99!\xa2?DD\xa4?:\xde\x9d?,/s?\x9fff?\n\xfe\x9f?!\x90w?*\r\x91?\x00\x03Q?\xf7\xdc]?\x07"\x82?53s?\xe5\xee\x8e?\xc2\xe0]?\xa6E\xc4?\xad\xdf]?\xe9\x07o?\t\xacj?v\xdc\x9d?kvw?\x8d\x1f\x82?\x1c\x0b\xa0?2\xab\xaa?IE\x84?\xb9\xa2\x8a?\xb3"\x82?\x8c\xf2\x8e?C\x88\x88?\x14\x89\x88?\xe3s\xb7?\xc6\x0bb?^Is?\n\x00\x80?\xbe\xbb{?\xcf\x98\x99?6\x99\x99?\xd6\xbb\x9b?\x95\xbe{?\xbb\xa9\xaa?^\xdc\xdd?\x9c\xa9j?<P\x84?9C\x84?\xde\x00\x80?\xe3xw?%D\x84?\xf3\x93\xc8?8\x86\xc8?\x86\xdf]?\xcae\x86?\xda\xa9\x8a?\x07mf?r\xeen?x\xc7\x8c?\x03\x89Y?\xe8=D?\x87\x8aY?b\xabj?\xcfe\x86?\x9a1\xb3?>yw?\x04@D?\xbf8b?\x800s?\xc2\xabj?\xf7pw?\x83v\x97?W\xf5n?\xee\xbb{?w\xcdL?\x93\xbb{?\x12gf?\x19\x12Q?\x81\xa2H?\x1c"\xc2?\xc9\xdd]?\xd4\xb9L?\x7f4s?\xe8\x1b\x91?5qw?\xb3\xc8L?\xf433?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'(g\xe1\x04@d\xe1\x04\x80\x9c\xb2\x04H\x95\xb2\x04H\x92\xb2\x04h\x99\xb2\x04\xc8\x9c\xb2\x04\x00\x9b\xb2\x04\xf0\x9e\xb2\x04x\x9b\xb2\x04\xb0\x9c\xb2\x04\x10\x97\xb2\x04\x88\x91\xb2\x04(\x9a\xb2\x04\x10\x9d\xb2\x04\x80\x93\xb2\x04`\x98\xb2\x04x\x9e\xb2\x04\xc8\x9f\xb2\x04 \x9f\xb2\x04H\x98\xb2\x04\x90\x95\xb2\x04(\x97\xb2\x040\x98\xb2\x04X\x97\xb2\x04\x08\x99\xb2\x04\x80\x9f\xb2\x04(\x91\xb2\x04H\x9e\xb2\x040\x9e\xb2\x04 \x99\xb2\x04\xb0\x99\xb2\x04x\x95\xb2\x04\xa8\x9e\xb2\x04\xc8\x99\xb2\x04\xa0\x9d\xb2\x04 \x9c\xb2\x04\x90\x9b\xb2\x048\x9f\xb2\x04\xb0\x9f\xb2\x04h\x9c\xb2\x04\x18\x9b\xb2\x04\x80\x96\xb2\x04X\xba\xdc\x0c\xd0\xb1\xdc\x0cp\xb4\xdc\x0cX\xb1\xdc\x0c\xe0\xb6\xdc\x0c0\xb8\xdc\x0c\x80\xb3\xdc\x0c\x10\xb7\xdc\x0c\xc0\xbe\xdc\x0c\xe8\xbd\xdc\x0cx\xbe\xdc\x0cX\xb4\xdc\x0c\xa8\xb8\xdc\x0c8\xb0\xdc\x0c\x88\xb7\xdc\x0c8\xb9\xdc\x0cH\xb8\xdc\x0c\x90\xb8\xdc\x0c\x18\xb2\xdc\x0c\x98\xb3\xdc\x0c\xb0\xb0\xdc\x0c \xb3\xdc\x0c\xa0\xbd\xdc\x0cH\xb2\xdc\x0c \xb0\xdc\x0c`\xb5\xdc\x0c\xc8\xbf\xdc\x0c(\xb1\xdc\x0ch\xb3\xdc\x0c\x08\xb6\xdc\x0c\xb8\xb4\xdc\x0c@\xb1\xdc\x0c\x10\xb1\xdc\x0c8\xbc\xdc\x0c0\xb2\xdc\x0c(\xbd\xdc\x0c\x90\xb5\xdc\x0c\xd8\x92\xb2\x04\x98\x9c\xb2\x04p\x9a\xb2\x04\xb0\x93\xb2\x04\xe8\x97\xb2\x04\x18\x95\xb2\x04\xc0\x9e\xb2\x04\x18\x98\xb2\x04X\x9d\xb2\x04@\x9a\xb2\x04\xf8\x99\xb2\x04@\x9d\xb2\x04\xa8\x9b\xb2\x04\x00\x92\xb2\x048\x99\xb2\x04\x10\x9a\xb2\x04\x10\x91\xb2\x04\x88\x94\xb2\x04\xd8\x98\xb2\x04\xc0\x98\xb2\x04\xd0\x91\xb2\x04(\x9d\xb2\x04\xa0\x91\xb2\x04\xf8\x96\xb2\x04\xd0\x97\xb2\x04\x00\x98\xb2\x04\xc0\x95\xb2\x04\xd8\x9e\xb2\x04`\x95\xb2\x04\xf8\x9c\xb2\x04\x88\x97\xb2\x04X\x9a\xb2\x04p\x9d\xb2\x04\x98\x99\xb2\x04p\x91\xb2\x04\x88\x9d\xb2\x040\x9b\xb2\x04\xf0\x98\xb2\x04h\x93\xb2\x04\xd8\x9b\xb2\x04H\x9b\xb2\x04\x90\x9e\xb2\x04\x08\x93\xb2\x04h\x9f\xb2\x040\x92\xb2\x04\xe0\x93\xb2\x04\x80\x90\xb2\x04\xb8\x91\xb2\x048\x90\xb2\x04`\x92\xb2\x04\xe0\x90\xb2\x04X\x94\xb2\x04\xe0\x99\xb2\x04P\x99\xb2\x04P\x93\xb2\x040\x95\xb2\x04\xf8\x93\xb2\x04@\x91\xb2\x04\x90\x98\xb2\x04\x80\x99\xb2\x04\xd0\x94\xb2\x04P\x90\xb2\x04\xa0\x94\xb2\x04\x98\x93\xb2\x04\x08\x96\xb2\x04`\x9b\xb2\x04\x98\x96\xb2\x04@\x94\xb2\x04\xf0\x9b\xb2\x04P\x96\xb2\x04\x08\x9c\xb2\x04\xb8\x9a\xb2\x04\xe0\x9f\xb2\x04\xc0\x9b\xb2\x04P\x9c\xb2\x04\xf0\x92\xb2\x04h\x90\xb2\x04\xb0\x90\xb2\x04\xf8\x90\xb2\x04\xa8\x92\xb2\x048\x96\xb2\x04@\x97\xb2\x04(\x94\xb2\x04\xc8\x93\xb2\x04x\x92\xb2\x04\xd0\x9d\xb2\x04\xe8\x94\xb2\x04p\x94\xb2\x04\xd0\x9a\xb2\x04\xc0\x92\xb2\x04\xe0\x96\xb2\x04 \x93\xb2\x04\x18\x9e\xb2\x04X\x91\xb2\x04\x88\x9a\xb2\x04h\x96\xb2\x04 \x90\xb2\x04x\x98\xb2\x04\x00\x95\xb2\x04 \x96\xb2\x04\x98\x9f\xb2\x04\x90\x92\xb2\x04\xe8\x91\xb2\x04\xe8\x9a\xb2\x04\xa8\x95\xb2\x04\xb8\x9d\xb2\x04\xa0\x97\xb2\x04\xd8\x95\xb2\x04\xb0\x96\xb2\x04\xb8\x94\xb2\x04\xc8\x96\xb2\x04\xc8\x90\xb2\x04\xa8\x98\xb2\x04\x18\x92\xb2\x048\x9c\xb2\x04\x08\x9f\xb2\x04\x00\x9e\xb2\x04`\x9e\xb2\x04P\x9f\xb2\x04\xa0\x9a\xb2\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6413
sg6371
g6460
sg6386
g6420
sg6380
g6467
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6485
sg6371
g6475
sg6386
g6479
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6496
sg6371
g6492
sg6386
g6503
sg6380
g6500
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6519
sg6371
g6509
sg6386
g6513
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6430
sg6371
g6556
sg6386
g6437
sg6380
g6563
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6543
sg6371
g6571
sg6386
g6550
sg6380
g6578
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6641
sg6371
g6637
sg6386
g6648
sg6380
g6645
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6485
sg6371
g6654
sg6386
g6479
sg6380
g6661
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6624
sg6371
g6669
sg6386
g6631
sg6380
g6676
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6688
sg6371
g6684
sg6386
g6695
sg6380
g6692
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6496
sg6371
g6492
sg6386
g6503
sg6380
g6500
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6447
sg6371
g6731
sg6386
g6454
sg6380
g6738
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6750
sg6371
g6746
sg6386
g6757
sg6380
g6754
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6780
sg6371
g6776
sg6386
g6787
sg6380
g6784
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6641
sg6371
g6637
sg6386
g6648
sg6380
g6645
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6810
sg6371
g6806
sg6386
g6817
sg6380
g6814
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6496
sg6371
g6823
sg6386
g6503
sg6380
g6830
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6842
sg6371
g6838
sg6386
g6849
sg6380
g6846
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6590
sg6371
g6855
sg6386
g6597
sg6380
g6862
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6874
sg6371
g6870
sg6386
g6881
sg6380
g6878
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6780
sg6371
g6776
sg6386
g6787
sg6380
g6784
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6607
sg6371
g6900
sg6386
g6614
sg6380
g6907
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6780
sg6371
g6776
sg6386
g6787
sg6380
g6784
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6688
sg6371
g6684
sg6386
g6695
sg6380
g6692
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6543
sg6371
g6571
sg6386
g6550
sg6380
g6578
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6485
sg6371
g6654
sg6386
g6479
sg6380
g6661
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6430
sg6371
g6556
sg6386
g6437
sg6380
g6563
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6624
sg6371
g6669
sg6386
g6631
sg6380
g6676
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6780
sg6371
g7019
sg6386
g6787
sg6380
g7026
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6519
sg6371
g7034
sg6386
g6513
sg6380
g7041
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6447
sg6371
g6731
sg6386
g6454
sg6380
g6738
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6485
sg6371
g6475
sg6386
g6479
sg6380
g6483
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6413
sg6371
g6460
sg6386
g6420
sg6380
g6467
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6750
sg6371
g6746
sg6386
g6757
sg6380
g6754
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6485
sg6371
g6654
sg6386
g6479
sg6380
g6661
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6688
sg6371
g7140
sg6386
g6695
sg6380
g7147
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6874
sg6371
g7155
sg6386
g6881
sg6380
g7162
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6519
sg6371
g6509
sg6386
g6513
sg6380
g6517
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6688
sg6371
g7140
sg6386
g6695
sg6380
g7147
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6485
sg6371
g6475
sg6386
g6479
sg6380
g6483
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6750
sg6371
g7235
sg6386
g6757
sg6380
g7242
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6705
sg6371
g7250
sg6386
g6712
sg6380
g7257
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6430
sg6371
g6556
sg6386
g6437
sg6380
g6563
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6842
sg6371
g6838
sg6386
g6849
sg6380
g6846
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6641
sg6371
g6637
sg6386
g6648
sg6380
g6645
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6750
sg6371
g7235
sg6386
g6757
sg6380
g7242
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6641
sg6371
g6637
sg6386
g6648
sg6380
g6645
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6447
sg6371
g6731
sg6386
g6454
sg6380
g6738
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6842
sg6371
g6838
sg6386
g6849
sg6380
g6846
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6874
sg6371
g7155
sg6386
g6881
sg6380
g7162
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6780
sg6371
g7019
sg6386
g6787
sg6380
g7026
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6496
sg6371
g6823
sg6386
g6503
sg6380
g6830
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6750
sg6371
g6746
sg6386
g6757
sg6380
g6754
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6519
sg6371
g7034
sg6386
g6513
sg6380
g7041
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6607
sg6371
g6900
sg6386
g6614
sg6380
g6907
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6688
sg6371
g7140
sg6386
g6695
sg6380
g7147
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6413
sg6371
g6460
sg6386
g6420
sg6380
g6467
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6780
sg6371
g7019
sg6386
g6787
sg6380
g7026
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6384
sg6371
g7538
sg6386
g6376
sg6380
g7545
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6842
sg6371
g7553
sg6386
g6849
sg6380
g7560
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6810
sg6371
g7568
sg6386
g6817
sg6380
g7575
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6874
sg6371
g6870
sg6386
g6881
sg6380
g6878
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6842
sg6371
g6838
sg6386
g6849
sg6380
g6846
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6810
sg6371
g6806
sg6386
g6817
sg6380
g6814
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6624
sg6371
g6669
sg6386
g6631
sg6380
g6676
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6750
sg6371
g7235
sg6386
g6757
sg6380
g7242
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6543
sg6371
g6571
sg6386
g6550
sg6380
g6578
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6780
sg6371
g6776
sg6386
g6787
sg6380
g6784
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6874
sg6371
g7155
sg6386
g6881
sg6380
g7162
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6810
sg6371
g7568
sg6386
g6817
sg6380
g7575
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6641
sg6371
g7713
sg6386
g6648
sg6380
g7720
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6590
sg6371
g6855
sg6386
g6597
sg6380
g6862
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6430
sg6371
g6426
sg6386
g6437
sg6380
g6434
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6413
sg6371
g6460
sg6386
g6420
sg6380
g6467
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6384
sg6371
g7538
sg6386
g6376
sg6380
g7545
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6688
sg6371
g6684
sg6386
g6695
sg6380
g6692
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6607
sg6371
g6900
sg6386
g6614
sg6380
g6907
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6384
sg6371
g7538
sg6386
g6376
sg6380
g7545
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6519
sg6371
g7034
sg6386
g6513
sg6380
g7041
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6810
sg6371
g6806
sg6386
g6817
sg6380
g6814
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6641
sg6371
g7713
sg6386
g6648
sg6380
g7720
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6750
sg6371
g6746
sg6386
g6757
sg6380
g6754
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6705
sg6371
g7250
sg6386
g6712
sg6380
g7257
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6780
sg6371
g7019
sg6386
g6787
sg6380
g7026
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6485
sg6371
g6475
sg6386
g6479
sg6380
g6483
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6543
sg6371
g6571
sg6386
g6550
sg6380
g6578
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6810
sg6371
g7568
sg6386
g6817
sg6380
g7575
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6874
sg6371
g7155
sg6386
g6881
sg6380
g7162
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6485
sg6371
g6475
sg6386
g6479
sg6380
g6483
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6688
sg6371
g7140
sg6386
g6695
sg6380
g7147
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6810
sg6371
g7568
sg6386
g6817
sg6380
g7575
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6607
sg6371
g6900
sg6386
g6614
sg6380
g6907
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6641
sg6371
g7713
sg6386
g6648
sg6380
g7720
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6705
sg6371
g7250
sg6386
g6712
sg6380
g7257
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6396
sg6371
g8105
sg6386
g6403
sg6380
g8112
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6519
sg6371
g6509
sg6386
g6513
sg6380
g6517
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6842
sg6371
g7553
sg6386
g6849
sg6380
g7560
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6641
sg6371
g7713
sg6386
g6648
sg6380
g7720
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6874
sg6371
g6870
sg6386
g6881
sg6380
g6878
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6750
sg6371
g7235
sg6386
g6757
sg6380
g7242
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6810
sg6371
g7568
sg6386
g6817
sg6380
g7575
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6590
sg6371
g6855
sg6386
g6597
sg6380
g6862
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6874
sg6371
g6870
sg6386
g6881
sg6380
g6878
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6430
sg6371
g6556
sg6386
g6437
sg6380
g6563
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6396
sg6371
g8105
sg6386
g6403
sg6380
g8112
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6750
sg6371
g7235
sg6386
g6757
sg6380
g7242
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6496
sg6371
g6823
sg6386
g6503
sg6380
g6830
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6607
sg6371
g6900
sg6386
g6614
sg6380
g6907
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6624
sg6371
g6669
sg6386
g6631
sg6380
g6676
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6688
sg6371
g6684
sg6386
g6695
sg6380
g6692
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6430
sg6371
g6556
sg6386
g6437
sg6380
g6563
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6705
sg6371
g7250
sg6386
g6712
sg6380
g7257
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6688
sg6371
g7140
sg6386
g6695
sg6380
g7147
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6519
sg6371
g7034
sg6386
g6513
sg6380
g7041
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6396
sg6371
g8105
sg6386
g6403
sg6380
g8112
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6842
sg6371
g7553
sg6386
g6849
sg6380
g7560
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6810
sg6371
g6806
sg6386
g6817
sg6380
g6814
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6543
sg6371
g6571
sg6386
g6550
sg6380
g6578
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6384
sg6371
g7538
sg6386
g6376
sg6380
g7545
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6485
sg6371
g6654
sg6386
g6479
sg6380
g6661
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6496
sg6371
g6492
sg6386
g6503
sg6380
g6500
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6842
sg6371
g7553
sg6386
g6849
sg6380
g7560
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6874
sg6371
g7155
sg6386
g6881
sg6380
g7162
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6810
sg6371
g6806
sg6386
g6817
sg6380
g6814
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6447
sg6371
g6731
sg6386
g6454
sg6380
g6738
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6496
sg6371
g6492
sg6386
g6503
sg6380
g6500
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6842
sg6371
g7553
sg6386
g6849
sg6380
g7560
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6607
sg6371
g6603
sg6386
g6614
sg6380
g6611
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6485
sg6371
g6654
sg6386
g6479
sg6380
g6661
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6705
sg6371
g7250
sg6386
g6712
sg6380
g7257
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6519
sg6371
g6509
sg6386
g6513
sg6380
g6517
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6496
sg6371
g6492
sg6386
g6503
sg6380
g6500
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6519
sg6371
g6509
sg6386
g6513
sg6380
g6517
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6413
sg6371
g6460
sg6386
g6420
sg6380
g6467
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6590
sg6371
g6855
sg6386
g6597
sg6380
g6862
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6780
sg6371
g6776
sg6386
g6787
sg6380
g6784
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6842
sg6371
g6838
sg6386
g6849
sg6380
g6846
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6396
sg6371
g8105
sg6386
g6403
sg6380
g8112
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6750
sg6371
g6746
sg6386
g6757
sg6380
g6754
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6590
sg6371
g6855
sg6386
g6597
sg6380
g6862
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6688
sg6371
g6684
sg6386
g6695
sg6380
g6692
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6641
sg6371
g7713
sg6386
g6648
sg6380
g7720
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6496
sg6371
g6823
sg6386
g6503
sg6380
g6830
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6705
sg6371
g6701
sg6386
g6712
sg6380
g6709
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6874
sg6371
g6870
sg6386
g6881
sg6380
g6878
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6396
sg6371
g8105
sg6386
g6403
sg6380
g8112
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6624
sg6371
g6620
sg6386
g6631
sg6380
g6628
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6641
sg6371
g6637
sg6386
g6648
sg6380
g6645
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6780
sg6371
g7019
sg6386
g6787
sg6380
g7026
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6447
sg6371
g6731
sg6386
g6454
sg6380
g6738
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6519
sg6371
g7034
sg6386
g6513
sg6380
g7041
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6590
sg6371
g6586
sg6386
g6597
sg6380
g6594
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6384
sg6371
g7538
sg6386
g6376
sg6380
g7545
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6496
sg6371
g6823
sg6386
g6503
sg6380
g6830
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6624
sg6371
g6669
sg6386
g6631
sg6380
g6676
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6447
sg6371
g6443
sg6386
g6454
sg6380
g6451
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.