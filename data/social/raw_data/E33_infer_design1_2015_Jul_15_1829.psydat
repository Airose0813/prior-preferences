ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E33_infer_design1_2015_Jul_15_1829
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vleft
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xae\xeb93m\xfbM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_15_1829
p67
sVparticipant
p68
VE33
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F0.28362871368335618
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F10.083368875528322
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P1\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F14.951000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.97999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x14\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p103
sg21
F1.1000000000000001
sg70
Vy
sa(dp104
g64
g65
sg20
F7.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F1.5399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\r\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p110
sg21
F1.8999999999999999
sg70
Vy
sa(dp111
g64
g65
sg20
F7.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.3000000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x1b\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p117
sg21
F1.1000000000000001
sg70
Vy
sa(dp118
g64
g65
sg20
F8.2170000000000005
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F2.2800000000000007
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'\x0c\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V18-mms.png
p124
sg21
F1.3
sg70
Vy
sa(dp125
g64
g65
sg20
F10.85
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.39999999999999925
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x07\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p131
sg21
F1.3
sg70
Vy
sa(dp132
g64
g65
sg20
F5.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F1.8799999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x1e\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p138
sg21
F2
sg70
Vy
sa(dp139
g64
g65
sg20
F4.5839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F1.3399999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x13\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p145
sg21
F1.8
sg70
Vy
sa(dp146
g64
g65
sg20
F2.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F1.5199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x0b\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p152
sg21
F1.8
sg70
Vy
sa(dp153
g64
g65
sg20
F4.6340000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x1a\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V35-raisins.png
p159
sg21
F1.5
sg70
Vy
sa(dp160
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0.29999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x02\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p166
sg21
F1
sg70
Vy
sa(dp167
g64
g65
sg20
F8.5999999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.1199999999999992
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x1d\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V40-sardines.png
p173
sg21
F1.8999999999999999
sg70
Vy
sa(dp174
g64
g65
sg20
F2.9009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F1.5600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x11\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p180
sg21
F1.6000000000000001
sg70
Vy
sa(dp181
g64
g65
sg20
F1.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F1.5399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x0e\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p187
sg21
F1.8
sg70
Vy
sa(dp188
g64
g65
sg20
F1.534
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F1.7400000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x17\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p194
sg21
F1.5
sg70
Vy
sa(dp195
g64
g65
sg20
F4.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F2.0800000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x00\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p201
sg21
F1.8999999999999999
sg70
Vy
sa(dp202
g64
g65
sg20
F5.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.22
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\t\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p208
sg21
F1.2
sg70
Vy
sa(dp209
g64
g65
sg20
F7.7670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x15\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V29-beans.png
p215
sg21
F1.3
sg70
Vy
sa(dp216
g64
g65
sg20
F4.9169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F2.1400000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'!\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V44-crunch.png
p222
sg21
F1.6000000000000001
sg70
Vy
sa(dp223
g64
g65
sg20
F3.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F1.1000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'"\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p229
sg21
F1
sg70
Vy
sa(dp230
g64
g65
sg20
F5.4009999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F1.8400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x08\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p236
sg21
F1.5
sg70
Vy
sa(dp237
g64
g65
sg20
F2.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.76
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x18\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p243
sg21
F1.7
sg70
Vy
sa(dp244
g64
g65
sg20
F5.351
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F1.46
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x19\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p250
sg21
F1.6000000000000001
sg70
Vy
sa(dp251
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.79999999999999938
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x0f\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p257
sg21
F1.3999999999999999
sg70
Vy
sa(dp258
g64
g65
sg20
F2.3180000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F2.0600000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'%\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p264
sg21
F1.8999999999999999
sg70
Vy
sa(dp265
g64
g65
sg20
F3.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x01\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p271
sg21
F1.2
sg70
Vy
sa(dp272
g64
g65
sg20
F1.9670000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.8800000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S' \x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p278
sg21
F1.5
sg70
Vy
sa(dp279
g64
g65
sg20
F3.5670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.5600000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x12\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p285
sg21
F1.3
sg70
Vy
sa(dp286
g64
g65
sg20
F2.2669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.79999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x06\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V7-olives.png
p292
sg21
F1.8
sg70
Vy
sa(dp293
g64
g65
sg20
F2.1339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F2.1400000000000006
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x10\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V22-daim.png
p299
sg21
F1.5
sg70
Vy
sa(dp300
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x05\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p306
sg21
F1.3999999999999999
sg70
Vy
sa(dp307
g64
g65
sg20
F5.5510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F2.2600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'#\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p313
sg21
F1.8
sg70
Vy
sa(dp314
g64
g65
sg20
F5.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1.0599999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x04\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p320
sg21
F1.8
sg70
Vy
sa(dp321
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.3399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'&\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V50-polo.png
p327
sg21
F1.6000000000000001
sg70
Vy
sa(dp328
g64
g65
sg20
F1.484
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F1.7600000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S"'\x00\x00\x00"
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V51-mars.png
p334
sg21
F1.6000000000000001
sg70
Vy
sa(dp335
g64
g65
sg20
F2.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1.9600000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x1f\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p341
sg21
F1.5
sg70
Vy
sa(dp342
g64
g65
sg20
F1.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'$\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V48-twix.png
p348
sg21
F1.6000000000000001
sg70
Vy
sa(dp349
g64
g65
sg20
F2.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F2.3600000000000008
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1c\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p355
sg21
F1.3999999999999999
sg70
Vy
sa(dp356
g64
g65
sg20
F4.7510000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F1.4199999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\n\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p362
sg21
F1.5
sg70
Vy
sa(dp363
g64
g65
sg20
F1.9339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x16\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p369
sg21
F1.6000000000000001
sg70
Vy
sa(dp370
g64
g65
sg20
F2.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.9599999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x03\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V4-corn.png
p376
sg21
F1.7
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F6.3500570765845623
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p381
sg26
F4.5000000000000018
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.5000151101849042
sg27
F5.5010000000000003
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'51-mars.png'
p390
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.2001734535151627
sg27
F1.351
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'38-maltesers.png'
p399
sg26
F5.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.1665954872441944
sg27
F1.2509999999999999
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p408
sg26
F5.4999999999999991
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'left'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F1.4835549873860145
sg27
F1.1839999999999999
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p417
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.3335638824391935
sg27
F1.117
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'31-hobnobs.png'
p426
sg26
F3.4999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'left'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F3.2167105527241802
sg27
F3.3170000000000002
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p435
sg26
F5.799999999999998
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F0.93346757639483258
sg27
F2.7839999999999998
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p444
sg26
F4
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.4832621919231315
sg27
F3.5009999999999999
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p453
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F0.96668261313789117
sg27
F0.88400000000000001
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'29-beans.png'
p462
sg26
F3.8000000000000007
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F4.2005198473707424
sg27
F1.8169999999999999
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'40-sardines.png'
p471
sg26
F3
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F6.7000750947663619
sg27
F2.851
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p480
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F0.86658989932584518
sg27
F1.0009999999999999
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'22-daim.png'
p489
sg26
F5.9999999999999973
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.0000470411414426
sg27
F0.70099999999999996
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p498
sg26
F5.4999999999999991
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.2333813628138159
sg27
F3.1179999999999999
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p507
sg26
F3.7999999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F2.4667424836807186
sg27
F1.7509999999999999
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p516
sg26
F5.6999999999999993
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F0.95036332866402518
sg27
F6.0170000000000003
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p525
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F0.98338335849803116
sg27
F0.83399999999999996
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'4-corn.png'
p534
sg26
F5.8999999999999986
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F0.73342954434701824
sg27
F4.5170000000000003
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p543
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F0.86711818559160747
sg27
F0.71799999999999997
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p552
sg26
F4.5000000000000018
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.4666295849438029
sg27
F1.151
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p561
sg26
F5.5999999999999988
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F0.7667264041629096
sg27
F1.5840000000000001
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'35-raisins.png'
p570
sg26
F5.8999999999999986
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F0.65004641392624762
sg27
F0.78400000000000003
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p579
sg26
F4.3000000000000007
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F2.600165128658773
sg27
F1.9510000000000001
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'46-pistachios.png'
p588
sg26
F4.5000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.1835163281230052
sg27
F2.2669999999999999
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'48-twix.png'
p597
sg26
F5.5
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.0505812004212203
sg27
F1.3009999999999999
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p606
sg26
F5.8999999999999977
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F0.766694188110705
sg27
F1.867
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p615
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.3000426506350777
sg27
F1.284
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p624
sg26
F2.5999999999999988
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F5.9166676169916173
sg27
F1.984
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'49-yorkie.png'
p633
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.0502416489143798
sg27
F1.734
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p642
sg26
F3.3999999999999995
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.3004243966188369
sg27
F1.5169999999999999
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p651
sg26
F5.799999999999998
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.93337919606892683
sg27
F2.1669999999999998
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'50-polo.png'
p660
sg26
F5.2000000000000002
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F0.86681598189898068
sg27
F3.3340000000000001
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p669
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F1.0668332018085493
sg27
F1.034
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p678
sg26
F4
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.3667104957057745
sg27
F1.9670000000000001
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'7-olives.png'
p687
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F0.68353286379533529
sg27
F1.0509999999999999
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'25-kitkat.png'
p696
sg26
F3.3999999999999999
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.5501880505235022
sg27
F0.65100000000000002
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'18-mms.png'
p705
sg26
F2.7999999999999998
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.0334157456090907
sg27
F0.93400000000000005
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'44-crunch.png'
p714
sg26
F4.0999999999999996
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F0.90003700569650391
sg27
F1.984
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'5-pineapple.png'
p723
sg26
F3.1000000000000001
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F2.3167468171668588
sg27
F0.68400000000000005
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p732
sg26
F4.0999999999999996
sg28
F4
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.0333638578067621
sg27
F2.9169999999999998
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F257.59364551164799
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F0.33355675499478821
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'52-aero_mousse.png'
p744
sg83
S'52-aero_mousse.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'14-discos_salt_vinegar.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x0f\x12*\x0b\x02.\x98'
tRp754
sa(dp755
g64
g65
sg82
S'32-hovis_crackers.png'
p756
sg83
S'24-food_doctor_apple_walnut_bar.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x0f\x12*\x19\tu\xe0'
tRp765
sa(dp766
g64
g65
sg82
S'11-snickers.png'
p767
sg83
S'11-snickers.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'54-frubes_yogurt.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x0f\x12*$\x0e\xa9\xe8'
tRp776
sa(dp777
g64
g65
sg82
S'53-cheestrings.png'
p778
sg83
S'47-picnic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'47-picnic.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x0f\x12*.\x00a\xa8'
tRp787
sa(dp788
g64
g65
sg82
g767
sg83
S'54-frubes_yogurt.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x0f\x12*5\x08\xc6\x18'
tRp796
sa(dp797
g64
g65
sg82
g778
sg83
S'53-cheestrings.png'
p798
sg56
g57
sS'practice_loop.thisN'
p799
I5
sS'practice_loop.thisTrialN'
p800
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p801
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p802
sS'practice_loop.thisIndex'
p803
g60
(g99
S'\x05\x00\x00\x00'
tRp804
sg34
g753
(S'\x07\xdf\x07\x0f\x12*;\re\xb0'
tRp805
sa(dp806
g64
g65
sg82
S'12-topic.png'
p807
sg83
S'39-mackerel.png'
p808
sg56
g57
sS'practice_loop.thisN'
p809
I6
sS'practice_loop.thisTrialN'
p810
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p811
I0
sg84
S'39-mackerel.png'
p812
sg33
g807
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x0f\x12+\x06\x01S\xd8'
tRp816
sa(dp817
g64
g65
sg82
S'15-walnut_whip.png'
p818
sg83
S'15-walnut_whip.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'28-maple_pecan.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x0f\x12+\x0c\x03\xcc\xa8'
tRp827
sa(dp828
g64
g65
sg82
g744
sg83
S'14-discos_salt_vinegar.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x0f\x12+\x12\x0b\xfah'
tRp836
sa(dp837
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p838
sg83
S'9-yu_mango_pieces.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'9-yu_mango_pieces.png'
p843
sg33
g843
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x0f\x12+\x18\x0f*\xd0'
tRp847
sa(dp848
g64
g65
sg82
g807
sg83
S'12-topic.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g812
sg33
g812
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x0f\x12+!\x03\xffp'
tRp856
sa(dp857
g64
g65
sg82
g838
sg83
S'37-nakd_cashew_cookie.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S"\x07\xdf\x07\x0f\x12+'\x04Qx"
tRp865
sa(dp866
g64
g65
sg82
g756
sg83
S'32-hovis_crackers.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x0f\x12+-\r:\xb8'
tRp874
sa(dp875
g64
g65
sg82
g818
sg83
S'28-maple_pecan.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x0f\x12+4\x01cx'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F54.382486098631489
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'17-jacobs_mini_cheddars_redo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'17-jacobs_mini_cheddars_redo.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'8-liquorice_catherine_wheels.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'8-liquorice_catherine_wheels.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.7498597318717657
sg34
g753
(S'\x07\xdf\x07\x0f\x12.+\x0c\xec\x98'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'30-spaghetti_hoops.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'19-caramello_redo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'19-caramello_redo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'30-spaghetti_hoops.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.1166534761414368
sg34
g753
(S'\x07\xdf\x07\x0f\x12.2\t\xa8\xa8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'18-mms.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'18-mms.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.7499344275001931
sg34
g753
(S'\x07\xdf\x07\x0f\x12.8\x0b\xe6\xe0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'16-skips_prawn.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'42-mrkipling_lemon_slices.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'42-mrkipling_lemon_slices.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'16-skips_prawn.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.2997803606376692
sg34
g753
(S'\x07\xdf\x07\x0f\x12/\x03\x08\xa2\xf0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'38-maltesers.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'38-maltesers.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'6-sour_patch_kids.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'6-sour_patch_kids.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.1329972790263128
sg34
g753
(S'\x07\xdf\x07\x0f\x12/\t\r\xb7\xb8'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'44-crunch.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'left'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'44-crunch.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'26-walkers_smoky_bacon.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p994
I0
sg909
S'26-walkers_smoky_bacon.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vy
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.0836211871028354
sg34
g753
(S'\x07\xdf\x07\x0f\x12/\x10\x00\xeeH'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'21-nakd_banana_crunch.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'right'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'1-treacle_cookies.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'1-treacle_cookies.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1011
I0
sg909
S'21-nakd_banana_crunch.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vy
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.2165181116943131
sg34
g753
(S'\x07\xdf\x07\x0f\x12/\x16\x02\xb3h'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'31-hobnobs.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'31-hobnobs.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'25-kitkat.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
S'25-kitkat.png'
p1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1029
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vy
sS'block_loop.thisTrialN'
p1031
I0
sg39
F3.9499276991919032
sg34
g753
(S'\x07\xdf\x07\x0f\x12/\x1c\x06\x97\x80'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'50-polo.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'right'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
S'48-twix.png'
p1039
sg64
g65
sS'trial_loop.thisIndex'
p1040
g60
(g99
S'\x08\x00\x00\x00'
tRp1041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1042
I0
sg904
S'48-twix.png'
p1043
sS'block_loop.thisRepN'
p1044
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1045
I0
sg909
S'50-polo.png'
p1046
sg55
g11
sS'block_loop.thisTrial'
p1047
Nsg70
Vy
sS'block_loop.thisTrialN'
p1048
I0
sg39
F0.98334372990211705
sg34
g753
(S'\x07\xdf\x07\x0f\x12/%\x06`\xd0'
tRp1049
sa(dp1050
S'trial_loop.thisTrialN'
p1051
I9
sg895
S'42-mrkipling_lemon_slices.png'
p1052
sS'block_loop.thisIndex'
p1053
g889
sg38
S'left'
p1054
sg59
g63
sS'trial_loop.thisN'
p1055
I9
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1056
g60
(g99
S'\t\x00\x00\x00'
tRp1057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1058
I0
sg904
S'16-skips_prawn.png'
p1059
sS'block_loop.thisRepN'
p1060
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1061
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1062
Nsg70
Vy
sS'block_loop.thisTrialN'
p1063
I0
sg39
F0.88322051062277751
sg34
g753
(S'\x07\xdf\x07\x0f\x12/+\x06\xb2\xd8'
tRp1064
sa(dp1065
S'trial_loop.thisTrialN'
p1066
I10
sg895
S'36-fig_rolls.png'
p1067
sS'block_loop.thisIndex'
p1068
g889
sg38
S'left'
p1069
sg59
g63
sS'trial_loop.thisN'
p1070
I10
sg33
S'36-fig_rolls.png'
p1071
sg64
g65
sS'trial_loop.thisIndex'
p1072
g60
(g99
S'\n\x00\x00\x00'
tRp1073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1074
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1075
sS'block_loop.thisRepN'
p1076
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1077
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1078
sg55
g11
sS'block_loop.thisTrial'
p1079
Nsg70
Vy
sS'block_loop.thisTrialN'
p1080
I0
sg39
F1.9666455504211626
sg34
g753
(S'\x07\xdf\x07\x0f\x12/1\x05_\x00'
tRp1081
sa(dp1082
S'trial_loop.thisTrialN'
p1083
I11
sg895
g896
sS'block_loop.thisIndex'
p1084
g889
sg38
S'left'
p1085
sg59
g63
sS'trial_loop.thisN'
p1086
I11
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1087
g60
(g99
S'\x0b\x00\x00\x00'
tRp1088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1089
I0
sg904
g905
sS'block_loop.thisRepN'
p1090
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1091
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vy
sS'block_loop.thisTrialN'
p1093
I0
sg39
F0.86668426670621557
sg34
g753
(S'\x07\xdf\x07\x0f\x12/8\x05n\xa0'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'43-mrporky_pork_crackles_redo.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'right'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1101
g60
(g99
S'\x0c\x00\x00\x00'
tRp1102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1103
I0
sg904
S'18-mms.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1106
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vy
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.0332412657426175
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x02\x03\xdcH'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'35-raisins.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'right'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
S'49-yorkie.png'
p1116
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
S'49-yorkie.png'
p1120
sS'block_loop.thisRepN'
p1121
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1122
I0
sg909
S'35-raisins.png'
p1123
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vy
sS'block_loop.thisTrialN'
p1125
I0
sg39
F0.86658619305489992
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x08\x04\xe5\xe8'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
S'7-olives.png'
p1129
sS'block_loop.thisIndex'
p1130
g889
sg38
S'right'
p1131
sg59
g63
sS'trial_loop.thisN'
p1132
I14
sg33
S'22-daim.png'
p1133
sg64
g65
sS'trial_loop.thisIndex'
p1134
g60
(g99
S'\x0e\x00\x00\x00'
tRp1135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1136
I0
sg904
S'22-daim.png'
p1137
sS'block_loop.thisRepN'
p1138
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1139
I0
sg909
S'7-olives.png'
p1140
sg55
g11
sS'block_loop.thisTrial'
p1141
Nsg70
Vy
sS'block_loop.thisTrialN'
p1142
I0
sg39
F0.80000131145061459
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x0e\x03S\x90'
tRp1143
sa(dp1144
S'trial_loop.thisTrialN'
p1145
I15
sg895
g1067
sS'block_loop.thisIndex'
p1146
g889
sg38
S'left'
p1147
sg59
g63
sS'trial_loop.thisN'
p1148
I15
sg33
g1078
sg64
g65
sS'trial_loop.thisIndex'
p1149
g60
(g99
S'\x0f\x00\x00\x00'
tRp1150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1151
I0
sg904
g1075
sS'block_loop.thisRepN'
p1152
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1153
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vy
sS'block_loop.thisTrialN'
p1155
I0
sg39
F0.94997588072510553
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x14\x00\xcf\x08'
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
g916
sS'block_loop.thisIndex'
p1159
g889
sg38
S'right'
p1160
sg59
g63
sS'trial_loop.thisN'
p1161
I16
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
g924
sS'block_loop.thisRepN'
p1165
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1166
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1167
Nsg70
Vy
sS'block_loop.thisTrialN'
p1168
I0
sg39
F0.78365636817397899
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x1a\x00m`'
tRp1169
sa(dp1170
S'trial_loop.thisTrialN'
p1171
I17
sg895
S'3-ellas_strawberries_apples.png'
p1172
sS'block_loop.thisIndex'
p1173
g889
sg38
S'right'
p1174
sg59
g63
sS'trial_loop.thisN'
p1175
I17
sg33
S'3-ellas_strawberries_apples.png'
p1176
sg64
g65
sS'trial_loop.thisIndex'
p1177
g60
(g99
S'\x11\x00\x00\x00'
tRp1178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1179
I0
sg904
S'13-mccoys_steak_crisps.png'
p1180
sS'block_loop.thisRepN'
p1181
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1182
I0
sg909
S'13-mccoys_steak_crisps.png'
p1183
sg55
g11
sS'block_loop.thisTrial'
p1184
Nsg70
Vy
sS'block_loop.thisTrialN'
p1185
I0
sg39
F0.73331065855381894
sg34
g753
(S'\x07\xdf\x07\x0f\x120\x1f\x0c\xe8\xb0'
tRp1186
sa(dp1187
S'trial_loop.thisTrialN'
p1188
I18
sg895
S'19-caramello_redo.png'
p1189
sS'block_loop.thisIndex'
p1190
g889
sg38
S'left'
p1191
sg59
g63
sS'trial_loop.thisN'
p1192
I18
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1193
g60
(g99
S'\x12\x00\x00\x00'
tRp1194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1195
I0
sg904
S'30-spaghetti_hoops.png'
p1196
sS'block_loop.thisRepN'
p1197
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1198
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vy
sS'block_loop.thisTrialN'
p1200
I0
sg39
F0.7332510731084767
sg34
g753
(S'\x07\xdf\x07\x0f\x120%\tn\x10'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'22-daim.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p1208
g60
(g99
S'\x13\x00\x00\x00'
tRp1209
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1210
I0
sg904
S'7-olives.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F0.81651816871453775
sg34
g753
(S'\x07\xdf\x07\x0f\x120+\x05\xb8\xd8'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
g1035
sS'block_loop.thisIndex'
p1219
g889
sg38
S'right'
p1220
sg59
g63
sS'trial_loop.thisN'
p1221
I20
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1222
g60
(g99
S'\x14\x00\x00\x00'
tRp1223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1224
I0
sg904
g1043
sS'block_loop.thisRepN'
p1225
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1226
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1227
Nsg70
Vy
sS'block_loop.thisTrialN'
p1228
I0
sg39
F0.70054550617351197
sg34
g753
(S'\x07\xdf\x07\x0f\x1201\x03n\xe8'
tRp1229
sa(dp1230
S'trial_loop.thisTrialN'
p1231
I21
sg895
g1112
sS'block_loop.thisIndex'
p1232
g889
sg38
S'right'
p1233
sg59
g63
sS'trial_loop.thisN'
p1234
I21
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1235
g60
(g99
S'\x15\x00\x00\x00'
tRp1236
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1237
I0
sg904
g1120
sS'block_loop.thisRepN'
p1238
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1239
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1240
Nsg70
Vy
sS'block_loop.thisTrialN'
p1241
I0
sg39
F0.74995609493635129
sg34
g753
(S'\x07\xdf\x07\x0f\x1206\x0e\xbdp'
tRp1242
sa(dp1243
S'trial_loop.thisTrialN'
p1244
I22
sg895
S'27-hartleys_raspberries_jelly.png'
p1245
sS'block_loop.thisIndex'
p1246
g889
sg38
S'right'
p1247
sg59
g63
sS'trial_loop.thisN'
p1248
I22
sg33
S'51-mars.png'
p1249
sg64
g65
sS'trial_loop.thisIndex'
p1250
g60
(g99
S'\x16\x00\x00\x00'
tRp1251
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1252
I0
sg904
S'51-mars.png'
p1253
sS'block_loop.thisRepN'
p1254
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1255
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1256
sg55
g11
sS'block_loop.thisTrial'
p1257
Nsg70
Vy
sS'block_loop.thisTrialN'
p1258
I0
sg39
F0.64983316075267794
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x00\x0b}h'
tRp1259
sa(dp1260
S'trial_loop.thisTrialN'
p1261
I23
sg895
S'23-crunchie_redo.png'
p1262
sS'block_loop.thisIndex'
p1263
g889
sg38
S'left'
p1264
sg59
g63
sS'trial_loop.thisN'
p1265
I23
sg33
S'23-crunchie_redo.png'
p1266
sg64
g65
sS'trial_loop.thisIndex'
p1267
g60
(g99
S'\x17\x00\x00\x00'
tRp1268
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1269
I0
sg904
S'33-ambrosia_rice.png'
p1270
sS'block_loop.thisRepN'
p1271
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1272
I0
sg909
S'33-ambrosia_rice.png'
p1273
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vy
sS'block_loop.thisTrialN'
p1275
I0
sg39
F0.66662029075450846
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x06\x06\x97\x80'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
S'51-mars.png'
p1279
sS'block_loop.thisIndex'
p1280
g889
sg38
S'left'
p1281
sg59
g63
sS'trial_loop.thisN'
p1282
I24
sg33
g1249
sg64
g65
sS'trial_loop.thisIndex'
p1283
g60
(g99
S'\x18\x00\x00\x00'
tRp1284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1285
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1286
sS'block_loop.thisRepN'
p1287
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1288
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p1289
Nsg70
Vy
sS'block_loop.thisTrialN'
p1290
I0
sg39
F0.66667075306941115
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x0c\x01\xec0'
tRp1291
sa(dp1292
S'trial_loop.thisTrialN'
p1293
I25
sg895
g916
sS'block_loop.thisIndex'
p1294
g889
sg38
S'right'
p1295
sg59
g63
sS'trial_loop.thisN'
p1296
I25
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1297
g60
(g99
S'\x19\x00\x00\x00'
tRp1298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1299
I0
sg904
g924
sS'block_loop.thisRepN'
p1300
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1301
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1302
Nsg70
Vy
sS'block_loop.thisTrialN'
p1303
I0
sg39
F0.69997588072328654
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x11\x0c\xbd\xb8'
tRp1304
sa(dp1305
S'trial_loop.thisTrialN'
p1306
I26
sg895
S'29-beans.png'
p1307
sS'block_loop.thisIndex'
p1308
g889
sg38
S'right'
p1309
sg59
g63
sS'trial_loop.thisN'
p1310
I26
sg33
S'29-beans.png'
p1311
sg64
g65
sS'trial_loop.thisIndex'
p1312
g60
(g99
S'\x1a\x00\x00\x00'
tRp1313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1314
I0
sg904
S'46-pistachios.png'
p1315
sS'block_loop.thisRepN'
p1316
I0
sg907
S'46-pistachios.png'
p1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1318
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p1319
Nsg70
Vy
sS'block_loop.thisTrialN'
p1320
I0
sg39
F3.3665824867821357
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x17\x08\x8b\x80'
tRp1321
sa(dp1322
S'trial_loop.thisTrialN'
p1323
I27
sg895
g916
sS'block_loop.thisIndex'
p1324
g889
sg38
S'right'
p1325
sg59
g63
sS'trial_loop.thisN'
p1326
I27
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
g924
sS'block_loop.thisRepN'
p1330
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1331
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1332
Nsg70
Vy
sS'block_loop.thisTrialN'
p1333
I0
sg39
F0.63343832535974798
sg34
g753
(S'\x07\xdf\x07\x0f\x121\x1f\x0e\xc9('
tRp1334
sa(dp1335
S'trial_loop.thisTrialN'
p1336
I28
sg895
S'4-corn.png'
p1337
sS'block_loop.thisIndex'
p1338
g889
sg38
S'right'
p1339
sg59
g63
sS'trial_loop.thisN'
p1340
I28
sg33
S'4-corn.png'
p1341
sg64
g65
sS'trial_loop.thisIndex'
p1342
g60
(g99
S'\x1c\x00\x00\x00'
tRp1343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1344
I0
sg904
S'10-bounty_redo.png'
p1345
sS'block_loop.thisRepN'
p1346
I0
sg907
S'10-bounty_redo.png'
p1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1348
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p1349
Nsg70
Vy
sS'block_loop.thisTrialN'
p1350
I0
sg39
F0.78333506292619859
sg34
g753
(S'\x07\xdf\x07\x0f\x121%\t\xa4\xc0'
tRp1351
sa(dp1352
S'trial_loop.thisTrialN'
p1353
I29
sg895
g984
sS'block_loop.thisIndex'
p1354
g889
sg38
S'left'
p1355
sg59
g63
sS'trial_loop.thisN'
p1356
I29
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1357
g60
(g99
S'\x1d\x00\x00\x00'
tRp1358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1359
I0
sg904
g992
sS'block_loop.thisRepN'
p1360
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1361
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vy
sS'block_loop.thisTrialN'
p1363
I0
sg39
F0.99992017260956345
sg34
g753
(S'\x07\xdf\x07\x0f\x121+\x06\xdd\xd0'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
S'8-liquorice_catherine_wheels.png'
p1367
sS'block_loop.thisIndex'
p1368
g889
sg38
S'right'
p1369
sg59
g63
sS'trial_loop.thisN'
p1370
I30
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1371
g60
(g99
S'\x1e\x00\x00\x00'
tRp1372
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1373
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1374
sS'block_loop.thisRepN'
p1375
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1376
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1377
Nsg70
Vy
sS'block_loop.thisTrialN'
p1378
I0
sg39
F0.78321931321079319
sg34
g753
(S'\x07\xdf\x07\x0f\x1211\x07r@'
tRp1379
sa(dp1380
S'trial_loop.thisTrialN'
p1381
I31
sg895
S'6-sour_patch_kids.png'
p1382
sS'block_loop.thisIndex'
p1383
g889
sg38
S'right'
p1384
sg59
g63
sS'trial_loop.thisN'
p1385
I31
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1386
g60
(g99
S'\x1f\x00\x00\x00'
tRp1387
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1388
I0
sg904
S'38-maltesers.png'
p1389
sS'block_loop.thisRepN'
p1390
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1391
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1392
Nsg70
Vy
sS'block_loop.thisTrialN'
p1393
I0
sg39
F0.74971946374171239
sg34
g753
(S'\x07\xdf\x07\x0f\x1217\x04p\xb8'
tRp1394
sa(dp1395
S'trial_loop.thisTrialN'
p1396
I32
sg895
g1279
sS'block_loop.thisIndex'
p1397
g889
sg38
S'left'
p1398
sg59
g63
sS'trial_loop.thisN'
p1399
I32
sg33
g1249
sg64
g65
sS'trial_loop.thisIndex'
p1400
g60
(g99
S' \x00\x00\x00'
tRp1401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1402
I0
sg904
g1286
sS'block_loop.thisRepN'
p1403
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1404
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p1405
Nsg70
Vy
sS'block_loop.thisTrialN'
p1406
I0
sg39
F0.70000866697409947
sg34
g753
(S'\x07\xdf\x07\x0f\x122\x01\x010\xb0'
tRp1407
sa(dp1408
S'trial_loop.thisTrialN'
p1409
I33
sg895
g1112
sS'block_loop.thisIndex'
p1410
g889
sg38
S'right'
p1411
sg59
g63
sS'trial_loop.thisN'
p1412
I33
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1413
g60
(g99
S'!\x00\x00\x00'
tRp1414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1415
I0
sg904
g1120
sS'block_loop.thisRepN'
p1416
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1417
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1418
Nsg70
Vy
sS'block_loop.thisTrialN'
p1419
I0
sg39
F0.6504227430523315
sg34
g753
(S'\x07\xdf\x07\x0f\x122\x06\x0c\x7f8'
tRp1420
sa(dp1421
S'trial_loop.thisTrialN'
p1422
I34
sg895
S'25-kitkat.png'
p1423
sS'block_loop.thisIndex'
p1424
g889
sg38
S'left'
p1425
sg59
g63
sS'trial_loop.thisN'
p1426
I34
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p1427
g60
(g99
S'"\x00\x00\x00'
tRp1428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1429
I0
sg904
S'31-hobnobs.png'
p1430
sS'block_loop.thisRepN'
p1431
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1432
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p1433
Nsg70
Vy
sS'block_loop.thisTrialN'
p1434
I0
sg39
F3.3499669856719265
sg34
g753
(S'\x07\xdf\x07\x0f\x122\x0c\x07\x99P'
tRp1435
sa(dp1436
S'trial_loop.thisTrialN'
p1437
I35
sg895
g1204
sS'block_loop.thisIndex'
p1438
g889
sg38
S'left'
p1439
sg59
g63
sS'trial_loop.thisN'
p1440
I35
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p1441
g60
(g99
S'#\x00\x00\x00'
tRp1442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1443
I0
sg904
g1211
sS'block_loop.thisRepN'
p1444
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1445
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p1446
Nsg70
Vy
sS'block_loop.thisTrialN'
p1447
I0
sg39
F0.88322478709051211
sg34
g753
(S'\x07\xdf\x07\x0f\x122\x14\rY\xf8'
tRp1448
sa(dp1449
S'trial_loop.thisTrialN'
p1450
I36
sg895
g984
sS'block_loop.thisIndex'
p1451
g889
sg38
S'left'
p1452
sg59
g63
sS'trial_loop.thisN'
p1453
I36
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1454
g60
(g99
S'$\x00\x00\x00'
tRp1455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1456
I0
sg904
g992
sS'block_loop.thisRepN'
p1457
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vy
sS'block_loop.thisTrialN'
p1460
I0
sg39
F0.70001408383177477
sg34
g753
(S'\x07\xdf\x07\x0f\x122\x1a\x0c@\xb8'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
g1129
sS'block_loop.thisIndex'
p1464
g889
sg38
S'right'
p1465
sg59
g63
sS'trial_loop.thisN'
p1466
I37
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p1467
g60
(g99
S'%\x00\x00\x00'
tRp1468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1469
I0
sg904
g1137
sS'block_loop.thisRepN'
p1470
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vy
sS'block_loop.thisTrialN'
p1473
I0
sg39
F0.58327963990996068
sg34
g753
(S'\x07\xdf\x07\x0f\x122 \x08\x0e\x80'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
S'20-fruit_pastilles.png'
p1477
sS'block_loop.thisIndex'
p1478
g889
sg38
S'right'
p1479
sg59
g63
sS'trial_loop.thisN'
p1480
I38
sg33
S'2-steamed_puddings.png'
p1481
sg64
g65
sS'trial_loop.thisIndex'
p1482
g60
(g99
S'&\x00\x00\x00'
tRp1483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1484
I0
sg904
S'2-steamed_puddings.png'
p1485
sS'block_loop.thisRepN'
p1486
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1487
I0
sg909
S'20-fruit_pastilles.png'
p1488
sg55
g11
sS'block_loop.thisTrial'
p1489
Nsg70
Vy
sS'block_loop.thisTrialN'
p1490
I0
sg39
F1.5003113268230663
sg34
g753
(S'\x07\xdf\x07\x0f\x122&\x022\x80'
tRp1491
sa(dp1492
S'trial_loop.thisTrialN'
p1493
I39
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1494
sS'block_loop.thisIndex'
p1495
g889
sg38
S'left'
p1496
sg59
g63
sS'trial_loop.thisN'
p1497
I39
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p1498
g60
(g99
S"'\x00\x00\x00"
tRp1499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1500
I0
sg904
S'36-fig_rolls.png'
p1501
sS'block_loop.thisRepN'
p1502
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1503
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p1504
Nsg70
Vy
sS'block_loop.thisTrialN'
p1505
I0
sg39
F1.6499520465476962
sg34
g753
(S'\x07\xdf\x07\x0f\x122,\nd('
tRp1506
sa(dp1507
S'trial_loop.thisTrialN'
p1508
I40
sg895
S'10-bounty_redo.png'
p1509
sS'block_loop.thisIndex'
p1510
g889
sg38
S'left'
p1511
sg59
g63
sS'trial_loop.thisN'
p1512
I40
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p1513
g60
(g99
S'(\x00\x00\x00'
tRp1514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1515
I0
sg904
S'4-corn.png'
p1516
sS'block_loop.thisRepN'
p1517
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1518
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p1519
Nsg70
Vy
sS'block_loop.thisTrialN'
p1520
I0
sg39
F1.1998501525849861
sg34
g753
(S'\x07\xdf\x07\x0f\x1223\x05r\x88'
tRp1521
sa(dp1522
S'trial_loop.thisTrialN'
p1523
I41
sg895
S'46-pistachios.png'
p1524
sS'block_loop.thisIndex'
p1525
g889
sg38
S'right'
p1526
sg59
g63
sS'trial_loop.thisN'
p1527
I41
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p1528
g60
(g99
S')\x00\x00\x00'
tRp1529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1530
I0
sg904
S'29-beans.png'
p1531
sS'block_loop.thisRepN'
p1532
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vy
sS'block_loop.thisTrialN'
p1535
I0
sg39
F1.3999814116214111
sg34
g753
(S'\x07\xdf\x07\x0f\x1229\t\x1c\x08'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
g933
sS'block_loop.thisIndex'
p1539
g889
sg38
S'left'
p1540
sg59
g63
sS'trial_loop.thisN'
p1541
I42
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1542
g60
(g99
S'*\x00\x00\x00'
tRp1543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1544
I0
sg904
g941
sS'block_loop.thisRepN'
p1545
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1546
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1547
Nsg70
Vy
sS'block_loop.thisTrialN'
p1548
I0
sg39
F1.3666748584782908
sg34
g753
(S'\x07\xdf\x07\x0f\x123\x04\x00a\xa8'
tRp1549
sa(dp1550
S'trial_loop.thisTrialN'
p1551
I43
sg895
S'40-sardines.png'
p1552
sS'block_loop.thisIndex'
p1553
g889
sg38
S'right'
p1554
sg59
g63
sS'trial_loop.thisN'
p1555
I43
sg33
S'40-sardines.png'
p1556
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
S'5-pineapple.png'
p1560
sS'block_loop.thisRepN'
p1561
I0
sg907
S'5-pineapple.png'
p1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1563
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p1564
Nsg70
Vy
sS'block_loop.thisTrialN'
p1565
I0
sg39
F1.8669933127439435
sg34
g753
(S'\x07\xdf\x07\x0f\x123\n\x06\xa7 '
tRp1566
sa(dp1567
S'trial_loop.thisTrialN'
p1568
I44
sg895
S'33-ambrosia_rice.png'
p1569
sS'block_loop.thisIndex'
p1570
g889
sg38
S'right'
p1571
sg59
g63
sS'trial_loop.thisN'
p1572
I44
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1573
g60
(g99
S',\x00\x00\x00'
tRp1574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1575
I0
sg904
S'23-crunchie_redo.png'
p1576
sS'block_loop.thisRepN'
p1577
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1578
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p1579
Nsg70
Vy
sS'block_loop.thisTrialN'
p1580
I0
sg39
F0.83322205015065265
sg34
g753
(S'\x07\xdf\x07\x0f\x123\x11\x05\x0c\xf8'
tRp1581
sa(dp1582
S'trial_loop.thisTrialN'
p1583
I45
sg895
S'49-yorkie.png'
p1584
sS'block_loop.thisIndex'
p1585
g889
sg38
S'left'
p1586
sg59
g63
sS'trial_loop.thisN'
p1587
I45
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1588
g60
(g99
S'-\x00\x00\x00'
tRp1589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1590
I0
sg904
S'35-raisins.png'
p1591
sS'block_loop.thisRepN'
p1592
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1593
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1594
Nsg70
Vy
sS'block_loop.thisTrialN'
p1595
I0
sg39
F0.68331362357093894
sg34
g753
(S'\x07\xdf\x07\x0f\x123\x17\x03\x01\x88'
tRp1596
sa(dp1597
S'trial_loop.thisTrialN'
p1598
I46
sg895
S'1-treacle_cookies.png'
p1599
sS'block_loop.thisIndex'
p1600
g889
sg38
S'left'
p1601
sg59
g63
sS'trial_loop.thisN'
p1602
I46
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1603
g60
(g99
S'.\x00\x00\x00'
tRp1604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1605
I0
sg904
S'21-nakd_banana_crunch.png'
p1606
sS'block_loop.thisRepN'
p1607
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1608
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1609
Nsg70
Vy
sS'block_loop.thisTrialN'
p1610
I0
sg39
F0.81674168540666869
sg34
g753
(S'\x07\xdf\x07\x0f\x123\x1c\r\xd6\xf8'
tRp1611
sa(dp1612
S'trial_loop.thisTrialN'
p1613
I47
sg895
g1569
sS'block_loop.thisIndex'
p1614
g889
sg38
S'right'
p1615
sg59
g63
sS'trial_loop.thisN'
p1616
I47
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p1617
g60
(g99
S'/\x00\x00\x00'
tRp1618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1619
I0
sg904
g1576
sS'block_loop.thisRepN'
p1620
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1621
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p1622
Nsg70
Vy
sS'block_loop.thisTrialN'
p1623
I0
sg39
F0.80001271536275453
sg34
g753
(S'\x07\xdf\x07\x0f\x123"\x0b\x8d\x08'
tRp1624
sa(dp1625
S'trial_loop.thisTrialN'
p1626
I48
sg895
S'48-twix.png'
p1627
sS'block_loop.thisIndex'
p1628
g889
sg38
S'left'
p1629
sg59
g63
sS'trial_loop.thisN'
p1630
I48
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1631
g60
(g99
S'0\x00\x00\x00'
tRp1632
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1633
I0
sg904
S'50-polo.png'
p1634
sS'block_loop.thisRepN'
p1635
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1636
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1637
Nsg70
Vy
sS'block_loop.thisTrialN'
p1638
I0
sg39
F0.68336294549408194
sg34
g753
(S'\x07\xdf\x07\x0f\x123(\t\x04\x98'
tRp1639
sa(dp1640
S'trial_loop.thisTrialN'
p1641
I49
sg895
g1552
sS'block_loop.thisIndex'
p1642
g889
sg38
S'right'
p1643
sg59
g63
sS'trial_loop.thisN'
p1644
I49
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p1645
g60
(g99
S'1\x00\x00\x00'
tRp1646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1647
I0
sg904
g1560
sS'block_loop.thisRepN'
p1648
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1649
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p1650
Nsg70
Vy
sS'block_loop.thisTrialN'
p1651
I0
sg39
F1.0832879077479447
sg34
g753
(S'\x07\xdf\x07\x0f\x123.\x04\xd2`'
tRp1652
sa(dp1653
S'trial_loop.thisTrialN'
p1654
I50
sg895
g1367
sS'block_loop.thisIndex'
p1655
g889
sg38
S'right'
p1656
sg59
g63
sS'trial_loop.thisN'
p1657
I50
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1658
g60
(g99
S'2\x00\x00\x00'
tRp1659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1660
I0
sg904
g1374
sS'block_loop.thisRepN'
p1661
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1662
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1663
Nsg70
Vy
sS'block_loop.thisTrialN'
p1664
I0
sg39
F0.69996362151687208
sg34
g753
(S'\x07\xdf\x07\x0f\x1234\x06\x93\x98'
tRp1665
sa(dp1666
S'trial_loop.thisTrialN'
p1667
I51
sg895
g1552
sS'block_loop.thisIndex'
p1668
g889
sg38
S'right'
p1669
sg59
g63
sS'trial_loop.thisN'
p1670
I51
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p1671
g60
(g99
S'3\x00\x00\x00'
tRp1672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1673
I0
sg904
g1560
sS'block_loop.thisRepN'
p1674
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1675
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p1676
Nsg70
Vy
sS'block_loop.thisTrialN'
p1677
I0
sg39
F1.1666547875902324
sg34
g753
(S'\x07\xdf\x07\x0f\x123:\x02eH'
tRp1678
sa(dp1679
S'trial_loop.thisTrialN'
p1680
I52
sg895
g984
sS'block_loop.thisIndex'
p1681
g889
sg38
S'left'
p1682
sg59
g63
sS'trial_loop.thisN'
p1683
I52
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1684
g60
(g99
S'4\x00\x00\x00'
tRp1685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1686
I0
sg904
g992
sS'block_loop.thisRepN'
p1687
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1688
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p1689
Nsg70
Vy
sS'block_loop.thisTrialN'
p1690
I0
sg39
F0.86669167924992507
sg34
g753
(S'\x07\xdf\x07\x0f\x124\x04\x05\x95\xb0'
tRp1691
sa(dp1692
S'trial_loop.thisTrialN'
p1693
I53
sg895
g933
sS'block_loop.thisIndex'
p1694
g889
sg38
S'left'
p1695
sg59
g63
sS'trial_loop.thisN'
p1696
I53
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1697
g60
(g99
S'5\x00\x00\x00'
tRp1698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1699
I0
sg904
g941
sS'block_loop.thisRepN'
p1700
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1701
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1702
Nsg70
Vy
sS'block_loop.thisTrialN'
p1703
I0
sg39
F1.8999794159371959
sg34
g753
(S'\x07\xdf\x07\x0f\x124\n\x03\xffp'
tRp1704
sa(dp1705
S'trial_loop.thisTrialN'
p1706
I54
sg895
g1279
sS'block_loop.thisIndex'
p1707
g889
sg38
S'left'
p1708
sg59
g63
sS'trial_loop.thisN'
p1709
I54
sg33
g1249
sg64
g65
sS'trial_loop.thisIndex'
p1710
g60
(g99
S'6\x00\x00\x00'
tRp1711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1712
I0
sg904
g1286
sS'block_loop.thisRepN'
p1713
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1714
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p1715
Nsg70
Vy
sS'block_loop.thisTrialN'
p1716
I0
sg39
F0.66704708219549502
sg34
g753
(S'\x07\xdf\x07\x0f\x124\x11\x03\x1c\xe0'
tRp1717
sa(dp1718
S'trial_loop.thisTrialN'
p1719
I55
sg895
g1599
sS'block_loop.thisIndex'
p1720
g889
sg38
S'left'
p1721
sg59
g63
sS'trial_loop.thisN'
p1722
I55
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p1723
g60
(g99
S'7\x00\x00\x00'
tRp1724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1725
I0
sg904
g1606
sS'block_loop.thisRepN'
p1726
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1727
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p1728
Nsg70
Vy
sS'block_loop.thisTrialN'
p1729
I0
sg39
F0.75000028509748518
sg34
g753
(S'\x07\xdf\x07\x0f\x124\x16\r\xb3\xd0'
tRp1730
sa(dp1731
S'trial_loop.thisTrialN'
p1732
I56
sg895
g1035
sS'block_loop.thisIndex'
p1733
g889
sg38
S'right'
p1734
sg59
g63
sS'trial_loop.thisN'
p1735
I56
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1736
g60
(g99
S'8\x00\x00\x00'
tRp1737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1738
I0
sg904
g1043
sS'block_loop.thisRepN'
p1739
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1740
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p1741
Nsg70
Vy
sS'block_loop.thisTrialN'
p1742
I0
sg39
F0.71664982688889722
sg34
g753
(S'\x07\xdf\x07\x0f\x124\x1c\nw\xb0'
tRp1743
sa(dp1744
S'trial_loop.thisTrialN'
p1745
I57
sg895
g1494
sS'block_loop.thisIndex'
p1746
g889
sg38
S'left'
p1747
sg59
g63
sS'trial_loop.thisN'
p1748
I57
sg33
g1078
sg64
g65
sS'trial_loop.thisIndex'
p1749
g60
(g99
S'9\x00\x00\x00'
tRp1750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1751
I0
sg904
g1501
sS'block_loop.thisRepN'
p1752
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1753
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p1754
Nsg70
Vy
sS'block_loop.thisTrialN'
p1755
I0
sg39
F1.2501205963781103
sg34
g753
(S'\x07\xdf\x07\x0f\x124"\x06\x83\xf8'
tRp1756
sa(dp1757
S'trial_loop.thisTrialN'
p1758
I58
sg895
g1552
sS'block_loop.thisIndex'
p1759
g889
sg38
S'left'
p1760
sg59
g63
sS'trial_loop.thisN'
p1761
I58
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p1762
g60
(g99
S':\x00\x00\x00'
tRp1763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1764
I0
sg904
g1560
sS'block_loop.thisRepN'
p1765
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1766
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p1767
Nsg70
Vy
sS'block_loop.thisTrialN'
p1768
I0
sg39
F1.2332710299560858
sg34
g753
(S'\x07\xdf\x07\x0f\x124(\n\xe5\x10'
tRp1769
sa(dp1770
S'trial_loop.thisTrialN'
p1771
I59
sg895
g1052
sS'block_loop.thisIndex'
p1772
g889
sg38
S'left'
p1773
sg59
g63
sS'trial_loop.thisN'
p1774
I59
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1775
g60
(g99
S';\x00\x00\x00'
tRp1776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1777
I0
sg904
g1059
sS'block_loop.thisRepN'
p1778
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1779
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1780
Nsg70
Vy
sS'block_loop.thisTrialN'
p1781
I0
sg39
F0.91685635175235802
sg34
g753
(S'\x07\xdf\x07\x0f\x124.\x0f\x07\xa8'
tRp1782
sa(dp1783
S'trial_loop.thisTrialN'
p1784
I60
sg895
S'41-peanuts_redo.png'
p1785
sS'block_loop.thisIndex'
p1786
g889
sg38
S'left'
p1787
sg59
g63
sS'trial_loop.thisN'
p1788
I60
sg33
S'41-peanuts_redo.png'
p1789
sg64
g65
sS'trial_loop.thisIndex'
p1790
g60
(g99
S'<\x00\x00\x00'
tRp1791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1792
I0
sg904
S'45-chewy_nougat_redo.png'
p1793
sS'block_loop.thisRepN'
p1794
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1795
I0
sg909
S'45-chewy_nougat_redo.png'
p1796
sg55
g11
sS'block_loop.thisTrial'
p1797
Nsg70
Vy
sS'block_loop.thisTrialN'
p1798
I0
sg39
F2.849946458629347
sg34
g753
(S'\x07\xdf\x07\x0f\x1244\x0e)\x00'
tRp1799
sa(dp1800
S'trial_loop.thisTrialN'
p1801
I61
sg895
g967
sS'block_loop.thisIndex'
p1802
g889
sg38
S'left'
p1803
sg59
g63
sS'trial_loop.thisN'
p1804
I61
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1805
g60
(g99
S'=\x00\x00\x00'
tRp1806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1807
I0
sg904
g975
sS'block_loop.thisRepN'
p1808
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1809
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1810
Nsg70
Vy
sS'block_loop.thisTrialN'
p1811
I0
sg39
F0.8997755709951889
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x00\x0cLp'
tRp1812
sa(dp1813
S'trial_loop.thisTrialN'
p1814
I62
sg895
g1279
sS'block_loop.thisIndex'
p1815
g889
sg38
S'left'
p1816
sg59
g63
sS'trial_loop.thisN'
p1817
I62
sg33
g1249
sg64
g65
sS'trial_loop.thisIndex'
p1818
g60
(g99
S'>\x00\x00\x00'
tRp1819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1820
I0
sg904
g1286
sS'block_loop.thisRepN'
p1821
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1822
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg70
Vy
sS'block_loop.thisTrialN'
p1824
I0
sg39
F0.63331459290202474
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x06\x0bq\xb0'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I63
sg895
S'13-mccoys_steak_crisps.png'
p1828
sS'block_loop.thisIndex'
p1829
g889
sg38
S'left'
p1830
sg59
g63
sS'trial_loop.thisN'
p1831
I63
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p1832
g60
(g99
S'?\x00\x00\x00'
tRp1833
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1834
I0
sg904
S'3-ellas_strawberries_apples.png'
p1835
sS'block_loop.thisRepN'
p1836
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vy
sS'block_loop.thisTrialN'
p1839
I0
sg39
F1.0165467925344274
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x0c\x06MH'
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
g1307
sS'block_loop.thisIndex'
p1843
g889
sg38
S'left'
p1844
sg59
g63
sS'trial_loop.thisN'
p1845
I64
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p1846
g60
(g99
S'@\x00\x00\x00'
tRp1847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1848
I0
sg904
g1315
sS'block_loop.thisRepN'
p1849
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1850
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vy
sS'block_loop.thisTrialN'
p1852
I0
sg39
F1.6665923511682195
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x12\x07\x1cP'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1279
sS'block_loop.thisIndex'
p1856
g889
sg38
S'left'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g1256
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1286
sS'block_loop.thisRepN'
p1862
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1863
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vy
sS'block_loop.thisTrialN'
p1865
I0
sg39
F0.56646285973693011
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x19\x02i0'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1367
sS'block_loop.thisIndex'
p1869
g889
sg38
S'right'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1374
sS'block_loop.thisRepN'
p1875
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1876
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vy
sS'block_loop.thisTrialN'
p1878
I0
sg39
F0.78324240613437723
sg34
g753
(S'\x07\xdf\x07\x0f\x125\x1e\x0b\x90\xf0'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g1337
sS'block_loop.thisIndex'
p1882
g889
sg38
S'right'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g1345
sS'block_loop.thisRepN'
p1888
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vy
sS'block_loop.thisTrialN'
p1891
I0
sg39
F0.94999099090819072
sg34
g753
(S'\x07\xdf\x07\x0f\x125$\x08\xcd\xe8'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
g1524
sS'block_loop.thisIndex'
p1895
g889
sg38
S'left'
p1896
sg59
g63
sS'trial_loop.thisN'
p1897
I68
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p1898
g60
(g99
S'D\x00\x00\x00'
tRp1899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1900
I0
sg904
g1531
sS'block_loop.thisRepN'
p1901
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vy
sS'block_loop.thisTrialN'
p1904
I0
sg39
F0.81657005651686632
sg34
g753
(S'\x07\xdf\x07\x0f\x125*\x08\xaa\xc0'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
g1828
sS'block_loop.thisIndex'
p1908
g889
sg38
S'left'
p1909
sg59
g63
sS'trial_loop.thisN'
p1910
I69
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p1911
g60
(g99
S'E\x00\x00\x00'
tRp1912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1913
I0
sg904
g1835
sS'block_loop.thisRepN'
p1914
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vy
sS'block_loop.thisTrialN'
p1917
I0
sg39
F0.66663369035268261
sg34
g753
(S'\x07\xdf\x07\x0f\x1250\x06`\xd0'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1052
sS'block_loop.thisIndex'
p1921
g889
sg38
S'left'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1059
sS'block_loop.thisRepN'
p1927
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vy
sS'block_loop.thisTrialN'
p1930
I0
sg39
F0.96654947245588119
sg34
g753
(S'\x07\xdf\x07\x0f\x1256\x01\xb5\x80'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
g1097
sS'block_loop.thisIndex'
p1934
g889
sg38
S'right'
p1935
sg59
g63
sS'trial_loop.thisN'
p1936
I71
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1937
g60
(g99
S'G\x00\x00\x00'
tRp1938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1939
I0
sg904
g1104
sS'block_loop.thisRepN'
p1940
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1941
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1942
Nsg70
Vy
sS'block_loop.thisTrialN'
p1943
I0
sg39
F0.94994480506284162
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x00\x01\xcc\xf0'
tRp1944
sa(dp1945
S'trial_loop.thisTrialN'
p1946
I72
sg895
g1307
sS'block_loop.thisIndex'
p1947
g889
sg38
S'right'
p1948
sg59
g63
sS'trial_loop.thisN'
p1949
I72
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p1950
g60
(g99
S'H\x00\x00\x00'
tRp1951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1952
I0
sg904
g1315
sS'block_loop.thisRepN'
p1953
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1954
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p1955
Nsg70
Vy
sS'block_loop.thisTrialN'
p1956
I0
sg39
F0.91666647659985756
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x06\x01kH'
tRp1957
sa(dp1958
S'trial_loop.thisTrialN'
p1959
I73
sg895
S'5-pineapple.png'
p1960
sS'block_loop.thisIndex'
p1961
g889
sg38
S'right'
p1962
sg59
g63
sS'trial_loop.thisN'
p1963
I73
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p1964
g60
(g99
S'I\x00\x00\x00'
tRp1965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1966
I0
sg904
S'40-sardines.png'
p1967
sS'block_loop.thisRepN'
p1968
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1969
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vy
sS'block_loop.thisTrialN'
p1971
I0
sg39
F1.3832293486557319
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x0c\x00\xcb '
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1189
sS'block_loop.thisIndex'
p1975
g889
sg38
S'left'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1196
sS'block_loop.thisRepN'
p1981
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1982
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vy
sS'block_loop.thisTrialN'
p1984
I0
sg39
F1.1832124138436484
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x12\x07\x10\x98'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
S'2-steamed_puddings.png'
p1988
sS'block_loop.thisIndex'
p1989
g889
sg38
S'left'
p1990
sg59
g63
sS'trial_loop.thisN'
p1991
I75
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p1992
g60
(g99
S'K\x00\x00\x00'
tRp1993
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1994
I0
sg904
S'20-fruit_pastilles.png'
p1995
sS'block_loop.thisRepN'
p1996
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1997
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p1998
Nsg70
Vy
sS'block_loop.thisTrialN'
p1999
I0
sg39
F1.9333672219618165
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x18\nA\x00'
tRp2000
sa(dp2001
S'trial_loop.thisTrialN'
p2002
I76
sg895
g1524
sS'block_loop.thisIndex'
p2003
g889
sg38
S'left'
p2004
sg59
g63
sS'trial_loop.thisN'
p2005
I76
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p2006
g60
(g99
S'L\x00\x00\x00'
tRp2007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2008
I0
sg904
g1531
sS'block_loop.thisRepN'
p2009
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2010
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p2011
Nsg70
Vy
sS'block_loop.thisTrialN'
p2012
I0
sg39
F1.9832684640750813
sg34
g753
(S'\x07\xdf\x07\x0f\x126\x1f\t\xd7\x88'
tRp2013
sa(dp2014
S'trial_loop.thisTrialN'
p2015
I77
sg895
g1988
sS'block_loop.thisIndex'
p2016
g889
sg38
S'left'
p2017
sg59
g63
sS'trial_loop.thisN'
p2018
I77
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p2019
g60
(g99
S'M\x00\x00\x00'
tRp2020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2021
I0
sg904
g1995
sS'block_loop.thisRepN'
p2022
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2023
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2024
Nsg70
Vy
sS'block_loop.thisTrialN'
p2025
I0
sg39
F0.9333549627535831
sg34
g753
(S'\x07\xdf\x07\x0f\x126&\n%\xa8'
tRp2026
sa(dp2027
S'trial_loop.thisTrialN'
p2028
I78
sg895
g1785
sS'block_loop.thisIndex'
p2029
g889
sg38
S'left'
p2030
sg59
g63
sS'trial_loop.thisN'
p2031
I78
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p2032
g60
(g99
S'N\x00\x00\x00'
tRp2033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2034
I0
sg904
g1793
sS'block_loop.thisRepN'
p2035
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vy
sS'block_loop.thisTrialN'
p2038
I0
sg39
F0.86661270715194405
sg34
g753
(S'\x07\xdf\x07\x0f\x126,\t\x89h'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1018
sS'block_loop.thisIndex'
p2042
g889
sg38
S'right'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1026
sS'block_loop.thisRepN'
p2048
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2049
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vy
sS'block_loop.thisTrialN'
p2051
I0
sg39
F1.8332713720737956
sg34
g753
(S'\x07\xdf\x07\x0f\x1262\x081\xa8'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g1097
sS'block_loop.thisIndex'
p2055
g889
sg38
S'right'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g1104
sS'block_loop.thisRepN'
p2061
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2062
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vy
sS'block_loop.thisTrialN'
p2064
I0
sg39
F0.91645151284319581
sg34
g753
(S'\x07\xdf\x07\x0f\x1269\x06\x1eh'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
g1494
sS'block_loop.thisIndex'
p2068
g889
sg38
S'left'
p2069
sg59
g63
sS'trial_loop.thisN'
p2070
I81
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p2071
g60
(g99
S'Q\x00\x00\x00'
tRp2072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2073
I0
sg904
g1501
sS'block_loop.thisRepN'
p2074
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2075
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p2076
Nsg70
Vy
sS'block_loop.thisTrialN'
p2077
I0
sg39
F1.7666297560026578
sg34
g753
(S'\x07\xdf\x07\x0f\x127\x03\x05C\xa8'
tRp2078
sa(dp2079
S'trial_loop.thisTrialN'
p2080
I82
sg895
g1960
sS'block_loop.thisIndex'
p2081
g889
sg38
S'right'
p2082
sg59
g63
sS'trial_loop.thisN'
p2083
I82
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2084
g60
(g99
S'R\x00\x00\x00'
tRp2085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2086
I0
sg904
g1967
sS'block_loop.thisRepN'
p2087
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2088
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vy
sS'block_loop.thisTrialN'
p2090
I0
sg39
F4.2332356778260873
sg34
g753
(S'\x07\xdf\x07\x0f\x127\n\x02:P'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g1382
sS'block_loop.thisIndex'
p2094
g889
sg38
S'right'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g1389
sS'block_loop.thisRepN'
p2100
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2101
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vy
sS'block_loop.thisTrialN'
p2103
I0
sg39
F0.83307636516292405
sg34
g753
(S'\x07\xdf\x07\x0f\x127\x13\x06MH'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g896
sS'block_loop.thisIndex'
p2107
g889
sg38
S'left'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g905
sS'block_loop.thisRepN'
p2113
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2114
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vy
sS'block_loop.thisTrialN'
p2116
I0
sg39
F0.98332291776023339
sg34
g753
(S'\x07\xdf\x07\x0f\x127\x19\x04=\xf0'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1988
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1995
sS'block_loop.thisRepN'
p2126
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2127
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vy
sS'block_loop.thisTrialN'
p2129
I0
sg39
F0.95037872394823353
sg34
g753
(S'\x07\xdf\x07\x0f\x127\x1f\x04\x93\xe0'
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1599
sS'block_loop.thisIndex'
p2133
g889
sg38
S'left'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1606
sS'block_loop.thisRepN'
p2139
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2140
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vy
sS'block_loop.thisTrialN'
p2142
I0
sg39
F0.83324571326920704
sg34
g753
(S'\x07\xdf\x07\x0f\x127%\x0428'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
g1960
sS'block_loop.thisIndex'
p2146
g889
sg38
S'right'
p2147
sg59
g63
sS'trial_loop.thisN'
p2148
I87
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p2149
g60
(g99
S'W\x00\x00\x00'
tRp2150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2151
I0
sg904
g1967
sS'block_loop.thisRepN'
p2152
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2153
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vy
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.7498297966012615
sg34
g753
(S'\x07\xdf\x07\x0f\x127+\x02"\xe0'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g1018
sS'block_loop.thisIndex'
p2159
g889
sg38
S'left'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g1026
sS'block_loop.thisRepN'
p2165
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2166
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vy
sS'block_loop.thisTrialN'
p2168
I0
sg39
F0.83329132892140478
sg34
g753
(S'\x07\xdf\x07\x0f\x1271\x0e!0'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
g967
sS'block_loop.thisIndex'
p2172
g889
sg38
S'left'
p2173
sg59
g63
sS'trial_loop.thisN'
p2174
I89
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2175
g60
(g99
S'Y\x00\x00\x00'
tRp2176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2177
I0
sg904
g975
sS'block_loop.thisRepN'
p2178
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2179
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2180
Nsg70
Vy
sS'block_loop.thisTrialN'
p2181
I0
sg39
F0.7830037792573421
sg34
g753
(S'\x07\xdf\x07\x0f\x1277\x0c\x15\xc0'
tRp2182
sa(dp2183
S'trial_loop.thisTrialN'
p2184
I90
sg895
g1001
sS'block_loop.thisIndex'
p2185
g889
sg38
S'right'
p2186
sg59
g63
sS'trial_loop.thisN'
p2187
I90
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2188
g60
(g99
S'Z\x00\x00\x00'
tRp2189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2190
I0
sg904
g1009
sS'block_loop.thisRepN'
p2191
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2192
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2193
Nsg70
Vy
sS'block_loop.thisTrialN'
p2194
I0
sg39
F1.233682426114683
sg34
g753
(S'\x07\xdf\x07\x0f\x128\x01\tR\xb8'
tRp2195
sa(dp2196
S'trial_loop.thisTrialN'
p2197
I91
sg895
g1018
sS'block_loop.thisIndex'
p2198
g889
sg38
S'left'
p2199
sg59
g63
sS'trial_loop.thisN'
p2200
I91
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2201
g60
(g99
S'[\x00\x00\x00'
tRp2202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2203
I0
sg904
g1026
sS'block_loop.thisRepN'
p2204
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2205
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p2206
Nsg70
Vy
sS'block_loop.thisTrialN'
p2207
I0
sg39
F0.8833385411198833
sg34
g753
(S'\x07\xdf\x07\x0f\x128\x07\ruP'
tRp2208
sa(dp2209
S'trial_loop.thisTrialN'
p2210
I92
sg895
g1599
sS'block_loop.thisIndex'
p2211
g889
sg38
S'left'
p2212
sg59
g63
sS'trial_loop.thisN'
p2213
I92
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2214
g60
(g99
S'\\\x00\x00\x00'
tRp2215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2216
I0
sg904
g1606
sS'block_loop.thisRepN'
p2217
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2218
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vy
sS'block_loop.thisTrialN'
p2220
I0
sg39
F0.633241037665357
sg34
g753
(S'\x07\xdf\x07\x0f\x128\r\x0c\x1d\x90'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g1584
sS'block_loop.thisIndex'
p2224
g889
sg38
S'left'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g1591
sS'block_loop.thisRepN'
p2230
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2231
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vy
sS'block_loop.thisTrialN'
p2233
I0
sg39
F0.6499514763490879
sg34
g753
(S'\x07\xdf\x07\x0f\x128\x13\x06\xf9('
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g896
sS'block_loop.thisIndex'
p2237
g889
sg38
S'left'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g905
sS'block_loop.thisRepN'
p2243
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2244
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vy
sS'block_loop.thisTrialN'
p2246
I0
sg39
F0.74991361536012846
sg34
g753
(S'\x07\xdf\x07\x0f\x128\x19\x02M\xd8'
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g1584
sS'block_loop.thisIndex'
p2250
g889
sg38
S'left'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g1591
sS'block_loop.thisRepN'
p2256
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vy
sS'block_loop.thisTrialN'
p2259
I0
sg39
F0.58319981251952413
sg34
g753
(S'\x07\xdf\x07\x0f\x128\x1e\x0e\x15x'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1172
sS'block_loop.thisIndex'
p2263
g889
sg38
S'left'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1180
sS'block_loop.thisRepN'
p2269
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vy
sS'block_loop.thisTrialN'
p2272
I0
sg39
F1.266773160206867
sg34
g753
(S'\x07\xdf\x07\x0f\x128$\x089x'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1245
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1256
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1253
sS'block_loop.thisRepN'
p2282
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vy
sS'block_loop.thisTrialN'
p2285
I0
sg39
F0.74991874712031859
sg34
g753
(S'\x07\xdf\x07\x0f\x128*\x0c\xd9\x10'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1828
sS'block_loop.thisIndex'
p2289
g889
sg38
S'right'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1835
sS'block_loop.thisRepN'
p2295
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vy
sS'block_loop.thisTrialN'
p2298
I0
sg39
F1.0833244002678839
sg34
g753
(S'\x07\xdf\x07\x0f\x1280\t\x99\x08'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g1785
sS'block_loop.thisIndex'
p2302
g889
sg38
S'left'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g1793
sS'block_loop.thisRepN'
p2308
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2309
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vy
sS'block_loop.thisTrialN'
p2311
I0
sg39
F0.69998557405051542
sg34
g753
(S'\x07\xdf\x07\x0f\x1286\x0bZ@'
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g1052
sS'block_loop.thisIndex'
p2315
g889
sg38
S'left'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g1059
sS'block_loop.thisRepN'
p2321
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2322
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vy
sS'block_loop.thisTrialN'
p2324
I0
sg39
F0.93330478553798457
sg34
g753
(S'\x07\xdf\x07\x0f\x129\x00\x07f\x88'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
g1067
sS'block_loop.thisIndex'
p2328
g889
sg38
S'left'
p2329
sg59
g63
sS'trial_loop.thisN'
p2330
I101
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p2331
g60
(g99
S'e\x00\x00\x00'
tRp2332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2333
I0
sg904
g1075
sS'block_loop.thisRepN'
p2334
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2335
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p2336
Nsg70
Vy
sS'block_loop.thisTrialN'
p2337
I0
sg39
F3.1499868284809054
sg34
g753
(S'\x07\xdf\x07\x0f\x129\x06\x06\xc6`'
tRp2338
sa(dp2339
S'trial_loop.thisTrialN'
p2340
I102
sg895
g1337
sS'block_loop.thisIndex'
p2341
g889
sg38
S'right'
p2342
sg59
g63
sS'trial_loop.thisN'
p2343
I102
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2344
g60
(g99
S'f\x00\x00\x00'
tRp2345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2346
I0
sg904
g1345
sS'block_loop.thisRepN'
p2347
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2348
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vy
sS'block_loop.thisTrialN'
p2350
I0
sg39
F0.76657929368775513
sg34
g753
(S'\x07\xdf\x07\x0f\x129\x0e\t\xac\x90'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g1189
sS'block_loop.thisIndex'
p2354
g889
sg38
S'left'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g1196
sS'block_loop.thisRepN'
p2360
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2361
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vy
sS'block_loop.thisTrialN'
p2363
I0
sg39
F0.74998004315239086
sg34
g753
(S'\x07\xdf\x07\x0f\x129\x14\x06pp'
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1367
sS'block_loop.thisIndex'
p2367
g889
sg38
S'right'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1374
sS'block_loop.thisRepN'
p2373
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2374
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vy
sS'block_loop.thisTrialN'
p2376
I0
sg39
F0.96657883753141505
sg34
g753
(S'\x07\xdf\x07\x0f\x129\x1a\x034P'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
g1262
sS'block_loop.thisIndex'
p2380
g889
sg38
S'left'
p2381
sg59
g63
sS'trial_loop.thisN'
p2382
I105
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2383
g60
(g99
S'i\x00\x00\x00'
tRp2384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2385
I0
sg904
g1270
sS'block_loop.thisRepN'
p2386
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2387
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vy
sS'block_loop.thisTrialN'
p2389
I0
sg39
F0.69999783325692988
sg34
g753
(S'\x07\xdf\x07\x0f\x129 \x03K\xc0'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1509
sS'block_loop.thisIndex'
p2393
g889
sg38
S'left'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1516
sS'block_loop.thisRepN'
p2399
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2400
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vy
sS'block_loop.thisTrialN'
p2402
I0
sg39
F0.61662553655332886
sg34
g753
(S'\x07\xdf\x07\x0f\x129%\x0e[\xc8'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g1524
sS'block_loop.thisIndex'
p2406
g889
sg38
S'left'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g1531
sS'block_loop.thisRepN'
p2412
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2413
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vy
sS'block_loop.thisTrialN'
p2415
I0
sg39
F0.88329378076196008
sg34
g753
(S'\x07\xdf\x07\x0f\x129+\x08\xf8\xe0'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g1584
sS'block_loop.thisIndex'
p2419
g889
sg38
S'left'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g1591
sS'block_loop.thisRepN'
p2425
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2426
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vy
sS'block_loop.thisTrialN'
p2428
I0
sg39
F0.56659115375623514
sg34
g753
(S'\x07\xdf\x07\x0f\x1291\x07\xdf\xa0'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g1494
sS'block_loop.thisIndex'
p2432
g889
sg38
S'right'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g1501
sS'block_loop.thisRepN'
p2438
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2439
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vy
sS'block_loop.thisTrialN'
p2441
I0
sg39
F1.2332476519350166
sg34
g753
(S'\x07\xdf\x07\x0f\x1297\x01\xc9\x08'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
g1627
sS'block_loop.thisIndex'
p2445
g889
sg38
S'left'
p2446
sg59
g63
sS'trial_loop.thisN'
p2447
I110
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2448
g60
(g99
S'n\x00\x00\x00'
tRp2449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2450
I0
sg904
g1634
sS'block_loop.thisRepN'
p2451
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2452
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2453
Nsg70
Vy
sS'block_loop.thisTrialN'
p2454
I0
sg39
F0.66660033390508033
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\x01\x05\xad '
tRp2455
sa(dp2456
S'trial_loop.thisTrialN'
p2457
I111
sg895
g1172
sS'block_loop.thisIndex'
p2458
g889
sg38
S'left'
p2459
sg59
g63
sS'trial_loop.thisN'
p2460
I111
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2461
g60
(g99
S'o\x00\x00\x00'
tRp2462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2463
I0
sg904
g1180
sS'block_loop.thisRepN'
p2464
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2465
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2466
Nsg70
Vy
sS'block_loop.thisTrialN'
p2467
I0
sg39
F1.383318299174789
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\x07\x01@P'
tRp2468
sa(dp2469
S'trial_loop.thisTrialN'
p2470
I112
sg895
g1307
sS'block_loop.thisIndex'
p2471
g889
sg38
S'right'
p2472
sg59
g63
sS'trial_loop.thisN'
p2473
I112
sg33
g1311
sg64
g65
sS'trial_loop.thisIndex'
p2474
g60
(g99
S'p\x00\x00\x00'
tRp2475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2476
I0
sg904
g1315
sS'block_loop.thisRepN'
p2477
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2478
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p2479
Nsg70
Vy
sS'block_loop.thisTrialN'
p2480
I0
sg39
F0.84998608722708013
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\r\x07\x85\xc8'
tRp2481
sa(dp2482
S'trial_loop.thisTrialN'
p2483
I113
sg895
g1129
sS'block_loop.thisIndex'
p2484
g889
sg38
S'right'
p2485
sg59
g63
sS'trial_loop.thisN'
p2486
I113
sg33
g1140
sg64
g65
sS'trial_loop.thisIndex'
p2487
g60
(g99
S'q\x00\x00\x00'
tRp2488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2489
I0
sg904
g1137
sS'block_loop.thisRepN'
p2490
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2491
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p2492
Nsg70
Vy
sS'block_loop.thisTrialN'
p2493
I0
sg39
F0.91666020444972673
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\x13\x05\xb8\xd8'
tRp2494
sa(dp2495
S'trial_loop.thisTrialN'
p2496
I114
sg895
g1569
sS'block_loop.thisIndex'
p2497
g889
sg38
S'right'
p2498
sg59
g63
sS'trial_loop.thisN'
p2499
I114
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2500
g60
(g99
S'r\x00\x00\x00'
tRp2501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2502
I0
sg904
g1576
sS'block_loop.thisRepN'
p2503
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2504
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2505
Nsg70
Vy
sS'block_loop.thisTrialN'
p2506
I0
sg39
F0.69995506858322187
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\x19\x05\x18\xb0'
tRp2507
sa(dp2508
S'trial_loop.thisTrialN'
p2509
I115
sg895
g1052
sS'block_loop.thisIndex'
p2510
g889
sg38
S'left'
p2511
sg59
g63
sS'trial_loop.thisN'
p2512
I115
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2513
g60
(g99
S's\x00\x00\x00'
tRp2514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2515
I0
sg904
g1059
sS'block_loop.thisRepN'
p2516
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2517
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2518
Nsg70
Vy
sS'block_loop.thisTrialN'
p2519
I0
sg39
F0.7665399501875072
sg34
g753
(S'\x07\xdf\x07\x0f\x12:\x1f\x00\xe6x'
tRp2520
sa(dp2521
S'trial_loop.thisTrialN'
p2522
I116
sg895
g1382
sS'block_loop.thisIndex'
p2523
g889
sg38
S'right'
p2524
sg59
g63
sS'trial_loop.thisN'
p2525
I116
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2526
g60
(g99
S't\x00\x00\x00'
tRp2527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2528
I0
sg904
g1389
sS'block_loop.thisRepN'
p2529
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2530
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2531
Nsg70
Vy
sS'block_loop.thisTrialN'
p2532
I0
sg39
F0.64973594239563681
sg34
g753
(S"\x07\xdf\x07\x0f\x12:$\r'0"
tRp2533
sa(dp2534
S'trial_loop.thisTrialN'
p2535
I117
sg895
g1112
sS'block_loop.thisIndex'
p2536
g889
sg38
S'right'
p2537
sg59
g63
sS'trial_loop.thisN'
p2538
I117
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2539
g60
(g99
S'u\x00\x00\x00'
tRp2540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2541
I0
sg904
g1120
sS'block_loop.thisRepN'
p2542
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2543
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2544
Nsg70
Vy
sS'block_loop.thisTrialN'
p2545
I0
sg39
F0.71672281193241361
sg34
g753
(S'\x07\xdf\x07\x0f\x12:*\x08AH'
tRp2546
sa(dp2547
S'trial_loop.thisTrialN'
p2548
I118
sg895
g1097
sS'block_loop.thisIndex'
p2549
g889
sg38
S'right'
p2550
sg59
g63
sS'trial_loop.thisN'
p2551
I118
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2552
g60
(g99
S'v\x00\x00\x00'
tRp2553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2554
I0
sg904
g1104
sS'block_loop.thisRepN'
p2555
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2556
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2557
Nsg70
Vy
sS'block_loop.thisTrialN'
p2558
I0
sg39
F0.90036657878044934
sg34
g753
(S'\x07\xdf\x07\x0f\x12:0\x04\x88('
tRp2559
sa(dp2560
S'trial_loop.thisTrialN'
p2561
I119
sg895
g950
sS'block_loop.thisIndex'
p2562
g889
sg38
S'right'
p2563
sg59
g63
sS'trial_loop.thisN'
p2564
I119
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2565
g60
(g99
S'w\x00\x00\x00'
tRp2566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2567
I0
sg904
g958
sS'block_loop.thisRepN'
p2568
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2569
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2570
Nsg70
Vy
sS'block_loop.thisTrialN'
p2571
I0
sg39
F0.79992775621030887
sg34
g753
(S'\x07\xdf\x07\x0f\x12:6\x03n\xe8'
tRp2572
sa(dp2573
S'trial_loop.thisTrialN'
p2574
I120
sg895
g1477
sS'block_loop.thisIndex'
p2575
g889
sg38
S'right'
p2576
sg59
g63
sS'trial_loop.thisN'
p2577
I120
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2578
g60
(g99
S'x\x00\x00\x00'
tRp2579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2580
I0
sg904
g1485
sS'block_loop.thisRepN'
p2581
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2582
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2583
Nsg70
Vy
sS'block_loop.thisTrialN'
p2584
I0
sg39
F0.86665062516112812
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x00\x00\xe6x'
tRp2585
sa(dp2586
S'trial_loop.thisTrialN'
p2587
I121
sg895
S'45-chewy_nougat_redo.png'
p2588
sS'block_loop.thisIndex'
p2589
g889
sg38
S'right'
p2590
sg59
g63
sS'trial_loop.thisN'
p2591
I121
sg33
g1796
sg64
g65
sS'trial_loop.thisIndex'
p2592
g60
(g99
S'y\x00\x00\x00'
tRp2593
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2594
I0
sg904
S'41-peanuts_redo.png'
p2595
sS'block_loop.thisRepN'
p2596
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vy
sS'block_loop.thisTrialN'
p2599
I0
sg39
F0.84997781938909611
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x05\x0e\x96`'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g1067
sS'block_loop.thisIndex'
p2603
g889
sg38
S'left'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g1075
sS'block_loop.thisRepN'
p2609
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vy
sS'block_loop.thisTrialN'
p2612
I0
sg39
F0.79998192479797581
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x0b\x0c\xc5\x88'
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g1262
sS'block_loop.thisIndex'
p2616
g889
sg38
S'left'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g1270
sS'block_loop.thisRepN'
p2622
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vy
sS'block_loop.thisTrialN'
p2625
I0
sg39
F0.61665575692313723
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x11\nA\x00'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g1988
sS'block_loop.thisIndex'
p2629
g889
sg38
S'left'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g1995
sS'block_loop.thisRepN'
p2635
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vy
sS'block_loop.thisTrialN'
p2638
I0
sg39
F0.71667035393147671
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x17\x04\xde\x18'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
g1627
sS'block_loop.thisIndex'
p2642
g889
sg38
S'left'
p2643
sg59
g63
sS'trial_loop.thisN'
p2644
I125
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2645
g60
(g99
S'}\x00\x00\x00'
tRp2646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2647
I0
sg904
g1634
sS'block_loop.thisRepN'
p2648
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2649
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2650
Nsg70
Vy
sS'block_loop.thisTrialN'
p2651
I0
sg39
F0.70000325011460518
sg34
g753
(S'\x07\xdf\x07\x0f\x12;\x1d\x01$\xf8'
tRp2652
sa(dp2653
S'trial_loop.thisTrialN'
p2654
I126
sg895
g1960
sS'block_loop.thisIndex'
p2655
g889
sg38
S'left'
p2656
sg59
g63
sS'trial_loop.thisN'
p2657
I126
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p2658
g60
(g99
S'~\x00\x00\x00'
tRp2659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2660
I0
sg904
g1967
sS'block_loop.thisRepN'
p2661
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2662
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p2663
Nsg70
Vy
sS'block_loop.thisTrialN'
p2664
I0
sg39
F1.4333381419837679
sg34
g753
(S'\x07\xdf\x07\x0f\x12;"\x0cs\x80'
tRp2665
sa(dp2666
S'trial_loop.thisTrialN'
p2667
I127
sg895
g1423
sS'block_loop.thisIndex'
p2668
g889
sg38
S'right'
p2669
sg59
g63
sS'trial_loop.thisN'
p2670
I127
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2671
g60
(g99
S'\x7f\x00\x00\x00'
tRp2672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2673
I0
sg904
g1430
sS'block_loop.thisRepN'
p2674
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2675
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p2676
Nsg70
Vy
sS'block_loop.thisTrialN'
p2677
I0
sg39
F0.95000125443038996
sg34
g753
(S'\x07\xdf\x07\x0f\x12;)\x0428'
tRp2678
sa(dp2679
S'trial_loop.thisTrialN'
p2680
I128
sg895
g916
sS'block_loop.thisIndex'
p2681
g889
sg38
S'right'
p2682
sg59
g63
sS'trial_loop.thisN'
p2683
I128
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2684
g60
(g99
S'\x80\x00\x00\x00'
tRp2685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2686
I0
sg904
g924
sS'block_loop.thisRepN'
p2687
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2688
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2689
Nsg70
Vy
sS'block_loop.thisTrialN'
p2690
I0
sg39
F0.68334355884144315
sg34
g753
(S'\x07\xdf\x07\x0f\x12;/\x04\x0b('
tRp2691
sa(dp2692
S'trial_loop.thisTrialN'
p2693
I129
sg895
g1172
sS'block_loop.thisIndex'
p2694
g889
sg38
S'left'
p2695
sg59
g63
sS'trial_loop.thisN'
p2696
I129
sg33
g1183
sg64
g65
sS'trial_loop.thisIndex'
p2697
g60
(g99
S'\x81\x00\x00\x00'
tRp2698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2699
I0
sg904
g1180
sS'block_loop.thisRepN'
p2700
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2701
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2702
Nsg70
Vy
sS'block_loop.thisTrialN'
p2703
I0
sg39
F1.5335041259368154
sg34
g753
(S'\x07\xdf\x07\x0f\x12;4\x0e\xe0\x98'
tRp2704
sa(dp2705
S'trial_loop.thisTrialN'
p2706
I130
sg895
g1035
sS'block_loop.thisIndex'
p2707
g889
sg38
S'right'
p2708
sg59
g63
sS'trial_loop.thisN'
p2709
I130
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p2710
g60
(g99
S'\x82\x00\x00\x00'
tRp2711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2712
I0
sg904
g1043
sS'block_loop.thisRepN'
p2713
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2714
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p2715
Nsg70
Vy
sS'block_loop.thisTrialN'
p2716
I0
sg39
F0.66666191503645678
sg34
g753
(S'\x07\xdf\x07\x0f\x12;;\x08E0'
tRp2717
sa(dp2718
S'trial_loop.thisTrialN'
p2719
I131
sg895
g1112
sS'block_loop.thisIndex'
p2720
g889
sg38
S'right'
p2721
sg59
g63
sS'trial_loop.thisN'
p2722
I131
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2723
g60
(g99
S'\x83\x00\x00\x00'
tRp2724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2725
I0
sg904
g1120
sS'block_loop.thisRepN'
p2726
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2727
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2728
Nsg70
Vy
sS'block_loop.thisTrialN'
p2729
I0
sg39
F0.61667257769477146
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00\x05\x03\x99\xe0'
tRp2730
sa(dp2731
S'trial_loop.thisTrialN'
p2732
I132
sg895
S'26-walkers_smoky_bacon.png'
p2733
sS'block_loop.thisIndex'
p2734
g889
sg38
S'right'
p2735
sg59
g63
sS'trial_loop.thisN'
p2736
I132
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2737
g60
(g99
S'\x84\x00\x00\x00'
tRp2738
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2739
I0
sg904
S'44-crunch.png'
p2740
sS'block_loop.thisRepN'
p2741
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.1333599234585563
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00\n\r\xb7\xb8'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1129
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1137
sS'block_loop.thisRepN'
p2754
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.56660825962535455
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00\x11\x00\xeeH'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1067
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1075
sS'block_loop.thisRepN'
p2767
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.86666545024854713
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00\x16\n\x19\xf0'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g950
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g958
sS'block_loop.thisRepN'
p2780
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.0665546612362959
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00\x1c\x08\x83\xb0'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1524
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1531
sS'block_loop.thisRepN'
p2793
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F0.84990882571582915
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00"\n\nP'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g933
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g941
sS'block_loop.thisRepN'
p2806
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F1.4165153747562726
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00(\x089x'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1001
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1009
sS'block_loop.thisRepN'
p2819
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.74999600863156957
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00.\x0f:p'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1988
sS'block_loop.thisIndex'
p2826
g889
sg38
S'left'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1995
sS'block_loop.thisRepN'
p2832
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.83329332460562
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x004\x0b\xbf\xd0'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g2733
sS'block_loop.thisIndex'
p2839
g889
sg38
S'right'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g2740
sS'block_loop.thisRepN'
p2845
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.7500128294032038
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x00:\t\xb0x'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1262
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1270
sS'block_loop.thisRepN'
p2858
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.61703835820298991
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01\x04\x06tX'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1382
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1389
sS'block_loop.thisRepN'
p2871
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.64980693175493798
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01\n\x01\x11p'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1828
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1835
sS'block_loop.thisRepN'
p2884
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.93334469923320285
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01\x0f\x0b\xa8`'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1245
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1256
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1253
sS'block_loop.thisRepN'
p2897
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.63334652385856316
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01\x15\x0b\x088'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1569
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1576
sS'block_loop.thisRepN'
p2910
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.76662719012165326
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01\x1b\x05\xe3\xd0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1423
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1430
sS'block_loop.thisRepN'
p2923
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F1.0499052334835142
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01!\x02\xe2H'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1001
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1009
sS'block_loop.thisRepN'
p2936
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.6500381460882636
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x01'\x04*h"
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1204
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1211
sS'block_loop.thisRepN'
p2949
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F1.0166528489262419
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x01,\x0e\x86\xc0'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1172
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1180
sS'block_loop.thisRepN'
p2962
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.81668723172333557
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x013\x00\x13\x88'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1599
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1606
sS'block_loop.thisRepN'
p2975
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.59991709355199418
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x018\r\x0b\xd8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1204
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1211
sS'block_loop.thisRepN'
p2988
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.63334338778258825
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\x02\x07jp'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1097
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1104
sS'block_loop.thisRepN'
p3001
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.7166672178555018
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\x08\x02\x84\x88'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1337
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1345
sS'block_loop.thisRepN'
p3014
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.81705500791576924
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\r\r\xcf('
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g967
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g975
sS'block_loop.thisRepN'
p3027
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.69971444602015254
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\x13\x0b\x858'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1509
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1341
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1516
sS'block_loop.thisRepN'
p3040
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.71665581394336186
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\x19\x07\x91\x80'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1569
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1576
sS'block_loop.thisRepN'
p3053
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.65001733394819894
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02\x1f\x03\x9d\xc8'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1204
sS'block_loop.thisIndex'
p3060
g889
sg38
S'left'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1211
sS'block_loop.thisRepN'
p3066
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.61665518672816688
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02$\x0e4\xb8'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g2588
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g2595
sS'block_loop.thisRepN'
p3079
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.88328836390246579
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x02*\x08\xd1\xd0'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g950
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g958
sS'block_loop.thisRepN'
p3092
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.73322912057483336
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x020\x07}\xf8'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1129
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1133
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1137
sS'block_loop.thisRepN'
p3105
I0
sg907
g1133
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1140
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.74998488981509581
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x026\x04\x03X'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1189
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1196
sS'block_loop.thisRepN'
p3118
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.71653379207600665
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x00\x00\x88\xb8'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1785
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1793
sS'block_loop.thisRepN'
p3131
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.783232142612178
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x05\x0c\x11\xd8'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1509
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1516
sS'block_loop.thisRepN'
p3144
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.60000661426965962
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x0b\tN\xd0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1367
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1374
sS'block_loop.thisRepN'
p3157
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.88332343093497911
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x11\x03\xadh'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1552
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1560
sS'block_loop.thisRepN'
p3170
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.0666792489828367
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x17\x02Y\x90'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1627
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1046
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1634
sS'block_loop.thisRepN'
p3183
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.79993973032105714
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03\x1d\x03\xe00'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g2733
sS'block_loop.thisIndex'
p3190
g889
sg38
S'right'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g2740
sS'block_loop.thisRepN'
p3196
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.79997992911376059
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03#\x01W\xc0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1035
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1043
sS'block_loop.thisRepN'
p3209
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.65000792572027422
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03(\x0e\x11\x90'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1828
sS'block_loop.thisIndex'
p3216
g889
sg38
S'right'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1835
sS'block_loop.thisRepN'
p3222
I0
sg907
g1176
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.93334869060345227
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03.\t+\xa8'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1189
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1196
sS'block_loop.thisRepN'
p3235
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.64995518262185215
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x034\x08\xca\x00'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1262
sS'block_loop.thisIndex'
p3242
g889
sg38
S'left'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1266
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1270
sS'block_loop.thisRepN'
p3248
I0
sg907
g1266
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1273
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.58371726506811683
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x03:\x03\xe00'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1785
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1793
sS'block_loop.thisRepN'
p3261
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.88324189295781252
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04\x03\rFp'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1494
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1071
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1501
sS'block_loop.thisRepN'
p3274
I0
sg907
g1071
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1078
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.86653858171848697
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04\t\x0c-0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g2733
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g2740
sS'block_loop.thisRepN'
p3287
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.86666659064030682
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04\x0f\n\x9a\xd8'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1423
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1430
sS'block_loop.thisRepN'
p3300
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.80001585143872944
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04\x15\t\x08\x80'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g967
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g975
sS'block_loop.thisRepN'
p3313
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.9663082796978415
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04\x1b\x06\x80\x10'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g2733
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g2740
sS'block_loop.thisRepN'
p3326
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.7336507802556298
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04!\x06Y\x00'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g2588
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g2595
sS'block_loop.thisRepN'
p3339
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.98328842092269042
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x04'\x02\xde`"
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1477
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1485
sS'block_loop.thisRepN'
p3352
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.84994474804261699
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x04-\x034P'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g2588
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1789
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g2595
sS'block_loop.thisRepN'
p3365
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.64994662968820194
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x043\x01cx'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1337
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1345
sS'block_loop.thisRepN'
p3378
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.70002862382170861
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x048\x0b\xbf\xd0'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1477
sS'block_loop.thisIndex'
p3385
g889
sg38
S'right'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1485
sS'block_loop.thisRepN'
p3391
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.69999412698416563
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05\x02\x07\xc80'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1001
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1009
sS'block_loop.thisRepN'
p3404
I0
sg907
g1005
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1012
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.75039257970092876
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05\x08\x03\x99\xe0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g984
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g992
sS'block_loop.thisRepN'
p3417
I0
sg907
g988
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g995
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.5499856310689211
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05\x0e\x00Y\xd8'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1018
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1028
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1026
sS'block_loop.thisRepN'
p3430
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.2999930436126306
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05\x14\tC\x18'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1245
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1256
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1253
sS'block_loop.thisRepN'
p3443
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.6167096404115
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05\x1a\x0eW\xe0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g950
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g958
sS'block_loop.thisRepN'
p3456
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.74973885039435118
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05 \x08\xf4\xf8'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1960
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1562
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1967
sS'block_loop.thisRepN'
p3469
I0
sg907
g1562
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1556
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.4333224616038933
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05&\x05\xb8\xd8'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1245
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1249
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1253
sS'block_loop.thisRepN'
p3482
I0
sg907
g1249
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1256
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.56663505882170284
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x05,\x0c\xb5\xe8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g2588
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1796
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g2595
sS'block_loop.thisRepN'
p3495
I0
sg907
g1789
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1796
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.60001887347607408
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x052\x06\x9fP'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g933
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g941
sS'block_loop.thisRepN'
p3508
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F1.1837290110979666
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x058\x00\xfd\xe8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1477
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1485
sS'block_loop.thisRepN'
p3521
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.71664840139965236
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\x02\x04l\xd0'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1307
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1317
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1315
sS'block_loop.thisRepN'
p3534
I0
sg907
g1317
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1311
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.80001613653803361
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\x08\x00\xb3\xb0'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g896
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g905
sS'block_loop.thisRepN'
p3547
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.80032831865173648
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\r\rqh'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1382
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1389
sS'block_loop.thisRepN'
p3560
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.63307168955725501
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\x13\n\xaax'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1423
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1430
sS'block_loop.thisRepN'
p3573
I0
sg907
g1028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1022
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.84998893820375088
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\x19\x05\xc4\x90'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1584
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1591
sS'block_loop.thisRepN'
p3586
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.78332650999072939
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06\x1f\x03\xf3\xb8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1627
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1634
sS'block_loop.thisRepN'
p3599
I0
sg907
g1039
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1046
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.63332970308874792
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06%\x010\xb0'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1509
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1347
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1516
sS'block_loop.thisRepN'
p3612
I0
sg907
g1347
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1341
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.8166515944958519
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x06*\x0bN\x88'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F4.9672291456645326
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'42-mrkipling_lemon_slices.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'16-skips_prawn.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'16-skips_prawn.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
S'42-mrkipling_lemon_slices.png'
p3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3647
I1
sS'img_wrong'
p3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.2831124015265232
sg34
g753
(S'\x07\xdf\x07\x0f\x13\t;\x04\x97\xc8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'38-maltesers.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'38-maltesers.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'6-sour_patch_kids.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3648
S'6-sour_patch_kids.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.74971547237328195
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n\x05\tq\xf8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'4-corn.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'right'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'4-corn.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'10-bounty_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
S'10-bounty_redo.png'
p3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3682
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.63330632506585971
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n\x0b\x065\xd8'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'30-spaghetti_hoops.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'19-caramello_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'19-caramello_redo.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3648
S'30-spaghetti_hoops.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.55003352750463819
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n\x11\x01\r\x88'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'25-kitkat.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'31-hobnobs.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'31-hobnobs.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
S'25-kitkat.png'
p3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3716
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.8166838105480565
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n\x16\t\xfa\xb0'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
g3654
sS'block_loop.thisIndex'
p3722
g3627
sg38
S'left'
p3723
sg59
g63
sS'trial_loop.thisN'
p3724
I5
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3728
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3729
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vy
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.51681022292359557
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n\x1c\x07\xb0\xc0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'2-steamed_puddings.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'left'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'2-steamed_puddings.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'20-fruit_pastilles.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3745
I1
sg3648
S'20-fruit_pastilles.png'
p3746
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vy
sS'block_loop.thisTrialN'
p3748
I0
sg39
F0.79999503929684579
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n"\x00\xe2\x90'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
g3634
sS'block_loop.thisIndex'
p3752
g3627
sg38
S'left'
p3753
sg59
g63
sS'trial_loop.thisN'
p3754
I7
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p3755
g60
(g99
S'\x07\x00\x00\x00'
tRp3756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3757
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3758
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3759
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p3760
Nsg70
Vy
sS'block_loop.thisTrialN'
p3761
I0
sg39
F0.61653088407729228
sg34
g753
(S"\x07\xdf\x07\x0f\x13\n'\r\x9c`"
tRp3762
sa(dp3763
S'trial_loop.thisTrialN'
p3764
I8
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3765
sS'block_loop.thisIndex'
p3766
g3627
sg38
S'right'
p3767
sg59
g63
sS'trial_loop.thisN'
p3768
I8
sg33
S'36-fig_rolls.png'
p3769
sg64
g65
sS'trial_loop.thisIndex'
p3770
g60
(g99
S'\x08\x00\x00\x00'
tRp3771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3772
I0
sg3642
S'36-fig_rolls.png'
p3773
sS'block_loop.thisRepN'
p3774
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3775
I1
sg3648
S'34-hula_hoops_bbq_beef_redo.png'
p3776
sg55
g11
sS'block_loop.thisTrial'
p3777
Nsg70
Vy
sS'block_loop.thisTrialN'
p3778
I0
sg39
F0.9498444506280066
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n-\x089x'
tRp3779
sa(dp3780
S'trial_loop.thisTrialN'
p3781
I9
sg3633
S'33-ambrosia_rice.png'
p3782
sS'block_loop.thisIndex'
p3783
g3627
sg38
S'right'
p3784
sg59
g63
sS'trial_loop.thisN'
p3785
I9
sg33
S'33-ambrosia_rice.png'
p3786
sg64
g65
sS'trial_loop.thisIndex'
p3787
g60
(g99
S'\t\x00\x00\x00'
tRp3788
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3789
I0
sg3642
S'23-crunchie_redo.png'
p3790
sS'block_loop.thisRepN'
p3791
I1
sg3645
S'23-crunchie_redo.png'
p3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3793
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vy
sS'block_loop.thisTrialN'
p3795
I0
sg39
F0.66665678327626665
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n3\x07\xd7\xd0'
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'18-mms.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'left'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
S'18-mms.png'
p3803
sg64
g65
sS'trial_loop.thisIndex'
p3804
g60
(g99
S'\n\x00\x00\x00'
tRp3805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3806
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3809
I1
sg3648
S'43-mrporky_pork_crackles_redo.png'
p3810
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vy
sS'block_loop.thisTrialN'
p3812
I0
sg39
F0.56665301998327777
sg34
g753
(S'\x07\xdf\x07\x0f\x13\n9\x03k\x00'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'left'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3820
sg64
g65
sS'trial_loop.thisIndex'
p3821
g60
(g99
S'\x0b\x00\x00\x00'
tRp3822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3823
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3824
sS'block_loop.thisRepN'
p3825
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3826
I1
sg3648
S'8-liquorice_catherine_wheels.png'
p3827
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vy
sS'block_loop.thisTrialN'
p3829
I0
sg39
F0.60002628601978358
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x02\x0c\x92\xc0'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'44-crunch.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'left'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
S'26-walkers_smoky_bacon.png'
p3837
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3841
sS'block_loop.thisRepN'
p3842
I1
sg3645
S'44-crunch.png'
p3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3844
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vy
sS'block_loop.thisTrialN'
p3846
I0
sg39
F0.71664326963764324
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x08\x06\xf5@'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'1-treacle_cookies.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'left'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'1-treacle_cookies.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'21-nakd_banana_crunch.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3648
S'21-nakd_banana_crunch.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vy
sS'block_loop.thisTrialN'
p3863
I0
sg39
F0.63326184980542166
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x0e\x03\x01\x88'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
S'27-hartleys_raspberries_jelly.png'
p3867
sS'block_loop.thisIndex'
p3868
g3627
sg38
S'right'
p3869
sg59
g63
sS'trial_loop.thisN'
p3870
I14
sg33
S'27-hartleys_raspberries_jelly.png'
p3871
sg64
g65
sS'trial_loop.thisIndex'
p3872
g60
(g99
S'\x0e\x00\x00\x00'
tRp3873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3874
I0
sg3642
S'51-mars.png'
p3875
sS'block_loop.thisRepN'
p3876
I1
sg3645
S'51-mars.png'
p3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3878
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p3879
Nsg70
Vy
sS'block_loop.thisTrialN'
p3880
I0
sg39
F0.6167085000215593
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x13\rY\xf8'
tRp3881
sa(dp3882
S'trial_loop.thisTrialN'
p3883
I15
sg3633
S'26-walkers_smoky_bacon.png'
p3884
sS'block_loop.thisIndex'
p3885
g3627
sg38
S'left'
p3886
sg59
g63
sS'trial_loop.thisN'
p3887
I15
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p3888
g60
(g99
S'\x0f\x00\x00\x00'
tRp3889
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3890
I0
sg3642
S'44-crunch.png'
p3891
sS'block_loop.thisRepN'
p3892
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3893
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p3894
Nsg70
Vy
sS'block_loop.thisTrialN'
p3895
I0
sg39
F0.94997759131183557
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x19\x07\xf7\x10'
tRp3896
sa(dp3897
S'trial_loop.thisTrialN'
p3898
I16
sg3633
S'49-yorkie.png'
p3899
sS'block_loop.thisIndex'
p3900
g3627
sg38
S'left'
p3901
sg59
g63
sS'trial_loop.thisN'
p3902
I16
sg33
S'35-raisins.png'
p3903
sg64
g65
sS'trial_loop.thisIndex'
p3904
g60
(g99
S'\x10\x00\x00\x00'
tRp3905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3906
I0
sg3642
S'35-raisins.png'
p3907
sS'block_loop.thisRepN'
p3908
I1
sg3645
S'49-yorkie.png'
p3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3910
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p3911
Nsg70
Vy
sS'block_loop.thisTrialN'
p3912
I0
sg39
F0.68327428007069102
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b\x1f\x07\x95h'
tRp3913
sa(dp3914
S'trial_loop.thisTrialN'
p3915
I17
sg3633
S'45-chewy_nougat_redo.png'
p3916
sS'block_loop.thisIndex'
p3917
g3627
sg38
S'right'
p3918
sg59
g63
sS'trial_loop.thisN'
p3919
I17
sg33
S'45-chewy_nougat_redo.png'
p3920
sg64
g65
sS'trial_loop.thisIndex'
p3921
g60
(g99
S'\x11\x00\x00\x00'
tRp3922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3923
I0
sg3642
S'41-peanuts_redo.png'
p3924
sS'block_loop.thisRepN'
p3925
I1
sg3645
S'41-peanuts_redo.png'
p3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3927
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p3928
Nsg70
Vy
sS'block_loop.thisTrialN'
p3929
I0
sg39
F0.86646787745848997
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b%\x03c0'
tRp3930
sa(dp3931
S'trial_loop.thisTrialN'
p3932
I18
sg3633
S'40-sardines.png'
p3933
sS'block_loop.thisIndex'
p3934
g3627
sg38
S'right'
p3935
sg59
g63
sS'trial_loop.thisN'
p3936
I18
sg33
S'5-pineapple.png'
p3937
sg64
g65
sS'trial_loop.thisIndex'
p3938
g60
(g99
S'\x12\x00\x00\x00'
tRp3939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3940
I0
sg3642
S'5-pineapple.png'
p3941
sS'block_loop.thisRepN'
p3942
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3943
I1
sg3648
S'40-sardines.png'
p3944
sg55
g11
sS'block_loop.thisTrial'
p3945
Nsg70
Vy
sS'block_loop.thisTrialN'
p3946
I0
sg39
F0.84994731392180256
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b+\x01\xd0\xd8'
tRp3947
sa(dp3948
S'trial_loop.thisTrialN'
p3949
I19
sg3633
g3705
sS'block_loop.thisIndex'
p3950
g3627
sg38
S'right'
p3951
sg59
g63
sS'trial_loop.thisN'
p3952
I19
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p3953
g60
(g99
S'\x13\x00\x00\x00'
tRp3954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3955
I0
sg3642
g3713
sS'block_loop.thisRepN'
p3956
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3957
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p3958
Nsg70
Vy
sS'block_loop.thisTrialN'
p3959
I0
sg39
F0.78334817742688756
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b1\x00\x00\x00'
tRp3960
sa(dp3961
S'trial_loop.thisTrialN'
p3962
I20
sg3633
g3816
sS'block_loop.thisIndex'
p3963
g3627
sg38
S'left'
p3964
sg59
g63
sS'trial_loop.thisN'
p3965
I20
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p3966
g60
(g99
S'\x14\x00\x00\x00'
tRp3967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3968
I0
sg3642
g3824
sS'block_loop.thisRepN'
p3969
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3970
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p3971
Nsg70
Vy
sS'block_loop.thisTrialN'
p3972
I0
sg39
F0.71667520059418166
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0b6\x0c\x7f8'
tRp3973
sa(dp3974
S'trial_loop.thisTrialN'
p3975
I21
sg3633
S'31-hobnobs.png'
p3976
sS'block_loop.thisIndex'
p3977
g3627
sg38
S'left'
p3978
sg59
g63
sS'trial_loop.thisN'
p3979
I21
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p3980
g60
(g99
S'\x15\x00\x00\x00'
tRp3981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3982
I0
sg3642
S'25-kitkat.png'
p3983
sS'block_loop.thisRepN'
p3984
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3985
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p3986
Nsg70
Vy
sS'block_loop.thisTrialN'
p3987
I0
sg39
F0.65001619355643925
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x00\x08\xca\x00'
tRp3988
sa(dp3989
S'trial_loop.thisTrialN'
p3990
I22
sg3633
S'41-peanuts_redo.png'
p3991
sS'block_loop.thisIndex'
p3992
g3627
sg38
S'left'
p3993
sg59
g63
sS'trial_loop.thisN'
p3994
I22
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p3995
g60
(g99
S'\x16\x00\x00\x00'
tRp3996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3997
I0
sg3642
S'45-chewy_nougat_redo.png'
p3998
sS'block_loop.thisRepN'
p3999
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4000
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p4001
Nsg70
Vy
sS'block_loop.thisTrialN'
p4002
I0
sg39
F0.94999013561391621
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x06\x03\xe00'
tRp4003
sa(dp4004
S'trial_loop.thisTrialN'
p4005
I23
sg3633
S'8-liquorice_catherine_wheels.png'
p4006
sS'block_loop.thisIndex'
p4007
g3627
sg38
S'right'
p4008
sg59
g63
sS'trial_loop.thisN'
p4009
I23
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4010
g60
(g99
S'\x17\x00\x00\x00'
tRp4011
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4012
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4013
sS'block_loop.thisRepN'
p4014
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4015
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p4016
Nsg70
Vy
sS'block_loop.thisTrialN'
p4017
I0
sg39
F0.81669435916774091
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x0c\x03~\x88'
tRp4018
sa(dp4019
S'trial_loop.thisTrialN'
p4020
I24
sg3633
g3867
sS'block_loop.thisIndex'
p4021
g3627
sg38
S'right'
p4022
sg59
g63
sS'trial_loop.thisN'
p4023
I24
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4024
g60
(g99
S'\x18\x00\x00\x00'
tRp4025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4026
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4027
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4028
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p4029
Nsg70
Vy
sS'block_loop.thisTrialN'
p4030
I0
sg39
F0.70001522422353446
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x12\x014\x98'
tRp4031
sa(dp4032
S'trial_loop.thisTrialN'
p4033
I25
sg3633
g3933
sS'block_loop.thisIndex'
p4034
g3627
sg38
S'right'
p4035
sg59
g63
sS'trial_loop.thisN'
p4036
I25
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4037
g60
(g99
S'\x19\x00\x00\x00'
tRp4038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4039
I0
sg3642
g3941
sS'block_loop.thisRepN'
p4040
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4041
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p4042
Nsg70
Vy
sS'block_loop.thisTrialN'
p4043
I0
sg39
F0.80001756202727847
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x17\x0c\x83 '
tRp4044
sa(dp4045
S'trial_loop.thisTrialN'
p4046
I26
sg3633
S'35-raisins.png'
p4047
sS'block_loop.thisIndex'
p4048
g3627
sg38
S'right'
p4049
sg59
g63
sS'trial_loop.thisN'
p4050
I26
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4051
g60
(g99
S'\x1a\x00\x00\x00'
tRp4052
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4053
I0
sg3642
S'49-yorkie.png'
p4054
sS'block_loop.thisRepN'
p4055
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4056
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4057
Nsg70
Vy
sS'block_loop.thisTrialN'
p4058
I0
sg39
F0.5833018775410892
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c\x1d\t\xfa\xb0'
tRp4059
sa(dp4060
S'trial_loop.thisTrialN'
p4061
I27
sg3633
g3782
sS'block_loop.thisIndex'
p4062
g3627
sg38
S'right'
p4063
sg59
g63
sS'trial_loop.thisN'
p4064
I27
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4065
g60
(g99
S'\x1b\x00\x00\x00'
tRp4066
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4067
I0
sg3642
g3790
sS'block_loop.thisRepN'
p4068
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4069
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p4070
Nsg70
Vy
sS'block_loop.thisTrialN'
p4071
I0
sg39
F0.58334236143127782
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c#\x04\x1e\xb0'
tRp4072
sa(dp4073
S'trial_loop.thisTrialN'
p4074
I28
sg3633
g3850
sS'block_loop.thisIndex'
p4075
g3627
sg38
S'left'
p4076
sg59
g63
sS'trial_loop.thisN'
p4077
I28
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p4078
g60
(g99
S'\x1c\x00\x00\x00'
tRp4079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4080
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4081
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4082
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p4083
Nsg70
Vy
sS'block_loop.thisTrialN'
p4084
I0
sg39
F0.66665820876369253
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c(\r\x84\xf0'
tRp4085
sa(dp4086
S'trial_loop.thisTrialN'
p4087
I29
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4088
sS'block_loop.thisIndex'
p4089
g3627
sg38
S'right'
p4090
sg59
g63
sS'trial_loop.thisN'
p4091
I29
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4092
g60
(g99
S'\x1d\x00\x00\x00'
tRp4093
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4094
I0
sg3642
S'18-mms.png'
p4095
sS'block_loop.thisRepN'
p4096
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4097
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vy
sS'block_loop.thisTrialN'
p4099
I0
sg39
F0.63368265419194358
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c.\x08\xd9\xa0'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
S'48-twix.png'
p4103
sS'block_loop.thisIndex'
p4104
g3627
sg38
S'left'
p4105
sg59
g63
sS'trial_loop.thisN'
p4106
I30
sg33
S'48-twix.png'
p4107
sg64
g65
sS'trial_loop.thisIndex'
p4108
g60
(g99
S'\x1e\x00\x00\x00'
tRp4109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4110
I0
sg3642
S'50-polo.png'
p4111
sS'block_loop.thisRepN'
p4112
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4113
I1
sg3648
S'50-polo.png'
p4114
sg55
g11
sS'block_loop.thisTrial'
p4115
Nsg70
Vy
sS'block_loop.thisTrialN'
p4116
I0
sg39
F0.59999578055249003
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c4\x03\xef\xd0'
tRp4117
sa(dp4118
S'trial_loop.thisTrialN'
p4119
I31
sg3633
g3899
sS'block_loop.thisIndex'
p4120
g3627
sg38
S'left'
p4121
sg59
g63
sS'trial_loop.thisN'
p4122
I31
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p4123
g60
(g99
S'\x1f\x00\x00\x00'
tRp4124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4125
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4126
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4127
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4128
Nsg70
Vy
sS'block_loop.thisTrialN'
p4129
I0
sg39
F0.63344317202063394
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0c9\r\x94\x90'
tRp4130
sa(dp4131
S'trial_loop.thisTrialN'
p4132
I32
sg3633
g3688
sS'block_loop.thisIndex'
p4133
g3627
sg38
S'right'
p4134
sg59
g63
sS'trial_loop.thisN'
p4135
I32
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4136
g60
(g99
S' \x00\x00\x00'
tRp4137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4138
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4139
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4140
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p4141
Nsg70
Vy
sS'block_loop.thisTrialN'
p4142
I0
sg39
F0.56671203523364966
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r\x03\x08p('
tRp4143
sa(dp4144
S'trial_loop.thisTrialN'
p4145
I33
sg3633
g3899
sS'block_loop.thisIndex'
p4146
g3627
sg38
S'left'
p4147
sg59
g63
sS'trial_loop.thisN'
p4148
I33
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p4149
g60
(g99
S'!\x00\x00\x00'
tRp4150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4151
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4152
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4153
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4154
Nsg70
Vy
sS'block_loop.thisTrialN'
p4155
I0
sg39
F0.5333638578067621
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r\t\x02U\xa8'
tRp4156
sa(dp4157
S'trial_loop.thisTrialN'
p4158
I34
sg3633
S'36-fig_rolls.png'
p4159
sS'block_loop.thisIndex'
p4160
g3627
sg38
S'left'
p4161
sg59
g63
sS'trial_loop.thisN'
p4162
I34
sg33
g3776
sg64
g65
sS'trial_loop.thisIndex'
p4163
g60
(g99
S'"\x00\x00\x00'
tRp4164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4165
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4166
sS'block_loop.thisRepN'
p4167
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4168
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p4169
Nsg70
Vy
sS'block_loop.thisTrialN'
p4170
I0
sg39
F0.63330461447912967
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r\x0e\x0b\x088'
tRp4171
sa(dp4172
S'trial_loop.thisTrialN'
p4173
I35
sg3633
S'13-mccoys_steak_crisps.png'
p4174
sS'block_loop.thisIndex'
p4175
g3627
sg38
S'right'
p4176
sg59
g63
sS'trial_loop.thisN'
p4177
I35
sg33
S'13-mccoys_steak_crisps.png'
p4178
sg64
g65
sS'trial_loop.thisIndex'
p4179
g60
(g99
S'#\x00\x00\x00'
tRp4180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4181
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4182
sS'block_loop.thisRepN'
p4183
I1
sg3645
S'3-ellas_strawberries_apples.png'
p4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4185
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p4186
Nsg70
Vy
sS'block_loop.thisTrialN'
p4187
I0
sg39
F1.1003481614625343
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r\x14\x05\xdf\xe8'
tRp4188
sa(dp4189
S'trial_loop.thisTrialN'
p4190
I36
sg3633
S'29-beans.png'
p4191
sS'block_loop.thisIndex'
p4192
g3627
sg38
S'right'
p4193
sg59
g63
sS'trial_loop.thisN'
p4194
I36
sg33
S'46-pistachios.png'
p4195
sg64
g65
sS'trial_loop.thisIndex'
p4196
g60
(g99
S'$\x00\x00\x00'
tRp4197
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4198
I0
sg3642
S'46-pistachios.png'
p4199
sS'block_loop.thisRepN'
p4200
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4201
I1
sg3648
S'29-beans.png'
p4202
sg55
g11
sS'block_loop.thisTrial'
p4203
Nsg70
Vy
sS'block_loop.thisTrialN'
p4204
I0
sg39
F1.3499812405643752
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r\x1a\x07\xdf\xa0'
tRp4205
sa(dp4206
S'trial_loop.thisTrialN'
p4207
I37
sg3633
S'16-skips_prawn.png'
p4208
sS'block_loop.thisIndex'
p4209
g3627
sg38
S'right'
p4210
sg59
g63
sS'trial_loop.thisN'
p4211
I37
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4212
g60
(g99
S'%\x00\x00\x00'
tRp4213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4214
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p4215
sS'block_loop.thisRepN'
p4216
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4217
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4218
Nsg70
Vy
sS'block_loop.thisTrialN'
p4219
I0
sg39
F0.69984473572549177
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r \r\xaf\xe8'
tRp4220
sa(dp4221
S'trial_loop.thisTrialN'
p4222
I38
sg3633
g3867
sS'block_loop.thisIndex'
p4223
g3627
sg38
S'right'
p4224
sg59
g63
sS'trial_loop.thisN'
p4225
I38
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p4226
g60
(g99
S'&\x00\x00\x00'
tRp4227
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4228
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4229
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4230
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p4231
Nsg70
Vy
sS'block_loop.thisTrialN'
p4232
I0
sg39
F0.55001784712476365
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r&\t\xb8H'
tRp4233
sa(dp4234
S'trial_loop.thisTrialN'
p4235
I39
sg3633
g3916
sS'block_loop.thisIndex'
p4236
g3627
sg38
S'right'
p4237
sg59
g63
sS'trial_loop.thisN'
p4238
I39
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p4239
g60
(g99
S"'\x00\x00\x00"
tRp4240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4241
I0
sg3642
g3924
sS'block_loop.thisRepN'
p4242
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4243
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p4244
Nsg70
Vy
sS'block_loop.thisTrialN'
p4245
I0
sg39
F0.63329520625120495
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r,\x03c0'
tRp4246
sa(dp4247
S'trial_loop.thisTrialN'
p4248
I40
sg3633
g4047
sS'block_loop.thisIndex'
p4249
g3627
sg38
S'right'
p4250
sg59
g63
sS'trial_loop.thisN'
p4251
I40
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p4252
g60
(g99
S'(\x00\x00\x00'
tRp4253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4254
I0
sg3642
g4054
sS'block_loop.thisRepN'
p4255
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4256
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vy
sS'block_loop.thisTrialN'
p4258
I0
sg39
F0.71662217239827442
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r1\r\x81\x08'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3850
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'left'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vy
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.60035785478612524
sg34
g753
(S'\x07\xdf\x07\x0f\x13\r7\t\xc7\xe8'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
g4103
sS'block_loop.thisIndex'
p4275
g3627
sg38
S'left'
p4276
sg59
g63
sS'trial_loop.thisN'
p4277
I42
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4278
g60
(g99
S'*\x00\x00\x00'
tRp4279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4280
I0
sg3642
g4111
sS'block_loop.thisRepN'
p4281
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4282
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg70
Vy
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.54989839113477501
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x01\x04*h'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I43
sg3633
g4088
sS'block_loop.thisIndex'
p4288
g3627
sg38
S'right'
p4289
sg59
g63
sS'trial_loop.thisN'
p4290
I43
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4291
g60
(g99
S'+\x00\x00\x00'
tRp4292
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4293
I0
sg3642
g4095
sS'block_loop.thisRepN'
p4294
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4295
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p4296
Nsg70
Vy
sS'block_loop.thisTrialN'
p4297
I0
sg39
F0.68336893254854658
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x06\r\x17\x90'
tRp4298
sa(dp4299
S'trial_loop.thisTrialN'
p4300
I44
sg3633
S'5-pineapple.png'
p4301
sS'block_loop.thisIndex'
p4302
g3627
sg38
S'left'
p4303
sg59
g63
sS'trial_loop.thisN'
p4304
I44
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4305
g60
(g99
S',\x00\x00\x00'
tRp4306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4307
I0
sg3642
S'40-sardines.png'
p4308
sS'block_loop.thisRepN'
p4309
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4310
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p4311
Nsg70
Vy
sS'block_loop.thisTrialN'
p4312
I0
sg39
F0.80000615811331954
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x0c\x08\xa6\xd8'
tRp4313
sa(dp4314
S'trial_loop.thisTrialN'
p4315
I45
sg3633
S'3-ellas_strawberries_apples.png'
p4316
sS'block_loop.thisIndex'
p4317
g3627
sg38
S'left'
p4318
sg59
g63
sS'trial_loop.thisN'
p4319
I45
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p4320
g60
(g99
S'-\x00\x00\x00'
tRp4321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4322
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4323
sS'block_loop.thisRepN'
p4324
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4325
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p4326
Nsg70
Vy
sS'block_loop.thisTrialN'
p4327
I0
sg39
F0.76666653362190118
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x12\x06"P'
tRp4328
sa(dp4329
S'trial_loop.thisTrialN'
p4330
I46
sg3633
S'23-crunchie_redo.png'
p4331
sS'block_loop.thisIndex'
p4332
g3627
sg38
S'left'
p4333
sg59
g63
sS'trial_loop.thisN'
p4334
I46
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4335
g60
(g99
S'.\x00\x00\x00'
tRp4336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4337
I0
sg3642
S'33-ambrosia_rice.png'
p4338
sS'block_loop.thisRepN'
p4339
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4340
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p4341
Nsg70
Vy
sS'block_loop.thisTrialN'
p4342
I0
sg39
F0.86674071607376391
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x18\x03 \xc8'
tRp4343
sa(dp4344
S'trial_loop.thisTrialN'
p4345
I47
sg3633
g4208
sS'block_loop.thisIndex'
p4346
g3627
sg38
S'right'
p4347
sg59
g63
sS'trial_loop.thisN'
p4348
I47
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4349
g60
(g99
S'/\x00\x00\x00'
tRp4350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4351
I0
sg3642
g4215
sS'block_loop.thisRepN'
p4352
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4353
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vy
sS'block_loop.thisTrialN'
p4355
I0
sg39
F0.79990893975627841
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e\x1e\x01\x8ep'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
g3899
sS'block_loop.thisIndex'
p4359
g3627
sg38
S'left'
p4360
sg59
g63
sS'trial_loop.thisN'
p4361
I48
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p4362
g60
(g99
S'0\x00\x00\x00'
tRp4363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4364
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4365
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vy
sS'block_loop.thisTrialN'
p4368
I0
sg39
F0.71660307084675878
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e#\x0eH@'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
S'50-polo.png'
p4372
sS'block_loop.thisIndex'
p4373
g3627
sg38
S'right'
p4374
sg59
g63
sS'trial_loop.thisN'
p4375
I49
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4376
g60
(g99
S'1\x00\x00\x00'
tRp4377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4378
I0
sg3642
S'48-twix.png'
p4379
sS'block_loop.thisRepN'
p4380
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4381
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p4382
Nsg70
Vy
sS'block_loop.thisTrialN'
p4383
I0
sg39
F0.8166333482349728
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e)\n\x93\x08'
tRp4384
sa(dp4385
S'trial_loop.thisTrialN'
p4386
I50
sg3633
g3735
sS'block_loop.thisIndex'
p4387
g3627
sg38
S'left'
p4388
sg59
g63
sS'trial_loop.thisN'
p4389
I50
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4390
g60
(g99
S'2\x00\x00\x00'
tRp4391
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4392
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4393
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4394
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg70
Vy
sS'block_loop.thisTrialN'
p4396
I0
sg39
F0.66654046336407191
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e/\x08I\x18'
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I51
sg3633
S'51-mars.png'
p4400
sS'block_loop.thisIndex'
p4401
g3627
sg38
S'left'
p4402
sg59
g63
sS'trial_loop.thisN'
p4403
I51
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p4404
g60
(g99
S'3\x00\x00\x00'
tRp4405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4406
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4407
sS'block_loop.thisRepN'
p4408
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4409
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p4410
Nsg70
Vy
sS'block_loop.thisTrialN'
p4411
I0
sg39
F0.61665262084716232
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e5\x03\x9d\xc8'
tRp4412
sa(dp4413
S'trial_loop.thisTrialN'
p4414
I52
sg3633
g3765
sS'block_loop.thisIndex'
p4415
g3627
sg38
S'right'
p4416
sg59
g63
sS'trial_loop.thisN'
p4417
I52
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4418
g60
(g99
S'4\x00\x00\x00'
tRp4419
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4420
I0
sg3642
g3773
sS'block_loop.thisRepN'
p4421
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4422
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p4423
Nsg70
Vy
sS'block_loop.thisTrialN'
p4424
I0
sg39
F0.73328271896571096
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0e:\r} '
tRp4425
sa(dp4426
S'trial_loop.thisTrialN'
p4427
I53
sg3633
g3688
sS'block_loop.thisIndex'
p4428
g3627
sg38
S'right'
p4429
sg59
g63
sS'trial_loop.thisN'
p4430
I53
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4431
g60
(g99
S'5\x00\x00\x00'
tRp4432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4433
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4434
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4435
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p4436
Nsg70
Vy
sS'block_loop.thisTrialN'
p4437
I0
sg39
F0.61688953713746741
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f\x04\n\x02\x80'
tRp4438
sa(dp4439
S'trial_loop.thisTrialN'
p4440
I54
sg3633
g4372
sS'block_loop.thisIndex'
p4441
g3627
sg38
S'right'
p4442
sg59
g63
sS'trial_loop.thisN'
p4443
I54
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p4444
g60
(g99
S'6\x00\x00\x00'
tRp4445
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4446
I0
sg3642
g4379
sS'block_loop.thisRepN'
p4447
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4448
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg70
Vy
sS'block_loop.thisTrialN'
p4450
I0
sg39
F0.60006762520424672
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f\n\x04\x9f\x98'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I55
sg3633
g4301
sS'block_loop.thisIndex'
p4454
g3627
sg38
S'left'
p4455
sg59
g63
sS'trial_loop.thisN'
p4456
I55
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4457
g60
(g99
S'7\x00\x00\x00'
tRp4458
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4459
I0
sg3642
g4308
sS'block_loop.thisRepN'
p4460
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vy
sS'block_loop.thisTrialN'
p4463
I0
sg39
F0.81666043252698728
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f\x0f\x0eDX'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
S'6-sour_patch_kids.png'
p4467
sS'block_loop.thisIndex'
p4468
g3627
sg38
S'right'
p4469
sg59
g63
sS'trial_loop.thisN'
p4470
I56
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4471
g60
(g99
S'8\x00\x00\x00'
tRp4472
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4473
I0
sg3642
S'38-maltesers.png'
p4474
sS'block_loop.thisRepN'
p4475
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4476
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4477
Nsg70
Vy
sS'block_loop.thisTrialN'
p4478
I0
sg39
F0.56640441468152858
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f\x15\x0b\xfah'
tRp4479
sa(dp4480
S'trial_loop.thisTrialN'
p4481
I57
sg3633
S'19-caramello_redo.png'
p4482
sS'block_loop.thisIndex'
p4483
g3627
sg38
S'left'
p4484
sg59
g63
sS'trial_loop.thisN'
p4485
I57
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4486
g60
(g99
S'9\x00\x00\x00'
tRp4487
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4488
I0
sg3642
S'30-spaghetti_hoops.png'
p4489
sS'block_loop.thisRepN'
p4490
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4491
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p4492
Nsg70
Vy
sS'block_loop.thisTrialN'
p4493
I0
sg39
F0.61666231417439121
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f\x1b\x05\xdf\xe8'
tRp4494
sa(dp4495
S'trial_loop.thisTrialN'
p4496
I58
sg3633
g3833
sS'block_loop.thisIndex'
p4497
g3627
sg38
S'left'
p4498
sg59
g63
sS'trial_loop.thisN'
p4499
I58
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4500
g60
(g99
S':\x00\x00\x00'
tRp4501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4502
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4503
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4504
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p4505
Nsg70
Vy
sS'block_loop.thisTrialN'
p4506
I0
sg39
F0.96658853085682495
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f!\x00}\x00'
tRp4507
sa(dp4508
S'trial_loop.thisTrialN'
p4509
I59
sg3633
g4208
sS'block_loop.thisIndex'
p4510
g3627
sg38
S'right'
p4511
sg59
g63
sS'trial_loop.thisN'
p4512
I59
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p4513
g60
(g99
S';\x00\x00\x00'
tRp4514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4515
I0
sg3642
g4215
sS'block_loop.thisRepN'
p4516
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4517
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4518
Nsg70
Vy
sS'block_loop.thisTrialN'
p4519
I0
sg39
F0.68322410285327351
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x0f'\x00\x94p"
tRp4520
sa(dp4521
S'trial_loop.thisTrialN'
p4522
I60
sg3633
g3765
sS'block_loop.thisIndex'
p4523
g3627
sg38
S'right'
p4524
sg59
g63
sS'trial_loop.thisN'
p4525
I60
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4526
g60
(g99
S'<\x00\x00\x00'
tRp4527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4528
I0
sg3642
g3773
sS'block_loop.thisRepN'
p4529
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4530
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p4531
Nsg70
Vy
sS'block_loop.thisTrialN'
p4532
I0
sg39
F0.6666177248735039
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f,\x0bi\xe0'
tRp4533
sa(dp4534
S'trial_loop.thisTrialN'
p4535
I61
sg3633
S'21-nakd_banana_crunch.png'
p4536
sS'block_loop.thisIndex'
p4537
g3627
sg38
S'right'
p4538
sg59
g63
sS'trial_loop.thisN'
p4539
I61
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4540
g60
(g99
S'=\x00\x00\x00'
tRp4541
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4542
I0
sg3642
S'1-treacle_cookies.png'
p4543
sS'block_loop.thisRepN'
p4544
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4545
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg70
Vy
sS'block_loop.thisTrialN'
p4547
I0
sg39
F0.68326430164779595
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f2\x06\xfd\x10'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I62
sg3633
S'22-daim.png'
p4551
sS'block_loop.thisIndex'
p4552
g3627
sg38
S'left'
p4553
sg59
g63
sS'trial_loop.thisN'
p4554
I62
sg33
S'7-olives.png'
p4555
sg64
g65
sS'trial_loop.thisIndex'
p4556
g60
(g99
S'>\x00\x00\x00'
tRp4557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4558
I0
sg3642
S'7-olives.png'
p4559
sS'block_loop.thisRepN'
p4560
I1
sg3645
S'22-daim.png'
p4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4562
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p4563
Nsg70
Vy
sS'block_loop.thisTrialN'
p4564
I0
sg39
F0.81666385370226635
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x0f8\x02\x8cX'
tRp4565
sa(dp4566
S'trial_loop.thisTrialN'
p4567
I63
sg3633
g4159
sS'block_loop.thisIndex'
p4568
g3627
sg38
S'left'
p4569
sg59
g63
sS'trial_loop.thisN'
p4570
I63
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4571
g60
(g99
S'?\x00\x00\x00'
tRp4572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4573
I0
sg3642
g4166
sS'block_loop.thisRepN'
p4574
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4575
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p4576
Nsg70
Vy
sS'block_loop.thisTrialN'
p4577
I0
sg39
F0.71669886371455505
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\x02\x00Bh'
tRp4578
sa(dp4579
S'trial_loop.thisTrialN'
p4580
I64
sg3633
g4301
sS'block_loop.thisIndex'
p4581
g3627
sg38
S'left'
p4582
sg59
g63
sS'trial_loop.thisN'
p4583
I64
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4584
g60
(g99
S'@\x00\x00\x00'
tRp4585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4586
I0
sg3642
g4308
sS'block_loop.thisRepN'
p4587
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4588
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p4589
Nsg70
Vy
sS'block_loop.thisTrialN'
p4590
I0
sg39
F0.91660888684054953
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\x07\x0b\xcfp'
tRp4591
sa(dp4592
S'trial_loop.thisTrialN'
p4593
I65
sg3633
g4006
sS'block_loop.thisIndex'
p4594
g3627
sg38
S'right'
p4595
sg59
g63
sS'trial_loop.thisN'
p4596
I65
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4597
g60
(g99
S'A\x00\x00\x00'
tRp4598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4599
I0
sg3642
g4013
sS'block_loop.thisRepN'
p4600
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4601
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p4602
Nsg70
Vy
sS'block_loop.thisTrialN'
p4603
I0
sg39
F0.8503658375248051
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\r\n\xf0\xc8'
tRp4604
sa(dp4605
S'trial_loop.thisTrialN'
p4606
I66
sg3633
g4536
sS'block_loop.thisIndex'
p4607
g3627
sg38
S'right'
p4608
sg59
g63
sS'trial_loop.thisN'
p4609
I66
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p4610
g60
(g99
S'B\x00\x00\x00'
tRp4611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4612
I0
sg3642
g4543
sS'block_loop.thisRepN'
p4613
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4614
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p4615
Nsg70
Vy
sS'block_loop.thisTrialN'
p4616
I0
sg39
F0.64993465557927266
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\x13\t\x1f\xf0'
tRp4617
sa(dp4618
S'trial_loop.thisTrialN'
p4619
I67
sg3633
g3991
sS'block_loop.thisIndex'
p4620
g3627
sg38
S'left'
p4621
sg59
g63
sS'trial_loop.thisN'
p4622
I67
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p4623
g60
(g99
S'C\x00\x00\x00'
tRp4624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4625
I0
sg3642
g3998
sS'block_loop.thisRepN'
p4626
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4627
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p4628
Nsg70
Vy
sS'block_loop.thisTrialN'
p4629
I0
sg39
F0.78317711873387452
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\x19\x04:\x08'
tRp4630
sa(dp4631
S'trial_loop.thisTrialN'
p4632
I68
sg3633
g4316
sS'block_loop.thisIndex'
p4633
g3627
sg38
S'left'
p4634
sg59
g63
sS'trial_loop.thisN'
p4635
I68
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p4636
g60
(g99
S'D\x00\x00\x00'
tRp4637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4638
I0
sg3642
g4323
sS'block_loop.thisRepN'
p4639
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4640
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p4641
Nsg70
Vy
sS'block_loop.thisTrialN'
p4642
I0
sg39
F1.416486294776405
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10\x1f\x01w\x00'
tRp4643
sa(dp4644
S'trial_loop.thisTrialN'
p4645
I69
sg3633
S'10-bounty_redo.png'
p4646
sS'block_loop.thisIndex'
p4647
g3627
sg38
S'left'
p4648
sg59
g63
sS'trial_loop.thisN'
p4649
I69
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4650
g60
(g99
S'E\x00\x00\x00'
tRp4651
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4652
I0
sg3642
S'4-corn.png'
p4653
sS'block_loop.thisRepN'
p4654
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4655
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p4656
Nsg70
Vy
sS'block_loop.thisTrialN'
p4657
I0
sg39
F0.71664241434518772
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10%\x08t\x10'
tRp4658
sa(dp4659
S'trial_loop.thisTrialN'
p4660
I70
sg3633
g4191
sS'block_loop.thisIndex'
p4661
g3627
sg38
S'right'
p4662
sg59
g63
sS'trial_loop.thisN'
p4663
I70
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p4664
g60
(g99
S'F\x00\x00\x00'
tRp4665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4666
I0
sg3642
g4199
sS'block_loop.thisRepN'
p4667
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4668
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p4669
Nsg70
Vy
sS'block_loop.thisTrialN'
p4670
I0
sg39
F0.7333357471616182
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x10+\x04\x80X'
tRp4671
sa(dp4672
S'trial_loop.thisTrialN'
p4673
I71
sg3633
g4208
sS'block_loop.thisIndex'
p4674
g3627
sg38
S'right'
p4675
sg59
g63
sS'trial_loop.thisN'
p4676
I71
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4677
g60
(g99
S'G\x00\x00\x00'
tRp4678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4679
I0
sg3642
g4215
sS'block_loop.thisRepN'
p4680
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4681
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p4682
Nsg70
Vy
sS'block_loop.thisTrialN'
p4683
I0
sg39
F0.56683633788270527
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x101\x01\x05\xb8'
tRp4684
sa(dp4685
S'trial_loop.thisTrialN'
p4686
I72
sg3633
S'7-olives.png'
p4687
sS'block_loop.thisIndex'
p4688
g3627
sg38
S'right'
p4689
sg59
g63
sS'trial_loop.thisN'
p4690
I72
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p4691
g60
(g99
S'H\x00\x00\x00'
tRp4692
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4693
I0
sg3642
S'22-daim.png'
p4694
sS'block_loop.thisRepN'
p4695
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4696
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p4697
Nsg70
Vy
sS'block_loop.thisTrialN'
p4698
I0
sg39
F0.63334224739082856
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x106\n-x'
tRp4699
sa(dp4700
S'trial_loop.thisTrialN'
p4701
I73
sg3633
S'20-fruit_pastilles.png'
p4702
sS'block_loop.thisIndex'
p4703
g3627
sg38
S'right'
p4704
sg59
g63
sS'trial_loop.thisN'
p4705
I73
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p4706
g60
(g99
S'I\x00\x00\x00'
tRp4707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4708
I0
sg3642
S'2-steamed_puddings.png'
p4709
sS'block_loop.thisRepN'
p4710
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4711
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p4712
Nsg70
Vy
sS'block_loop.thisTrialN'
p4713
I0
sg39
F0.98332690913048282
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x00\x05\t\x10'
tRp4714
sa(dp4715
S'trial_loop.thisTrialN'
p4716
I74
sg3633
g3899
sS'block_loop.thisIndex'
p4717
g3627
sg38
S'left'
p4718
sg59
g63
sS'trial_loop.thisN'
p4719
I74
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p4720
g60
(g99
S'J\x00\x00\x00'
tRp4721
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4722
I0
sg3642
g3907
sS'block_loop.thisRepN'
p4723
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4724
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p4725
Nsg70
Vy
sS'block_loop.thisTrialN'
p4726
I0
sg39
F0.7833359182204731
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x06\x05_\x00'
tRp4727
sa(dp4728
S'trial_loop.thisTrialN'
p4729
I75
sg3633
g3976
sS'block_loop.thisIndex'
p4730
g3627
sg38
S'left'
p4731
sg59
g63
sS'trial_loop.thisN'
p4732
I75
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p4733
g60
(g99
S'K\x00\x00\x00'
tRp4734
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4735
I0
sg3642
g3983
sS'block_loop.thisRepN'
p4736
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4737
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p4738
Nsg70
Vy
sS'block_loop.thisTrialN'
p4739
I0
sg39
F0.88310903737328772
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x0c\x02\x9b\xf8'
tRp4740
sa(dp4741
S'trial_loop.thisTrialN'
p4742
I76
sg3633
g3991
sS'block_loop.thisIndex'
p4743
g3627
sg38
S'left'
p4744
sg59
g63
sS'trial_loop.thisN'
p4745
I76
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p4746
g60
(g99
S'L\x00\x00\x00'
tRp4747
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4748
I0
sg3642
g3998
sS'block_loop.thisRepN'
p4749
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4750
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p4751
Nsg70
Vy
sS'block_loop.thisTrialN'
p4752
I0
sg39
F0.71668403862713603
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x12\x01D8'
tRp4753
sa(dp4754
S'trial_loop.thisTrialN'
p4755
I77
sg3633
g3782
sS'block_loop.thisIndex'
p4756
g3627
sg38
S'right'
p4757
sg59
g63
sS'trial_loop.thisN'
p4758
I77
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4759
g60
(g99
S'M\x00\x00\x00'
tRp4760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4761
I0
sg3642
g3790
sS'block_loop.thisRepN'
p4762
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4763
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p4764
Nsg70
Vy
sS'block_loop.thisTrialN'
p4765
I0
sg39
F0.66669897775318532
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x17\x0c\xcdX'
tRp4766
sa(dp4767
S'trial_loop.thisTrialN'
p4768
I78
sg3633
g4646
sS'block_loop.thisIndex'
p4769
g3627
sg38
S'left'
p4770
sg59
g63
sS'trial_loop.thisN'
p4771
I78
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4772
g60
(g99
S'N\x00\x00\x00'
tRp4773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4774
I0
sg3642
g4653
sS'block_loop.thisRepN'
p4775
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4776
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p4777
Nsg70
Vy
sS'block_loop.thisTrialN'
p4778
I0
sg39
F0.56664019058189297
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11\x1d\x08"\x08'
tRp4779
sa(dp4780
S'trial_loop.thisTrialN'
p4781
I79
sg3633
g4687
sS'block_loop.thisIndex'
p4782
g3627
sg38
S'right'
p4783
sg59
g63
sS'trial_loop.thisN'
p4784
I79
sg33
g4555
sg64
g65
sS'trial_loop.thisIndex'
p4785
g60
(g99
S'O\x00\x00\x00'
tRp4786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4787
I0
sg3642
g4694
sS'block_loop.thisRepN'
p4788
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4789
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p4790
Nsg70
Vy
sS'block_loop.thisTrialN'
p4791
I0
sg39
F0.58332097909442382
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11#\x02\x0bp'
tRp4792
sa(dp4793
S'trial_loop.thisTrialN'
p4794
I80
sg3633
g4467
sS'block_loop.thisIndex'
p4795
g3627
sg38
S'right'
p4796
sg59
g63
sS'trial_loop.thisN'
p4797
I80
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4798
g60
(g99
S'P\x00\x00\x00'
tRp4799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4800
I0
sg3642
g4474
sS'block_loop.thisRepN'
p4801
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4802
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4803
Nsg70
Vy
sS'block_loop.thisTrialN'
p4804
I0
sg39
F0.58309176044349442
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11(\x0bq\xb0'
tRp4805
sa(dp4806
S'trial_loop.thisTrialN'
p4807
I81
sg3633
g4687
sS'block_loop.thisIndex'
p4808
g3627
sg38
S'right'
p4809
sg59
g63
sS'trial_loop.thisN'
p4810
I81
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p4811
g60
(g99
S'Q\x00\x00\x00'
tRp4812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4813
I0
sg3642
g4694
sS'block_loop.thisRepN'
p4814
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4815
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg70
Vy
sS'block_loop.thisTrialN'
p4817
I0
sg39
F0.61667713925999124
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x11.\x05\x95\xb0'
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I82
sg3633
S'46-pistachios.png'
p4821
sS'block_loop.thisIndex'
p4822
g3627
sg38
S'left'
p4823
sg59
g63
sS'trial_loop.thisN'
p4824
I82
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p4825
g60
(g99
S'R\x00\x00\x00'
tRp4826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4827
I0
sg3642
S'29-beans.png'
p4828
sS'block_loop.thisRepN'
p4829
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4830
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p4831
Nsg70
Vy
sS'block_loop.thisTrialN'
p4832
I0
sg39
F0.76667138028278714
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x114\x002\xc8'
tRp4833
sa(dp4834
S'trial_loop.thisTrialN'
p4835
I83
sg3633
g4467
sS'block_loop.thisIndex'
p4836
g3627
sg38
S'right'
p4837
sg59
g63
sS'trial_loop.thisN'
p4838
I83
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4839
g60
(g99
S'S\x00\x00\x00'
tRp4840
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4841
I0
sg3642
g4474
sS'block_loop.thisRepN'
p4842
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4843
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p4844
Nsg70
Vy
sS'block_loop.thisTrialN'
p4845
I0
sg39
F0.51672127240271948
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x119\x0cs\x80'
tRp4846
sa(dp4847
S'trial_loop.thisTrialN'
p4848
I84
sg3633
g3867
sS'block_loop.thisIndex'
p4849
g3627
sg38
S'right'
p4850
sg59
g63
sS'trial_loop.thisN'
p4851
I84
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p4852
g60
(g99
S'T\x00\x00\x00'
tRp4853
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4854
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4855
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4856
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p4857
Nsg70
Vy
sS'block_loop.thisTrialN'
p4858
I0
sg39
F0.66660461037281493
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12\x03\x05\xa5P'
tRp4859
sa(dp4860
S'trial_loop.thisTrialN'
p4861
I85
sg3633
g3816
sS'block_loop.thisIndex'
p4862
g3627
sg38
S'left'
p4863
sg59
g63
sS'trial_loop.thisN'
p4864
I85
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4865
g60
(g99
S'U\x00\x00\x00'
tRp4866
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4867
I0
sg3642
g3824
sS'block_loop.thisRepN'
p4868
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4869
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p4870
Nsg70
Vy
sS'block_loop.thisTrialN'
p4871
I0
sg39
F0.73328357425998547
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12\t\x00\xfa\x00'
tRp4872
sa(dp4873
S'trial_loop.thisTrialN'
p4874
I86
sg3633
g3884
sS'block_loop.thisIndex'
p4875
g3627
sg38
S'right'
p4876
sg59
g63
sS'trial_loop.thisN'
p4877
I86
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4878
g60
(g99
S'V\x00\x00\x00'
tRp4879
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4880
I0
sg3642
g3891
sS'block_loop.thisRepN'
p4881
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4882
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p4883
Nsg70
Vy
sS'block_loop.thisTrialN'
p4884
I0
sg39
F1.0166277603166236
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12\x0e\x0c\xc1\xa0'
tRp4885
sa(dp4886
S'trial_loop.thisTrialN'
p4887
I87
sg3633
g4174
sS'block_loop.thisIndex'
p4888
g3627
sg38
S'right'
p4889
sg59
g63
sS'trial_loop.thisN'
p4890
I87
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p4891
g60
(g99
S'W\x00\x00\x00'
tRp4892
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4893
I0
sg3642
g4182
sS'block_loop.thisRepN'
p4894
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4895
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p4896
Nsg70
Vy
sS'block_loop.thisTrialN'
p4897
I0
sg39
F0.76666881440360157
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12\x14\r\x90\xa8'
tRp4898
sa(dp4899
S'trial_loop.thisTrialN'
p4900
I88
sg3633
g4191
sS'block_loop.thisIndex'
p4901
g3627
sg38
S'right'
p4902
sg59
g63
sS'trial_loop.thisN'
p4903
I88
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p4904
g60
(g99
S'X\x00\x00\x00'
tRp4905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4906
I0
sg3642
g4199
sS'block_loop.thisRepN'
p4907
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4908
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p4909
Nsg70
Vy
sS'block_loop.thisTrialN'
p4910
I0
sg39
F0.68328026712515566
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12\x1a\nP\xa0'
tRp4911
sa(dp4912
S'trial_loop.thisTrialN'
p4913
I89
sg3633
g3799
sS'block_loop.thisIndex'
p4914
g3627
sg38
S'left'
p4915
sg59
g63
sS'trial_loop.thisN'
p4916
I89
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4917
g60
(g99
S'Y\x00\x00\x00'
tRp4918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4919
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4920
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4921
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p4922
Nsg70
Vy
sS'block_loop.thisTrialN'
p4923
I0
sg39
F0.73372718647260626
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12 \x06\x1eh'
tRp4924
sa(dp4925
S'trial_loop.thisTrialN'
p4926
I90
sg3633
g4646
sS'block_loop.thisIndex'
p4927
g3627
sg38
S'left'
p4928
sg59
g63
sS'trial_loop.thisN'
p4929
I90
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p4930
g60
(g99
S'Z\x00\x00\x00'
tRp4931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4932
I0
sg3642
g4653
sS'block_loop.thisRepN'
p4933
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4934
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p4935
Nsg70
Vy
sS'block_loop.thisTrialN'
p4936
I0
sg39
F0.66669185030696099
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12&\x02\xa7\xb0'
tRp4937
sa(dp4938
S'trial_loop.thisTrialN'
p4939
I91
sg3633
g4174
sS'block_loop.thisIndex'
p4940
g3627
sg38
S'right'
p4941
sg59
g63
sS'trial_loop.thisN'
p4942
I91
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p4943
g60
(g99
S'[\x00\x00\x00'
tRp4944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4945
I0
sg3642
g4182
sS'block_loop.thisRepN'
p4946
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4947
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p4948
Nsg70
Vy
sS'block_loop.thisTrialN'
p4949
I0
sg39
F0.76660951405574451
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x12+\r>\xa0'
tRp4950
sa(dp4951
S'trial_loop.thisTrialN'
p4952
I92
sg3633
g3991
sS'block_loop.thisIndex'
p4953
g3627
sg38
S'left'
p4954
sg59
g63
sS'trial_loop.thisN'
p4955
I92
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p4956
g60
(g99
S'\\\x00\x00\x00'
tRp4957
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4958
I0
sg3642
g3998
sS'block_loop.thisRepN'
p4959
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4960
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p4961
Nsg70
Vy
sS'block_loop.thisTrialN'
p4962
I0
sg39
F0.64995432732939662
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x121\n=\x18'
tRp4963
sa(dp4964
S'trial_loop.thisTrialN'
p4965
I93
sg3633
g3933
sS'block_loop.thisIndex'
p4966
g3627
sg38
S'right'
p4967
sg59
g63
sS'trial_loop.thisN'
p4968
I93
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p4969
g60
(g99
S']\x00\x00\x00'
tRp4970
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4971
I0
sg3642
g3941
sS'block_loop.thisRepN'
p4972
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4973
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p4974
Nsg70
Vy
sS'block_loop.thisTrialN'
p4975
I0
sg39
F0.99991076437981974
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x127\x05SH'
tRp4976
sa(dp4977
S'trial_loop.thisTrialN'
p4978
I94
sg3633
g3884
sS'block_loop.thisIndex'
p4979
g3627
sg38
S'right'
p4980
sg59
g63
sS'trial_loop.thisN'
p4981
I94
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p4982
g60
(g99
S'^\x00\x00\x00'
tRp4983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4984
I0
sg3642
g3891
sS'block_loop.thisRepN'
p4985
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4986
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p4987
Nsg70
Vy
sS'block_loop.thisTrialN'
p4988
I0
sg39
F0.66666989777513663
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x01\x05\xe3\xd0'
tRp4989
sa(dp4990
S'trial_loop.thisTrialN'
p4991
I95
sg3633
g3782
sS'block_loop.thisIndex'
p4992
g3627
sg38
S'right'
p4993
sg59
g63
sS'trial_loop.thisN'
p4994
I95
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4995
g60
(g99
S'_\x00\x00\x00'
tRp4996
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4997
I0
sg3642
g3790
sS'block_loop.thisRepN'
p4998
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4999
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5000
Nsg70
Vy
sS'block_loop.thisTrialN'
p5001
I0
sg39
F0.60035842498291458
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x07\x018\x80'
tRp5002
sa(dp5003
S'trial_loop.thisTrialN'
p5004
I96
sg3633
g3671
sS'block_loop.thisIndex'
p5005
g3627
sg38
S'right'
p5006
sg59
g63
sS'trial_loop.thisN'
p5007
I96
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5008
g60
(g99
S'`\x00\x00\x00'
tRp5009
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5010
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5011
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5012
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p5013
Nsg70
Vy
sS'block_loop.thisTrialN'
p5014
I0
sg39
F1.1666564981769625
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x0c\n\xdd@'
tRp5015
sa(dp5016
S'trial_loop.thisTrialN'
p5017
I97
sg3633
g3867
sS'block_loop.thisIndex'
p5018
g3627
sg38
S'right'
p5019
sg59
g63
sS'trial_loop.thisN'
p5020
I97
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p5021
g60
(g99
S'a\x00\x00\x00'
tRp5022
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5023
I0
sg3642
g3875
sS'block_loop.thisRepN'
p5024
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5025
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p5026
Nsg70
Vy
sS'block_loop.thisTrialN'
p5027
I0
sg39
F0.56666527918969223
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x12\x0e\r\xa8'
tRp5028
sa(dp5029
S'trial_loop.thisTrialN'
p5030
I98
sg3633
g4551
sS'block_loop.thisIndex'
p5031
g3627
sg38
S'left'
p5032
sg59
g63
sS'trial_loop.thisN'
p5033
I98
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p5034
g60
(g99
S'b\x00\x00\x00'
tRp5035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5036
I0
sg3642
g4559
sS'block_loop.thisRepN'
p5037
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5038
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p5039
Nsg70
Vy
sS'block_loop.thisTrialN'
p5040
I0
sg39
F0.7333143648247642
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x18\x07\xf3('
tRp5041
sa(dp5042
S'trial_loop.thisTrialN'
p5043
I99
sg3633
g4372
sS'block_loop.thisIndex'
p5044
g3627
sg38
S'right'
p5045
sg59
g63
sS'trial_loop.thisN'
p5046
I99
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5047
g60
(g99
S'c\x00\x00\x00'
tRp5048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5049
I0
sg3642
g4379
sS'block_loop.thisRepN'
p5050
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5051
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p5052
Nsg70
Vy
sS'block_loop.thisTrialN'
p5053
I0
sg39
F0.74997519648968591
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13\x1e\x04=\xf0'
tRp5054
sa(dp5055
S'trial_loop.thisTrialN'
p5056
I100
sg3633
g4687
sS'block_loop.thisIndex'
p5057
g3627
sg38
S'right'
p5058
sg59
g63
sS'trial_loop.thisN'
p5059
I100
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p5060
g60
(g99
S'd\x00\x00\x00'
tRp5061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5062
I0
sg3642
g4694
sS'block_loop.thisRepN'
p5063
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5064
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p5065
Nsg70
Vy
sS'block_loop.thisTrialN'
p5066
I0
sg39
F0.49996863924025092
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13$\x00\xfd\xe8'
tRp5067
sa(dp5068
S'trial_loop.thisTrialN'
p5069
I101
sg3633
g3833
sS'block_loop.thisIndex'
p5070
g3627
sg38
S'left'
p5071
sg59
g63
sS'trial_loop.thisN'
p5072
I101
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5073
g60
(g99
S'e\x00\x00\x00'
tRp5074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5075
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5076
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vy
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.93368596132677339
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13)\t3x'
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g4331
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'left'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g4338
sS'block_loop.thisRepN'
p5089
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vy
sS'block_loop.thisTrialN'
p5092
I0
sg39
F0.63333740072812361
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13/\x08\x93P'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g4400
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'left'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g4407
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vy
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.56663505882170284
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x135\x03n\xe8'
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g4482
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'left'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g4489
sS'block_loop.thisRepN'
p5115
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vy
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.56666100272377662
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x13:\x0c\x9a\x90'
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g3916
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'right'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g3924
sS'block_loop.thisRepN'
p5128
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vy
sS'block_loop.thisTrialN'
p5131
I0
sg39
F0.91663197976595256
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14\x04\x06\x80\x10'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g3884
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'right'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g3891
sS'block_loop.thisRepN'
p5141
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vy
sS'block_loop.thisTrialN'
p5144
I0
sg39
F0.78335102840537729
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14\n\x05\xdf\xe8'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g3671
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'right'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5154
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vy
sS'block_loop.thisTrialN'
p5157
I0
sg39
F0.61692517436495109
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14\x10\x03\x1c\xe0'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4536
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'right'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4543
sS'block_loop.thisRepN'
p5167
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vy
sS'block_loop.thisTrialN'
p5170
I0
sg39
F0.7665733066314715
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14\x15\x0c\xfc8'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4088
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'right'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5180
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vy
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.95007851593982195
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14\x1b\t\xfa\xb0'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g4482
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'left'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g4489
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vy
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.83331214106328844
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14!\t\x99\x08'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g3850
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'left'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5206
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vy
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.63334139209837303
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x14'\x07\x8d\x98"
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g4400
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'left'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g3877
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g4407
sS'block_loop.thisRepN'
p5219
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vy
sS'block_loop.thisTrialN'
p5222
I0
sg39
F0.68325916988578683
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x14-\x02i0'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4301
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'left'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4308
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vy
sS'block_loop.thisTrialN'
p5235
I0
sg39
F0.78372707243397599
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x142\ry8'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g3799
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5245
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vy
sS'block_loop.thisTrialN'
p5248
I0
sg39
F1.5333205229380837
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x148\n\xb60'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3634
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vy
sS'block_loop.thisTrialN'
p5261
I0
sg39
F1.0165271207861224
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15\x03\x04\x1a\xc8'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4301
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'left'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3944
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4308
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vy
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.66656612216866051
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15\t\x04\xe9\xd0'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4208
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4215
sS'block_loop.thisRepN'
p5284
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vy
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.79987871938647004
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15\x0f\x00>\x80'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4702
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'right'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4709
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vy
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.91677509887267661
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15\x14\x0c\xfc8'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4467
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4474
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vy
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.63300070020159183
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15\x1a\x0c\x1d\x90'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g3850
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vy
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.68325603380981192
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15 \x06\xf9('
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4159
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4166
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vy
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.81667411722446559
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15&\x02\xc6\xf0'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3976
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'left'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3983
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vy
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.74999002157528594
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x15,\x00}\x00'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3634
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vy
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.69985956081291079
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x151\x0c\x83 '
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4174
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4182
sS'block_loop.thisRepN'
p5375
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vy
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.81674738736364816
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x157\x08P\xe8'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4331
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4338
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vy
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.61665946319590148
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x01\x06\x06\xf8'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4174
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'right'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4182
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vy
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.63314524479756074
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x07\x00\xa4\x10'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4467
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4474
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vy
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.76631671859286143
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x0c\x0b\x00h'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4482
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4489
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vy
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.71665438845229801
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x12\x07\xc0`'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4372
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4379
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vy
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.63325301177428628
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x18\x04\x0b('
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4316
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4323
sS'block_loop.thisRepN'
p5453
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vy
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.75034354287708993
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16\x1d\x0e)\x00'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3705
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vy
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.78338438485116058
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16#\n\xe8\xf8'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3765
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3773
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vy
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.74999828941326996
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16)\x08%\xf0'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3671
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vy
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.56666242821302149
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x16/\x04\xe9\xd0'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4006
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4013
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vy
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.64992211127537303
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x164\r\xd3\x10'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4088
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vy
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.6832819777118857
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x16:\t'\xc0"
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3654
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vy
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.70009619200391171
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17\x04\x04\xba\xf0'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3799
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vy
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.78333705861041381
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17\n\x00\xc78'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3816
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vy
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.60002714131223911
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17\x0f\rFp'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4047
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3903
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vy
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.66667217855683703
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17\x15\x07\xa5\x08'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4646
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4653
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.61667685416250606
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17\x1b\x02\xf9\xb8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4536
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4543
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.79999389890690509
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17 \x0c\xd9\x10'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3833
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.76718341597370454
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17&\nT\x88'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4551
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4555
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4559
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.64991327324241865
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x17,\x07S\x00'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4103
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4114
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.54984621823496127
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x172\x02i0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4331
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4338
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.81665244978830742
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x177\x0bVX'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4687
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4694
sS'block_loop.thisRepN'
p5661
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.91663083937419287
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\x01\t\x0ch'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3634
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3646
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3646
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3648
g3638
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.4998275158177421
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\x07\x08l@'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4551
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4559
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.68357249239306839
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\r\x01$\xf8'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4821
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4828
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.80006488826438726
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\x12\x0c5\x00'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4702
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4709
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.86668540709797526
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\x18\t\xb0x'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g4316
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g4323
sS'block_loop.thisRepN'
p5726
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.81669435916774091
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18\x1e\x08\x1a8'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3933
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3941
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.98326276211810182
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18$\x05\xd0H'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4400
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4407
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.69998300816951087
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18*\x06&8'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4331
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4338
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.65001761904568411
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x180\x01\xf4\x00'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4482
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'left'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4489
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.66662000565702328
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x185\x0cPX'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4088
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.70002776852925308
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x18;\x07\xdf\xa0'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g3671
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.7500085529354692
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19\x05\x03\xadh'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4702
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4709
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.69989519804039446
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19\x0b\x00qH'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3933
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3937
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3941
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3648
g3944
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.76667109518530197
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19\x10\x0b\xbf\xd0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4191
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'right'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4199
sS'block_loop.thisRepN'
p5843
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.56704959105627495
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19\x16\x08\x7f\xc8'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4006
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4013
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.61666060358584218
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19\x1c\x02i0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3916
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3924
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.76668050341322669
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19!\x0cH\x88'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3688
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.68327912673339597
sg34
g753
(S"\x07\xdf\x07\x0f\x13\x19'\tG\x00"
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4159
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4166
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.7665656089920958
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x19-\x05\x14\xc8'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4536
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3861
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4543
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3648
g3861
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.68326601223452599
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x193\x02\x17('
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4047
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4054
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.61657022757754021
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x198\x0c\xe8\xb0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3976
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3983
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.69991772076718917
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\x02\x07\x85\xc8'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4103
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4111
sS'block_loop.thisRepN'
p5947
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.56666727487572643
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\x08\x03\x92\x10'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3688
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3648
g3699
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.58334806338825729
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\r\x0c\xbd\xb8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4821
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4828
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.1166266769450885
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\x13\x06\xe1\xb8'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3782
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3790
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3792
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3648
g3786
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.84995900293324667
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\x19\t\x1c\x08'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4702
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3746
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4709
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.58332782144134399
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a\x1f\x07K0'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3884
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3891
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.71663215082298848
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a%\x01o0'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g3799
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g3807
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3648
g3810
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.79984222686471185
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a*\x0c\xfc8'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3816
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3824
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F1.0333347778287134
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a0\ns\xc8'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3976
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3983
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.96668261313789117
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1a6\x0bB\xd0'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3916
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3926
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3924
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.60035186773347959
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x00\x0bZ@'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4103
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4111
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.64995318693581794
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x06\x05\xbc\xc0'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4821
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4828
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.66669726716645528
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x0c\x00\xd2\xf0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4372
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4107
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4379
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4107
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3648
g4114
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.59994218216161244
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x11\x0b\xa8`'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g3735
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.63335222581736161
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x17\x06\x06\xf8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4551
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4561
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4559
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4561
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3648
g4555
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.65002930805530923
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b\x1d\x00\xe2\x90'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3705
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.73370494884329673
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b"\x0by\x80'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3654
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.69976718911857461
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b(\x07\xc0`'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3991
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3920
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3998
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3926
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3648
g3920
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.76667679714228143
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b.\x03\xcc\xa8'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4400
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4407
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3877
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3648
g3871
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.91663796681859822
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b4\x00\xcb '
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4047
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3909
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4054
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3909
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3648
g3903
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.73327730210803566
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1b9\x0f2\xa0'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4821
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4202
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4828
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.91671152205890394
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c\x03\x0b\xb8\x00'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4316
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4184
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4323
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4184
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3648
g4178
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.81708864945721871
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c\t\n\xdd@'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3735
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.73329725895564479
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c\x0f\x08\x93P'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3654
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3648
g3665
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.64975675453752046
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c\x15\x05\x18\xb0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4006
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4013
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3648
g3827
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.68329566240754502
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c\x1b\x00.\xe0'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4159
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4166
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.1666268480039435
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c \x0b\x04P'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3735
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3739
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3648
g3746
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.63337446344667114
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c&\x0e4\xb8'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4191
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4195
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4199
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4195
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3648
g4202
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.81645430680146092
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c,\t\x0ch'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3833
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3843
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3841
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3843
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3648
g3837
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.84992251041148847
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c2\x06\xc2x'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4646
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3681
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4653
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3681
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3648
g3675
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.71662302769254893
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1c8\x04\xf5\x88'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3765
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3773
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3769
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3648
g3776
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.84999321467148548
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1d\x02\x01<h'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3705
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3715
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3715
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3648
g3709
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.66658265784280957
sg34
g753
(S'\x07\xdf\x07\x0f\x13\x1d\x07\x0e\xad\xd0'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F315.37533099857137
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'31-hobnobs.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'25-kitkat.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'25-kitkat.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'31-hobnobs.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.86652632251207251
sg34
g753
(S"\x07\xdf\x07\x0f\x13'.\x00\x88\xb8"
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'49-yorkie.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'49-yorkie.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'35-raisins.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'35-raisins.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.68329309652654047
sg34
g753
(S"\x07\xdf\x07\x0f\x13'3\r\xfa "
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'25-kitkat.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6413
g60
(g99
S'\x02\x00\x00\x00'
tRp6414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6415
I0
sg6380
S'31-hobnobs.png'
p6416
sS'block_loop.thisRepN'
p6417
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6418
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6419
Nsg70
Vy
sS'block_loop.thisTrialN'
p6420
I0
sg39
F0.78333791390468832
sg34
g753
(S"\x07\xdf\x07\x0f\x13'9\t\xc7\xe8"
tRp6421
sa(dp6422
S'trial_loop.thisTrialN'
p6423
I3
sg6371
S'1-treacle_cookies.png'
p6424
sS'block_loop.thisIndex'
p6425
g6365
sg38
S'left'
p6426
sg59
g63
sS'trial_loop.thisN'
p6427
I3
sg33
S'1-treacle_cookies.png'
p6428
sg64
g65
sS'trial_loop.thisIndex'
p6429
g60
(g99
S'\x03\x00\x00\x00'
tRp6430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6431
I0
sg6380
S'21-nakd_banana_crunch.png'
p6432
sS'block_loop.thisRepN'
p6433
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6434
I2
sg6385
S'21-nakd_banana_crunch.png'
p6435
sg55
g11
sS'block_loop.thisTrial'
p6436
Nsg70
Vy
sS'block_loop.thisTrialN'
p6437
I0
sg39
F0.70000809677912912
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\x03\x07\x04\xe0'
tRp6438
sa(dp6439
S'trial_loop.thisTrialN'
p6440
I4
sg6371
S'10-bounty_redo.png'
p6441
sS'block_loop.thisIndex'
p6442
g6365
sg38
S'left'
p6443
sg59
g63
sS'trial_loop.thisN'
p6444
I4
sg33
S'10-bounty_redo.png'
p6445
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
S'4-corn.png'
p6449
sS'block_loop.thisRepN'
p6450
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6451
I2
sg6385
S'4-corn.png'
p6452
sg55
g11
sS'block_loop.thisTrial'
p6453
Nsg70
Vy
sS'block_loop.thisTrialN'
p6454
I0
sg39
F0.84998722761702084
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\t\x02\xd2\xa8'
tRp6455
sa(dp6456
S'trial_loop.thisTrialN'
p6457
I5
sg6371
S'51-mars.png'
p6458
sS'block_loop.thisIndex'
p6459
g6365
sg38
S'left'
p6460
sg59
g63
sS'trial_loop.thisN'
p6461
I5
sg33
S'51-mars.png'
p6462
sg64
g65
sS'trial_loop.thisIndex'
p6463
g60
(g99
S'\x05\x00\x00\x00'
tRp6464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6465
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6466
sS'block_loop.thisRepN'
p6467
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6468
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6469
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vy
sS'block_loop.thisTrialN'
p6471
I0
sg39
F0.54996424873388605
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\x0f\x01\x01\xd0'
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'4-corn.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6479
g60
(g99
S'\x06\x00\x00\x00'
tRp6480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6481
I0
sg6380
S'10-bounty_redo.png'
p6482
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.63329976781642472
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\x14\t\xee\xf8'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'35-raisins.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'right'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6494
g60
(g99
S'\x07\x00\x00\x00'
tRp6495
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6496
I0
sg6380
S'49-yorkie.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6499
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vy
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.59999806133419042
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\x1a\x04\xca\x90'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'20-fruit_pastilles.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'right'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
S'2-steamed_puddings.png'
p6509
sg64
g65
sS'trial_loop.thisIndex'
p6510
g60
(g99
S'\x08\x00\x00\x00'
tRp6511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6512
I0
sg6380
S'2-steamed_puddings.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6515
I2
sg6385
S'20-fruit_pastilles.png'
p6516
sg55
g11
sS'block_loop.thisTrial'
p6517
Nsg70
Vy
sS'block_loop.thisTrialN'
p6518
I0
sg39
F0.78326093749456049
sg34
g753
(S'\x07\xdf\x07\x0f\x13(\x1f\x0e\xa9\xe8'
tRp6519
sa(dp6520
S'trial_loop.thisTrialN'
p6521
I9
sg6371
S'30-spaghetti_hoops.png'
p6522
sS'block_loop.thisIndex'
p6523
g6365
sg38
S'right'
p6524
sg59
g63
sS'trial_loop.thisN'
p6525
I9
sg33
S'30-spaghetti_hoops.png'
p6526
sg64
g65
sS'trial_loop.thisIndex'
p6527
g60
(g99
S'\t\x00\x00\x00'
tRp6528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6529
I0
sg6380
S'19-caramello_redo.png'
p6530
sS'block_loop.thisRepN'
p6531
I2
sg6383
S'19-caramello_redo.png'
p6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6533
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vy
sS'block_loop.thisTrialN'
p6535
I0
sg39
F0.66666020444972673
sg34
g753
(S'\x07\xdf\x07\x0f\x13(%\x0b\xa8`'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
g6475
sS'block_loop.thisIndex'
p6539
g6365
sg38
S'right'
p6540
sg59
g63
sS'trial_loop.thisN'
p6541
I10
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6542
g60
(g99
S'\n\x00\x00\x00'
tRp6543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6544
I0
sg6380
g6482
sS'block_loop.thisRepN'
p6545
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6546
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6547
Nsg70
Vy
sS'block_loop.thisTrialN'
p6548
I0
sg39
F0.56666071762447245
sg34
g753
(S'\x07\xdf\x07\x0f\x13(+\x07;\x90'
tRp6549
sa(dp6550
S'trial_loop.thisTrialN'
p6551
I11
sg6371
S'48-twix.png'
p6552
sS'block_loop.thisIndex'
p6553
g6365
sg38
S'left'
p6554
sg59
g63
sS'trial_loop.thisN'
p6555
I11
sg33
S'48-twix.png'
p6556
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
S'50-polo.png'
p6560
sS'block_loop.thisRepN'
p6561
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6562
I2
sg6385
S'50-polo.png'
p6563
sg55
g11
sS'block_loop.thisTrial'
p6564
Nsg70
Vy
sS'block_loop.thisTrialN'
p6565
I0
sg39
F0.5832976010733546
sg34
g753
(S'\x07\xdf\x07\x0f\x13(1\x01!\x10'
tRp6566
sa(dp6567
S'trial_loop.thisTrialN'
p6568
I12
sg6371
S'27-hartleys_raspberries_jelly.png'
p6569
sS'block_loop.thisIndex'
p6570
g6365
sg38
S'right'
p6571
sg59
g63
sS'trial_loop.thisN'
p6572
I12
sg33
g6469
sg64
g65
sS'trial_loop.thisIndex'
p6573
g60
(g99
S'\x0c\x00\x00\x00'
tRp6574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6575
I0
sg6380
S'51-mars.png'
p6576
sS'block_loop.thisRepN'
p6577
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6578
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6579
Nsg70
Vy
sS'block_loop.thisTrialN'
p6580
I0
sg39
F0.61666060358584218
sg34
g753
(S'\x07\xdf\x07\x0f\x13(6\n\x87P'
tRp6581
sa(dp6582
S'trial_loop.thisTrialN'
p6583
I13
sg6371
S'45-chewy_nougat_redo.png'
p6584
sS'block_loop.thisIndex'
p6585
g6365
sg38
S'right'
p6586
sg59
g63
sS'trial_loop.thisN'
p6587
I13
sg33
S'41-peanuts_redo.png'
p6588
sg64
g65
sS'trial_loop.thisIndex'
p6589
g60
(g99
S'\r\x00\x00\x00'
tRp6590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6591
I0
sg6380
S'41-peanuts_redo.png'
p6592
sS'block_loop.thisRepN'
p6593
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6594
I2
sg6385
S'45-chewy_nougat_redo.png'
p6595
sg55
g11
sS'block_loop.thisTrial'
p6596
Nsg70
Vy
sS'block_loop.thisTrialN'
p6597
I0
sg39
F0.75000627215194982
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x00\x05$h'
tRp6598
sa(dp6599
S'trial_loop.thisTrialN'
p6600
I14
sg6371
g6522
sS'block_loop.thisIndex'
p6601
g6365
sg38
S'right'
p6602
sg59
g63
sS'trial_loop.thisN'
p6603
I14
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p6604
g60
(g99
S'\x0e\x00\x00\x00'
tRp6605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6606
I0
sg6380
g6530
sS'block_loop.thisRepN'
p6607
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6608
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6609
Nsg70
Vy
sS'block_loop.thisTrialN'
p6610
I0
sg39
F0.63327011764340568
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x06\x01\xe8H'
tRp6611
sa(dp6612
S'trial_loop.thisTrialN'
p6613
I15
sg6371
S'5-pineapple.png'
p6614
sS'block_loop.thisIndex'
p6615
g6365
sg38
S'left'
p6616
sg59
g63
sS'trial_loop.thisN'
p6617
I15
sg33
S'40-sardines.png'
p6618
sg64
g65
sS'trial_loop.thisIndex'
p6619
g60
(g99
S'\x0f\x00\x00\x00'
tRp6620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6621
I0
sg6380
S'40-sardines.png'
p6622
sS'block_loop.thisRepN'
p6623
I2
sg6383
S'5-pineapple.png'
p6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6625
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p6626
Nsg70
Vy
sS'block_loop.thisTrialN'
p6627
I0
sg39
F0.73333175579136878
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x0b\x0c\x06 '
tRp6628
sa(dp6629
S'trial_loop.thisTrialN'
p6630
I16
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6631
sS'block_loop.thisIndex'
p6632
g6365
sg38
S'right'
p6633
sg59
g63
sS'trial_loop.thisN'
p6634
I16
sg33
S'36-fig_rolls.png'
p6635
sg64
g65
sS'trial_loop.thisIndex'
p6636
g60
(g99
S'\x10\x00\x00\x00'
tRp6637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6638
I0
sg6380
S'36-fig_rolls.png'
p6639
sS'block_loop.thisRepN'
p6640
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6641
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6642
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vy
sS'block_loop.thisTrialN'
p6644
I0
sg39
F0.59994503314010217
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x11\x08\x8b\x80'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
g6458
sS'block_loop.thisIndex'
p6648
g6365
sg38
S'left'
p6649
sg59
g63
sS'trial_loop.thisN'
p6650
I17
sg33
g6469
sg64
g65
sS'trial_loop.thisIndex'
p6651
g60
(g99
S'\x11\x00\x00\x00'
tRp6652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6653
I0
sg6380
g6466
sS'block_loop.thisRepN'
p6654
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6655
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p6656
Nsg70
Vy
sS'block_loop.thisTrialN'
p6657
I0
sg39
F0.61703351153846597
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x17\x02\xee\x00'
tRp6658
sa(dp6659
S'trial_loop.thisTrialN'
p6660
I18
sg6371
S'13-mccoys_steak_crisps.png'
p6661
sS'block_loop.thisIndex'
p6662
g6365
sg38
S'right'
p6663
sg59
g63
sS'trial_loop.thisN'
p6664
I18
sg33
S'3-ellas_strawberries_apples.png'
p6665
sg64
g65
sS'trial_loop.thisIndex'
p6666
g60
(g99
S'\x12\x00\x00\x00'
tRp6667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6668
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6669
sS'block_loop.thisRepN'
p6670
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6671
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6672
sg55
g11
sS'block_loop.thisTrial'
p6673
Nsg70
Vy
sS'block_loop.thisTrialN'
p6674
I0
sg39
F0.96667177942072158
sg34
g753
(S'\x07\xdf\x07\x0f\x13)\x1c\x0c\xcdX'
tRp6675
sa(dp6676
S'trial_loop.thisTrialN'
p6677
I19
sg6371
S'42-mrkipling_lemon_slices.png'
p6678
sS'block_loop.thisIndex'
p6679
g6365
sg38
S'left'
p6680
sg59
g63
sS'trial_loop.thisN'
p6681
I19
sg33
S'16-skips_prawn.png'
p6682
sg64
g65
sS'trial_loop.thisIndex'
p6683
g60
(g99
S'\x13\x00\x00\x00'
tRp6684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6685
I0
sg6380
S'16-skips_prawn.png'
p6686
sS'block_loop.thisRepN'
p6687
I2
sg6383
S'42-mrkipling_lemon_slices.png'
p6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6689
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6690
Nsg70
Vy
sS'block_loop.thisTrialN'
p6691
I0
sg39
F0.73323026096841204
sg34
g753
(S'\x07\xdf\x07\x0f\x13)"\x0c\xe4\xc8'
tRp6692
sa(dp6693
S'trial_loop.thisTrialN'
p6694
I20
sg6371
g6475
sS'block_loop.thisIndex'
p6695
g6365
sg38
S'right'
p6696
sg59
g63
sS'trial_loop.thisN'
p6697
I20
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6698
g60
(g99
S'\x14\x00\x00\x00'
tRp6699
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6700
I0
sg6380
g6482
sS'block_loop.thisRepN'
p6701
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6702
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vy
sS'block_loop.thisTrialN'
p6704
I0
sg39
F0.61655882366358128
sg34
g753
(S'\x07\xdf\x07\x0f\x13)(\t+\xa8'
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6708
sS'block_loop.thisIndex'
p6709
g6365
sg38
S'right'
p6710
sg59
g63
sS'trial_loop.thisN'
p6711
I21
sg33
S'18-mms.png'
p6712
sg64
g65
sS'trial_loop.thisIndex'
p6713
g60
(g99
S'\x15\x00\x00\x00'
tRp6714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6715
I0
sg6380
S'18-mms.png'
p6716
sS'block_loop.thisRepN'
p6717
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6718
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6719
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vy
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.7999348836565332
sg34
g753
(S'\x07\xdf\x07\x0f\x13).\x03\xc8\xc0'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
g6392
sS'block_loop.thisIndex'
p6725
g6365
sg38
S'left'
p6726
sg59
g63
sS'trial_loop.thisN'
p6727
I22
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6728
g60
(g99
S'\x16\x00\x00\x00'
tRp6729
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6730
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6731
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6732
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6733
Nsg70
Vy
sS'block_loop.thisTrialN'
p6734
I0
sg39
F0.63333112857799279
sg34
g753
(S'\x07\xdf\x07\x0f\x13)4\x01D8'
tRp6735
sa(dp6736
S'trial_loop.thisTrialN'
p6737
I23
sg6371
S'40-sardines.png'
p6738
sS'block_loop.thisIndex'
p6739
g6365
sg38
S'right'
p6740
sg59
g63
sS'trial_loop.thisN'
p6741
I23
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p6742
g60
(g99
S'\x17\x00\x00\x00'
tRp6743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6744
I0
sg6380
S'5-pineapple.png'
p6745
sS'block_loop.thisRepN'
p6746
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6747
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p6748
Nsg70
Vy
sS'block_loop.thisTrialN'
p6749
I0
sg39
F0.80035996451078972
sg34
g753
(S'\x07\xdf\x07\x0f\x13)9\x0b\x9c\xa8'
tRp6750
sa(dp6751
S'trial_loop.thisTrialN'
p6752
I24
sg6371
g6441
sS'block_loop.thisIndex'
p6753
g6365
sg38
S'left'
p6754
sg59
g63
sS'trial_loop.thisN'
p6755
I24
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6756
g60
(g99
S'\x18\x00\x00\x00'
tRp6757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6758
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6759
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6760
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6761
Nsg70
Vy
sS'block_loop.thisTrialN'
p6762
I0
sg39
F0.63335650228327722
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\x03\x08\xd9\xa0'
tRp6763
sa(dp6764
S'trial_loop.thisTrialN'
p6765
I25
sg6371
S'19-caramello_redo.png'
p6766
sS'block_loop.thisIndex'
p6767
g6365
sg38
S'left'
p6768
sg59
g63
sS'trial_loop.thisN'
p6769
I25
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p6770
g60
(g99
S'\x19\x00\x00\x00'
tRp6771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6772
I0
sg6380
S'30-spaghetti_hoops.png'
p6773
sS'block_loop.thisRepN'
p6774
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6775
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6776
Nsg70
Vy
sS'block_loop.thisTrialN'
p6777
I0
sg39
F0.69999412698598462
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\t\x03\xef\xd0'
tRp6778
sa(dp6779
S'trial_loop.thisTrialN'
p6780
I26
sg6371
g6441
sS'block_loop.thisIndex'
p6781
g6365
sg38
S'left'
p6782
sg59
g63
sS'trial_loop.thisN'
p6783
I26
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6784
g60
(g99
S'\x1a\x00\x00\x00'
tRp6785
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6786
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6787
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6788
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6789
Nsg70
Vy
sS'block_loop.thisTrialN'
p6790
I0
sg39
F0.54999617968860548
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\x0e\x0f\x03\xc0'
tRp6791
sa(dp6792
S'trial_loop.thisTrialN'
p6793
I27
sg6371
S'33-ambrosia_rice.png'
p6794
sS'block_loop.thisIndex'
p6795
g6365
sg38
S'right'
p6796
sg59
g63
sS'trial_loop.thisN'
p6797
I27
sg33
S'23-crunchie_redo.png'
p6798
sg64
g65
sS'trial_loop.thisIndex'
p6799
g60
(g99
S'\x1b\x00\x00\x00'
tRp6800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6801
I0
sg6380
S'23-crunchie_redo.png'
p6802
sS'block_loop.thisRepN'
p6803
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6804
I2
sg6385
S'33-ambrosia_rice.png'
p6805
sg55
g11
sS'block_loop.thisTrial'
p6806
Nsg70
Vy
sS'block_loop.thisTrialN'
p6807
I0
sg39
F0.61665461653137754
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\x14\x08\xaa\xc0'
tRp6808
sa(dp6809
S'trial_loop.thisTrialN'
p6810
I28
sg6371
S'16-skips_prawn.png'
p6811
sS'block_loop.thisIndex'
p6812
g6365
sg38
S'right'
p6813
sg59
g63
sS'trial_loop.thisN'
p6814
I28
sg33
g6682
sg64
g65
sS'trial_loop.thisIndex'
p6815
g60
(g99
S'\x1c\x00\x00\x00'
tRp6816
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6817
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6818
sS'block_loop.thisRepN'
p6819
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6820
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6821
Nsg70
Vy
sS'block_loop.thisTrialN'
p6822
I0
sg39
F0.66656583706935635
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\x1a\x03K\xc0'
tRp6823
sa(dp6824
S'trial_loop.thisTrialN'
p6825
I29
sg6371
S'41-peanuts_redo.png'
p6826
sS'block_loop.thisIndex'
p6827
g6365
sg38
S'left'
p6828
sg59
g63
sS'trial_loop.thisN'
p6829
I29
sg33
g6595
sg64
g65
sS'trial_loop.thisIndex'
p6830
g60
(g99
S'\x1d\x00\x00\x00'
tRp6831
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6832
I0
sg6380
S'45-chewy_nougat_redo.png'
p6833
sS'block_loop.thisRepN'
p6834
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6835
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p6836
Nsg70
Vy
sS'block_loop.thisTrialN'
p6837
I0
sg39
F0.68371019464211713
sg34
g753
(S'\x07\xdf\x07\x0f\x13*\x1f\x0e\x1dH'
tRp6838
sa(dp6839
S'trial_loop.thisTrialN'
p6840
I30
sg6371
g6372
sS'block_loop.thisIndex'
p6841
g6365
sg38
S'left'
p6842
sg59
g63
sS'trial_loop.thisN'
p6843
I30
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p6844
g60
(g99
S'\x1e\x00\x00\x00'
tRp6845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6846
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6847
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6848
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6849
Nsg70
Vy
sS'block_loop.thisTrialN'
p6850
I0
sg39
F0.7167068464532349
sg34
g753
(S'\x07\xdf\x07\x0f\x13*%\t\xb0x'
tRp6851
sa(dp6852
S'trial_loop.thisTrialN'
p6853
I31
sg6371
S'22-daim.png'
p6854
sS'block_loop.thisIndex'
p6855
g6365
sg38
S'left'
p6856
sg59
g63
sS'trial_loop.thisN'
p6857
I31
sg33
S'22-daim.png'
p6858
sg64
g65
sS'trial_loop.thisIndex'
p6859
g60
(g99
S'\x1f\x00\x00\x00'
tRp6860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6861
I0
sg6380
S'7-olives.png'
p6862
sS'block_loop.thisRepN'
p6863
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6864
I2
sg6385
S'7-olives.png'
p6865
sg55
g11
sS'block_loop.thisTrial'
p6866
Nsg70
Vy
sS'block_loop.thisTrialN'
p6867
I0
sg39
F0.6833429886464728
sg34
g753
(S'\x07\xdf\x07\x0f\x13*+\x05\xf7X'
tRp6868
sa(dp6869
S'trial_loop.thisTrialN'
p6870
I32
sg6371
S'3-ellas_strawberries_apples.png'
p6871
sS'block_loop.thisIndex'
p6872
g6365
sg38
S'left'
p6873
sg59
g63
sS'trial_loop.thisN'
p6874
I32
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p6875
g60
(g99
S' \x00\x00\x00'
tRp6876
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6877
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6878
sS'block_loop.thisRepN'
p6879
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6880
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p6881
Nsg70
Vy
sS'block_loop.thisTrialN'
p6882
I0
sg39
F0.76665398931618256
sg34
g753
(S'\x07\xdf\x07\x0f\x13*1\x01\x8a\x88'
tRp6883
sa(dp6884
S'trial_loop.thisTrialN'
p6885
I33
sg6371
g6584
sS'block_loop.thisIndex'
p6886
g6365
sg38
S'right'
p6887
sg59
g63
sS'trial_loop.thisN'
p6888
I33
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p6889
g60
(g99
S'!\x00\x00\x00'
tRp6890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6891
I0
sg6380
g6592
sS'block_loop.thisRepN'
p6892
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6893
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p6894
Nsg70
Vy
sS'block_loop.thisTrialN'
p6895
I0
sg39
F0.73332804952042352
sg34
g753
(S'\x07\xdf\x07\x0f\x13*6\r\xcb@'
tRp6896
sa(dp6897
S'trial_loop.thisTrialN'
p6898
I34
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6899
sS'block_loop.thisIndex'
p6900
g6365
sg38
S'left'
p6901
sg59
g63
sS'trial_loop.thisN'
p6902
I34
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6903
sg64
g65
sS'trial_loop.thisIndex'
p6904
g60
(g99
S'"\x00\x00\x00'
tRp6905
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6906
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6907
sS'block_loop.thisRepN'
p6908
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6909
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6910
sg55
g11
sS'block_loop.thisTrial'
p6911
Nsg70
Vy
sS'block_loop.thisTrialN'
p6912
I0
sg39
F0.64996544614405138
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x00\nP\xa0'
tRp6913
sa(dp6914
S'trial_loop.thisTrialN'
p6915
I35
sg6371
g6409
sS'block_loop.thisIndex'
p6916
g6365
sg38
S'right'
p6917
sg59
g63
sS'trial_loop.thisN'
p6918
I35
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6919
g60
(g99
S'#\x00\x00\x00'
tRp6920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6921
I0
sg6380
g6416
sS'block_loop.thisRepN'
p6922
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6923
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6924
Nsg70
Vy
sS'block_loop.thisTrialN'
p6925
I0
sg39
F0.68366429389243422
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x06\x05f\xd0'
tRp6926
sa(dp6927
S'trial_loop.thisTrialN'
p6928
I36
sg6371
S'29-beans.png'
p6929
sS'block_loop.thisIndex'
p6930
g6365
sg38
S'right'
p6931
sg59
g63
sS'trial_loop.thisN'
p6932
I36
sg33
S'46-pistachios.png'
p6933
sg64
g65
sS'trial_loop.thisIndex'
p6934
g60
(g99
S'$\x00\x00\x00'
tRp6935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6936
I0
sg6380
S'46-pistachios.png'
p6937
sS'block_loop.thisRepN'
p6938
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6939
I2
sg6385
S'29-beans.png'
p6940
sg55
g11
sS'block_loop.thisTrial'
p6941
Nsg70
Vy
sS'block_loop.thisTrialN'
p6942
I0
sg39
F0.68335439255861274
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x0c\x00\xfa\x00'
tRp6943
sa(dp6944
S'trial_loop.thisTrialN'
p6945
I37
sg6371
g6811
sS'block_loop.thisIndex'
p6946
g6365
sg38
S'right'
p6947
sg59
g63
sS'trial_loop.thisN'
p6948
I37
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p6949
g60
(g99
S'%\x00\x00\x00'
tRp6950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6951
I0
sg6380
g6818
sS'block_loop.thisRepN'
p6952
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6953
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6954
Nsg70
Vy
sS'block_loop.thisTrialN'
p6955
I0
sg39
F0.61658961422836001
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x11\x0c\n\x08'
tRp6956
sa(dp6957
S'trial_loop.thisTrialN'
p6958
I38
sg6371
g6766
sS'block_loop.thisIndex'
p6959
g6365
sg38
S'left'
p6960
sg59
g63
sS'trial_loop.thisN'
p6961
I38
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p6962
g60
(g99
S'&\x00\x00\x00'
tRp6963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6964
I0
sg6380
g6773
sS'block_loop.thisRepN'
p6965
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6966
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6967
Nsg70
Vy
sS'block_loop.thisTrialN'
p6968
I0
sg39
F0.95000638619058009
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x17\x06\xab\x08'
tRp6969
sa(dp6970
S'trial_loop.thisTrialN'
p6971
I39
sg6371
g6392
sS'block_loop.thisIndex'
p6972
g6365
sg38
S'left'
p6973
sg59
g63
sS'trial_loop.thisN'
p6974
I39
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6975
g60
(g99
S"'\x00\x00\x00"
tRp6976
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6977
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6978
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6979
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6980
Nsg70
Vy
sS'block_loop.thisTrialN'
p6981
I0
sg39
F0.58330929008297971
sg34
g753
(S'\x07\xdf\x07\x0f\x13+\x1d\x06\x83\xf8'
tRp6982
sa(dp6983
S'trial_loop.thisTrialN'
p6984
I40
sg6371
g6811
sS'block_loop.thisIndex'
p6985
g6365
sg38
S'right'
p6986
sg59
g63
sS'trial_loop.thisN'
p6987
I40
sg33
g6682
sg64
g65
sS'trial_loop.thisIndex'
p6988
g60
(g99
S'(\x00\x00\x00'
tRp6989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6990
I0
sg6380
g6818
sS'block_loop.thisRepN'
p6991
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6992
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p6993
Nsg70
Vy
sS'block_loop.thisTrialN'
p6994
I0
sg39
F0.6832509020496218
sg34
g753
(S'\x07\xdf\x07\x0f\x13+#\x00\xa7\xf8'
tRp6995
sa(dp6996
S'trial_loop.thisTrialN'
p6997
I41
sg6371
S'46-pistachios.png'
p6998
sS'block_loop.thisIndex'
p6999
g6365
sg38
S'left'
p7000
sg59
g63
sS'trial_loop.thisN'
p7001
I41
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7002
g60
(g99
S')\x00\x00\x00'
tRp7003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7004
I0
sg6380
S'29-beans.png'
p7005
sS'block_loop.thisRepN'
p7006
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7007
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7008
Nsg70
Vy
sS'block_loop.thisTrialN'
p7009
I0
sg39
F0.85034616577650013
sg34
g753
(S'\x07\xdf\x07\x0f\x13+(\x0b}h'
tRp7010
sa(dp7011
S'trial_loop.thisTrialN'
p7012
I42
sg6371
S'6-sour_patch_kids.png'
p7013
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'right'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I42
sg33
S'38-maltesers.png'
p7017
sg64
g65
sS'trial_loop.thisIndex'
p7018
g60
(g99
S'*\x00\x00\x00'
tRp7019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7020
I0
sg6380
S'38-maltesers.png'
p7021
sS'block_loop.thisRepN'
p7022
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7023
I2
sg6385
S'6-sour_patch_kids.png'
p7024
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vy
sS'block_loop.thisTrialN'
p7026
I0
sg39
F0.63307254485152953
sg34
g753
(S'\x07\xdf\x07\x0f\x13+.\t\xac\x90'
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
g6678
sS'block_loop.thisIndex'
p7030
g6365
sg38
S'left'
p7031
sg59
g63
sS'trial_loop.thisN'
p7032
I43
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7033
g60
(g99
S'+\x00\x00\x00'
tRp7034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7035
I0
sg6380
g6686
sS'block_loop.thisRepN'
p7036
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7037
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7038
Nsg70
Vy
sS'block_loop.thisTrialN'
p7039
I0
sg39
F0.69984473572549177
sg34
g753
(S'\x07\xdf\x07\x0f\x13+4\x04\x88('
tRp7040
sa(dp7041
S'trial_loop.thisTrialN'
p7042
I44
sg6371
S'23-crunchie_redo.png'
p7043
sS'block_loop.thisIndex'
p7044
g6365
sg38
S'left'
p7045
sg59
g63
sS'trial_loop.thisN'
p7046
I44
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7047
g60
(g99
S',\x00\x00\x00'
tRp7048
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7049
I0
sg6380
S'33-ambrosia_rice.png'
p7050
sS'block_loop.thisRepN'
p7051
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7052
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7053
Nsg70
Vy
sS'block_loop.thisTrialN'
p7054
I0
sg39
F0.66670496480583097
sg34
g753
(S'\x07\xdf\x07\x0f\x13+:\x00\x90\x88'
tRp7055
sa(dp7056
S'trial_loop.thisTrialN'
p7057
I45
sg6371
g6871
sS'block_loop.thisIndex'
p7058
g6365
sg38
S'left'
p7059
sg59
g63
sS'trial_loop.thisN'
p7060
I45
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7061
g60
(g99
S'-\x00\x00\x00'
tRp7062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7063
I0
sg6380
g6878
sS'block_loop.thisRepN'
p7064
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7065
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7066
Nsg70
Vy
sS'block_loop.thisTrialN'
p7067
I0
sg39
F0.74996692865170189
sg34
g753
(S"\x07\xdf\x07\x0f\x13,\x03\x0b'x"
tRp7068
sa(dp7069
S'trial_loop.thisTrialN'
p7070
I46
sg6371
g6766
sS'block_loop.thisIndex'
p7071
g6365
sg38
S'left'
p7072
sg59
g63
sS'trial_loop.thisN'
p7073
I46
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7074
g60
(g99
S'.\x00\x00\x00'
tRp7075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7076
I0
sg6380
g6773
sS'block_loop.thisRepN'
p7077
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7078
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7079
Nsg70
Vy
sS'block_loop.thisTrialN'
p7080
I0
sg39
F0.61670023218357528
sg34
g753
(S'\x07\xdf\x07\x0f\x13,\t\x07\xebX'
tRp7081
sa(dp7082
S'trial_loop.thisTrialN'
p7083
I47
sg6371
g6899
sS'block_loop.thisIndex'
p7084
g6365
sg38
S'left'
p7085
sg59
g63
sS'trial_loop.thisN'
p7086
I47
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p7087
g60
(g99
S'/\x00\x00\x00'
tRp7088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7089
I0
sg6380
g6907
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vy
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.65001505316467956
sg34
g753
(S'\x07\xdf\x07\x0f\x13,\x0f\x02\x88p'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6871
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6878
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vy
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.60006163814796309
sg34
g753
(S'\x07\xdf\x07\x0f\x13,\x14\r\x1f`'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6614
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'left'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vy
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.75000142548924487
sg34
g753
(S'\x07\xdf\x07\x0f\x13,\x1a\x07\x81\xe0'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
S'2-steamed_puddings.png'
p7123
sS'block_loop.thisIndex'
p7124
g6365
sg38
S'left'
p7125
sg59
g63
sS'trial_loop.thisN'
p7126
I50
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7127
g60
(g99
S'2\x00\x00\x00'
tRp7128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7129
I0
sg6380
S'20-fruit_pastilles.png'
p7130
sS'block_loop.thisRepN'
p7131
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7132
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p7133
Nsg70
Vy
sS'block_loop.thisTrialN'
p7134
I0
sg39
F0.73333204088885395
sg34
g753
(S'\x07\xdf\x07\x0f\x13, \x04\x07@'
tRp7135
sa(dp7136
S'trial_loop.thisTrialN'
p7137
I51
sg6371
S'36-fig_rolls.png'
p7138
sS'block_loop.thisIndex'
p7139
g6365
sg38
S'left'
p7140
sg59
g63
sS'trial_loop.thisN'
p7141
I51
sg33
g6642
sg64
g65
sS'trial_loop.thisIndex'
p7142
g60
(g99
S'3\x00\x00\x00'
tRp7143
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7144
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7145
sS'block_loop.thisRepN'
p7146
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7147
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7148
Nsg70
Vy
sS'block_loop.thisTrialN'
p7149
I0
sg39
F0.74999002157710493
sg34
g753
(S'\x07\xdf\x07\x0f\x13,&\x00\x8c\xa0'
tRp7150
sa(dp7151
S'trial_loop.thisTrialN'
p7152
I52
sg6371
g6614
sS'block_loop.thisIndex'
p7153
g6365
sg38
S'left'
p7154
sg59
g63
sS'trial_loop.thisN'
p7155
I52
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7156
g60
(g99
S'4\x00\x00\x00'
tRp7157
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7158
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7160
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vy
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.65004413314272824
sg34
g753
(S'\x07\xdf\x07\x0f\x13,+\x0c\x8e\xd8'
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
S'7-olives.png'
p7166
sS'block_loop.thisIndex'
p7167
g6365
sg38
S'right'
p7168
sg59
g63
sS'trial_loop.thisN'
p7169
I53
sg33
g6865
sg64
g65
sS'trial_loop.thisIndex'
p7170
g60
(g99
S'5\x00\x00\x00'
tRp7171
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7172
I0
sg6380
S'22-daim.png'
p7173
sS'block_loop.thisRepN'
p7174
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7175
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p7176
Nsg70
Vy
sS'block_loop.thisTrialN'
p7177
I0
sg39
F0.60000319309619954
sg34
g753
(S'\x07\xdf\x07\x0f\x13,1\x07\xa8\xf0'
tRp7178
sa(dp7179
S'trial_loop.thisTrialN'
p7180
I54
sg6371
g6392
sS'block_loop.thisIndex'
p7181
g6365
sg38
S'left'
p7182
sg59
g63
sS'trial_loop.thisN'
p7183
I54
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7184
g60
(g99
S'6\x00\x00\x00'
tRp7185
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7186
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7187
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7188
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7189
Nsg70
Vy
sS'block_loop.thisTrialN'
p7190
I0
sg39
F0.51666111676240689
sg34
g753
(S'\x07\xdf\x07\x0f\x13,7\x02\x07\x88'
tRp7191
sa(dp7192
S'trial_loop.thisTrialN'
p7193
I55
sg6371
S'50-polo.png'
p7194
sS'block_loop.thisIndex'
p7195
g6365
sg38
S'right'
p7196
sg59
g63
sS'trial_loop.thisN'
p7197
I55
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7198
g60
(g99
S'7\x00\x00\x00'
tRp7199
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7200
I0
sg6380
S'48-twix.png'
p7201
sS'block_loop.thisRepN'
p7202
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7203
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7204
Nsg70
Vy
sS'block_loop.thisTrialN'
p7205
I0
sg39
F0.56666299840799184
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x00\n{\x98'
tRp7206
sa(dp7207
S'trial_loop.thisTrialN'
p7208
I56
sg6371
g6826
sS'block_loop.thisIndex'
p7209
g6365
sg38
S'left'
p7210
sg59
g63
sS'trial_loop.thisN'
p7211
I56
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7212
g60
(g99
S'8\x00\x00\x00'
tRp7213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7214
I0
sg6380
g6833
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vy
sS'block_loop.thisTrialN'
p7218
I0
sg39
F0.64999367082782555
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x06\x04a\x18'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g7123
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g7130
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vy
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.78333677351474762
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x0b\x0e\xbdp'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
g6899
sS'block_loop.thisIndex'
p7235
g6365
sg38
S'left'
p7236
sg59
g63
sS'trial_loop.thisN'
p7237
I58
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p7238
g60
(g99
S':\x00\x00\x00'
tRp7239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7240
I0
sg6380
g6907
sS'block_loop.thisRepN'
p7241
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7242
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7243
Nsg70
Vy
sS'block_loop.thisTrialN'
p7244
I0
sg39
F1.1333365454374871
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x11\x0b\xfah'
tRp7245
sa(dp7246
S'trial_loop.thisTrialN'
p7247
I59
sg6371
g6522
sS'block_loop.thisIndex'
p7248
g6365
sg38
S'right'
p7249
sg59
g63
sS'trial_loop.thisN'
p7250
I59
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p7251
g60
(g99
S';\x00\x00\x00'
tRp7252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7253
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7254
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7255
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7256
Nsg70
Vy
sS'block_loop.thisTrialN'
p7257
I0
sg39
F0.58370072939578677
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x17\x0es8'
tRp7258
sa(dp7259
S'trial_loop.thisTrialN'
p7260
I60
sg6371
g6661
sS'block_loop.thisIndex'
p7261
g6365
sg38
S'right'
p7262
sg59
g63
sS'trial_loop.thisN'
p7263
I60
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7264
g60
(g99
S'<\x00\x00\x00'
tRp7265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7266
I0
sg6380
g6669
sS'block_loop.thisRepN'
p7267
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7268
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7269
Nsg70
Vy
sS'block_loop.thisTrialN'
p7270
I0
sg39
F0.81664161607113783
sg34
g753
(S'\x07\xdf\x07\x0f\x13-\x1d\x08\x978'
tRp7271
sa(dp7272
S'trial_loop.thisTrialN'
p7273
I61
sg6371
g6372
sS'block_loop.thisIndex'
p7274
g6365
sg38
S'left'
p7275
sg59
g63
sS'trial_loop.thisN'
p7276
I61
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p7277
g60
(g99
S'=\x00\x00\x00'
tRp7278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7279
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7280
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7281
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7282
Nsg70
Vy
sS'block_loop.thisTrialN'
p7283
I0
sg39
F0.8000033071366488
sg34
g753
(S'\x07\xdf\x07\x0f\x13-#\x06MH'
tRp7284
sa(dp7285
S'trial_loop.thisTrialN'
p7286
I62
sg6371
g6929
sS'block_loop.thisIndex'
p7287
g6365
sg38
S'right'
p7288
sg59
g63
sS'trial_loop.thisN'
p7289
I62
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7290
g60
(g99
S'>\x00\x00\x00'
tRp7291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7292
I0
sg6380
g6937
sS'block_loop.thisRepN'
p7293
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7294
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7295
Nsg70
Vy
sS'block_loop.thisTrialN'
p7296
I0
sg39
F0.7500011403899407
sg34
g753
(S'\x07\xdf\x07\x0f\x13-)\x03\xc4\xd8'
tRp7297
sa(dp7298
S'trial_loop.thisTrialN'
p7299
I63
sg6371
g6811
sS'block_loop.thisIndex'
p7300
g6365
sg38
S'right'
p7301
sg59
g63
sS'trial_loop.thisN'
p7302
I63
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p7303
g60
(g99
S'?\x00\x00\x00'
tRp7304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7305
I0
sg6380
g6818
sS'block_loop.thisRepN'
p7306
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7307
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vy
sS'block_loop.thisTrialN'
p7309
I0
sg39
F0.81654240202988149
sg34
g753
(S'\x07\xdf\x07\x0f\x13-/\x00\x88\xb8'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
g7043
sS'block_loop.thisIndex'
p7313
g6365
sg38
S'left'
p7314
sg59
g63
sS'trial_loop.thisN'
p7315
I64
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7316
g60
(g99
S'@\x00\x00\x00'
tRp7317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7318
I0
sg6380
g7050
sS'block_loop.thisRepN'
p7319
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7320
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7321
Nsg70
Vy
sS'block_loop.thisTrialN'
p7322
I0
sg39
F0.7998929742789187
sg34
g753
(S'\x07\xdf\x07\x0f\x13-4\r\x81\x08'
tRp7323
sa(dp7324
S'trial_loop.thisTrialN'
p7325
I65
sg6371
g7166
sS'block_loop.thisIndex'
p7326
g6365
sg38
S'right'
p7327
sg59
g63
sS'trial_loop.thisN'
p7328
I65
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p7329
g60
(g99
S'A\x00\x00\x00'
tRp7330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7331
I0
sg6380
g7173
sS'block_loop.thisRepN'
p7332
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7333
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p7334
Nsg70
Vy
sS'block_loop.thisTrialN'
p7335
I0
sg39
F0.66704765239046537
sg34
g753
(S'\x07\xdf\x07\x0f\x13-:\n\xf8\x98'
tRp7336
sa(dp7337
S'trial_loop.thisTrialN'
p7338
I66
sg6371
g7043
sS'block_loop.thisIndex'
p7339
g6365
sg38
S'left'
p7340
sg59
g63
sS'trial_loop.thisN'
p7341
I66
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7342
g60
(g99
S'B\x00\x00\x00'
tRp7343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7344
I0
sg6380
g7050
sS'block_loop.thisRepN'
p7345
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7346
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7347
Nsg70
Vy
sS'block_loop.thisTrialN'
p7348
I0
sg39
F0.59973776702099713
sg34
g753
(S'\x07\xdf\x07\x0f\x13.\x04\x06MH'
tRp7349
sa(dp7350
S'trial_loop.thisTrialN'
p7351
I67
sg6371
g6631
sS'block_loop.thisIndex'
p7352
g6365
sg38
S'right'
p7353
sg59
g63
sS'trial_loop.thisN'
p7354
I67
sg33
g6642
sg64
g65
sS'trial_loop.thisIndex'
p7355
g60
(g99
S'C\x00\x00\x00'
tRp7356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7357
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7358
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7359
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7360
Nsg70
Vy
sS'block_loop.thisTrialN'
p7361
I0
sg39
F0.71653778344625607
sg34
g753
(S'\x07\xdf\x07\x0f\x13.\n\x00\xaf\xc8'
tRp7362
sa(dp7363
S'trial_loop.thisTrialN'
p7364
I68
sg6371
S'26-walkers_smoky_bacon.png'
p7365
sS'block_loop.thisIndex'
p7366
g6365
sg38
S'right'
p7367
sg59
g63
sS'trial_loop.thisN'
p7368
I68
sg33
S'44-crunch.png'
p7369
sg64
g65
sS'trial_loop.thisIndex'
p7370
g60
(g99
S'D\x00\x00\x00'
tRp7371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7372
I0
sg6380
S'44-crunch.png'
p7373
sS'block_loop.thisRepN'
p7374
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7375
I2
sg6385
S'26-walkers_smoky_bacon.png'
p7376
sg55
g11
sS'block_loop.thisTrial'
p7377
Nsg70
Vy
sS'block_loop.thisTrialN'
p7378
I0
sg39
F0.71668289823719533
sg34
g753
(S'\x07\xdf\x07\x0f\x13.\x0f\x0c8\xe8'
tRp7379
sa(dp7380
S'trial_loop.thisTrialN'
p7381
I69
sg6371
g6490
sS'block_loop.thisIndex'
p7382
g6365
sg38
S'right'
p7383
sg59
g63
sS'trial_loop.thisN'
p7384
I69
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7385
g60
(g99
S'E\x00\x00\x00'
tRp7386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7387
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7389
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vy
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.71650984385996708
sg34
g753
(S'\x07\xdf\x07\x0f\x13.\x15\x08\x83\xb0'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
g6569
sS'block_loop.thisIndex'
p7395
g6365
sg38
S'right'
p7396
sg59
g63
sS'trial_loop.thisN'
p7397
I70
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7398
g60
(g99
S'F\x00\x00\x00'
tRp7399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7400
I0
sg6380
g6576
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7402
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vy
sS'block_loop.thisTrialN'
p7404
I0
sg39
F0.66667588482960127
sg34
g753
(S'\x07\xdf\x07\x0f\x13.\x1b\x04\x8c\x10'
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
g6678
sS'block_loop.thisIndex'
p7408
g6365
sg38
S'left'
p7409
sg59
g63
sS'trial_loop.thisN'
p7410
I71
sg33
g6682
sg64
g65
sS'trial_loop.thisIndex'
p7411
g60
(g99
S'G\x00\x00\x00'
tRp7412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7413
I0
sg6380
g6686
sS'block_loop.thisRepN'
p7414
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7415
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7416
Nsg70
Vy
sS'block_loop.thisTrialN'
p7417
I0
sg39
F0.68321070325691835
sg34
g753
(S'\x07\xdf\x07\x0f\x13.!\x00\x1f@'
tRp7418
sa(dp7419
S'trial_loop.thisTrialN'
p7420
I72
sg6371
g6794
sS'block_loop.thisIndex'
p7421
g6365
sg38
S'right'
p7422
sg59
g63
sS'trial_loop.thisN'
p7423
I72
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7424
g60
(g99
S'H\x00\x00\x00'
tRp7425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7426
I0
sg6380
g6802
sS'block_loop.thisRepN'
p7427
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7428
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7429
Nsg70
Vy
sS'block_loop.thisTrialN'
p7430
I0
sg39
F0.58329047362713027
sg34
g753
(S'\x07\xdf\x07\x0f\x13.&\n\xf4\xb0'
tRp7431
sa(dp7432
S'trial_loop.thisTrialN'
p7433
I73
sg6371
g7194
sS'block_loop.thisIndex'
p7434
g6365
sg38
S'right'
p7435
sg59
g63
sS'trial_loop.thisN'
p7436
I73
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p7437
g60
(g99
S'I\x00\x00\x00'
tRp7438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7439
I0
sg6380
g7201
sS'block_loop.thisRepN'
p7440
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7441
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7442
Nsg70
Vy
sS'block_loop.thisTrialN'
p7443
I0
sg39
F0.58331214106146945
sg34
g753
(S'\x07\xdf\x07\x0f\x13.,\x05\x18\xb0'
tRp7444
sa(dp7445
S'trial_loop.thisTrialN'
p7446
I74
sg6371
S'38-maltesers.png'
p7447
sS'block_loop.thisIndex'
p7448
g6365
sg38
S'left'
p7449
sg59
g63
sS'trial_loop.thisN'
p7450
I74
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7451
g60
(g99
S'J\x00\x00\x00'
tRp7452
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7453
I0
sg6380
S'6-sour_patch_kids.png'
p7454
sS'block_loop.thisRepN'
p7455
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7456
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7457
Nsg70
Vy
sS'block_loop.thisTrialN'
p7458
I0
sg39
F0.68297863362749922
sg34
g753
(S'\x07\xdf\x07\x0f\x13.1\x0e~\xf0'
tRp7459
sa(dp7460
S'trial_loop.thisTrialN'
p7461
I75
sg6371
S'18-mms.png'
p7462
sS'block_loop.thisIndex'
p7463
g6365
sg38
S'left'
p7464
sg59
g63
sS'trial_loop.thisN'
p7465
I75
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7466
g60
(g99
S'K\x00\x00\x00'
tRp7467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7468
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7469
sS'block_loop.thisRepN'
p7470
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7471
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7472
Nsg70
Vy
sS'block_loop.thisTrialN'
p7473
I0
sg39
F0.66658037705929019
sg34
g753
(S'\x07\xdf\x07\x0f\x13.7\nL\xb8'
tRp7474
sa(dp7475
S'trial_loop.thisTrialN'
p7476
I76
sg6371
g6854
sS'block_loop.thisIndex'
p7477
g6365
sg38
S'left'
p7478
sg59
g63
sS'trial_loop.thisN'
p7479
I76
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p7480
g60
(g99
S'L\x00\x00\x00'
tRp7481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7482
I0
sg6380
g6862
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7484
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vy
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.66666191503463779
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x01\x05\xa1h'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6998
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'left'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g7005
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7497
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vy
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.66702855083713075
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x07\x00\xf6\x18'
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g6424
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'left'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7509
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7510
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vy
sS'block_loop.thisTrialN'
p7512
I0
sg39
F0.74991903221962275
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x0c\x0b\xcb\x88'
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g6854
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'left'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g6862
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7523
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vy
sS'block_loop.thisTrialN'
p7525
I0
sg39
F0.61663522987873876
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x12\x08P\xe8'
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g7043
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'left'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g7050
sS'block_loop.thisRepN'
p7535
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7536
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vy
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.68327570555993589
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x18\x03(\x98'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6738
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6745
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7549
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vy
sS'block_loop.thisTrialN'
p7551
I0
sg39
F0.73333774284765241
sg34
g753
(S'\x07\xdf\x07\x0f\x13/\x1d\r\xfe\x08'
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g6766
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'left'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g6773
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vy
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.51668192890429054
sg34
g753
(S'\x07\xdf\x07\x0f\x13/#\n\x83h'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6490
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'right'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vy
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.55033116963022621
sg34
g753
(S'\x07\xdf\x07\x0f\x13/)\x03v\xb8'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6631
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'right'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vy
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.73324537114967825
sg34
g753
(S'\x07\xdf\x07\x0f\x13/.\x0cc\xe0'
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
S'8-liquorice_catherine_wheels.png'
p7594
sS'block_loop.thisIndex'
p7595
g6365
sg38
S'right'
p7596
sg59
g63
sS'trial_loop.thisN'
p7597
I85
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p7598
g60
(g99
S'U\x00\x00\x00'
tRp7599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7600
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7601
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vy
sS'block_loop.thisTrialN'
p7605
I0
sg39
F0.75000342117346008
sg34
g753
(S'\x07\xdf\x07\x0f\x13/4\x08\xe9@'
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g6929
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'right'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6940
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g6937
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vy
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.81658801767844125
sg34
g753
(S'\x07\xdf\x07\x0f\x13/:\x05\xa98'
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g7013
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'right'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g7021
sS'block_loop.thisRepN'
p7628
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vy
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.61638263320855913
sg34
g753
(S'\x07\xdf\x07\x0f\x130\x04\x03_H'
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g6929
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'right'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6940
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g6937
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vy
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.54999446910005645
sg34
g753
(S'\x07\xdf\x07\x0f\x130\t\rB\x88'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g6871
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'right'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g6878
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vy
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.46701076073441072
sg34
g753
(S'\x07\xdf\x07\x0f\x130\x0f\x06\xe9\x88'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g6409
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'right'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g6416
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vy
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.78329258334997576
sg34
g753
(S'\x07\xdf\x07\x0f\x130\x14\x0ekh'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g6552
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'left'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6563
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g6560
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vy
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.63329606154366047
sg34
g753
(S'\x07\xdf\x07\x0f\x130\x1a\x0b\xa4x'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
g6424
sS'block_loop.thisIndex'
p7687
g6365
sg38
S'left'
p7688
sg59
g63
sS'trial_loop.thisN'
p7689
I92
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7690
g60
(g99
S'\\\x00\x00\x00'
tRp7691
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7692
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7694
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vy
sS'block_loop.thisTrialN'
p7696
I0
sg39
F0.66668329737512977
sg34
g753
(S'\x07\xdf\x07\x0f\x130 \x06\x80\x10'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
g6794
sS'block_loop.thisIndex'
p7700
g6365
sg38
S'right'
p7701
sg59
g63
sS'trial_loop.thisN'
p7702
I93
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p7703
g60
(g99
S']\x00\x00\x00'
tRp7704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7705
I0
sg6380
g6802
sS'block_loop.thisRepN'
p7706
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7707
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p7708
Nsg70
Vy
sS'block_loop.thisTrialN'
p7709
I0
sg39
F0.61670137257533497
sg34
g753
(S'\x07\xdf\x07\x0f\x130&\x02\x13@'
tRp7710
sa(dp7711
S'trial_loop.thisTrialN'
p7712
I94
sg6371
g6678
sS'block_loop.thisIndex'
p7713
g6365
sg38
S'left'
p7714
sg59
g63
sS'trial_loop.thisN'
p7715
I94
sg33
g6682
sg64
g65
sS'trial_loop.thisIndex'
p7716
g60
(g99
S'^\x00\x00\x00'
tRp7717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7718
I0
sg6380
g6686
sS'block_loop.thisRepN'
p7719
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7720
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p7721
Nsg70
Vy
sS'block_loop.thisTrialN'
p7722
I0
sg39
F1.0832089356517827
sg34
g753
(S'\x07\xdf\x07\x0f\x130+\x0b\xf2\x98'
tRp7723
sa(dp7724
S'trial_loop.thisTrialN'
p7725
I95
sg6371
S'44-crunch.png'
p7726
sS'block_loop.thisIndex'
p7727
g6365
sg38
S'left'
p7728
sg59
g63
sS'trial_loop.thisN'
p7729
I95
sg33
g7376
sg64
g65
sS'trial_loop.thisIndex'
p7730
g60
(g99
S'_\x00\x00\x00'
tRp7731
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7732
I0
sg6380
S'26-walkers_smoky_bacon.png'
p7733
sS'block_loop.thisRepN'
p7734
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vy
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.66700004105587141
sg34
g753
(S'\x07\xdf\x07\x0f\x1301\r\xb3\xd0'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g6458
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'left'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vy
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.56668580623227172
sg34
g753
(S'\x07\xdf\x07\x0f\x1307\t\x08\x80'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6490
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'right'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vy
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.76666909949926776
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x01\x02\xf1\xe8'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g7594
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'right'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6910
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g7601
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vy
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.71665068218135275
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x06\x0f2\xa0'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6441
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'left'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vy
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.61662154518489842
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x0c\x0by\x80'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6458
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vy
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.51668249909926089
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x12\x06\x1a\x80'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6661
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6669
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vy
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.78367119325776002
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x17\x0e\x8a\xa8'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6584
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'right'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6592
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vy
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.79999817537100171
sg34
g753
(S'\x07\xdf\x07\x0f\x131\x1d\x0b\xc7\xa0'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6475
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'right'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6482
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vy
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.54993146248307312
sg34
g753
(S'\x07\xdf\x07\x0f\x131#\t?0'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g7013
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g7024
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g7021
sS'block_loop.thisRepN'
p7851
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vy
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.74975652646025992
sg34
g753
(S'\x07\xdf\x07\x0f\x131)\x02\xaf\x80'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7726
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'left'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7733
sS'block_loop.thisRepN'
p7864
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vy
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.78335986644015065
sg34
g753
(S'\x07\xdf\x07\x0f\x131.\x0e\xb1\xb8'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6614
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'left'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6622
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vy
sS'block_loop.thisTrialN'
p7880
I0
sg39
F1.0499534150148975
sg34
g753
(S'\x07\xdf\x07\x0f\x1314\x0b\xee\xb0'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6458
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'left'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6466
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vy
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.63368921144137857
sg34
g753
(S'\x07\xdf\x07\x0f\x131:\r6\xd0'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6584
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6592
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vy
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.71670342527795583
sg34
g753
(S'\x07\xdf\x07\x0f\x132\x04\x08\x12h'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6899
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'left'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6907
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vy
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.79990152721074992
sg34
g753
(S'\x07\xdf\x07\x0f\x132\n\x04YH'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6424
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'left'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6432
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vy
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.63365813577911467
sg34
g753
(S'\x07\xdf\x07\x0f\x132\x10\x01\xd4\xc0'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g6708
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'right'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vy
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.81668124466887093
sg34
g753
(S'\x07\xdf\x07\x0f\x132\x15\x0b\xee\xb0'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6409
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'right'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6416
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7956
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vy
sS'block_loop.thisTrialN'
p7958
I0
sg39
F0.84998979349984438
sg34
g753
(S'\x07\xdf\x07\x0f\x132\x1b\t\xa4\xc0'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6708
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'right'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7969
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vy
sS'block_loop.thisTrialN'
p7971
I0
sg39
F0.65002047002417385
sg34
g753
(S'\x07\xdf\x07\x0f\x132!\x07\xd7\xd0'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g6631
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'right'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g6639
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7982
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vy
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.71666294139140518
sg34
g753
(S"\x07\xdf\x07\x0f\x132'\x02\xee\x00"
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g7594
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'right'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g7601
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7995
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vy
sS'block_loop.thisTrialN'
p7997
I0
sg39
F0.60004025581292808
sg34
g753
(S'\x07\xdf\x07\x0f\x132,\x0ew '
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
g6998
sS'block_loop.thisIndex'
p8001
g6365
sg38
S'left'
p8002
sg59
g63
sS'trial_loop.thisN'
p8003
I116
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8004
g60
(g99
S't\x00\x00\x00'
tRp8005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8006
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8007
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8008
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8009
Nsg70
Vy
sS'block_loop.thisTrialN'
p8010
I0
sg39
F0.88329149998025969
sg34
g753
(S'\x07\xdf\x07\x0f\x1322\x08\xd9\xa0'
tRp8011
sa(dp8012
S'trial_loop.thisTrialN'
p8013
I117
sg6371
g6569
sS'block_loop.thisIndex'
p8014
g6365
sg38
S'right'
p8015
sg59
g63
sS'trial_loop.thisN'
p8016
I117
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8017
g60
(g99
S'u\x00\x00\x00'
tRp8018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8019
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8020
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8021
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8022
Nsg70
Vy
sS'block_loop.thisTrialN'
p8023
I0
sg39
F0.5500152812419401
sg34
g753
(S'\x07\xdf\x07\x0f\x1328\x07\x85\xc8'
tRp8024
sa(dp8025
S'trial_loop.thisTrialN'
p8026
I118
sg6371
g6826
sS'block_loop.thisIndex'
p8027
g6365
sg38
S'left'
p8028
sg59
g63
sS'trial_loop.thisN'
p8029
I118
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8030
g60
(g99
S'v\x00\x00\x00'
tRp8031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8032
I0
sg6380
g6833
sS'block_loop.thisRepN'
p8033
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8034
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8035
Nsg70
Vy
sS'block_loop.thisTrialN'
p8036
I0
sg39
F0.99998118354415055
sg34
g753
(S'\x07\xdf\x07\x0f\x133\x02\x01,\xc8'
tRp8037
sa(dp8038
S'trial_loop.thisTrialN'
p8039
I119
sg6371
g6424
sS'block_loop.thisIndex'
p8040
g6365
sg38
S'left'
p8041
sg59
g63
sS'trial_loop.thisN'
p8042
I119
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p8043
g60
(g99
S'w\x00\x00\x00'
tRp8044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8045
I0
sg6380
g6432
sS'block_loop.thisRepN'
p8046
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8047
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8048
Nsg70
Vy
sS'block_loop.thisTrialN'
p8049
I0
sg39
F0.61702096723456634
sg34
g753
(S'\x07\xdf\x07\x0f\x133\x08\x01\xc18'
tRp8050
sa(dp8051
S'trial_loop.thisTrialN'
p8052
I120
sg6371
g6678
sS'block_loop.thisIndex'
p8053
g6365
sg38
S'left'
p8054
sg59
g63
sS'trial_loop.thisN'
p8055
I120
sg33
g6688
sg64
g65
sS'trial_loop.thisIndex'
p8056
g60
(g99
S'x\x00\x00\x00'
tRp8057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8058
I0
sg6380
g6686
sS'block_loop.thisRepN'
p8059
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8060
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8061
Nsg70
Vy
sS'block_loop.thisTrialN'
p8062
I0
sg39
F0.64988590385110001
sg34
g753
(S'\x07\xdf\x07\x0f\x133\r\x0b\xa0\x90'
tRp8063
sa(dp8064
S'trial_loop.thisTrialN'
p8065
I121
sg6371
g7123
sS'block_loop.thisIndex'
p8066
g6365
sg38
S'left'
p8067
sg59
g63
sS'trial_loop.thisN'
p8068
I121
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8069
g60
(g99
S'y\x00\x00\x00'
tRp8070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8071
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8072
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8073
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8074
Nsg70
Vy
sS'block_loop.thisTrialN'
p8075
I0
sg39
F0.63330946114365361
sg34
g753
(S'\x07\xdf\x07\x0f\x133\x13\x06\xf5@'
tRp8076
sa(dp8077
S'trial_loop.thisTrialN'
p8078
I122
sg6371
g6794
sS'block_loop.thisIndex'
p8079
g6365
sg38
S'right'
p8080
sg59
g63
sS'trial_loop.thisN'
p8081
I122
sg33
g6805
sg64
g65
sS'trial_loop.thisIndex'
p8082
g60
(g99
S'z\x00\x00\x00'
tRp8083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8084
I0
sg6380
g6802
sS'block_loop.thisRepN'
p8085
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8086
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p8087
Nsg70
Vy
sS'block_loop.thisTrialN'
p8088
I0
sg39
F0.66667502953350777
sg34
g753
(S'\x07\xdf\x07\x0f\x133\x19\x01\xd0\xd8'
tRp8089
sa(dp8090
S'trial_loop.thisTrialN'
p8091
I123
sg6371
g7013
sS'block_loop.thisIndex'
p8092
g6365
sg38
S'right'
p8093
sg59
g63
sS'trial_loop.thisN'
p8094
I123
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8095
g60
(g99
S'{\x00\x00\x00'
tRp8096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8097
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8098
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8099
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8100
Nsg70
Vy
sS'block_loop.thisTrialN'
p8101
I0
sg39
F0.69969819544712664
sg34
g753
(S'\x07\xdf\x07\x0f\x133\x1e\x0cg\xc8'
tRp8102
sa(dp8103
S'trial_loop.thisTrialN'
p8104
I124
sg6371
g6811
sS'block_loop.thisIndex'
p8105
g6365
sg38
S'right'
p8106
sg59
g63
sS'trial_loop.thisN'
p8107
I124
sg33
g6682
sg64
g65
sS'trial_loop.thisIndex'
p8108
g60
(g99
S'|\x00\x00\x00'
tRp8109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8110
I0
sg6380
g6818
sS'block_loop.thisRepN'
p8111
I2
sg6383
g6688
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8112
I2
sg6385
g6682
sg55
g11
sS'block_loop.thisTrial'
p8113
Nsg70
Vy
sS'block_loop.thisTrialN'
p8114
I0
sg39
F0.71646850467368495
sg34
g753
(S'\x07\xdf\x07\x0f\x133$\x08p('
tRp8115
sa(dp8116
S'trial_loop.thisTrialN'
p8117
I125
sg6371
g6505
sS'block_loop.thisIndex'
p8118
g6365
sg38
S'right'
p8119
sg59
g63
sS'trial_loop.thisN'
p8120
I125
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8121
g60
(g99
S'}\x00\x00\x00'
tRp8122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8123
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8124
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8125
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8126
Nsg70
Vy
sS'block_loop.thisTrialN'
p8127
I0
sg39
F0.73354044739608071
sg34
g753
(S'\x07\xdf\x07\x0f\x133*\x04|p'
tRp8128
sa(dp8129
S'trial_loop.thisTrialN'
p8130
I126
sg6371
g6372
sS'block_loop.thisIndex'
p8131
g6365
sg38
S'left'
p8132
sg59
g63
sS'trial_loop.thisN'
p8133
I126
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8134
g60
(g99
S'~\x00\x00\x00'
tRp8135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8136
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8137
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8138
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8139
Nsg70
Vy
sS'block_loop.thisTrialN'
p8140
I0
sg39
F0.78327490728406701
sg34
g753
(S'\x07\xdf\x07\x0f\x1330\x01\x01\xd0'
tRp8141
sa(dp8142
S'trial_loop.thisTrialN'
p8143
I127
sg6371
g7138
sS'block_loop.thisIndex'
p8144
g6365
sg38
S'left'
p8145
sg59
g63
sS'trial_loop.thisN'
p8146
I127
sg33
g6642
sg64
g65
sS'trial_loop.thisIndex'
p8147
g60
(g99
S'\x7f\x00\x00\x00'
tRp8148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8149
I0
sg6380
g7145
sS'block_loop.thisRepN'
p8150
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8151
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8152
Nsg70
Vy
sS'block_loop.thisTrialN'
p8153
I0
sg39
F0.71661989161657402
sg34
g753
(S'\x07\xdf\x07\x0f\x1335\r\x81\x08'
tRp8154
sa(dp8155
S'trial_loop.thisTrialN'
p8156
I128
sg6371
g7166
sS'block_loop.thisIndex'
p8157
g6365
sg38
S'right'
p8158
sg59
g63
sS'trial_loop.thisN'
p8159
I128
sg33
g6865
sg64
g65
sS'trial_loop.thisIndex'
p8160
g60
(g99
S'\x80\x00\x00\x00'
tRp8161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8162
I0
sg6380
g7173
sS'block_loop.thisRepN'
p8163
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8164
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p8165
Nsg70
Vy
sS'block_loop.thisTrialN'
p8166
I0
sg39
F0.6498000894098368
sg34
g753
(S'\x07\xdf\x07\x0f\x133;\t\x8dP'
tRp8167
sa(dp8168
S'trial_loop.thisTrialN'
p8169
I129
sg6371
g6826
sS'block_loop.thisIndex'
p8170
g6365
sg38
S'left'
p8171
sg59
g63
sS'trial_loop.thisN'
p8172
I129
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8173
g60
(g99
S'\x81\x00\x00\x00'
tRp8174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8175
I0
sg6380
g6833
sS'block_loop.thisRepN'
p8176
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8177
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8178
Nsg70
Vy
sS'block_loop.thisTrialN'
p8179
I0
sg39
F0.74999857451257412
sg34
g753
(S'\x07\xdf\x07\x0f\x134\x05\x04\xe2\x00'
tRp8180
sa(dp8181
S'trial_loop.thisTrialN'
p8182
I130
sg6371
g7138
sS'block_loop.thisIndex'
p8183
g6365
sg38
S'left'
p8184
sg59
g63
sS'trial_loop.thisN'
p8185
I130
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8186
g60
(g99
S'\x82\x00\x00\x00'
tRp8187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8188
I0
sg6380
g7145
sS'block_loop.thisRepN'
p8189
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8190
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8191
Nsg70
Vy
sS'block_loop.thisTrialN'
p8192
I0
sg39
F0.63331174192353501
sg34
g753
(S'\x07\xdf\x07\x0f\x134\x0b\x01g`'
tRp8193
sa(dp8194
S'trial_loop.thisTrialN'
p8195
I131
sg6371
g6505
sS'block_loop.thisIndex'
p8196
g6365
sg38
S'right'
p8197
sg59
g63
sS'trial_loop.thisN'
p8198
I131
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8199
g60
(g99
S'\x83\x00\x00\x00'
tRp8200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8201
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8202
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8203
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8204
Nsg70
Vy
sS'block_loop.thisTrialN'
p8205
I0
sg39
F0.6836848209350137
sg34
g753
(S'\x07\xdf\x07\x0f\x134\x10\x0b\xbf\xd0'
tRp8206
sa(dp8207
S'trial_loop.thisTrialN'
p8208
I132
sg6371
g6708
sS'block_loop.thisIndex'
p8209
g6365
sg38
S'right'
p8210
sg59
g63
sS'trial_loop.thisN'
p8211
I132
sg33
g6719
sg64
g65
sS'trial_loop.thisIndex'
p8212
g60
(g99
S'\x84\x00\x00\x00'
tRp8213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8214
I0
sg6380
g6716
sS'block_loop.thisRepN'
p8215
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8216
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8217
Nsg70
Vy
sS'block_loop.thisTrialN'
p8218
I0
sg39
F0.80001699183048913
sg34
g753
(S'\x07\xdf\x07\x0f\x134\x16\x07S\x00'
tRp8219
sa(dp8220
S'trial_loop.thisTrialN'
p8221
I133
sg6371
g7594
sS'block_loop.thisIndex'
p8222
g6365
sg38
S'right'
p8223
sg59
g63
sS'trial_loop.thisN'
p8224
I133
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p8225
g60
(g99
S'\x85\x00\x00\x00'
tRp8226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8227
I0
sg6380
g7601
sS'block_loop.thisRepN'
p8228
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8229
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p8230
Nsg70
Vy
sS'block_loop.thisTrialN'
p8231
I0
sg39
F0.78326806494078483
sg34
g753
(S'\x07\xdf\x07\x0f\x134\x1c\x04\xca\x90'
tRp8232
sa(dp8233
S'trial_loop.thisTrialN'
p8234
I134
sg6371
g7138
sS'block_loop.thisIndex'
p8235
g6365
sg38
S'left'
p8236
sg59
g63
sS'trial_loop.thisN'
p8237
I134
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8238
g60
(g99
S'\x86\x00\x00\x00'
tRp8239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8240
I0
sg6380
g7145
sS'block_loop.thisRepN'
p8241
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8242
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8243
Nsg70
Vy
sS'block_loop.thisTrialN'
p8244
I0
sg39
F1.0666421862661082
sg34
g753
(S'\x07\xdf\x07\x0f\x134"\x02\x07\x88'
tRp8245
sa(dp8246
S'trial_loop.thisTrialN'
p8247
I135
sg6371
g6569
sS'block_loop.thisIndex'
p8248
g6365
sg38
S'right'
p8249
sg59
g63
sS'trial_loop.thisN'
p8250
I135
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8251
g60
(g99
S'\x87\x00\x00\x00'
tRp8252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8253
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8254
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8255
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8256
Nsg70
Vy
sS'block_loop.thisTrialN'
p8257
I0
sg39
F0.6165608193477965
sg34
g753
(S'\x07\xdf\x07\x0f\x134(\x03\x8e('
tRp8258
sa(dp8259
S'trial_loop.thisTrialN'
p8260
I136
sg6371
g6584
sS'block_loop.thisIndex'
p8261
g6365
sg38
S'right'
p8262
sg59
g63
sS'trial_loop.thisN'
p8263
I136
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8264
g60
(g99
S'\x88\x00\x00\x00'
tRp8265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8266
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8267
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8268
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8269
Nsg70
Vy
sS'block_loop.thisTrialN'
p8270
I0
sg39
F0.86651662918666261
sg34
g753
(S'\x07\xdf\x07\x0f\x134-\rm\x80'
tRp8271
sa(dp8272
S'trial_loop.thisTrialN'
p8273
I137
sg6371
g6738
sS'block_loop.thisIndex'
p8274
g6365
sg38
S'right'
p8275
sg59
g63
sS'trial_loop.thisN'
p8276
I137
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p8277
g60
(g99
S'\x89\x00\x00\x00'
tRp8278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8279
I0
sg6380
g6745
sS'block_loop.thisRepN'
p8280
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8281
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8282
Nsg70
Vy
sS'block_loop.thisTrialN'
p8283
I0
sg39
F0.86667086710804142
sg34
g753
(S'\x07\xdf\x07\x0f\x1343\x0b\xdb('
tRp8284
sa(dp8285
S'trial_loop.thisTrialN'
p8286
I138
sg6371
g6854
sS'block_loop.thisIndex'
p8287
g6365
sg38
S'left'
p8288
sg59
g63
sS'trial_loop.thisN'
p8289
I138
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p8290
g60
(g99
S'\x8a\x00\x00\x00'
tRp8291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8292
I0
sg6380
g6862
sS'block_loop.thisRepN'
p8293
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8294
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p8295
Nsg70
Vy
sS'block_loop.thisTrialN'
p8296
I0
sg39
F0.63336990188327036
sg34
g753
(S'\x07\xdf\x07\x0f\x1349\n\x83h'
tRp8297
sa(dp8298
S'trial_loop.thisTrialN'
p8299
I139
sg6371
g7462
sS'block_loop.thisIndex'
p8300
g6365
sg38
S'left'
p8301
sg59
g63
sS'trial_loop.thisN'
p8302
I139
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8303
g60
(g99
S'\x8b\x00\x00\x00'
tRp8304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8305
I0
sg6380
g7469
sS'block_loop.thisRepN'
p8306
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8307
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8308
Nsg70
Vy
sS'block_loop.thisTrialN'
p8309
I0
sg39
F0.80002212359249825
sg34
g753
(S'\x07\xdf\x07\x0f\x135\x03\x05_\x00'
tRp8310
sa(dp8311
S'trial_loop.thisTrialN'
p8312
I140
sg6371
g7365
sS'block_loop.thisIndex'
p8313
g6365
sg38
S'right'
p8314
sg59
g63
sS'trial_loop.thisN'
p8315
I140
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p8316
g60
(g99
S'\x8c\x00\x00\x00'
tRp8317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8318
I0
sg6380
g7373
sS'block_loop.thisRepN'
p8319
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8320
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8321
Nsg70
Vy
sS'block_loop.thisTrialN'
p8322
I0
sg39
F0.78327918374998262
sg34
g753
(S'\x07\xdf\x07\x0f\x135\t\x02\xd6\x90'
tRp8323
sa(dp8324
S'trial_loop.thisTrialN'
p8325
I141
sg6371
g6766
sS'block_loop.thisIndex'
p8326
g6365
sg38
S'left'
p8327
sg59
g63
sS'trial_loop.thisN'
p8328
I141
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8329
g60
(g99
S'\x8d\x00\x00\x00'
tRp8330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8331
I0
sg6380
g6773
sS'block_loop.thisRepN'
p8332
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8333
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8334
Nsg70
Vy
sS'block_loop.thisTrialN'
p8335
I0
sg39
F0.64989901835360797
sg34
g753
(S'\x07\xdf\x07\x0f\x135\x0f\x00\x13\x88'
tRp8336
sa(dp8337
S'trial_loop.thisTrialN'
p8338
I142
sg6371
g6631
sS'block_loop.thisIndex'
p8339
g6365
sg38
S'right'
p8340
sg59
g63
sS'trial_loop.thisN'
p8341
I142
sg33
g6635
sg64
g65
sS'trial_loop.thisIndex'
p8342
g60
(g99
S'\x8e\x00\x00\x00'
tRp8343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8344
I0
sg6380
g6639
sS'block_loop.thisRepN'
p8345
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8346
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8347
Nsg70
Vy
sS'block_loop.thisTrialN'
p8348
I0
sg39
F0.68333557610458229
sg34
g753
(S'\x07\xdf\x07\x0f\x135\x14\no\xe0'
tRp8349
sa(dp8350
S'trial_loop.thisTrialN'
p8351
I143
sg6371
g6899
sS'block_loop.thisIndex'
p8352
g6365
sg38
S'left'
p8353
sg59
g63
sS'trial_loop.thisN'
p8354
I143
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p8355
g60
(g99
S'\x8f\x00\x00\x00'
tRp8356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8357
I0
sg6380
g6907
sS'block_loop.thisRepN'
p8358
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8359
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p8360
Nsg70
Vy
sS'block_loop.thisTrialN'
p8361
I0
sg39
F0.69996818308209185
sg34
g753
(S'\x07\xdf\x07\x0f\x135\x1a\x05\xff('
tRp8362
sa(dp8363
S'trial_loop.thisTrialN'
p8364
I144
sg6371
g7365
sS'block_loop.thisIndex'
p8365
g6365
sg38
S'right'
p8366
sg59
g63
sS'trial_loop.thisN'
p8367
I144
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p8368
g60
(g99
S'\x90\x00\x00\x00'
tRp8369
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8370
I0
sg6380
g7373
sS'block_loop.thisRepN'
p8371
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8372
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8373
Nsg70
Vy
sS'block_loop.thisTrialN'
p8374
I0
sg39
F0.54999760517966934
sg34
g753
(S'\x07\xdf\x07\x0f\x135 \x02\x0bp'
tRp8375
sa(dp8376
S'trial_loop.thisTrialN'
p8377
I145
sg6371
g6522
sS'block_loop.thisIndex'
p8378
g6365
sg38
S'right'
p8379
sg59
g63
sS'trial_loop.thisN'
p8380
I145
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8381
g60
(g99
S'\x91\x00\x00\x00'
tRp8382
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8383
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8384
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8385
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8386
Nsg70
Vy
sS'block_loop.thisTrialN'
p8387
I0
sg39
F0.63330005291572888
sg34
g753
(S'\x07\xdf\x07\x0f\x135%\n\xf8\x98'
tRp8388
sa(dp8389
S'trial_loop.thisTrialN'
p8390
I146
sg6371
g7447
sS'block_loop.thisIndex'
p8391
g6365
sg38
S'left'
p8392
sg59
g63
sS'trial_loop.thisN'
p8393
I146
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8394
g60
(g99
S'\x92\x00\x00\x00'
tRp8395
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8396
I0
sg6380
g7454
sS'block_loop.thisRepN'
p8397
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8398
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8399
Nsg70
Vy
sS'block_loop.thisTrialN'
p8400
I0
sg39
F0.79971849441062659
sg34
g753
(S'\x07\xdf\x07\x0f\x135+\x05\xd40'
tRp8401
sa(dp8402
S'trial_loop.thisTrialN'
p8403
I147
sg6371
g6552
sS'block_loop.thisIndex'
p8404
g6365
sg38
S'left'
p8405
sg59
g63
sS'trial_loop.thisN'
p8406
I147
sg33
g6563
sg64
g65
sS'trial_loop.thisIndex'
p8407
g60
(g99
S'\x93\x00\x00\x00'
tRp8408
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8409
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8410
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8411
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8412
Nsg70
Vy
sS'block_loop.thisTrialN'
p8413
I0
sg39
F0.68333443571100361
sg34
g753
(S'\x07\xdf\x07\x0f\x1351\x03K\xc0'
tRp8414
sa(dp8415
S'trial_loop.thisTrialN'
p8416
I148
sg6371
g6522
sS'block_loop.thisIndex'
p8417
g6365
sg38
S'right'
p8418
sg59
g63
sS'trial_loop.thisN'
p8419
I148
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8420
g60
(g99
S'\x94\x00\x00\x00'
tRp8421
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8422
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8423
I2
sg6383
g6532
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8424
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8425
Nsg70
Vy
sS'block_loop.thisTrialN'
p8426
I0
sg39
F0.61643908257610747
sg34
g753
(S'\x07\xdf\x07\x0f\x1356\x0e!0'
tRp8427
sa(dp8428
S'trial_loop.thisTrialN'
p8429
I149
sg6371
g7365
sS'block_loop.thisIndex'
p8430
g6365
sg38
S'right'
p8431
sg59
g63
sS'trial_loop.thisN'
p8432
I149
sg33
g7376
sg64
g65
sS'trial_loop.thisIndex'
p8433
g60
(g99
S'\x95\x00\x00\x00'
tRp8434
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8435
I0
sg6380
g7373
sS'block_loop.thisRepN'
p8436
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8437
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8438
Nsg70
Vy
sS'block_loop.thisTrialN'
p8439
I0
sg39
F0.53323442339751637
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x00\x08\xf8\xe0'
tRp8440
sa(dp8441
S'trial_loop.thisTrialN'
p8442
I150
sg6371
g7447
sS'block_loop.thisIndex'
p8443
g6365
sg38
S'left'
p8444
sg59
g63
sS'trial_loop.thisN'
p8445
I150
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8446
g60
(g99
S'\x96\x00\x00\x00'
tRp8447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8448
I0
sg6380
g7454
sS'block_loop.thisRepN'
p8449
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8450
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8451
Nsg70
Vy
sS'block_loop.thisTrialN'
p8452
I0
sg39
F0.53310128271186841
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x06\x02*\xb0'
tRp8453
sa(dp8454
S'trial_loop.thisTrialN'
p8455
I151
sg6371
g6409
sS'block_loop.thisIndex'
p8456
g6365
sg38
S'right'
p8457
sg59
g63
sS'trial_loop.thisN'
p8458
I151
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8459
g60
(g99
S'\x97\x00\x00\x00'
tRp8460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8461
I0
sg6380
g6416
sS'block_loop.thisRepN'
p8462
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8463
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8464
Nsg70
Vy
sS'block_loop.thisTrialN'
p8465
I0
sg39
F0.73332747932363418
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x0b\n\xd9X'
tRp8466
sa(dp8467
S'trial_loop.thisTrialN'
p8468
I152
sg6371
g7462
sS'block_loop.thisIndex'
p8469
g6365
sg38
S'left'
p8470
sg59
g63
sS'trial_loop.thisN'
p8471
I152
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8472
g60
(g99
S'\x98\x00\x00\x00'
tRp8473
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8474
I0
sg6380
g7469
sS'block_loop.thisRepN'
p8475
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8476
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8477
Nsg70
Vy
sS'block_loop.thisTrialN'
p8478
I0
sg39
F0.56668894230824662
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x11\x07^\xb8'
tRp8479
sa(dp8480
S'trial_loop.thisTrialN'
p8481
I153
sg6371
g7726
sS'block_loop.thisIndex'
p8482
g6365
sg38
S'left'
p8483
sg59
g63
sS'trial_loop.thisN'
p8484
I153
sg33
g7376
sg64
g65
sS'trial_loop.thisIndex'
p8485
g60
(g99
S'\x99\x00\x00\x00'
tRp8486
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8487
I0
sg6380
g7733
sS'block_loop.thisRepN'
p8488
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8489
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8490
Nsg70
Vy
sS'block_loop.thisTrialN'
p8491
I0
sg39
F0.73339704319369048
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x17\x01H '
tRp8492
sa(dp8493
S'trial_loop.thisTrialN'
p8494
I154
sg6371
g6614
sS'block_loop.thisIndex'
p8495
g6365
sg38
S'left'
p8496
sg59
g63
sS'trial_loop.thisN'
p8497
I154
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8498
g60
(g99
S'\x9a\x00\x00\x00'
tRp8499
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8500
I0
sg6380
g6622
sS'block_loop.thisRepN'
p8501
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8502
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8503
Nsg70
Vy
sS'block_loop.thisTrialN'
p8504
I0
sg39
F0.74997633687962661
sg34
g753
(S'\x07\xdf\x07\x0f\x136\x1c\x0c\xd1@'
tRp8505
sa(dp8506
S'trial_loop.thisTrialN'
p8507
I155
sg6371
g7043
sS'block_loop.thisIndex'
p8508
g6365
sg38
S'left'
p8509
sg59
g63
sS'trial_loop.thisN'
p8510
I155
sg33
g6805
sg64
g65
sS'trial_loop.thisIndex'
p8511
g60
(g99
S'\x9b\x00\x00\x00'
tRp8512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8513
I0
sg6380
g7050
sS'block_loop.thisRepN'
p8514
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8515
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p8516
Nsg70
Vy
sS'block_loop.thisTrialN'
p8517
I0
sg39
F0.65001476806719438
sg34
g753
(S'\x07\xdf\x07\x0f\x136"\t\x95 '
tRp8518
sa(dp8519
S'trial_loop.thisTrialN'
p8520
I156
sg6371
S'21-nakd_banana_crunch.png'
p8521
sS'block_loop.thisIndex'
p8522
g6365
sg38
S'right'
p8523
sg59
g63
sS'trial_loop.thisN'
p8524
I156
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p8525
g60
(g99
S'\x9c\x00\x00\x00'
tRp8526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8527
I0
sg6380
S'1-treacle_cookies.png'
p8528
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.70002776852925308
sg34
g753
(S'\x07\xdf\x07\x0f\x136(\x04\xabP'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7462
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7469
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.85004624286739272
sg34
g753
(S'\x07\xdf\x07\x0f\x136.\x00\xb7\x98'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7194
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.60000518878223374
sg34
g753
(S'\x07\xdf\x07\x0f\x1363\x0e)\x00'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6475
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6482
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.55001955771149369
sg34
g753
(S'\x07\xdf\x07\x0f\x1369\x08\x8b\x80'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7013
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8581
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.54978492220107
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x03\x026h'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g7365
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g7373
sS'block_loop.thisRepN'
p8594
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.66703510808656574
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x08\x0b\x1f\xa8'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g7594
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6903
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g7601
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6903
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6910
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.61666003338905284
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x0e\x06tX'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6794
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6798
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6802
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6798
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6805
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.73335028715155204
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x14\x01O\xf0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6708
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6716
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.53333620331613929
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x19\x0c\xdc\xf8'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g8521
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6435
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g8528
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.58332468536536908
sg34
g753
(S'\x07\xdf\x07\x0f\x137\x1f\x06I`'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6738
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6745
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.79974842967931181
sg34
g753
(S'\x07\xdf\x07\x0f\x137%\x00m`'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7194
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.60036241634952603
sg34
g753
(S"\x07\xdf\x07\x0f\x137*\r'0"
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6441
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6449
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6445
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.79991378642080235
sg34
g753
(S'\x07\xdf\x07\x0f\x1370\x07\x89\xb0'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6929
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6937
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.91659263626570464
sg34
g753
(S'\x07\xdf\x07\x0f\x1376\x05\x01@'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7447
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7454
sS'block_loop.thisRepN'
p8711
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.68307898806233425
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x00\x04a\x18'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6505
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.86668569219546043
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x05\x0f6\x88'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6998
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6940
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.78326892023324035
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x0b\r\xa40'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7462
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'left'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7469
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6712
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6719
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.4165857939187845
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x11\n\xe1('
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6552
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6560
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.81657547337454162
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x18\x02\x9b\xf8'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g7123
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g7130
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.79993060719061759
sg34
g753
(S'\x07\xdf\x07\x0f\x138\x1e\x00\x13\x88'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6871
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6878
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.79998021421124577
sg34
g753
(S'\x07\xdf\x07\x0f\x138#\x0c\xd1@'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6826
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6833
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.66649627319930005
sg34
g753
(S'\x07\xdf\x07\x0f\x138)\nH\xd0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6490
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.58374406426446512
sg34
g753
(S'\x07\xdf\x07\x0f\x138/\x05\xdc\x00'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7194
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7201
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.86659103971760487
sg34
g753
(S'\x07\xdf\x07\x0f\x1385\x00\x00\x00'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7726
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7733
sS'block_loop.thisRepN'
p8841
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.63330261879673344
sg34
g753
(S'\x07\xdf\x07\x0f\x138:\r\xaf\xe8'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6569
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6462
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6576
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6462
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6469
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.60001602249758434
sg34
g753
(S'\x07\xdf\x07\x0f\x139\x04\x08\x8b\x80'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6661
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6672
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6669
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.8666315236077935
sg34
g753
(S'\x07\xdf\x07\x0f\x139\n\x02\xea\x18'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6392
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.56668979760434013
sg34
g753
(S'\x07\xdf\x07\x0f\x139\x10\x01W\xc0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6998
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'left'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6933
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7005
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6933
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6940
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.78374674418228096
sg34
g753
(S'\x07\xdf\x07\x0f\x139\x15\n\x7f\x80'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6505
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.83328961833467474
sg34
g753
(S'\x07\xdf\x07\x0f\x139\x1b\x07\xbcx'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g8521
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6435
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g8528
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.69993881800837698
sg34
g753
(S'\x07\xdf\x07\x0f\x139!\x05\xb1\x08'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7138
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6642
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7145
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6635
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6642
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.81668523604093934
sg34
g753
(S"\x07\xdf\x07\x0f\x139'\x01\xbdP"
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6738
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6624
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6745
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6624
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.76664771716241376
sg34
g753
(S'\x07\xdf\x07\x0f\x139,\x0e\xb5\xa0'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g8521
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g8528
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.65001533826580271
sg34
g753
(S'\x07\xdf\x07\x0f\x1392\x0b\xb4\x18'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6661
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6665
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6669
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6665
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6672
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.71701703288272256
sg34
g753
(S'\x07\xdf\x07\x0f\x1398\x06\xcaH'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7726
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g7369
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7733
sS'block_loop.thisRepN'
p8984
I2
sg6383
g7369
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g7376
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.79996624441992026
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\x02\x03\x15\x10'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6372
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'left'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.91668785893853055
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\x08\x00\x8c\xa0'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7447
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7454
sS'block_loop.thisRepN'
p9010
I2
sg6383
g7017
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g7024
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.61639118614402832
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\r\x0e\xf4 '
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6854
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6862
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.69985956081291079
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\x13\t\x918'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g8521
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6428
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g8528
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6428
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6435
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.68332531258056406
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\x19\x05\x9d\x80'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g7166
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6858
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g7173
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.56707724554507877
sg34
g753
(S'\x07\xdf\x07\x0f\x13:\x1f\x01,\xc8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6552
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6556
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6560
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6556
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6563
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.64999566651385976
sg34
g753
(S'\x07\xdf\x07\x0f\x13:$\nXp'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7166
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6865
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7173
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6858
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6865
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.59998608722526114
sg34
g753
(S'\x07\xdf\x07\x0f\x13:*\x05n\xa0'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g7123
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g7130
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.59999749113922007
sg34
g753
(S'\x07\xdf\x07\x0f\x13:/\x0f\x13`'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I43
sg56
g57
sg58
Vn
sg42
I557
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I43
sg55
g11
sg56
g57
sg45
F1.76
sg42
I557
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g552
sg51
F28.809999999999999
sg46
F1.9600000000000004
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I83431760
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xb8\x1e\x05@\xaeG\x01@\x9a\x99\x99>\x8f\xc2u?\x14\xae\x87?\x00\x00\x80?\xcd\xccL?\xcd\xcc\xcc>\x1f\x85\xeb?\xf6(\x9c?\x8f\xc2\xb5?\\\x8f\xc2?\x85\xeb\x11@\xb8\x1e\xc5?\xb8\x1e\xc5?\xcd\xccL?\xc3\xf5\x08@\x14\xae\xc7?\x14\xae\xc7?\x1f\x85\xab?H\xe1z?=\nW?\x8f\xc2u?R\xb8\xde?\xaeG\xe1?H\xe1\xba?\x00\x00\x80?ff\xa6?=\n\x17@)\\\x8f?\xd7\xa3\xf0?H\xe1\xfa?\xd7\xa3\xf0?\xc3\xf5\x08@\xcd\xcc\x8c?\xd7\xa3\x10@\xa4p\xfd?\n\xd7\x03@\x1f\x85\xab?\xaeG\xe1?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'D\x8b\x88@b\x10`@b\x100@!\xb0*@\x87\x16\xa9@\xa8\xc6[@\x87\x16\x11@\x9a\x99-A\xfe\xd4\xac@1\x08\xb0@1\x08\x98@\xc9v\x16@\xd5x\x03Ad;\xf3@\xa8\xc6\xfb?\xa8\xc6[@u\x93\x08@\xfc\xa99@\xbaId@!\xb0\x92@L7oAD\x8b\xf8@P\x8d\xf7?\x1dZ\xc4?\xee|7@d;\xab@\xbaI\x94@D\x8b\xe8@\x87\x16!@\x9a\x99\tA!\xb0\xa2@\x0e-\x12@\xa8\xc6\xfb?\x10X\x9d@b\x10`@\xcb\xa1\xb1@\xc5 \xc0?\x1dZ\x14@\x96C\x13@\xb6\xf3\xbd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00`A\x00\x00\xc0A\x00\x00\x10A\x00\x00\x1cB\x00\x00\xf8A\x00\x00\xe8A\x00\x00\xd8A\x00\x00\x80@\x00\x00\x98A\x00\x00pA\x00\x00\x14B\x00\x00\xe0@\x00\x00@@\x00\x00\x80?\x00\x00@A\x00\x00\xb0A\x00\x00\xe0A\x00\x000A\x00\x00\xd0A\x00\x00\xc0@\x00\x00\x00\x00\x00\x00\x80A\x00\x00\x18B\x00\x00PA\x00\x00\xa0A\x00\x00\xa8A\x00\x00\x00A\x00\x00\x00@\x00\x00\x10B\x00\x00 A\x00\x00\xa0@\x00\x00\x08B\x00\x00\xc8A\x00\x00\x88A\x00\x00\x90A\x00\x00\xf0A\x00\x00\x0cB\x00\x00\xb8A\x00\x00\x00B\x00\x00\x04B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'33\xf3?\x9a\x99\x99?\x00\x00\x80?\x9a\x99\xd9?ff\xe6?33\xb3?ff\xe6?ff\xa6?\x00\x00\xc0?\x9a\x99\x99?\x00\x00\xc0?ff\xe6?ff\xa6?33\xf3?ff\xe6?33\xb3?\x00\x00\xc0?\xcd\xcc\xcc?ff\xa6?ff\xe6?\xcd\xcc\x8c?ff\xa6?\xcd\xcc\xcc?\x00\x00\xc0?\x9a\x99\xd9?\xcd\xcc\xcc?\x00\x00\xc0?\xcd\xcc\x8c?33\xb3?33\xf3?\x00\x00\x00@\x00\x00\xc0?\x00\x00\xc0?\xcd\xcc\xcc?\x00\x00\x80?ff\xe6?\xcd\xcc\xcc?33\xf3?\xcd\xcc\xcc?\xcd\xcc\xcc?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x14\x00\x00\x00\r\x00\x00\x00\x1b\x00\x00\x00\x0c\x00\x00\x00\x07\x00\x00\x00\x1e\x00\x00\x00\x13\x00\x00\x00\x0b\x00\x00\x00\x1a\x00\x00\x00\x02\x00\x00\x00\x1d\x00\x00\x00\x11\x00\x00\x00\x0e\x00\x00\x00\x17\x00\x00\x00\x00\x00\x00\x00\t\x00\x00\x00\x15\x00\x00\x00!\x00\x00\x00"\x00\x00\x00\x08\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x0f\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00 \x00\x00\x00\x12\x00\x00\x00\x06\x00\x00\x00\x10\x00\x00\x00\x05\x00\x00\x00#\x00\x00\x00\x04\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00\x1f\x00\x00\x00$\x00\x00\x00\x1c\x00\x00\x00\n\x00\x00\x00\x16\x00\x00\x00\x03\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g201
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g271
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g166
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g376
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g320
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g306
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g292
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g131
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g236
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g208
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g362
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g152
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g124
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g110
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g187
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g257
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g299
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g180
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g285
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g145
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g103
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g215
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g369
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g194
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g243
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g250
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g159
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g117
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g355
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g173
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g138
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g341
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g278
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g222
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g229
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g313
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g348
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g264
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g327
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g334
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I83431760
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x90@\x00\x00\xc0@\x9a\x99\xa9@\x00\x00\xb0@\x00\x00\xc0@\x00\x00`@\x9a\x99\xb9@\x00\x00\x80@\x00\x00\xc0@33s@\x00\x00@@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xb0@33s@ff\xb6@\x00\x00\xc0@\xcd\xcc\xbc@\x00\x00\xc0@\x00\x00\x90@33\xb3@\xcd\xcc\xbc@\x9a\x99\x89@\x00\x00\x90@\x00\x00\xb0@\xcd\xcc\xbc@\xcd\xcc\x8c@ff&@\x00\x00\xc0@\x9a\x99Y@\x9a\x99\xb9@ff\xa6@ff\x86@\x00\x00\x80@\x00\x00\xc0@\x9a\x99Y@333@33\x83@ffF@33\x83@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'?\x00 @I\x9f\x99?\x00S\x95?!\xe5\xbd?9\xb2\xaa?\x96\xdeM@\xbb\xf7n?\x89\xdb\xbd?\x83xw?\xa9j\x86@\x04g\xd6@\xd6\xd8]?\x8b\x01\x80?q\xdf\x9d?\x1c\xdf\x1d@\x03Ks?\x03\xbf{?\n\xc2;?u\xfb]?\x85\xba\xbb?.HD?qi&?\x1bi&@w}\x97?ry\x86?\x12FD?\xccg\xa6?WU\xbd@Qn\x86?Nt\xa6?\xf0\xf1n?\xa7\xe7]?\xfe\x8d\x88?_\xf0\xae?\x02\xfc.?\x90l\xc6?\xf8F\x84?\xd3hf?\x94E\x14@DE\x84?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ffF@333@333@\xcd\xccl@ffF@33\x83@fff@\x00\x00`@\x00\x00@@\xcd\xccL@\xcd\xccL@333@33S@\x00\x00`@ff\x86@ffF@\x00\x00`@\xcd\xcc,@333@333@\x9a\x99Y@333@33\x83@\x00\x00@@333@ff\x86@\x9a\x999@\x9a\x99y@\x9a\x99y@33s@\x9a\x99Y@\x9a\x99Y@ff\x86@\x9a\x99y@\x00\x00@@\x9a\x99Y@\xcd\xccL@ff\x86@ffF@\x00\x00\x80@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\x80\xd51\r`\xfb\xbe\x0c \xac\xc0\x0c@\xac\xc0\x0c\xc0\xa6\xc0\x0c\x00\xad\xc0\x0c\xe0\xa7\xc0\x0c\x80\xa7\xc0\x0c`\xad\xc0\x0c\x00\xfb\xbe\x0c\x80\xab$\x03`\xfa\xbe\x0c\xe0\xf5\xbe\x0c\xa0\xfa\xbe\x0c\xa0\xa2$\x03\x00\xab\xc0\x0c\x80\xf0\xbe\x0c\xe0\xab\xc0\x0c\xe0\xa5\xc0\x0c\xa0\xa6\xc0\x0c\xa0\xf9\xbe\x0c\x80\xa6\xc0\x0c@\xda1\r\x00\xdc1\r@\xd91\r\x80\xd41\r \xd01\r`\xdc1\r \xd61\r`\xd81\r \xda1\r\x00\xd71\r\xe0\xd91\r\x00\xd81\r\xa0\xd71\r\xc0\xd61\r\xc0\xda1\r\xc0\xd51\r\x80\xd61\r\xe0\xd61\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'1\x08\xb0@\x91\xed\xac?\xc5 \xa0?P\x8d\x97?\xdb\xf9\x8e?\xbaIT@\x0e-2@b\x10`@\xd3Mb?u\x93\xe8?\xc9v6@\xc5 \x80?\xbct3?P\x8dG@\xc5 \xe0?D\x8b\xc0@\x06\x81U?D\x8b\x90@\xd9\xce7?\xf8S\x93?\x83\xc0\xca?9\xb4H?^\xba\xf9?\x87\x16\x11@+\x87\xa6?\xdb\xf9\xee?\x1dZ\xa4?\xb6\xf3\xfd?\xb6\xf3\xdd?\x0e-\xc2?!\xb0\n@B`U@\x1dZ\x84?\xa8\xc6\xfb?+\x87\x86?\xf0\xa7&?\xa0\x1ao?\xb6\xf3\xfd?\xa0\x1a/?!\xb0:@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I83431760
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\xb8\xf8g\r\x80vL\r\xe0\xf8g\r\x08\xf9g\r\xe0\xf8g\r\x08\xf9g\r0\xf9g\rX\xf9g\r\xe0vL\r@wL\r\xd0\xf9g\r\xb0vL\r\x80vL\rX\xf9g\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S"hI\xad\x04\x10D\xad\x04\xc8@\xad\x04@M\xad\x04\x90H\xad\x04 F\xad\x04(A\xad\x04\xb8$\xcd\x04X'\xcd\x04\xc0%\xcd\x04P)\xcd\x04\xc8/\xcd\x04\xa0'\xcd\x04($\xcd\x04"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g767
sg83
g789
sg84
g772
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g778
sg83
g798
sg84
g783
sg85
g802
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g807
sg83
g808
sg84
g812
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g744
sg83
g829
sg84
g749
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g807
sg83
g849
sg84
g812
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g838
sg83
g858
sg84
g843
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g756
sg83
g867
sg84
g761
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g818
sg83
g876
sg84
g823
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I83431760
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I83431760
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'p\x9fi\rP\xf6i\r  \xc1\x0c\xa8\x9fi\r\xf0\x17j\r\x18\x18j\r\x80\xf6i\r\xa8\x19j\r\x80/\xc1\x0c\xa8\x9fi\rh\x18j\rp\x9fi\r  \xc1\x0c\x90\x18j\r\xe0!\xc1\x0c\xc8 j\rP\xf6i\r  j\rP\xf6i\r\xe0!\xc1\x0c\x80/\xc1\x0c\x90\x18j\r`!\xc1\x0c\xb0\xf6i\r`!\xc1\x0c\x10\xf7i\r \x1aj\rP\xf6i\r\xa0 \xc1\x0c\x18\x18j\rp\x9fi\r\xf0\x17j\r`!\xc1\x0c\x90\x18j\r@\x18j\r\xe0!\xc1\x0c\x18\x18j\r\xe0!\xc1\x0c\xe0\xf6i\rh\x18j\r\xe0\x18j\r\xb8\x18j\r  \xc1\x0cH\x1aj\r\xb0\xf6i\r\x90\x18j\r\x80\xf6i\r\xb0\xf6i\r\x80/\xc1\x0c\x08\x19j\rp\x9fi\rH\x1aj\r\x18\x18j\r  \xc1\x0c`!\xc1\x0c\xa0\xf7i\r\x80/\xc1\x0c\xc8 j\rH\x1aj\r\xa8\x9fi\r0\x19j\r\xf0\x17j\r`!\xc1\x0c  j\r\xb8\x18j\r\x00!j\rX j\r\xe0\x18j\r\xb8\x18j\r  j\r\xa8\x9fi\r  \xc1\x0c\xb8\x18j\r\x08\x19j\rP\xf6i\r\xe0\xf6i\r\xb8\x18j\r0\xf8i\r0\x19j\r@\x18j\r  \xc1\x0ch\x18j\rH\x1aj\r\xf0\x17j\rp\x9fi\r\xe0\xf6i\r\x80\xf6i\r\x08\x19j\r\xa8\x19j\r\xf0\x17j\r\x80\xf6i\r@\x18j\r\x80\xf6i\r\x90\x18j\rp\x9fi\r\x90\x18j\r  j\r\x00!j\r  j\r0\x19j\r\xa8\x9fi\rh\x18j\r\xe0\x18j\r\x10\xf7i\rp\x9fi\r\xb0\xf6i\r\xe0\x18j\r\xb8\x18j\r\x90\x18j\rh\x18j\r\x80/\xc1\x0c  j\r \x1aj\r\xf8\x19j\r\xb0\xf6i\r\xa8\x9fi\r\xf0\x17j\r\x90\x18j\r  \xc1\x0c\xa8\x9fi\r\xe0\xf6i\r`\xf8i\rh\x18j\r\xb0\xf6i\r\xe0\xf6i\r\x80/\xc1\x0c\x08\x19j\r@\x18j\rP\xf6i\r\xd0\xf7i\r\x80/\xc1\x0c\x90\x18j\rp\xf7i\r\xe0!\xc1\x0ch\x18j\r\x80\x19j\r\xb8\x18j\r  \xc1\x0c\x80\xf6i\r\xe0\xf6i\rp\xf7i\r\xb0\xf6i\r\xf0\x17j\r  j\r\x00!j\r\xb0\xf6i\r@\x18j\r\x80\xf6i\r\xe0!\xc1\x0c  j\r\x80\xf6i\r\xe0!\xc1\x0c  \xc1\x0c\xe0\x18j\r\xf0\x17j\r\xa0 \xc1\x0c\xb0\xf6i\r\xe0!\xc1\x0c0\x19j\r\x80\x19j\r\xe0!\xc1\x0c\x10\xf7i\r0\x19j\r\xe0\x18j\rp\x9fi\r\x08\x19j\r@ \xc1\x0c\x18\x18j\r\x80/\xc1\x0c  j\r\x10\xf7i\r\xb0\xf6i\r0\x19j\rh\x18j\rp\xf7i\r\xa8\x19j\r\xf0\x17j\r\x18\x18j\r0\x19j\r\xe0\xf6i\r0\x19j\r\xe0\x18j\r\xe0\xf6i\r\xa0\xf7i\r\x18\x18j\r@\x18j\r\x00!j\r\xa8\x9fi\r\x08\x19j\r`!\xc1\x0c`\xf8i\r  \xc1\x0c0\xf8i\r\xb8\x18j\rp\x9fi\r\xf0\x17j\r\xa8\x19j\r\xd0\x19j\r\x80/\xc1\x0c\xe0\x18j\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xa0\nM\r\x00\x08M\r \x08M\r\x00\nM\r \xb00\r\x00\x9c/\r@\xd01\r\x80\x95/\r\xa0\tM\r \nM\r \tM\r \x0bM\r\x00\x0bM\r@\x0bM\r`\tM\r`\x0bM\r\xe0\nM\r\xa0\x08M\r@\nM\r\xa0\x0bM\r\xc0\x0bM\r\x00\x0cM\r \x0cM\r`\nM\r\xc0\tM\r@\x0cM\r`\x0cM\r\x80\x0cM\r\xa0\x0cM\r\x00\rM\r\xa0\x93/\r\x80\xb00\r\xe0\x0e1\r\xc0\x0f1\r@\x9c/\r\xa0\x05$\x03`\x051\r\xc0\xab$\x03\xc0j2\r\xc0k2\r@l2\r\x00n2\r\x00k2\r\xc0l2\r@o2\r@j2\r\x00m2\r@m2\r\xa0f2\r`g2\r\x00f2\r@f2\r\x80j2\r\xc0e2\r`e2\r\x80l2\r\x80n2\r\xc0i2\r@k2\r@h2\r\x00h2\r@n2\r\x80f2\r\xc0g2\r\x00i2\r@i2\r\xc0m2\r\xc0h2\r\xc0n2\r\xc0`2\r\x00o2\r\x80h2\r\x80`2\r\x80m2\r\x80i2\r\xa0`2\r\x00a2\r``2\r@`2\r g2\r ""\x03\xe0f2\r `2\r\xe0`2\r\x00\x0e1\r\x80k2\r\xc0\xde1\r@\xd31\r \xde1\r@\xdf1\r`\xde1\r \xdf1\r\xe0\xde1\r \xd21\r`\xdf1\r\x80\xdf1\r\xe0\xdf1\r\xc0\xdf1\r@\xd21\r \xd11\r@\xd11\r`\xd11\r\x00\xd11\r@\xde1\r\xc0\xd11\r\xe0\xd11\r\xc0\xd21\r\xa0\xd21\r\xe0\xd21\r`\xd31\r \xd31\r\x80\xd31\r\xa0\xdf1\r`\xd21\r@\xd41\r\x80\xd11\r\xa0\xd31\r \xd41\r\x00\xfb"\x03\xc0\xb60\r`\r1\r`\xd01\r\x00\xd21\r\xa0\xd11\r\x80\xd21\r\x00\xd31\r\x00\xdf1\r\x80\xdc1\r\x80\xde1\r`\xdb1\r\xa0\xde1\r\xc0\xd31\r\x00j2\r\xe0\xd31\r\xc0\nM\r\xe0\x08M\r\x80\x0bM\r\xc0\rM\r`\x08M\r\xe0\x0cM\r\xe0\rM\r \x0eM\r\xe0\x07M\r\x00\x0eM\r`\x0eM\r\xa0\rM\r\x80\rM\r\xc0\x0eM\r\xa0\x0eM\r\x00\x0fM\r\xe0\x0eM\r\xa0\x0fM\r@\x08M\r\x80\x0eM\r\xc0\x0fM\r\xe0\x0fM\r@\rM\r`\rM\r@\x0fM\r\xe0\tM\r\x80\x0fM\r\x80\nM\r \x0fM\r@\x0eM\r\x00\xd41\r\x00\xfc"\x03\xe0\x0bM\r \rM\r \x12\xc2\x1e\xa0\x10\xc2\x1e`\x11\xc2\x1e\x00\x11\xc2\x1e@\x10\xc2\x1e\xc0\x11\xc2\x1e \x11\xc2\x1e\xa0\x12\xc2\x1e@\x12\xc2\x1e\x80\x12\xc2\x1e\xc0\x12\xc2\x1e\xe0\x11\xc2\x1e\xe0\x10\xc2\x1e \x13\xc2\x1e\x00\x13\xc2\x1e\x80\x10\xc2\x1e\x80\x13\xc2\x1e`\x13\xc2\x1e\xc0\x13\xc2\x1e\xe0\x13\xc2\x1e`\x10\xc2\x1e \x14\xc2\x1e\x00\x14\xc2\x1e@\x13\xc2\x1e@\x14\xc2\x1e\xa0\x14\xc2\x1e\x80\x14\xc2\x1e`\x14\xc2\x1e\xa0\x06M\r \x01M\r\x80\x00M\r\x00\x06M\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'g\xfb\xdf?\x80\xee\x8e?\xda\xfd\xdf?4_\xa6?\x0e\x06\x91?\x19\xb4\x8a?\xde\xb6\x9b?\x9e\xcb|@j\xbc{?\xbd\x1ab?\x0b\xbb\xfb?\x05\xdf]?@A\x84?\x98\xd8]?\xe3\xccL?\x9f1s?\xb4\x9dH??\xba;?X\xb6;?V\x07Q?\xf3V3?\x1f\xfd??w[&?\xa1\xa7*?\xef\xaa*?\x9f13?\x16vW@\x04)"?\xa6\x88H?\xc5\xfa\x7f?\x10\x81H?\x9d\xed??\xc533?\x1b\x82&?\xdceV@\x05\x1bb?\x1f43?\xd1Q\x15?4\n\xc0?\xa11\xd3?\xb1\x94\x99?\x972\xb3?4\xef\xae?\xa3\xf9\xee?\nNU?\xa4\xed.?\xfc\x15Q?\xa2\xcdL?\xe0\xf0.?.\xa9\x8a?\xd103?\xf2T\x95?\x82\xdf]?\x872\xf3?\x99\xc3*?\x05\x00@?]v7?\xf4\x03\xa0?\xd3\xdb\x9d?\x19\xb7j?\x86e6@\xb1Wf?\xe8 "?5\x1e\x82?\xe6R\xd5?\xb6\x03\x11?\x93\x82H?\x9c2s?\xbc\nQ?\x81\xa8*?\xc9ow?\x95/s?\xa7\xaaj?\xa9\r\xb1?\x81s\x97?\x94x\xf7?\xbe\xdb\xfd?Z\xf0n?U\xda]?\xa3\xa8\xea?\x91\x9cj?\xed \xe2?\xabv\x87@~DU?\r\xbb{?\x05Ls?\x97OU?l\xfa\xdf?\x95RU?\xf0rH?N\xe9\x9d?z"b?\x16\x1c"?8c&?W\xfa??\x95L\x15?\x9f%\xa2?\xad\xfa??`\xaa\x8a?A23?\x10\xedn?b\x99I@\x8a>D?\xb1\xfe??\xb6qw?\x0f33?,\xdb\x1d?\x8b\x1fb?\x1e\x0c\x11?\x0f\xdb\x9d?R\xa6*?\x93\x10\xb1?\xb0\x98Y?>\xaaj?A03?\xf6;D?\x18U&?%{7?m~f?\x11\xc8L?\xd1\xdc]?%\x98Y?\x9e\xcbL?\'\xdd\x1d?\xb5w7?j33?\xa0w\xb7?H3s?\x9a\xef.?\xddI\xc4?[\xaa*?A\xde\x1d?\xf0\x11\x91?=\r\x11?\xc9\xdd]?\xdd\x84\x88?\xa0\x93Y?`P\xb5?\xbd\xff??\xb6RU?\xd7\x00@?:\xf6\x1d?\xbfY&?\xae\xefn?\xff""?\xaeAD?Kc\x86?\xe6h&?\xae!\x82?j\x12Q?+\x94\x19?\xcb""?\x81w7?\x84*Q?| 3?\xc1v7?\x89g&?\x1d\xdd\x1d?0\x1fb?\xe7\xb4;?\x02\xff??\xc2n7?\xe7\x81H?\t\x9a\x19?|!b?\xf2\x88\x88?\xda\xc8L?|\xcbL?\xebf&?\xf1\xefn?vc&?\x7fn\x15?$\x1cb?y\xd5]?\xdd\xdd]?\xd7\xcdL?\xfb_w?\x8a\xd0;?\xca\xb8{?\xfb\x95Y?\xe7b&?\x1353?\xd123?\xba\x19@?\xeee\xc6?,f\xa6?\xaf\xe0\x1d?\xe3\xee??\x1cw\xb7?\xff\x0e\x11?\xd6\x9a\x19?o\x84\x97?Ev7?\xdc\xcdL?Q\xe2L?\xfc\x10"?\xe0\x98Y?\x16\x88H?\xe5!"?\x14\x10Q?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x00+\xcd\x04\xd8+\xcd\x04(\x17\xac\x04\x98\x10\xac\x040\x12\xac\x04x\x12\xac\x04h\x16\xac\x04\x98\x13\xac\x04\x88\x17\xac\x04\xc0\x15\xac\x04P\x1c\xac\x04P\x10\xac\x04\x10\x1d\xac\x04\x80\x19\xac\x04\xf0\x1b\xac\x04\xc8\x19\xac\x04@\x11\xac\x04\xc8\x16\xac\x04\xd0\x1d\xac\x04p\x14\xac\x048\x1c\xac\x04P\x16\xac\x04\xa8\x1b\xac\x04P\x13\xac\x04(\x1d\xac\x04\xe0\x16\xac\x04\xe0\x10\xac\x04 \x1f\xac\x04\xf8\x10\xac\x04\xd8\x12\xac\x04\xe8D]\x02\xf0\x15\xac\x04@\x1d\xac\x04\xe8\x1d\xac\x04\xb0\x19\xac\x04\x00\x1b\xac\x04\xe8\x17\xac\x04 \x10\xac\x04\x18\x1e\xac\x04\x90\x1b\xac\x04\x00\x1e\xac\x04\x08\x16\xac\x04\x90\x15\xac\x048\x13\xac\x04\x90\x18\xac\x04x\x1b\xac\x04\xa0\x17\xac\x04`\x1e\xac\x04@\x14\xac\x04\xd0\x11\xac\x04\xf0\x1e\xac\x04\xa8\x18\xac\x04h\x1c\xac\x04p\x17\xac\x04\x80\x1f\xac\x04\xc0\x18\xac\x04\xf8\x19\xac\x04\xc0\x1b\xac\x04\xd8\x15\xac\x04\xd0\x1a\xac\x040\x1e\xac\x04\x10\x17\xac\x04`\x12\xac\x04 \x19\xac\x04\xf0\x12\xac\x04 \x1c\xac\x04\x08\x1c\xac\x04\xa0\x14\xac\x04\x90\x12\xac\x048\x10\xac\x04p\x1d\xac\x04\x90\x1e\xac\x04\x08\x19\xac\x04\x18\x18\xac\x04\xc8\x1f\xac\x04x\x1e\xac\x04\x88\x14\xac\x04H\x1e\xac\x04x\x15\xac\x04\xd8\x1b\xac\x04\xd0\x14\xac\x04\x88\x1a\xac\x04`\x1b\xac\x04X\x1d\xac\x04\x00\x15\xac\x04\xc8\x1c\xac\x04\xf8\x1c\xac\x04\x98\x1f\xac\x04\xd0\x17\xac\x04\xb8\x1d\xac\x04\xe0\x19\xac\x04\xa0\x11\xac\x04\xb0\x16\xac\x048\x1f\xac\x04\xe8\x11\xac\x04\xb0\x10\xac\x04H\x18\xac\x04\x98\x19\xac\x04p\x1a\xac\x04\xe0\x1c\xac\x04\xf8\x16\xac\x04H\x12\xac\x04\xe0\x1f\xac\x04h\x10\xac\x04\xc0\x1e\xac\x04\xc8\x13\xac\x04X\x17\xd8\x03 \x1c\xd8\x03h\x90\xad\x040\x95\xad\x04@\x97\xad\x04\x10\x9d\xad\x04\xf0\x98\xad\x04\x08\x93\xad\x04x\x92\xad\x04\xd0\x9d\xad\x04\xc8\x96\xad\x04`\x95\xad\x04\xe8\x9d\xad\x04p\x9d\xad\x04\xe8\x97\xad\x04\xc0B\xad\x04XA\xad\x04\xf8L\xad\x04\xf0B\xad\x04\x00K\xad\x048F\xad\x04 I\xad\x040E\xad\x04\x80C\xad\x04 C\xad\x04\xa0A\xad\x04\xb8A\xad\x04PI\xad\x04hF\xad\x04\x10A\xad\x04\x80O\xad\x04(J\xad\x04\xb8M\xad\x04\x10Z\xcb\x04\xc0[\xcb\x04x[\xcb\x04\x00\x18\xac\x04X\x14\xac\x04\xb0\x1c\xac\x04`\x15\xac\x04h\x13\xac\x04\xd8\x18\xac\x048\x16\xac\x04\xf8\x13\xac\x04`\x18\xac\x04\x08\x13\xac\x04\x18\x12\xac\x04@\x17\xac\x04P\x19\xac\x04\xe8\x14\xac\x04\xb8\x11\xac\x04\x00\x12\xac\x04\x10\x11\xac\x04\x98\x16\xac\x04\x10\x14\xac\x04\x80\x16\xac\x04\xa8\x12\xac\x04\x80\x1c\xac\x04\x80\x13\xac\x04(\x11\xac\x048\x19\xac\x04X\x11\xac\x040\x15\xac\x04p\x11\xac\x04H\x15\xac\x04\x88\x11\xac\x04\xb8\x1a\xac\x04 \x16\xac\x04\x98\x1c\xac\x04\xc8\x10\xac\x04\x08\x1f\xac\x04\xa8\x15\xac\x04\xf0\x18\xac\x04h\x19\xac\x04\x80\x10\xac\x04\xb8\x14\xac\x04\xb0\x13\xac\x040\x18\xac\x04\xb8\x17\xac\x04\xe8\x1a\xac\x04H\x1b\xac\x04 \x13\xac\x04(\x14\xac\x04x\x18\xac\x04\x18\x15\xac\x04X\x17\xac\x04\xb0\x1f\xac\x040\x1b\xac\x04\xc0\x12\xac\x04h\x1f\xac\x04\xe8G\xad\x048C\xad\x04\xa8B\xad\x04\x98F\xad\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1028
sg895
g1018
sg909
g1022
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g954
sg895
g1052
sg909
g961
sg904
g1059
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1071
sg895
g1067
sg909
g1078
sg904
g1075
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g937
sg895
g1097
sg909
g944
sg904
g1104
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1133
sg895
g1129
sg909
g1140
sg904
g1137
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1071
sg895
g1067
sg909
g1078
sg904
g1075
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g920
sg895
g1189
sg909
g927
sg904
g1196
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1133
sg895
g1204
sg909
g1140
sg904
g1211
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1249
sg895
g1245
sg909
g1256
sg904
g1253
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1249
sg895
g1279
sg909
g1256
sg904
g1286
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1317
sg895
g1307
sg909
g1311
sg904
g1315
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1347
sg895
g1337
sg909
g1341
sg904
g1345
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g900
sg895
g1367
sg909
g910
sg904
g1374
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g971
sg895
g1382
sg909
g978
sg904
g1389
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1249
sg895
g1279
sg909
g1256
sg904
g1286
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1028
sg895
g1423
sg909
g1022
sg904
g1430
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1133
sg895
g1204
sg909
g1140
sg904
g1211
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1133
sg895
g1129
sg909
g1140
sg904
g1137
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1071
sg895
g1494
sg909
g1078
sg904
g1501
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1347
sg895
g1509
sg909
g1341
sg904
g1516
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1317
sg895
g1524
sg909
g1311
sg904
g1531
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1562
sg895
g1552
sg909
g1556
sg904
g1560
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1266
sg895
g1569
sg909
g1273
sg904
g1576
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1116
sg895
g1584
sg909
g1123
sg904
g1591
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1005
sg895
g1599
sg909
g1012
sg904
g1606
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1266
sg895
g1569
sg909
g1273
sg904
g1576
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1039
sg895
g1627
sg909
g1046
sg904
g1634
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1562
sg895
g1552
sg909
g1556
sg904
g1560
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g900
sg895
g1367
sg909
g910
sg904
g1374
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1562
sg895
g1552
sg909
g1556
sg904
g1560
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1249
sg895
g1279
sg909
g1256
sg904
g1286
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1005
sg895
g1599
sg909
g1012
sg904
g1606
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1071
sg895
g1494
sg909
g1078
sg904
g1501
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1562
sg895
g1552
sg909
g1556
sg904
g1560
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g954
sg895
g1052
sg909
g961
sg904
g1059
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1789
sg895
g1785
sg909
g1796
sg904
g1793
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1249
sg895
g1279
sg909
g1256
sg904
g1286
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1176
sg895
g1828
sg909
g1183
sg904
g1835
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1317
sg895
g1307
sg909
g1311
sg904
g1315
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1249
sg895
g1279
sg909
g1256
sg904
g1286
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g900
sg895
g1367
sg909
g910
sg904
g1374
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1347
sg895
g1337
sg909
g1341
sg904
g1345
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1317
sg895
g1524
sg909
g1311
sg904
g1531
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1176
sg895
g1828
sg909
g1183
sg904
g1835
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g954
sg895
g1052
sg909
g961
sg904
g1059
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g937
sg895
g1097
sg909
g944
sg904
g1104
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1317
sg895
g1307
sg909
g1311
sg904
g1315
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1562
sg895
g1960
sg909
g1556
sg904
g1967
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g920
sg895
g1189
sg909
g927
sg904
g1196
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1481
sg895
g1988
sg909
g1488
sg904
g1995
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1317
sg895
g1524
sg909
g1311
sg904
g1531
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1481
sg895
g1988
sg909
g1488
sg904
g1995
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1789
sg895
g1785
sg909
g1796
sg904
g1793
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1028
sg895
g1018
sg909
g1022
sg904
g1026
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g937
sg895
g1097
sg909
g944
sg904
g1104
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1071
sg895
g1494
sg909
g1078
sg904
g1501
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1562
sg895
g1960
sg909
g1556
sg904
g1967
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g971
sg895
g1382
sg909
g978
sg904
g1389
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1481
sg895
g1988
sg909
g1488
sg904
g1995
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1005
sg895
g1599
sg909
g1012
sg904
g1606
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1562
sg895
g1960
sg909
g1556
sg904
g1967
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1028
sg895
g1018
sg909
g1022
sg904
g1026
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1028
sg895
g1018
sg909
g1022
sg904
g1026
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1005
sg895
g1599
sg909
g1012
sg904
g1606
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1116
sg895
g1584
sg909
g1123
sg904
g1591
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1116
sg895
g1584
sg909
g1123
sg904
g1591
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1249
sg895
g1245
sg909
g1256
sg904
g1253
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1176
sg895
g1828
sg909
g1183
sg904
g1835
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1789
sg895
g1785
sg909
g1796
sg904
g1793
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g954
sg895
g1052
sg909
g961
sg904
g1059
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1071
sg895
g1067
sg909
g1078
sg904
g1075
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1347
sg895
g1337
sg909
g1341
sg904
g1345
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g920
sg895
g1189
sg909
g927
sg904
g1196
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g900
sg895
g1367
sg909
g910
sg904
g1374
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1347
sg895
g1509
sg909
g1341
sg904
g1516
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1317
sg895
g1524
sg909
g1311
sg904
g1531
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1116
sg895
g1584
sg909
g1123
sg904
g1591
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1071
sg895
g1494
sg909
g1078
sg904
g1501
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1039
sg895
g1627
sg909
g1046
sg904
g1634
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1317
sg895
g1307
sg909
g1311
sg904
g1315
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1133
sg895
g1129
sg909
g1140
sg904
g1137
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1266
sg895
g1569
sg909
g1273
sg904
g1576
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g954
sg895
g1052
sg909
g961
sg904
g1059
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g971
sg895
g1382
sg909
g978
sg904
g1389
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g937
sg895
g1097
sg909
g944
sg904
g1104
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1789
sg895
g2588
sg909
g1796
sg904
g2595
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1071
sg895
g1067
sg909
g1078
sg904
g1075
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1481
sg895
g1988
sg909
g1488
sg904
g1995
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1039
sg895
g1627
sg909
g1046
sg904
g1634
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1562
sg895
g1960
sg909
g1556
sg904
g1967
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1028
sg895
g1423
sg909
g1022
sg904
g1430
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g988
sg895
g2733
sg909
g995
sg904
g2740
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1133
sg895
g1129
sg909
g1140
sg904
g1137
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1071
sg895
g1067
sg909
g1078
sg904
g1075
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1317
sg895
g1524
sg909
g1311
sg904
g1531
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1481
sg895
g1988
sg909
g1488
sg904
g1995
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g988
sg895
g2733
sg909
g995
sg904
g2740
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g971
sg895
g1382
sg909
g978
sg904
g1389
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1176
sg895
g1828
sg909
g1183
sg904
g1835
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1249
sg895
g1245
sg909
g1256
sg904
g1253
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1266
sg895
g1569
sg909
g1273
sg904
g1576
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1028
sg895
g1423
sg909
g1022
sg904
g1430
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1133
sg895
g1204
sg909
g1140
sg904
g1211
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1005
sg895
g1599
sg909
g1012
sg904
g1606
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1133
sg895
g1204
sg909
g1140
sg904
g1211
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g937
sg895
g1097
sg909
g944
sg904
g1104
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1347
sg895
g1337
sg909
g1341
sg904
g1345
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1347
sg895
g1509
sg909
g1341
sg904
g1516
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1266
sg895
g1569
sg909
g1273
sg904
g1576
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1133
sg895
g1204
sg909
g1140
sg904
g1211
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1789
sg895
g2588
sg909
g1796
sg904
g2595
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1133
sg895
g1129
sg909
g1140
sg904
g1137
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g920
sg895
g1189
sg909
g927
sg904
g1196
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1789
sg895
g1785
sg909
g1796
sg904
g1793
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1347
sg895
g1509
sg909
g1341
sg904
g1516
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g900
sg895
g1367
sg909
g910
sg904
g1374
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1562
sg895
g1552
sg909
g1556
sg904
g1560
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1039
sg895
g1627
sg909
g1046
sg904
g1634
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g988
sg895
g2733
sg909
g995
sg904
g2740
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1039
sg895
g1035
sg909
g1046
sg904
g1043
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1176
sg895
g1828
sg909
g1183
sg904
g1835
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g920
sg895
g1189
sg909
g927
sg904
g1196
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1266
sg895
g1262
sg909
g1273
sg904
g1270
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1789
sg895
g1785
sg909
g1796
sg904
g1793
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1071
sg895
g1494
sg909
g1078
sg904
g1501
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g988
sg895
g2733
sg909
g995
sg904
g2740
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1028
sg895
g1423
sg909
g1022
sg904
g1430
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g988
sg895
g2733
sg909
g995
sg904
g2740
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1789
sg895
g2588
sg909
g1796
sg904
g2595
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1789
sg895
g2588
sg909
g1796
sg904
g2595
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1347
sg895
g1337
sg909
g1341
sg904
g1345
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1005
sg895
g1001
sg909
g1012
sg904
g1009
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g988
sg895
g984
sg909
g995
sg904
g992
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1028
sg895
g1018
sg909
g1022
sg904
g1026
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1249
sg895
g1245
sg909
g1256
sg904
g1253
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1562
sg895
g1960
sg909
g1556
sg904
g1967
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1249
sg895
g1245
sg909
g1256
sg904
g1253
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1789
sg895
g2588
sg909
g1796
sg904
g2595
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1317
sg895
g1307
sg909
g1311
sg904
g1315
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g971
sg895
g1382
sg909
g978
sg904
g1389
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1028
sg895
g1423
sg909
g1022
sg904
g1430
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1116
sg895
g1584
sg909
g1123
sg904
g1591
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1039
sg895
g1627
sg909
g1046
sg904
g1634
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1347
sg895
g1509
sg909
g1341
sg904
g1516
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I83431760
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S' \xda\xbf\x0c\xb0\xdb\xbf\x0c m\xd6\x0c@$\xc0\x0c\xf8\xd9\xbf\x0c\xb0\xdb\xbf\x0cp$\xc0\x0cxm\xc0\x0c8\xdb\xbf\x0c\x90%\xc0\x0c\xe0h\xd6\x0c\xb0m\xc0\x0c\xc0%\xc0\x0c\xd0$\xc0\x0c\xc8n\xc0\x0c\x10\xdb\xbf\x0c\xd0\xd9\xbf\x0c &\xc0\x0c\x98\xda\xbf\x0c`\xdb\xbf\x0c\xb0m\xc0\x0c`\xdb\xbf\x0c &\xc0\x0c\x90n\xc0\x0c\xc8n\xc0\x0c\x98\xda\xbf\x0c\xd0\xd9\xbf\x0c\xa0$\xc0\x0c\xf0%\xc0\x0c\xe0h\xd6\x0c\xe0l\xd6\x0c\xe8\xda\xbf\x0c@$\xc0\x0c\xe8\xda\xbf\x0c n\xc0\x0cP&\xc0\x0cp\xda\xbf\x0cxm\xc0\x0c i\xd6\x0c\xc0\xda\xbf\x0c\xe8\xda\xbf\x0c\xd0$\xc0\x0c\xe0l\xd6\x0c\xe0h\xd6\x0c\x98\xda\xbf\x0c\xe8m\xc0\x0c\xa0$\xc0\x0cxm\xc0\x0c\xe8\xda\xbf\x0c\xe0l\xd6\x0cp$\xc0\x0c i\xd6\x0c8\xdb\xbf\x0c@$\xc0\x0c\xe0l\xd6\x0c\x98\xda\xbf\x0c\xb0\xdb\xbf\x0c0%\xc0\x0c\x10\xdb\xbf\x0cxm\xc0\x0c8\xdb\xbf\x0c\xd0$\xc0\x0c0\xd9\xbf\x0c8\xdb\xbf\x0c\x98\xda\xbf\x0c\xb0m\xc0\x0c\xf0%\xc0\x0c\xc0\xda\xbf\x0cP&\xc0\x0c\x88\xdb\xbf\x0cX\xd9\xbf\x0c \xda\xbf\x0c h\xd6\x0cp$\xc0\x0c\xd0\xd9\xbf\x0c`\xdb\xbf\x0c\xc0\xda\xbf\x0c\xa0$\xc0\x0c\x88\xdb\xbf\x0c0\xd9\xbf\x0c\xb0\xdb\xbf\x0c h\xd6\x0cX\xd9\xbf\x0c\xb0\xdb\xbf\x0c i\xd6\x0c\x90n\xc0\x0c\x10\xdb\xbf\x0c\xe8m\xc0\x0cX\xd9\xbf\x0c\xe0h\xd6\x0c\x88\xdb\xbf\x0c\xe8m\xc0\x0c\xc0\xda\xbf\x0c\x98\xda\xbf\x0c\x10\xdb\xbf\x0c\xa0$\xc0\x0c\x88\xdb\xbf\x0c i\xd6\x0c h\xd6\x0c\xe0l\xd6\x0c h\xd6\x0c\xc0%\xc0\x0c\xa0$\xc0\x0c i\xd6\x0c@$\xc0\x0c\xc0\xda\xbf\x0c\x10\xdb\xbf\x0c\x88\xdb\xbf\x0c\xd0$\xc0\x0c\xe0h\xd6\x0c@$\xc0\x0c\xd0$\xc0\x0c i\xd6\x0c\x98\xda\xbf\x0c\xe0h\xd6\x0cxm\xc0\x0c\xa8\xd9\xbf\x0cxm\xc0\x0c`%\xc0\x0c\xb0\xdb\xbf\x0c\xf0%\xc0\x0c8\xdb\xbf\x0c\xf8\xd9\xbf\x0cxm\xc0\x0c\xe8m\xc0\x0c\xa0$\xc0\x0c\xe8m\xc0\x0c\xb0\xdb\xbf\x0c0%\xc0\x0c\xe0l\xd6\x0c\xe8m\xc0\x0c`\xdb\xbf\x0c8\xdb\xbf\x0c\x88\xdb\xbf\x0c\xb0m\xc0\x0c\xe0h\xd6\x0c\xb0\xdb\xbf\x0cXn\xc0\x0c\xb0m\xc0\x0c\xd0\xd9\xbf\x0c\x88\xdb\xbf\x0c\xd0$\xc0\x0c\x10\xdb\xbf\x0c0\xd9\xbf\x0c\xc0h\xd6\x0c\xa0$\xc0\x0c h\xd6\x0cxm\xc0\x0c h\xd6\x0cX\xd9\xbf\x0c`%\xc0\x0c\xe8m\xc0\x0c\x98\xda\xbf\x0c\xc8n\xc0\x0c\xa0$\xc0\x0c@$\xc0\x0c\xe0h\xd6\x0c\x88\xdb\xbf\x0cp$\xc0\x0c\x98\xda\xbf\x0cp\xda\xbf\x0c\x90n\xc0\x0c\xc0\xda\xbf\x0c@$\xc0\x0c8\xdb\xbf\x0c\xf0%\xc0\x0c\xe8\xda\xbf\x0c`\xdb\xbf\x0c\xe0l\xd6\x0c@$\xc0\x0cp\xda\xbf\x0c\xa0$\xc0\x0c`%\xc0\x0c\x10\xdb\xbf\x0c\xe0h\xd6\x0c\xb0m\xc0\x0c`\xdb\xbf\x0c\xc0\xda\xbf\x0c\xe0l\xd6\x0cp\xda\xbf\x0c\xe0l\xd6\x0cp$\xc0\x0c h\xd6\x0c`\xdb\xbf\x0c\xb0\xdb\xbf\x0c &\xc0\x0c\xc8n\xc0\x0c\xe8\xda\xbf\x0cX\xd9\xbf\x0c\xe8m\xc0\x0cp$\xc0\x0c\xb0\xdb\xbf\x0c\x90n\xc0\x0c8\xdb\xbf\x0cp$\xc0\x0cp\xda\xbf\x0c\x10\xdb\xbf\x0c\x88\xdb\xbf\x0c8\xdb\xbf\x0c`\xdb\xbf\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00\x16\xc2\x1e\xa0\x17\xc2\x1e\xa0\x16\xc2\x1e\x80\x16\xc2\x1e\x00\x17\xc2\x1e@\x18\xc2\x1e\xe0\x16\xc2\x1e \x18\xc2\x1e \x16\xc2\x1e\xc0\x15\xc2\x1e\x80\x17\xc2\x1e`\x16\xc2\x1e\xe0\x15\xc2\x1e`\x19\xc2\x1e\xc0\x17\xc2\x1e\xe0\x17\xc2\x1e\xe0\x18\xc2\x1e@\x16\xc2\x1e\xc0\x18\xc2\x1e\x00\x19\xc2\x1e\x00\x15\xc2\x1e`\x18\xc2\x1e\x00\x1a\xc2\x1e\xa0\x18\xc2\x1e\xa0\x19\xc2\x1e@\x17\xc2\x1e\x80\x1a\xc2\x1e \x10\xc2\x1e \x17\xc2\x1e\xe0\x19\xc2\x1e\xc0\x1a\xc2\x1e@\x1b\xc2\x1e \x1a\xc2\x1e\xe0\x1a\xc2\x1e\x00\x1b\xc2\x1e\xc0\x16\xc2\x1e\xc0\x19\xc2\x1e`\x17\xc2\x1e@\x19\xc2\x1e\x80\x19\xc2\x1e\xc0\x1b\xc2\x1e \x19\xc2\x1e@\x1a\xc2\x1e\xc0\x1c\xc2\x1e\x00\x1c\xc2\x1e`\x1c\xc2\x1e\xa0\x1c\xc2\x1e\xe0\x1b\xc2\x1e \x1b\xc2\x1e\xe0\x14\xc2\x1e \x1d\xc2\x1e\x80\x1b\xc2\x1e@\x1c\xc2\x1e\xa0\x1d\xc2\x1e@\x1d\xc2\x1e\xa0\x1a\xc2\x1e`\x1d\xc2\x1e\x80\x1d\xc2\x1e\x00\x1e\xc2\x1e\xc0\x1d\xc2\x1e\xe0\x1e\xc2\x1e\xa0\x1b\xc2\x1e\x00\x18\xc2\x1e@\x1e\xc2\x1e\x80\x18\xc2\x1e\xa0\x1e\xc2\x1e`\x1b\xc2\x1e\xa0\x1f\xc2\x1e\x80\x1e\xc2\x1e\x00\x1f\xc2\x1e`\x1e\xc2\x1e\x80\x1c\xc2\x1e\x80\x1f\xc2\x1e \x1f\xc2\x1e@\x1f\xc2\x1e\xe0i\xd6\x0c\x00\x1d\xc2\x1e`\x1a\xc2\x1e\xc0\x1f\xc2\x1e`\x1f\xc2\x1e\xe0\x1c\xc2\x1e\xc0\x1e\xc2\x1e@\x05M\r\xc0\x01M\r "\xe6\x1e\xa0 \xe6\x1e`!\xe6\x1e\x00!\xe6\x1e@ \xe6\x1e\xc0!\xe6\x1e !\xe6\x1e\xa0!\xe6\x1e@"\xe6\x1e\x80"\xe6\x1e\xc0"\xe6\x1e\xe0"\xe6\x1e\x80 \xe6\x1e #\xe6\x1e@#\xe6\x1e\xc0 \xe6\x1e\x80!\xe6\x1e\xa0#\xe6\x1e\xc0#\xe6\x1e  \xe6\x1e` \xe6\x1e\xe0#\xe6\x1e\x00$\xe6\x1e $\xe6\x1e\x80$\xe6\x1e`$\xe6\x1e\x00"\xe6\x1e\xe0$\xe6\x1e\xc0$\xe6\x1e %\xe6\x1e@%\xe6\x1e`#\xe6\x1e\xa0"\xe6\x1e`%\xe6\x1e\x80%\xe6\x1e\xa0%\xe6\x1e\x00&\xe6\x1e\xe0%\xe6\x1e@$\xe6\x1e`&\xe6\x1e@&\xe6\x1e`"\xe6\x1e\x80&\xe6\x1e\xe0&\xe6\x1e\xc0&\xe6\x1e\xc0%\xe6\x1e@\'\xe6\x1e`\'\xe6\x1e\x80\'\xe6\x1e\x00#\xe6\x1e\x80#\xe6\x1e\xa0\'\xe6\x1e\xc0\'\xe6\x1e (\xe6\x1e\x00(\xe6\x1e`(\xe6\x1e\x80(\xe6\x1e &\xe6\x1e\xe0!\xe6\x1e\xe0(\xe6\x1e\xc0(\xe6\x1e\xe0 \xe6\x1e\x00)\xe6\x1e`)\xe6\x1e@)\xe6\x1e@(\xe6\x1e\x80)\xe6\x1e\xe0)\xe6\x1e\xc0)\xe6\x1e\xa0$\xe6\x1e\x00*\xe6\x1e \'\xe6\x1e@*\xe6\x1e`*\xe6\x1e\x80*\xe6\x1e\xa0*\xe6\x1e\x00+\xe6\x1e\xe0*\xe6\x1e *\xe6\x1e`+\xe6\x1e@+\xe6\x1e\xe0\'\xe6\x1e\xc0+\xe6\x1e\xe0+\xe6\x1e\x00,\xe6\x1e@,\xe6\x1e ,\xe6\x1e`,\xe6\x1e\xc0*\xe6\x1e +\xe6\x1e\x80,\xe6\x1e\xe0,\xe6\x1e\xc0,\xe6\x1e -\xe6\x1e\x00-\xe6\x1e\xa0)\xe6\x1e\x80-\xe6\x1e`-\xe6\x1e@!\xe6\x1e\xe0-\xe6\x1e\xc0-\xe6\x1e\xa0(\xe6\x1e\x00.\xe6\x1e .\xe6\x1e@.\xe6\x1e\xa0.\xe6\x1e\x80.\xe6\x1e\xe0.\xe6\x1e\xc0.\xe6\x1e\xa0,\xe6\x1e )\xe6\x1e\xe0\x1d\xc2\x1e`.\xe6\x1e\x80+\xe6\x1e\xc0/\xe6\x1e\xa0/\xe6\x1e'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x07=\xa4?Z\xed??] "?\xff\xce\x0c?1\x12Q?\xadM\x04?z\xccL?\xf8\xd4\x1d?\x02)s?\x05\xaa*?,\x10\x11?S\x9b\x19?\xefu7?s\x1d"?\x9c\xe0\x1d?\xbb1s?\x10\xeb.?\xd7\xd0]?&\x96Y?\x82\x89H?\x07x7?vg&?\x8e2s?\xe2\x12Q?343?\xf3\xcdL?FS\x15?\xedU\x15?\x1d\xaa*?\x079"?S\x99\x19?U)"?\n\x14\x11?\x89\x8a\x08?@ "?5\xd8\x8c?/\xcc\xac?\x06)3?\xf8\xcd\x0c?\xa2\x1f"?\x8dt7?\r\xb1\x19?$\xc6\x0c?D\xf1.?4\xcdL?BDD?\xb8\xe2]?\xd5\xc6L?Ms7?\xe2\x0eQ?e\xa2*?\xf2\xdc\x1d?k\xb8;?y\xec\x1d?\x08\x9e\x19?\xa8\x10Q?\xe1\xff\x10?\x95\xdd\x1d?Yrw?\xc6\xe7.?v\xa7*?i\xea.?\xe2\x10Q?\x94y7?\xe1\xa6j?\x93\xb1Y?\x1eb&?L~H?lO\xb5?\xe1u7?\xe4\xbb;?0\x1c\x11?\xb8""?P\xbb{?\xb4\x88H?o\x13b?\x9bx7?\xc9\xac*?U\x0f\x11?\x86T\x15?\x80E\x15?\x8e\xde\x1d?\x93DD?\xd8G\x04?\x9a\xa6*?y\xb8;?\xdc \x82?hDD?u\xeb.?\x8b\xd5;?Q\xac*?\x85@D?hc&?\'\xfa\x7f?\xe1\xaa*?\x17\xb1\x19?\x00U\x95?\xfa\x10\x11?}\xba;?`\xfe??\xe4\xfb\xff>\x0b\x06o?f""?\xff\x0e\x11?\xb2\x10\x11?e\xa8j?\xb1\x89H?\xcf\xee\x1d?&>D?X8s?\xf2SU?\xa9""?\x13\xea.?V\xa2H?\xd9C\xc4?\x90\x1d\x82?\x14\xa4*?\xda\xc4L?\xc6\xb1j?U\x0c"?\xde\xe9.?\x8e\x11Q?Y\xff??\xff)3?[\x16Q?e\xdd\x1d?\xcf\x15"?U-D?\xa9v7?\xdf\x1c"?\x84\x16@?\xe1\x8bH?\xe3\xff??\xca\x10\x11?La&?\x91\xeb.?\x8193?\xc7\x88H?a\x9b\x19?\x07\xab*?\x89\xde\x1d?f\xccL?"fD?\xb7`&?\xb9\xc2\x0c?#\x10Q?R\xa8j?d\xe9\xff>\x9b\xfe.?\r\xd1L?\x18\xdf]?\xe2\x12Q?\x1c\xb7{?\x1623?\x8eg&?\x9c\xa7*?\x0553?\x8f\x00@?U,3?\x8fDD?)*\x11?x\xdd\x1d?,ED?a\xeb.?\xa5=D?\x85\xea.?\x8c\xd7\x1d?\xcf-3?\x1b\x11\x11?LV\x15?\x9f\xed\x8e?\xea\x96Y?\xf9T\x15?4u7?v\xc2L?PD\x84?\x83xw?\xa9\xb0\x19?Uc&?\xac\xac*?\xd0\x95\x19?_#"?Rh&?\x16\xd4;?\xf1#3?\xeeDD?\xc9\xa8j?\x10\xb8;?\x9b\xadj?\xb9,Q?_\xb9;?uV&?w\xec.?\x07T\x95?\xd4$"?&\x03Q?\x86\x94Y?\x9bt7?(\x99Y?)\xa5*?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'hC\xad\x04\x18E\xad\x04 /\xcd\x04\xc8&\xcd\x04@-\xcd\x04\x10*\xcd\x048/\xcd\x04p-\xcd\x04P#\xcd\x04p\'\xcd\x04\x08&\xcd\x04\xd8"\xcd\x048&\xcd\x04`"\xcd\x04h#\xcd\x04\xf0.\xcd\x04\xf0(\xcd\x04\x18.\xcd\x04\x88\'\xcd\x04\x00"\xcd\x04\x98#\xcd\x04\xb0)\xcd\x048)\xcd\x04\xa8+\xcd\x04\xf0%\xcd\x04\xe8\'\xcd\x04`+\xcd\x04\x88!\xcd\x04\xa0$\xcd\x04\xf8 \xcd\x04H+\xcd\x04\xe0 \xcd\x04\x80 \xcd\x04\x00%\xcd\x04 &\xcd\x04h&\xcd\x04p$\xcd\x04\xb0,\xcd\x04\xd0!\xcd\x04\xb8\'\xcd\x04\x98,\xcd\x04\xe8*\xcd\x04\x00.\xcd\x04@$\xcd\x04x%\xcd\x04\xe0,\xcd\x04\x18+\xcd\x04P/\xcd\x04\xf8&\xcd\x04\x18(\xcd\x04\xf8,\xcd\x04\xc8,\xcd\x04  \xcd\x04\x80/\xcd\x04\xd0-\xcd\x04h \xcd\x04\xc8 \xcd\x04\x90%\xcd\x048,\xcd\x040.\xcd\x04\xa0*\xcd\x04\xe0V\xcb\x04\xd8^\xcb\x04\xc8\\\xcb\x04hS\xcb\x04\xb0S\xcb\x04\xf0R\xcb\x04\xc0X\xcb\x04\xa8^\xcb\x04\x90[\xcb\x04pZ\xcb\x04\x98S\xcb\x048_\xcb\x04\x98\\\xcb\x04\xb8T\xcb\x04\xc8Y\xcb\x04P_\xcb\x04\xf8V\xcb\x04(W\xcb\x04hV\xcb\x04@W\xcb\x04\x80\\\xcb\x04H[\xcb\x04`[\xcb\x04\xe0_\xcb\x04\xa0T\xcb\x04XT\xcb\x04\x88Q\xcb\x04H^\xcb\x04\x18[\xcb\x04\x10Q\xcb\x04\xa8[\xcb\x04\x00U\xcb\x04\x10T\xcb\x04\x98Y\xcb\x04`X\xcb\x04PS\xcb\x04PY\xcb\x04\xf8P\xcb\x04h\\\xcb\x04@T\xcb\x04(T\xcb\x04\xf8S\xcb\x04XQ\xcb\x04\x08V\xcb\x04\xb8W\xcb\x04\x08\\\xcb\x04\x18X\xcb\x04hP\xcb\x04\xa0Q\xcb\x04\xf0U\xcb\x04\x90R\xcb\x04\x18R\xcb\x04\xf0[\xcb\x04\xa0Z\xcb\x04\x08Y\xcb\x04\x80Y\xcb\x04\x00[\xcb\x04pW\xcb\x04\x00X\xcb\x04\x90X\xcb\x04\x88W\xcb\x04\xe0\\\xcb\x04\x18^\xcb\x04\xa8U\xcb\x04\xd0Z\xcb\x04xX\xcb\x04(]\xcb\x04\xf0X\xcb\x04HX\xcb\x04\x90U\xcb\x04`U\xcb\x04h_\xcb\x04\xf0^\xcb\x04\xc0^\xcb\x04\xc0U\xcb\x04\x10W\xcb\x04\xd8[\xcb\x04XW\xcb\x04\xd8%\xcd\x04`(\xcd\x04\xc0+\xcd\x04h)\xcd\x04 )\xcd\x04\xe0#\xcd\x04\x88-\xcd\x04 ,\xcd\x04\xb0 \xcd\x04\xd0\'\xcd\x04\x08#\xcd\x040%\xcd\x04H%\xcd\x04x+\xcd\x04x.\xcd\x04P \xcd\x04H(\xcd\x04\x08/\xcd\x04\x88*\xcd\x04\xa8"\xcd\x040+\xcd\x04\xe8$\xcd\x04\xd8(\xcd\x040(\xcd\x04X-\xcd\x04\x80#\xcd\x04\x10-\xcd\x04P&\xcd\x04\xc0(\xcd\x04\xa8(\xcd\x04\xe8-\xcd\x04\x90+\xcd\x04h,\xcd\x04\xb0/\xcd\x04\x80)\xcd\x04\xf0+\xcd\x04\x08)\xcd\x04\x10\'\xcd\x04x(\xcd\x04\xf8)\xcd\x04x"\xcd\x04H.\xcd\x04(*\xcd\x04\xe0&\xcd\x04p*\xcd\x04\xf0"\xcd\x04@!\xcd\x04`%\xcd\x04\x08,\xcd\x04@*\xcd\x04\xc8)\xcd\x04\xe0/\xcd\x04\x80&\xcd\x04\x98)\xcd\x04\x98&\xcd\x04\xb8*\xcd\x04\xc0"\xcd\x04\xe8!\xcd\x048 \xcd\x04\x18"\xcd\x04(-\xcd\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3681
sg3633
g3671
sg3648
g3675
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3648
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3715
sg3633
g3705
sg3648
g3709
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3769
sg3633
g3765
sg3648
g3776
sg3642
g3773
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3792
sg3633
g3782
sg3648
g3786
sg3642
g3790
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3803
sg3633
g3799
sg3648
g3810
sg3642
g3807
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3820
sg3633
g3816
sg3648
g3827
sg3642
g3824
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3843
sg3633
g3833
sg3648
g3837
sg3642
g3841
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3648
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3877
sg3633
g3867
sg3648
g3871
sg3642
g3875
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3843
sg3633
g3884
sg3648
g3837
sg3642
g3891
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3909
sg3633
g3899
sg3648
g3903
sg3642
g3907
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3926
sg3633
g3916
sg3648
g3920
sg3642
g3924
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3937
sg3633
g3933
sg3648
g3944
sg3642
g3941
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3715
sg3633
g3705
sg3648
g3709
sg3642
g3713
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3820
sg3633
g3816
sg3648
g3827
sg3642
g3824
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3715
sg3633
g3976
sg3648
g3709
sg3642
g3983
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3926
sg3633
g3991
sg3648
g3920
sg3642
g3998
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3820
sg3633
g4006
sg3648
g3827
sg3642
g4013
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3877
sg3633
g3867
sg3648
g3871
sg3642
g3875
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3937
sg3633
g3933
sg3648
g3944
sg3642
g3941
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3909
sg3633
g4047
sg3648
g3903
sg3642
g4054
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3792
sg3633
g3782
sg3648
g3786
sg3642
g3790
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3854
sg3633
g3850
sg3648
g3861
sg3642
g3858
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3803
sg3633
g4088
sg3648
g3810
sg3642
g4095
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4107
sg3633
g4103
sg3648
g4114
sg3642
g4111
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3909
sg3633
g3899
sg3648
g3903
sg3642
g3907
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3692
sg3633
g3688
sg3648
g3699
sg3642
g3696
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3909
sg3633
g3899
sg3648
g3903
sg3642
g3907
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3769
sg3633
g4159
sg3648
g3776
sg3642
g4166
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4184
sg3633
g4174
sg3648
g4178
sg3642
g4182
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4195
sg3633
g4191
sg3648
g4202
sg3642
g4199
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3646
sg3633
g4208
sg3648
g3638
sg3642
g4215
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3877
sg3633
g3867
sg3648
g3871
sg3642
g3875
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3926
sg3633
g3916
sg3648
g3920
sg3642
g3924
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3909
sg3633
g4047
sg3648
g3903
sg3642
g4054
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3854
sg3633
g3850
sg3648
g3861
sg3642
g3858
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g4107
sg3633
g4103
sg3648
g4114
sg3642
g4111
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3803
sg3633
g4088
sg3648
g3810
sg3642
g4095
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3937
sg3633
g4301
sg3648
g3944
sg3642
g4308
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4184
sg3633
g4316
sg3648
g4178
sg3642
g4323
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3792
sg3633
g4331
sg3648
g3786
sg3642
g4338
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3646
sg3633
g4208
sg3648
g3638
sg3642
g4215
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3909
sg3633
g3899
sg3648
g3903
sg3642
g3907
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4107
sg3633
g4372
sg3648
g4114
sg3642
g4379
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3877
sg3633
g4400
sg3648
g3871
sg3642
g4407
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3769
sg3633
g3765
sg3648
g3776
sg3642
g3773
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3692
sg3633
g3688
sg3648
g3699
sg3642
g3696
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4107
sg3633
g4372
sg3648
g4114
sg3642
g4379
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3937
sg3633
g4301
sg3648
g3944
sg3642
g4308
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3658
sg3633
g4467
sg3648
g3665
sg3642
g4474
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3692
sg3633
g4482
sg3648
g3699
sg3642
g4489
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3843
sg3633
g3833
sg3648
g3837
sg3642
g3841
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3646
sg3633
g4208
sg3648
g3638
sg3642
g4215
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3769
sg3633
g3765
sg3648
g3776
sg3642
g3773
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3854
sg3633
g4536
sg3648
g3861
sg3642
g4543
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4561
sg3633
g4551
sg3648
g4555
sg3642
g4559
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3769
sg3633
g4159
sg3648
g3776
sg3642
g4166
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3937
sg3633
g4301
sg3648
g3944
sg3642
g4308
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3820
sg3633
g4006
sg3648
g3827
sg3642
g4013
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3854
sg3633
g4536
sg3648
g3861
sg3642
g4543
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3926
sg3633
g3991
sg3648
g3920
sg3642
g3998
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4184
sg3633
g4316
sg3648
g4178
sg3642
g4323
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3681
sg3633
g4646
sg3648
g3675
sg3642
g4653
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4195
sg3633
g4191
sg3648
g4202
sg3642
g4199
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3646
sg3633
g4208
sg3648
g3638
sg3642
g4215
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g4561
sg3633
g4687
sg3648
g4555
sg3642
g4694
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3739
sg3633
g4702
sg3648
g3746
sg3642
g4709
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3909
sg3633
g3899
sg3648
g3903
sg3642
g3907
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3715
sg3633
g3976
sg3648
g3709
sg3642
g3983
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3926
sg3633
g3991
sg3648
g3920
sg3642
g3998
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3792
sg3633
g3782
sg3648
g3786
sg3642
g3790
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3681
sg3633
g4646
sg3648
g3675
sg3642
g4653
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g4561
sg3633
g4687
sg3648
g4555
sg3642
g4694
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3658
sg3633
g4467
sg3648
g3665
sg3642
g4474
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4561
sg3633
g4687
sg3648
g4555
sg3642
g4694
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g4195
sg3633
g4821
sg3648
g4202
sg3642
g4828
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3658
sg3633
g4467
sg3648
g3665
sg3642
g4474
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3877
sg3633
g3867
sg3648
g3871
sg3642
g3875
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3820
sg3633
g3816
sg3648
g3827
sg3642
g3824
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3843
sg3633
g3884
sg3648
g3837
sg3642
g3891
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4184
sg3633
g4174
sg3648
g4178
sg3642
g4182
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g4195
sg3633
g4191
sg3648
g4202
sg3642
g4199
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3803
sg3633
g3799
sg3648
g3810
sg3642
g3807
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3681
sg3633
g4646
sg3648
g3675
sg3642
g4653
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4184
sg3633
g4174
sg3648
g4178
sg3642
g4182
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3926
sg3633
g3991
sg3648
g3920
sg3642
g3998
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3937
sg3633
g3933
sg3648
g3944
sg3642
g3941
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3843
sg3633
g3884
sg3648
g3837
sg3642
g3891
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3792
sg3633
g3782
sg3648
g3786
sg3642
g3790
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3681
sg3633
g3671
sg3648
g3675
sg3642
g3679
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3877
sg3633
g3867
sg3648
g3871
sg3642
g3875
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4561
sg3633
g4551
sg3648
g4555
sg3642
g4559
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4107
sg3633
g4372
sg3648
g4114
sg3642
g4379
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4561
sg3633
g4687
sg3648
g4555
sg3642
g4694
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3843
sg3633
g3833
sg3648
g3837
sg3642
g3841
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3792
sg3633
g4331
sg3648
g3786
sg3642
g4338
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3877
sg3633
g4400
sg3648
g3871
sg3642
g4407
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3692
sg3633
g4482
sg3648
g3699
sg3642
g4489
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3926
sg3633
g3916
sg3648
g3920
sg3642
g3924
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3843
sg3633
g3884
sg3648
g3837
sg3642
g3891
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3681
sg3633
g3671
sg3648
g3675
sg3642
g3679
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3854
sg3633
g4536
sg3648
g3861
sg3642
g4543
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3803
sg3633
g4088
sg3648
g3810
sg3642
g4095
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3692
sg3633
g4482
sg3648
g3699
sg3642
g4489
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3854
sg3633
g3850
sg3648
g3861
sg3642
g3858
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3877
sg3633
g4400
sg3648
g3871
sg3642
g4407
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3937
sg3633
g4301
sg3648
g3944
sg3642
g4308
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3803
sg3633
g3799
sg3648
g3810
sg3642
g3807
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3937
sg3633
g4301
sg3648
g3944
sg3642
g4308
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3646
sg3633
g4208
sg3648
g3638
sg3642
g4215
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3739
sg3633
g4702
sg3648
g3746
sg3642
g4709
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3658
sg3633
g4467
sg3648
g3665
sg3642
g4474
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3854
sg3633
g3850
sg3648
g3861
sg3642
g3858
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3769
sg3633
g4159
sg3648
g3776
sg3642
g4166
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3715
sg3633
g3976
sg3648
g3709
sg3642
g3983
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g4184
sg3633
g4174
sg3648
g4178
sg3642
g4182
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3792
sg3633
g4331
sg3648
g3786
sg3642
g4338
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4184
sg3633
g4174
sg3648
g4178
sg3642
g4182
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3658
sg3633
g4467
sg3648
g3665
sg3642
g4474
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3692
sg3633
g4482
sg3648
g3699
sg3642
g4489
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4107
sg3633
g4372
sg3648
g4114
sg3642
g4379
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g4184
sg3633
g4316
sg3648
g4178
sg3642
g4323
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3715
sg3633
g3705
sg3648
g3709
sg3642
g3713
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3769
sg3633
g3765
sg3648
g3776
sg3642
g3773
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3681
sg3633
g3671
sg3648
g3675
sg3642
g3679
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3820
sg3633
g4006
sg3648
g3827
sg3642
g4013
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3803
sg3633
g4088
sg3648
g3810
sg3642
g4095
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3803
sg3633
g3799
sg3648
g3810
sg3642
g3807
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3820
sg3633
g3816
sg3648
g3827
sg3642
g3824
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3909
sg3633
g4047
sg3648
g3903
sg3642
g4054
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3681
sg3633
g4646
sg3648
g3675
sg3642
g4653
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3854
sg3633
g4536
sg3648
g3861
sg3642
g4543
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3843
sg3633
g3833
sg3648
g3837
sg3642
g3841
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4561
sg3633
g4551
sg3648
g4555
sg3642
g4559
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4107
sg3633
g4103
sg3648
g4114
sg3642
g4111
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3792
sg3633
g4331
sg3648
g3786
sg3642
g4338
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g4561
sg3633
g4687
sg3648
g4555
sg3642
g4694
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3646
sg3633
g3634
sg3648
g3638
sg3642
g3643
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4561
sg3633
g4551
sg3648
g4555
sg3642
g4559
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4195
sg3633
g4821
sg3648
g4202
sg3642
g4828
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3739
sg3633
g4702
sg3648
g3746
sg3642
g4709
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g4184
sg3633
g4316
sg3648
g4178
sg3642
g4323
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3937
sg3633
g3933
sg3648
g3944
sg3642
g3941
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3877
sg3633
g4400
sg3648
g3871
sg3642
g4407
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3792
sg3633
g4331
sg3648
g3786
sg3642
g4338
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3692
sg3633
g4482
sg3648
g3699
sg3642
g4489
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3803
sg3633
g4088
sg3648
g3810
sg3642
g4095
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3681
sg3633
g3671
sg3648
g3675
sg3642
g3679
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3739
sg3633
g4702
sg3648
g3746
sg3642
g4709
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3937
sg3633
g3933
sg3648
g3944
sg3642
g3941
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g4195
sg3633
g4191
sg3648
g4202
sg3642
g4199
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3820
sg3633
g4006
sg3648
g3827
sg3642
g4013
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3926
sg3633
g3916
sg3648
g3920
sg3642
g3924
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3692
sg3633
g3688
sg3648
g3699
sg3642
g3696
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3769
sg3633
g4159
sg3648
g3776
sg3642
g4166
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3854
sg3633
g4536
sg3648
g3861
sg3642
g4543
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3909
sg3633
g4047
sg3648
g3903
sg3642
g4054
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3715
sg3633
g3976
sg3648
g3709
sg3642
g3983
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g4107
sg3633
g4103
sg3648
g4114
sg3642
g4111
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3692
sg3633
g3688
sg3648
g3699
sg3642
g3696
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4195
sg3633
g4821
sg3648
g4202
sg3642
g4828
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3792
sg3633
g3782
sg3648
g3786
sg3642
g3790
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3739
sg3633
g4702
sg3648
g3746
sg3642
g4709
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3843
sg3633
g3884
sg3648
g3837
sg3642
g3891
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3803
sg3633
g3799
sg3648
g3810
sg3642
g3807
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3820
sg3633
g3816
sg3648
g3827
sg3642
g3824
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3715
sg3633
g3976
sg3648
g3709
sg3642
g3983
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3926
sg3633
g3916
sg3648
g3920
sg3642
g3924
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4107
sg3633
g4103
sg3648
g4114
sg3642
g4111
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4195
sg3633
g4821
sg3648
g4202
sg3642
g4828
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4107
sg3633
g4372
sg3648
g4114
sg3642
g4379
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4561
sg3633
g4551
sg3648
g4555
sg3642
g4559
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3715
sg3633
g3705
sg3648
g3709
sg3642
g3713
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3926
sg3633
g3991
sg3648
g3920
sg3642
g3998
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3877
sg3633
g4400
sg3648
g3871
sg3642
g4407
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3909
sg3633
g4047
sg3648
g3903
sg3642
g4054
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4195
sg3633
g4821
sg3648
g4202
sg3642
g4828
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4184
sg3633
g4316
sg3648
g4178
sg3642
g4323
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3658
sg3633
g3654
sg3648
g3665
sg3642
g3662
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3820
sg3633
g4006
sg3648
g3827
sg3642
g4013
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3769
sg3633
g4159
sg3648
g3776
sg3642
g4166
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3739
sg3633
g3735
sg3648
g3746
sg3642
g3743
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4195
sg3633
g4191
sg3648
g4202
sg3642
g4199
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3843
sg3633
g3833
sg3648
g3837
sg3642
g3841
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3681
sg3633
g4646
sg3648
g3675
sg3642
g4653
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3769
sg3633
g3765
sg3648
g3776
sg3642
g3773
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3715
sg3633
g3705
sg3648
g3709
sg3642
g3713
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I83431760
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\xb8\xf8\n\x1f\xe0\xf8\n\x1fH\xfa\n\x1f\x90+\n\x1f\x08\xf9\n\x1f 1\x0b\x1f\x08\xf9\n\x1f\xe0\xf8\n\x1f\xc0+\n\x1f\xb0,\n\x1f\x08\xf9\n\x1f@1\x0b\x1fH$\x0b\x1f0\xf9\n\x1f\xf0+\n\x1f\x98\xfa\n\x1f\x80\xf9\n\x1fH$\x0b\x1f\xa0#\x0b\x1f\xc0\xfa\n\x1f\x08\xf9\n\x1f`1\x0b\x1f\xe0\xf8\n\x1fX\xf9\n\x1f\x08\xf9\n\x1f\xb0,\n\x1f\x08\xf9\n\x1f ,\n\x1f\xc0\xfa\n\x1f\xe0,\n\x1fH\xfa\n\x1f\x801\x0b\x1f\xa0#\x0b\x1f0\xf9\n\x1f\x10$\x0b\x1f\xb8\xf8\n\x1f\xa8\xf9\n\x1f\xd8#\x0b\x1f\xb0,\n\x1f\xe0\xf8\n\x1f\xc0\xfa\n\x1f\xa8\xf9\n\x1f\xd0\xf9\n\x1f\xd8#\x0b\x1f ,\n\x1f\xa0#\x0b\x1f\xf0+\n\x1f\x10$\x0b\x1f\xa0#\x0b\x1fX\xf9\n\x1f\xc0+\n\x1f\x80$\x0b\x1fX\xf9\n\x1f\xe8\xfa\n\x1f\xe0\xf8\n\x1f@1\x0b\x1f0\xf9\n\x1f\x80,\n\x1f\x10$\x0b\x1f\xb0,\n\x1f\xa0#\x0b\x1fH\xfa\n\x1f\xa8\xf9\n\x1f\xd8#\x0b\x1f ,\n\x1f\x801\x0b\x1f ,\n\x1f\x80$\x0b\x1f\xf8\xf9\n\x1fp\xfa\n\x1f 1\x0b\x1f\xc0\xfa\n\x1f ,\n\x1f@1\x0b\x1f\xd0\xf9\n\x1f`1\x0b\x1f\x801\x0b\x1f\xa8\xf9\n\x1f\x90+\n\x1f\x801\x0b\x1f ,\n\x1fX\xf9\n\x1f\xf0+\n\x1fp\xfa\n\x1f\x80\xf9\n\x1f\x10$\x0b\x1f\x10\xfb\n\x1f\xd0\xf9\n\x1f\x10\xfb\n\x1f\xa0#\x0b\x1f\xb8\xf8\n\x1f\xc01\x0b\x1f\x90+\n\x1f ,\n\x1f\xc0\xfa\n\x1f\xa0-\n\x1f 1\x0b\x1f\xe0\xf8\n\x1f\xf0$\x0b\x1f\x08\xf9\n\x1f 1\x0b\x1f\xa0#\x0b\x1f0\xf9\n\x1f\x08\xf9\n\x1fp-\n\x1f\xf8\xf9\n\x1fX\xf9\n\x1f 1\x0b\x1f0\xf9\n\x1f\x10$\x0b\x1f\x90+\n\x1f`1\x0b\x1f\xb8\xf8\n\x1f`1\x0b\x1f\x80\xf9\n\x1f\x10$\x0b\x1f\xa8\xf9\n\x1f 1\x0b\x1f0\xf9\n\x1f\x90+\n\x1f\xd8#\x0b\x1f\xc0+\n\x1f@-\n\x1f\xd0\xf9\n\x1f\xc0\xfa\n\x1f\xc0+\n\x1f\xb8\xf8\n\x1f\x80$\x0b\x1f\xe8\xfa\n\x1f0\xf9\n\x1f\x80\xf9\n\x1f\xc0+\n\x1f\xb8$\x0b\x1f\x10$\x0b\x1f\x80\xf9\n\x1f 1\x0b\x1f0\xf9\n\x1f\x98\xfa\n\x1f\x801\x0b\x1f`1\x0b\x1f\xf8\xf9\n\x1f\xf0+\n\x1f\x80\xf9\n\x1f\x10$\x0b\x1f\xf8\xf9\n\x1f\xf0+\n\x1f\xd0\xf9\n\x1f\xc01\x0b\x1f\xb0,\n\x1f\xa0-\n\x1f\xd0\xf9\n\x1f\xb8\xf8\n\x1f`1\x0b\x1f\xa0-\n\x1fX\xf9\n\x1f@-\n\x1f\x90+\n\x1f`1\x0b\x1f@1\x0b\x1f\x08\xf9\n\x1f\xd0\xf9\n\x1f\xf8\xf9\n\x1f\x10$\x0b\x1f ,\n\x1f`1\x0b\x1fP,\n\x1fX\xf9\n\x1f@1\x0b\x1f\x08\xf9\n\x1f\xa8\xf9\n\x1f\xd0\xf9\n\x1f\xc0+\n\x1f\x10\xfb\n\x1f`1\x0b\x1f@1\x0b\x1f\x80,\n\x1f\xa0#\x0b\x1f0\xf9\n\x1f\xe0\xf8\n\x1f@1\x0b\x1f\xf8\xf9\n\x1f 1\x0b\x1f\x10-\n\x1f\xe0\xf8\n\x1f\xa8\xf9\n\x1f\xc0+\n\x1fP,\n\x1f\x80$\x0b\x1fX\xf9\n\x1f\x90+\n\x1f\xa0#\x0b\x1f\xf8\xf9\n\x1f\xb8\xf8\n\x1f\xd0\xf9\n\x1f\x801\x0b\x1f\x90+\n\x1f\x801\x0b\x1f@1\x0b\x1f\xe8\xfa\n\x1f\xc0+\n\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\x00\x01M\r`2\x0b\x1f@3\x0b\x1f 3\x0b\x1f\xa03\x0b\x1f`3\x0b\x1f\xe03\x0b\x1f@4\x0b\x1f\x004\x0b\x1f\xc03\x0b\x1f\xe01\x0b\x1f 4\x0b\x1f\xa04\x0b\x1f\x804\x0b\x1f\x003\x0b\x1f\x005\x0b\x1f 5\x0b\x1f\xe02\x0b\x1f 2\x0b\x1f\x805\x0b\x1f\xa05\x0b\x1f\xa02\x0b\x1f\x803\x0b\x1f\xc05\x0b\x1f 6\x0b\x1f\x006\x0b\x1f`6\x0b\x1f@6\x0b\x1f\xa06\x0b\x1f\x806\x0b\x1f\x002\x0b\x1f\xc06\x0b\x1f\xe06\x0b\x1f@7\x0b\x1f`7\x0b\x1f\x807\x0b\x1f\xc02\x0b\x1f`4\x0b\x1f\xa07\x0b\x1f\x008\x0b\x1f\xe07\x0b\x1f@8\x0b\x1f`8\x0b\x1f\x808\x0b\x1f@5\x0b\x1f\xc08\x0b\x1f\xe08\x0b\x1f\xe04\x0b\x1f@2\x0b\x1f\x009\x0b\x1f`9\x0b\x1f@9\x0b\x1f 7\x0b\x1f\xe09\x0b\x1f\xa09\x0b\x1f\xc09\x0b\x1f 9\x0b\x1f@:\x0b\x1f :\x0b\x1f 8\x0b\x1f\xa0:\x0b\x1f\x80:\x0b\x1f\xe0:\x0b\x1f\xc0:\x0b\x1f\xa08\x0b\x1f@;\x0b\x1f`;\x0b\x1f\xc07\x0b\x1f\xa0;\x0b\x1f\xc0;\x0b\x1f\xe0;\x0b\x1f\x809\x0b\x1f <\x0b\x1f\x00<\x0b\x1f\x802\x0b\x1f@<\x0b\x1f`<\x0b\x1f\x80<\x0b\x1f\xe0<\x0b\x1f\xc0<\x0b\x1f`5\x0b\x1f@=\x0b\x1f =\x0b\x1f\xe05\x0b\x1f`=\x0b\x1f\x80=\x0b\x1f\xe0=\x0b\x1f\xc0=\x0b\x1f\x007\x0b\x1f\x00>\x0b\x1f >\x0b\x1f\x80>\x0b\x1f\xa0>\x0b\x1f\x00;\x0b\x1f\xe0>\x0b\x1f\xc0>\x0b\x1f ?\x0b\x1f\xa0?\x0b\x1f@>\x0b\x1f ;\x0b\x1f`:\x0b\x1f\xc04\x0b\x1f`>\x0b\x1f\xa0<\x0b\x1f\x00=\x0b\x1f\xc0?\x0b\x1f\x00:\x0b\x1f@?\x0b\x1f\x80;\x0b\x1f\x80?\x0b\x1f \x1c\xc2\x1e@\x01M\r\x00?\x0b\x1f\xa0=\x0b\x1f\x80\xd01\x1f@\xd21\x1f`\xd01\x1f\x80\xd11\x1f \xd11\x1f@\xd01\x1f\xe0\xd11\x1f`\xd21\x1f\xc0\xd11\x1f\xe0\xd01\x1f\xa0\xd21\x1f\x80\xd21\x1f\xc0\xd01\x1f\xe0\xd21\x1f@\xd31\x1f \xd31\x1f\x80\xd31\x1f`\xd31\x1f\x00\xd21\x1f\xe0\xd31\x1f\xc0\xd31\x1f \xd41\x1f@\xd41\x1f\x00\xd11\x1f\xa0\xd01\x1f\xa0\xd41\x1f\xc0\xd41\x1f \xd21\x1f\x00\xd51\x1f\xe0\xd41\x1f\xa0\xd31\x1f`\xd51\x1f@\xd51\x1f\xa0\xd11\x1f\x80\xd51\x1f\xa0\xd51\x1f\xc0\xd51\x1f \xd61\x1f\x00\xd61\x1f`\xd41\x1f\x80\xd61\x1f`\xd61\x1f \xd51\x1f\xe0\xd61\x1f\x00\xd71\x1f@\xd11\x1f \xd01\x1f`\xd71\x1f\x80\xd71\x1f\xa0\xd71\x1f`\xd11\x1f\xe0\xd71\x1f \x1e\xc2\x1e\x00\xd31\x1f\xc0\xd71\x1f`\xd81\x1f@\xd61\x1f\xe0\xd51\x1f \xd91\x1f@\xd71\x1f\x00\xd91\x1f\x00\xd41\x1f@\xd81\x1f \xd81\x1f\x80\xd41\x1f\xc0\xd91\x1f \xda1\x1f`\xd91\x1f\xe0\xd81\x1f\xa0\xda1\x1f@\xda1\x1f\xc0\xda1\x1f \xd71\x1f\x80\xd91\x1f\xa0\xd91\x1f\xc0\xd21\x1f\xe0\xd91\x1f\x00\xd81\x1f\xa0\xd81\x1f@\xdb1\x1f\x00\xda1\x1f\xc0\xdb1\x1f@\xdc1\x1f@\xd91\x1f\x00\xdc1\x1f\x80\xd81\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xab\xd4]?L\xec.?\xd5\x88H?\xbb33?\xc3\x98Y?u\xca\x0c?\xef\x1f"?y\x99\x19?\xca\x83H?>\xaa*?\xad\x10\x11?\xfeR\x15?x\xdd\x1d?i\x00@?\xfe\x1d"?\xa1\xbb;?\xff\x95\x19?\xe9\xf5\x1d?\xcdww?\xfa\xb4;?\xcd\xd6\x1d?\x88\xc8L?\xfd!"?d\xe4L?\xa7#"?\xd123?\x8d\xcc\x0c?\x14\xdd\x1d?\x0f\xa4*?\xa2\x07/?\x1az7?\x91\xef.?pCD?c\xbb;?#d&?\xa0\x04/?P\xf0.?\xd1\xd8\x1d?\x9e3s?\xc2S\x15?\x88\xe9.?I\xb0Y?\x0b\x11"?\x06)3?-\xad*?\xd5\xfd??\x11\xe0\x1d?cg&?\xa4\x9d\x19?\x18\x00@?\xa6\xbb;?Y\xff??Ki&?\xcf\x99\x19?\xe7C\x04?\xd4\x10\x11?\xfce&?\xc2\x88H?,\x11\x91?im\x15?m\x0fQ?\x04\xcdL?\x13\x00@?\xec\x08Q?\xc9\xc5L?\xa3\xc3*?j\x88\x19?\x05o7?\x88x7?0m7?E\xab*?\xe6\xe6.?\x86R\x15?\xf2S\x15?\xb0\xd7.?\x03\xa5*?[\xaa*?b\xc2*?\xb2\xfa??\xce\xdb\x1d?(\xeb.?\x06\xbc;?DE\x04?\x81\xe2\x0c?\xf8\xb5;?9\x00@?\xea\x0bQ?A\xcb\x1d?p\xcc\x0c?\t\x1c\xef>\xdd\x85H?\xb1\x1f"?\xc2\xab*?$\xe0\x1d?\x97\xa6\x8a?\x84\xc0*?R\x12\x11?mDD?kv7?\xe9\xda\x1d?NE\x04?\xad\x9eH?\xae\xccL?O\xc8\x0c?\x0b\xf0??F\x8aH?\xe0d\x86?u9"?\xe0y7?Y\xc6L?k7"?\x06\x12Q?\xee\x98Y?\xbeg&?9w7?=\x9c\x19?d\x1fb?\xcd\xcd\x0c?\xc4\xfe\x7f?\x16\xf5\x1d?\xec^&?\x92 "?7\xab*?l\x1f3?{j7?O\xc9;?\xb4\x84H?gt7?LY&?\xe8\xff??\xb8 "?\xf8\x05/?\xea\xcdL?B\x84H?\xbb\x87\x88?\xee\xd6\x1d?\t\xd4]?$\xde]?\x88$"?@\xceL?\xfc\x84H?\xc8_&?\x15\xef.?\x1d13?\xa5\xcc\x0c?\xf4\x1f"?Z\xbaL?\x01\xef.?\xf4\xce\x1d?\r\x82\x08?Sy\x08?Z\xbb;?\x87\x12\x11?\xe9\xbf;?s\xfe??^g&?\x0553?\xa1\x9cY?\xf1\x99\x19?\x15\xce\x0c?\xb4\xbe\x0c?\xd0\xc2*?o\xdd\x1d?\xd8\xbc;?\xb9\x88\x08?\xc4T\x15?P\xbcL?Z\xb1\x19?&\xc7L?\xd1\xa5j?D\xde.?\x1d\xdf]?P\x84H?\xafR\xb5?\x17\x0bQ?A\xc8L?\x81\xcbL?\x80\x9f*?@p\x15?\xe9\xd8]?\x1f "?\xa6\x9a\x19?\x90\xdb]?\x95\x12\x11?\xa0\xa3H?xRU?1/3?I\x12Q?\x06CD?hg&?n\x8e7?\x96\xcaL?\x0e\xacj?\xd0\xcb\x1d?\xff)3?h\xee.?\xf9+\x11?\x1ef&?\xb0\x98\x19?p\x99\x19?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'8S\xcb\x04\xa8R\xcb\x04P\x9c\xcc\x04\xb8\x9d\xcc\x04 \x96\xcc\x04\xd0\x91\xcc\x04\xe0\x93\xcc\x048\x93\xcc\x04\xc8\x90\xcc\x04\x80\x99\xcc\x04\xa8\x9b\xcc\x04`\x98\xcc\x04\x98\x9f\xcc\x04\x10\x91\xcc\x04(\x9d\xcc\x04\x18\x95\xcc\x04`\x95\xcc\x040\x92\xcc\x04\xf0\x98\xcc\x04\x08\x93\xcc\x04h\x93\xcc\x04 \x90\xcc\x04`\xae\xfb\x040\xae\xfb\x04(\xad\xfb\x04\x10\xa7\xfb\x04P\xa0\xfb\x04h\xa6\xfb\x04\x88\xa4\xfb\x04p\xa4\xfb\x04@\xa7\xfb\x04\x98\xaf\xfb\x04\xb8\xa4\xfb\x04\xd8\xa8\xfb\x04H\xa2\xfb\x04H\xa5\xfb\x04\xd0\xaa\xfb\x04\xb8\xaa\xfb\x04\x88\xa1\xfb\x04\xd8\xa5\xfb\x04x\xa8\xfb\x04\xa0\xa4\xfb\x04\xd0\xa1\xfb\x04\x98\xa0\xfb\x04\xb8\xa1\xfb\x04\xc8\xa0\xfb\x04\xc0\xa8\xfb\x040\xa2\xfb\x04 \xa9\xfb\x04\xe0\xa3\xfb\x04\xd0\xad\xfb\x04\x08\xa3\xfb\x04x\xa5\xfb\x04\xe0\xac\xfb\x04\x18\xa8\xfb\x04\x00\xa2\xfb\x04\xd8\xab\xfb\x04\xc0\xae\xfb\x04\xd8\xa2\xfb\x04\x18\xab\xfb\x04\xa8\xa2\xfb\x04\x90\xae\xfb\x04(\xa1\xfb\x04\x80\xa3\xfb\x04\xb0\xa6\xfb\x04\xf8\xa9\xfb\x04\x18\xa5\xfb\x04\xe8\xa7\xfb\x04`\xa8\xfb\x04\x98\xa3\xfb\x04\xc0\xa2\xfb\x04h\xa0\xfb\x048\xac\xfb\x04\x10\xa1\xfb\x04\xf0\xa2\xfb\x04\xd0\xa4\xfb\x04\xc8\xac\xfb\x04\x80\xa6\xfb\x04\xf8\xa3\xfb\x04\x18\xa2\xfb\x04`\xa5\xfb\x04\x90\xa2\xfb\x04\xf0\xa8\xfb\x04(\xaa\xfb\x04\x88\xad\xfb\x04\xb0\xa3\xfb\x04H\xab\xfb\x048\xa6\xfb\x04H\xa8\xfb\x04 \xa6\xfb\x04`\xa2\xfb\x04\xd8\xae\xfb\x04\xe8\xa1\xfb\x04\x08\xa6\xfb\x04P\xaf\xfb\x04\xf0\xae\xfb\x040\xa5\xfb\x04(\xa7\xfb\x04 \xac\xfb\x04\x10\xa4\xfb\x040\xa8\xfb\x04\xf8\xac\xfb\x04\xb0\xaf\xfb\x04@\xa4\xfb\x04\x80\xa9\xfb\x04\xb8\xa7\xfb\x04\xb0\xa0\xfb\x04p\xaa\xfb\x04\xa8\xa8\xfb\x040\xab\xfb\x04@\xad\xfb\x04\x10\xaa\xfb\x04\xa8\xae\xfb\x04X\xa4\xfb\x04\xc8\xa3\xfb\x04\x90\xab\xfb\x04\x98\xa6\xfb\x04\xc0\xab\xfb\x048\xaf\xfb\x04X\xaa\xfb\x04\xf8\xa6\xfb\x04\xf8\xa0\xfb\x04\xa0\xa7\xfb\x04x\xa2\xfb\x04\xb8\xad\xfb\x04\x88\xaa\xfb\x04\x80\xac\xfb\x04\x88\xa7\xfb\x04p\xa1\xfb\x04\x08\xaf\xfb\x04p\xad\xfb\x04\x00\xab\xfb\x04\x80\xa0\xfb\x04h\xaf\xfb\x04\xa8\xa5\xfb\x04 \xa3\xfb\x04\xb0\xac\xfb\x04X\xa7\xfb\x04\x10\xad\xfb\x04\x98\xac\xfb\x04\xe8\xaa\xfb\x04@\xaa\xfb\x04 \xaf\xfb\x04\x08\xa9\xfb\x04`\xab\xfb\x04P\xac\xfb\x04\x90\xa5\xfb\x04P\xa3\xfb\x04\xe0\xaf\xfb\x04p\xa7\xfb\x04X\xa1\xfb\x04X\xad\xfb\x04x\xab\xfb\x04\xf0\xa5\xfb\x04H\xae\xfb\x04\xc8\xa6\xfb\x04\xa0\xad\xfb\x04\xc0\xa5\xfb\x04\xc8\xa9\xfb\x04\xf0\xab\xfb\x04\x98\xa9\xfb\x04\x00\xa5\xfb\x04\x80\xaf\xfb\x04\xc8\xaf\xfb\x04\x08\xac\xfb\x04h\xac\xfb\x04P\xa6\xfb\x04\xa8\xab\xfb\x04\xe0\xa6\xfb\x04h\xa9\xfb\x04\x90\xa8\xfb\x048\xa9\xfb\x04\xa0\xa1\xfb\x04\xd0\xa7\xfb\x04\xa0\xaa\xfb\x04h\xa3\xfb\x04\xe8\xad\xfb\x04x\xae\xfb\x04\x98\x96\xcc\x04\xc8\x93\xcc\x04\x80\x90\xcc\x04\xf0\x9b\xcc\x04\xd0\x9a\xcc\x04`\x92\xcc\x04 \x9c\xcc\x04\xe8\x9a\xcc\x04\x00\x9b\xcc\x04\x98\x90\xcc\x04h\x96\xcc\x04\xd8\x98\xcc\x04\xf0\x95\xcc\x04H\x9b\xcc\x04\xe8\x94\xcc\x04\x80\x96\xcc\x04\x98\x99\xcc\x04\xc8\x99\xcc\x04P\x96\xcc\x04\x08\x96\xcc\x04X\x94\xcc\x04\x88\x94\xcc\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6445
sg6371
g6475
sg6385
g6452
sg6380
g6482
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6396
sg6371
g6490
sg6385
g6403
sg6380
g6497
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6445
sg6371
g6475
sg6385
g6452
sg6380
g6482
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6462
sg6371
g6569
sg6385
g6469
sg6380
g6576
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6445
sg6371
g6475
sg6385
g6452
sg6380
g6482
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6624
sg6371
g6738
sg6385
g6618
sg6380
g6745
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6532
sg6371
g6766
sg6385
g6526
sg6380
g6773
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6688
sg6371
g6811
sg6385
g6682
sg6380
g6818
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6588
sg6371
g6826
sg6385
g6595
sg6380
g6833
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6858
sg6371
g6854
sg6385
g6865
sg6380
g6862
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6665
sg6371
g6871
sg6385
g6672
sg6380
g6878
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6903
sg6371
g6899
sg6385
g6910
sg6380
g6907
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6688
sg6371
g6811
sg6385
g6682
sg6380
g6818
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6532
sg6371
g6766
sg6385
g6526
sg6380
g6773
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6688
sg6371
g6811
sg6385
g6682
sg6380
g6818
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6933
sg6371
g6998
sg6385
g6940
sg6380
g7005
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6798
sg6371
g7043
sg6385
g6805
sg6380
g7050
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6665
sg6371
g6871
sg6385
g6672
sg6380
g6878
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6532
sg6371
g6766
sg6385
g6526
sg6380
g6773
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6903
sg6371
g6899
sg6385
g6910
sg6380
g6907
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6665
sg6371
g6871
sg6385
g6672
sg6380
g6878
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6509
sg6371
g7123
sg6385
g6516
sg6380
g7130
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6635
sg6371
g7138
sg6385
g6642
sg6380
g7145
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6858
sg6371
g7166
sg6385
g6865
sg6380
g7173
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6556
sg6371
g7194
sg6385
g6563
sg6380
g7201
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6588
sg6371
g6826
sg6385
g6595
sg6380
g6833
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6509
sg6371
g7123
sg6385
g6516
sg6380
g7130
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6903
sg6371
g6899
sg6385
g6910
sg6380
g6907
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6688
sg6371
g6811
sg6385
g6682
sg6380
g6818
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6798
sg6371
g7043
sg6385
g6805
sg6380
g7050
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6858
sg6371
g7166
sg6385
g6865
sg6380
g7173
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6798
sg6371
g7043
sg6385
g6805
sg6380
g7050
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g7369
sg6371
g7365
sg6385
g7376
sg6380
g7373
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6396
sg6371
g6490
sg6385
g6403
sg6380
g6497
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6462
sg6371
g6569
sg6385
g6469
sg6380
g6576
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6556
sg6371
g7194
sg6385
g6563
sg6380
g7201
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g7017
sg6371
g7447
sg6385
g7024
sg6380
g7454
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6712
sg6371
g7462
sg6385
g6719
sg6380
g7469
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6858
sg6371
g6854
sg6385
g6865
sg6380
g6862
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6933
sg6371
g6998
sg6385
g6940
sg6380
g7005
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6858
sg6371
g6854
sg6385
g6865
sg6380
g6862
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6798
sg6371
g7043
sg6385
g6805
sg6380
g7050
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6624
sg6371
g6738
sg6385
g6618
sg6380
g6745
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6532
sg6371
g6766
sg6385
g6526
sg6380
g6773
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6396
sg6371
g6490
sg6385
g6403
sg6380
g6497
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6903
sg6371
g7594
sg6385
g6910
sg6380
g7601
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6665
sg6371
g6871
sg6385
g6672
sg6380
g6878
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g7369
sg6371
g7726
sg6385
g7376
sg6380
g7733
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6396
sg6371
g6490
sg6385
g6403
sg6380
g6497
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6903
sg6371
g7594
sg6385
g6910
sg6380
g7601
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6445
sg6371
g6475
sg6385
g6452
sg6380
g6482
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g7369
sg6371
g7726
sg6385
g7376
sg6380
g7733
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6462
sg6371
g6458
sg6385
g6469
sg6380
g6466
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6903
sg6371
g6899
sg6385
g6910
sg6380
g6907
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6903
sg6371
g7594
sg6385
g6910
sg6380
g7601
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6933
sg6371
g6998
sg6385
g6940
sg6380
g7005
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6462
sg6371
g6569
sg6385
g6469
sg6380
g6576
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6588
sg6371
g6826
sg6385
g6595
sg6380
g6833
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6428
sg6371
g6424
sg6385
g6435
sg6380
g6432
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6688
sg6371
g6678
sg6385
g6682
sg6380
g6686
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6509
sg6371
g7123
sg6385
g6516
sg6380
g7130
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6688
sg6371
g6811
sg6385
g6682
sg6380
g6818
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6635
sg6371
g7138
sg6385
g6642
sg6380
g7145
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6858
sg6371
g7166
sg6385
g6865
sg6380
g7173
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6588
sg6371
g6826
sg6385
g6595
sg6380
g6833
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6635
sg6371
g7138
sg6385
g6642
sg6380
g7145
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6903
sg6371
g7594
sg6385
g6910
sg6380
g7601
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6635
sg6371
g7138
sg6385
g6642
sg6380
g7145
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6462
sg6371
g6569
sg6385
g6469
sg6380
g6576
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6624
sg6371
g6738
sg6385
g6618
sg6380
g6745
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6858
sg6371
g6854
sg6385
g6865
sg6380
g6862
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6712
sg6371
g7462
sg6385
g6719
sg6380
g7469
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g7369
sg6371
g7365
sg6385
g7376
sg6380
g7373
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6532
sg6371
g6766
sg6385
g6526
sg6380
g6773
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6635
sg6371
g6631
sg6385
g6642
sg6380
g6639
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6903
sg6371
g6899
sg6385
g6910
sg6380
g6907
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g7369
sg6371
g7365
sg6385
g7376
sg6380
g7373
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g7017
sg6371
g7447
sg6385
g7024
sg6380
g7454
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g7369
sg6371
g7365
sg6385
g7376
sg6380
g7373
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g7017
sg6371
g7447
sg6385
g7024
sg6380
g7454
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6376
sg6371
g6409
sg6385
g6386
sg6380
g6416
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6712
sg6371
g7462
sg6385
g6719
sg6380
g7469
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g7369
sg6371
g7726
sg6385
g7376
sg6380
g7733
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6624
sg6371
g6614
sg6385
g6618
sg6380
g6622
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6798
sg6371
g7043
sg6385
g6805
sg6380
g7050
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6428
sg6371
g8521
sg6385
g6435
sg6380
g8528
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6712
sg6371
g7462
sg6385
g6719
sg6380
g7469
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6556
sg6371
g7194
sg6385
g6563
sg6380
g7201
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6445
sg6371
g6475
sg6385
g6452
sg6380
g6482
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g7017
sg6371
g7013
sg6385
g7024
sg6380
g7021
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g7369
sg6371
g7365
sg6385
g7376
sg6380
g7373
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6903
sg6371
g7594
sg6385
g6910
sg6380
g7601
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6798
sg6371
g6794
sg6385
g6805
sg6380
g6802
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6712
sg6371
g6708
sg6385
g6719
sg6380
g6716
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6428
sg6371
g8521
sg6385
g6435
sg6380
g8528
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6624
sg6371
g6738
sg6385
g6618
sg6380
g6745
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6556
sg6371
g7194
sg6385
g6563
sg6380
g7201
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6933
sg6371
g6929
sg6385
g6940
sg6380
g6937
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g7017
sg6371
g7447
sg6385
g7024
sg6380
g7454
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6933
sg6371
g6998
sg6385
g6940
sg6380
g7005
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6712
sg6371
g7462
sg6385
g6719
sg6380
g7469
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6509
sg6371
g7123
sg6385
g6516
sg6380
g7130
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6665
sg6371
g6871
sg6385
g6672
sg6380
g6878
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6588
sg6371
g6826
sg6385
g6595
sg6380
g6833
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6396
sg6371
g6490
sg6385
g6403
sg6380
g6497
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6556
sg6371
g7194
sg6385
g6563
sg6380
g7201
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g7369
sg6371
g7726
sg6385
g7376
sg6380
g7733
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6462
sg6371
g6569
sg6385
g6469
sg6380
g6576
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6933
sg6371
g6998
sg6385
g6940
sg6380
g7005
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6428
sg6371
g8521
sg6385
g6435
sg6380
g8528
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6635
sg6371
g7138
sg6385
g6642
sg6380
g7145
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6624
sg6371
g6738
sg6385
g6618
sg6380
g6745
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6428
sg6371
g8521
sg6385
g6435
sg6380
g8528
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6665
sg6371
g6661
sg6385
g6672
sg6380
g6669
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g7369
sg6371
g7726
sg6385
g7376
sg6380
g7733
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g7017
sg6371
g7447
sg6385
g7024
sg6380
g7454
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6858
sg6371
g6854
sg6385
g6865
sg6380
g6862
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6428
sg6371
g8521
sg6385
g6435
sg6380
g8528
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6858
sg6371
g7166
sg6385
g6865
sg6380
g7173
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6556
sg6371
g6552
sg6385
g6563
sg6380
g6560
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6858
sg6371
g7166
sg6385
g6865
sg6380
g7173
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6509
sg6371
g7123
sg6385
g6516
sg6380
g7130
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.