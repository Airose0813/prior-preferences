ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E3_infer_design1_2015_Jul_02_0727
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'B-\x8bue\x00N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_02_0727
p67
sVparticipant
p68
VE3
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F3.2333967288809617
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F9.4165455251970798
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P11'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F9.9000000000000004
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.83999999999999919
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p103
sg21
F1.7
sg70
Vn
sa(dp104
g64
g65
sg20
F5.7009999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.81999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x0e\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p110
sg21
F1.8999999999999999
sg70
Vn
sa(dp111
g64
g65
sg20
F5.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0.41999999999999904
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x16\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p117
sg21
F1.5
sg70
Vn
sa(dp118
g64
g65
sg20
F2.4510000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'$\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V48-twix.png
p124
sg21
F1.3999999999999999
sg70
Vn
sa(dp125
g64
g65
sg20
F2.0339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\r\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p131
sg21
F1.2
sg70
Vn
sa(dp132
g64
g65
sg20
F5.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.97999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x0b\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p138
sg21
F1.1000000000000001
sg70
Vn
sa(dp139
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.25999999999999868
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x18\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p145
sg21
F1.8
sg70
Vn
sa(dp146
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.49999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\t\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p152
sg21
F1.1000000000000001
sg70
Vn
sa(dp153
g64
g65
sg20
F4.2169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.99999999999999911
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x05\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p159
sg21
F1.8999999999999999
sg70
Vn
sa(dp160
g64
g65
sg20
F3.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1c\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p166
sg21
F1.7
sg70
Vn
sa(dp167
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.43999999999999884
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x13\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p173
sg21
F1.7
sg70
Vn
sa(dp174
g64
g65
sg20
F1.8009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.79999999999999982
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S"'\x00\x00\x00"
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V51-mars.png
p180
sg21
F1
sg70
Vn
sa(dp181
g64
g65
sg20
F2.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.51999999999999935
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x08\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p187
sg21
F1.3
sg70
Vn
sa(dp188
g64
g65
sg20
F4.0510000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.47999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x03\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V4-corn.png
p194
sg21
F1.2
sg70
Vn
sa(dp195
g64
g65
sg20
F3.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.49999999999999867
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x14\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p201
sg21
F1.8999999999999999
sg70
Vn
sa(dp202
g64
g65
sg20
F3.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'#\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p208
sg21
F2
sg70
Vn
sa(dp209
g64
g65
sg20
F2.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x07\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p215
sg21
F1.7
sg70
Vn
sa(dp216
g64
g65
sg20
F2.6509999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.97999999999999932
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x0c\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V18-mms.png
p222
sg21
F1.7
sg70
Vn
sa(dp223
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.7599999999999989
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\n\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p229
sg21
F1.8999999999999999
sg70
Vn
sa(dp230
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.41999999999999926
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x19\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p236
sg21
F1.2
sg70
Vn
sa(dp237
g64
g65
sg20
F1.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.47999999999999954
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x11\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p243
sg21
F1.1000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F3.7669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.95999999999999952
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'!\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V44-crunch.png
p250
sg21
F1.5
sg70
Vn
sa(dp251
g64
g65
sg20
F2.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.47999999999999887
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'"\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p257
sg21
F1.7
sg70
Vn
sa(dp258
g64
g65
sg20
F5.2670000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.93999999999999928
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x00\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p264
sg21
F1.7
sg70
Vn
sa(dp265
g64
g65
sg20
F1.5509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.85999999999999988
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'%\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p271
sg21
F1
sg70
Vn
sa(dp272
g64
g65
sg20
F2.851
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.5399999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x01\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p278
sg21
F1.8999999999999999
sg70
Vn
sa(dp279
g64
g65
sg20
F2.984
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.65999999999999903
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'&\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V50-polo.png
p285
sg21
F1.8
sg70
Vn
sa(dp286
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1b\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p292
sg21
F1.3999999999999999
sg70
Vn
sa(dp293
g64
g65
sg20
F2.3010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x15\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V29-beans.png
p299
sg21
F1.2
sg70
Vn
sa(dp300
g64
g65
sg20
F2.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F1.0799999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x12\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p306
sg21
F1.8
sg70
Vn
sa(dp307
g64
g65
sg20
F4.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F1.3
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x1f\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p313
sg21
F1.3
sg70
Vn
sa(dp314
g64
g65
sg20
F2.3839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F1
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x17\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p320
sg21
F1
sg70
Vn
sa(dp321
g64
g65
sg20
F3.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.67999999999999883
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x06\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V7-olives.png
p327
sg21
F1.8999999999999999
sg70
Vn
sa(dp328
g64
g65
sg20
F2.1339999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x10\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V22-daim.png
p334
sg21
F1.3
sg70
Vn
sa(dp335
g64
g65
sg20
F3.0169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.71999999999999886
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x04\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p341
sg21
F2
sg70
Vn
sa(dp342
g64
g65
sg20
F2.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.29999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S' \x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p348
sg21
F1.3
sg70
Vn
sa(dp349
g64
g65
sg20
F3.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x0f\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p355
sg21
F1.3
sg70
Vn
sa(dp356
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x1d\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V40-sardines.png
p362
sg21
F1.5
sg70
Vn
sa(dp363
g64
g65
sg20
F7.367
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.23999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x1a\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V35-raisins.png
p369
sg21
F1.7
sg70
Vn
sa(dp370
g64
g65
sg20
F6.7839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.81999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x1e\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p376
sg21
F1.8999999999999999
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F3.9667853325643136
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'5-pineapple.png'
p381
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F1.2833795234187164
sg27
F1.9339999999999999
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'51-mars.png'
p390
sg26
F2.1999999999999988
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F3.7999867145892949
sg27
F2.2010000000000001
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'7-olives.png'
p399
sg26
F3.9999999999999996
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.5000813945234768
sg27
F1.417
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p408
sg26
F4.2000000000000011
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F13.399666211180374
sg27
F2.0510000000000002
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p417
sg26
F2.8999999999999999
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F4.5832834180112059
sg27
F4.234
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'35-raisins.png'
p426
sg26
F3.2999999999999998
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.0166957130602441
sg27
F18.216999999999999
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'40-sardines.png'
p435
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F27.282385683458642
sg27
F1.1839999999999999
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'49-yorkie.png'
p444
sg26
F5
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.133366138224801
sg27
F1.167
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'50-polo.png'
p453
sg26
F4.2000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.3500751366957502
sg27
F1.3340000000000001
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p462
sg26
F5.3999999999999995
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F1.1167091980373698
sg27
F0.83399999999999996
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p471
sg26
F1.4999999999999989
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F5.4999679268514683
sg27
F1.367
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p480
sg26
F4.6000000000000014
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F0.85005988413172417
sg27
F0.86699999999999999
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'48-twix.png'
p489
sg26
F3
sg28
F3
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'left'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F1.0168282820739023
sg27
F1.7010000000000001
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p498
sg26
F2.5999999999999992
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F7.0831472853144533
sg27
F1.3169999999999999
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p507
sg26
F3.6999999999999993
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.6499297099132946
sg27
F0.95099999999999996
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p516
sg26
F2.9999999999999991
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'right'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.3666576671787425
sg27
F0.95099999999999996
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p525
sg26
F5.6999999999999984
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.2000643173537355
sg27
F0.96699999999999997
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'22-daim.png'
p534
sg26
F4.6000000000000005
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'left'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.1168286526967677
sg27
F0.78400000000000003
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p543
sg26
F4.9000000000000021
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F1.0166620718912327
sg27
F1.0840000000000001
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'4-corn.png'
p552
sg26
F1.2999999999999985
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.2000289656166387
sg27
F1.101
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p561
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.0831068018737824
sg27
F0.88400000000000001
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p570
sg26
F3.7999999999999998
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.2000665981108796
sg27
F0.90100000000000002
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p579
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F0.91675920363945806
sg27
F0.98399999999999999
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'44-crunch.png'
p588
sg26
F5.5999999999999988
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F0.98337898173895155
sg27
F0.80100000000000005
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'38-maltesers.png'
p597
sg26
F3.7999999999999998
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F0.68324815180244514
sg27
F1.3340000000000001
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'25-kitkat.png'
p606
sg26
F5.1000000000000005
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F0.96669894888441377
sg27
F1.0509999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p615
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.0334173697337974
sg27
F1.6339999999999999
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'46-pistachios.png'
p624
sg26
F5.6999999999999993
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F0.93343267931663831
sg27
F1.034
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p633
sg26
F2.899999999999999
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'right'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.5000848156591928
sg27
F1.101
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p642
sg26
F3.8000000000000007
sg28
F2.7000000000000002
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F0.8500538971441074
sg27
F1.167
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p651
sg26
F3.5999999999999996
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F0.98335018717898492
sg27
F0.751
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p660
sg26
F4.2000000000000011
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F0.90003555130329005
sg27
F0.93400000000000005
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p669
sg26
F3.9000000000000008
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F4.4999593740119508
sg27
F1.1339999999999999
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p678
sg26
F5.2999999999999998
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F0.8167040948428621
sg27
F0.88400000000000001
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p687
sg26
F5.6999999999999975
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F0.8667000037348771
sg27
F0.83399999999999996
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'18-mms.png'
p696
sg26
F4.2000000000000011
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F0.90010910572345892
sg27
F1.8009999999999999
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p705
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F0.8167742281275423
sg27
F1.0009999999999999
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'31-hobnobs.png'
p714
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F0.83340094828190558
sg27
F1.3009999999999999
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'29-beans.png'
p723
sg26
F5.4000000000000004
sg28
F3
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F0.81669611219285798
sg27
F1.351
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p732
sg26
F4.7000000000000011
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F0.76670676047797315
sg27
F1.984
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F274.45589742522452
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F6.6999256188050822
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'53-cheestrings.png'
p744
sg83
S'53-cheestrings.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'47-picnic.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x02\x07(\x1a\x0c\xc1\xa0'
tRp754
sa(dp755
g64
g65
sg82
S'52-aero_mousse.png'
p756
sg83
S'14-discos_salt_vinegar.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'14-discos_salt_vinegar.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x02\x07("\x08\xfc\xc8'
tRp765
sa(dp766
g64
g65
sg82
S'12-topic.png'
p767
sg83
S'12-topic.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'39-mackerel.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x02\x07()\x0b\xea\xc8'
tRp776
sa(dp777
g64
g65
sg82
g744
sg83
S'47-picnic.png'
p778
sg56
g57
sS'practice_loop.thisN'
p779
I3
sS'practice_loop.thisTrialN'
p780
I3
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p781
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\x02\x07(1\x03\xdcH'
tRp785
sa(dp786
g64
g65
sg82
S'32-hovis_crackers.png'
p787
sg83
S'24-food_doctor_apple_walnut_bar.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x02\x07(9\x0b\xc3\xb8'
tRp796
sa(dp797
g64
g65
sg82
S'11-snickers.png'
p798
sg83
S'54-frubes_yogurt.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'54-frubes_yogurt.png'
p803
sg33
g803
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x02\x07)\x04\rB\x88'
tRp807
sa(dp808
g64
g65
sg82
S'15-walnut_whip.png'
p809
sg83
S'15-walnut_whip.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'28-maple_pecan.png'
p814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x02\x07)\x0c\t?0'
tRp818
sa(dp819
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p820
sg83
S'37-nakd_cashew_cookie.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'9-yu_mango_pieces.png'
p825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x02\x07)\x13\x00\xfd\xe8'
tRp829
sa(dp830
g64
g65
sg82
g787
sg83
S'32-hovis_crackers.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x02\x07)\x1a\x02|\xb8'
tRp838
sa(dp839
g64
g65
sg82
g798
sg83
S'11-snickers.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g803
sg33
g803
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x02\x07) \x02\x94('
tRp847
sa(dp848
g64
g65
sg82
g820
sg83
S'9-yu_mango_pieces.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g825
sg33
g825
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x02\x07)&\x05\x0c\xf8'
tRp856
sa(dp857
g64
g65
sg82
g767
sg83
S'39-mackerel.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x02\x07),\r:\xb8'
tRp865
sa(dp866
g64
g65
sg82
g809
sg83
S'28-maple_pecan.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x02\x07)3\x02Y\x90'
tRp874
sa(dp875
g64
g65
sg82
g756
sg83
S'52-aero_mousse.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x02\x07)9\re\xb0'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F118.34538647003501
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'16-skips_prawn.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'42-mrkipling_lemon_slices.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'42-mrkipling_lemon_slices.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'16-skips_prawn.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.5496379725550469
sg34
g753
(S'\x07\xdf\x07\x02\x07-1\x07C`'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'2-steamed_puddings.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'2-steamed_puddings.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'20-fruit_pastilles.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'20-fruit_pastilles.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.1998236974663996
sg34
g753
(S'\x07\xdf\x07\x02\x07-9\x00\xa4\x10'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
g896
sS'block_loop.thisIndex'
p933
g889
sg38
S'right'
p934
sg59
g63
sS'trial_loop.thisN'
p935
I2
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p936
g60
(g99
S'\x02\x00\x00\x00'
tRp937
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p938
I0
sg904
g905
sS'block_loop.thisRepN'
p939
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p940
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p941
Nsg70
Vn
sS'block_loop.thisTrialN'
p942
I0
sg39
F4.3162389629169411
sg34
g753
(S'\x07\xdf\x07\x02\x07.\x03\x04M\x90'
tRp943
sa(dp944
S'trial_loop.thisTrialN'
p945
I3
sg895
S'5-pineapple.png'
p946
sS'block_loop.thisIndex'
p947
g889
sg38
S'left'
p948
sg59
g63
sS'trial_loop.thisN'
p949
I3
sg33
S'5-pineapple.png'
p950
sg64
g65
sS'trial_loop.thisIndex'
p951
g60
(g99
S'\x03\x00\x00\x00'
tRp952
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p953
I0
sg904
S'40-sardines.png'
p954
sS'block_loop.thisRepN'
p955
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p956
I0
sg909
S'40-sardines.png'
p957
sg55
g11
sS'block_loop.thisTrial'
p958
Nsg70
Vn
sS'block_loop.thisTrialN'
p959
I0
sg39
F1.2166300272519948
sg34
g753
(S'\x07\xdf\x07\x02\x07.\x0c\t\x8dP'
tRp960
sa(dp961
S'trial_loop.thisTrialN'
p962
I4
sg895
S'29-beans.png'
p963
sS'block_loop.thisIndex'
p964
g889
sg38
S'right'
p965
sg59
g63
sS'trial_loop.thisN'
p966
I4
sg33
S'46-pistachios.png'
p967
sg64
g65
sS'trial_loop.thisIndex'
p968
g60
(g99
S'\x04\x00\x00\x00'
tRp969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p970
I0
sg904
S'46-pistachios.png'
p971
sS'block_loop.thisRepN'
p972
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p973
I0
sg909
S'29-beans.png'
p974
sg55
g11
sS'block_loop.thisTrial'
p975
Nsg70
Vn
sS'block_loop.thisTrialN'
p976
I0
sg39
F1.4333207796653369
sg34
g753
(S'\x07\xdf\x07\x02\x07.\x12\ruP'
tRp977
sa(dp978
S'trial_loop.thisTrialN'
p979
I5
sg895
S'31-hobnobs.png'
p980
sS'block_loop.thisIndex'
p981
g889
sg38
S'right'
p982
sg59
g63
sS'trial_loop.thisN'
p983
I5
sg33
S'25-kitkat.png'
p984
sg64
g65
sS'trial_loop.thisIndex'
p985
g60
(g99
S'\x05\x00\x00\x00'
tRp986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p987
I0
sg904
S'25-kitkat.png'
p988
sS'block_loop.thisRepN'
p989
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p990
I0
sg909
S'31-hobnobs.png'
p991
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vn
sS'block_loop.thisTrialN'
p993
I0
sg39
F2.7331006580843678
sg34
g753
(S'\x07\xdf\x07\x02\x07.\x19\x05n\xa0'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'7-olives.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'22-daim.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'22-daim.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1007
I0
sg909
S'7-olives.png'
p1008
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vn
sS'block_loop.thisTrialN'
p1010
I0
sg39
F1.7165281059137669
sg34
g753
(S'\x07\xdf\x07\x02\x07.!\x01\xa9\xc8'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'30-spaghetti_hoops.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'right'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'19-caramello_redo.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'19-caramello_redo.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1024
I0
sg909
S'30-spaghetti_hoops.png'
p1025
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vn
sS'block_loop.thisTrialN'
p1027
I0
sg39
F0.99990420819631254
sg34
g753
(S"\x07\xdf\x07\x02\x07.'\r/\x00"
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
S'36-fig_rolls.png'
p1031
sS'block_loop.thisIndex'
p1032
g889
sg38
S'right'
p1033
sg59
g63
sS'trial_loop.thisN'
p1034
I8
sg33
S'36-fig_rolls.png'
p1035
sg64
g65
sS'trial_loop.thisIndex'
p1036
g60
(g99
S'\x08\x00\x00\x00'
tRp1037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1038
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg907
S'34-hula_hoops_bbq_beef_redo.png'
p1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1042
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F3.9830234687065058
sg34
g753
(S'\x07\xdf\x07\x02\x07.-\r\xbf\x88'
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'13-mccoys_steak_crisps.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'left'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
S'3-ellas_strawberries_apples.png'
p1052
sg64
g65
sS'trial_loop.thisIndex'
p1053
g60
(g99
S'\t\x00\x00\x00'
tRp1054
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1055
I0
sg904
S'3-ellas_strawberries_apples.png'
p1056
sS'block_loop.thisRepN'
p1057
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1058
I0
sg909
S'13-mccoys_steak_crisps.png'
p1059
sg55
g11
sS'block_loop.thisTrial'
p1060
Nsg70
Vn
sS'block_loop.thisTrialN'
p1061
I0
sg39
F1.5997402217521994
sg34
g753
(S'\x07\xdf\x07\x02\x07.6\x0e\x01\xf0'
tRp1062
sa(dp1063
S'trial_loop.thisTrialN'
p1064
I10
sg895
S'35-raisins.png'
p1065
sS'block_loop.thisIndex'
p1066
g889
sg38
S'right'
p1067
sg59
g63
sS'trial_loop.thisN'
p1068
I10
sg33
S'35-raisins.png'
p1069
sg64
g65
sS'trial_loop.thisIndex'
p1070
g60
(g99
S'\n\x00\x00\x00'
tRp1071
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1072
I0
sg904
S'49-yorkie.png'
p1073
sS'block_loop.thisRepN'
p1074
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1075
I0
sg909
S'49-yorkie.png'
p1076
sg55
g11
sS'block_loop.thisTrial'
p1077
Nsg70
Vn
sS'block_loop.thisTrialN'
p1078
I0
sg39
F1.9164589989695742
sg34
g753
(S'\x07\xdf\x07\x02\x07/\x01\x08\\\xa0'
tRp1079
sa(dp1080
S'trial_loop.thisTrialN'
p1081
I11
sg895
S'26-walkers_smoky_bacon.png'
p1082
sS'block_loop.thisIndex'
p1083
g889
sg38
S'right'
p1084
sg59
g63
sS'trial_loop.thisN'
p1085
I11
sg33
S'44-crunch.png'
p1086
sg64
g65
sS'trial_loop.thisIndex'
p1087
g60
(g99
S'\x0b\x00\x00\x00'
tRp1088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1089
I0
sg904
S'44-crunch.png'
p1090
sS'block_loop.thisRepN'
p1091
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1092
I0
sg909
S'26-walkers_smoky_bacon.png'
p1093
sg55
g11
sS'block_loop.thisTrial'
p1094
Nsg70
Vn
sS'block_loop.thisTrialN'
p1095
I0
sg39
F1.5998707951034703
sg34
g753
(S'\x07\xdf\x07\x02\x07/\x08\x07\xb4\xa8'
tRp1096
sa(dp1097
S'trial_loop.thisTrialN'
p1098
I12
sg895
g1031
sS'block_loop.thisIndex'
p1099
g889
sg38
S'left'
p1100
sg59
g63
sS'trial_loop.thisN'
p1101
I12
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1102
g60
(g99
S'\x0c\x00\x00\x00'
tRp1103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1104
I0
sg904
g1039
sS'block_loop.thisRepN'
p1105
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1106
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.0499782330230119
sg34
g753
(S'\x07\xdf\x07\x02\x07/\x0f\x02\x0fX'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'43-mrporky_pork_crackles_redo.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'right'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
S'18-mms.png'
p1116
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
S'18-mms.png'
p1120
sS'block_loop.thisRepN'
p1121
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1122
I0
sg909
S'43-mrporky_pork_crackles_redo.png'
p1123
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vn
sS'block_loop.thisTrialN'
p1125
I0
sg39
F1.083244787685544
sg34
g753
(S'\x07\xdf\x07\x02\x07/\x15\x03Wx'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
g997
sS'block_loop.thisIndex'
p1129
g889
sg38
S'right'
p1130
sg59
g63
sS'trial_loop.thisN'
p1131
I14
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1132
g60
(g99
S'\x0e\x00\x00\x00'
tRp1133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1134
I0
sg904
g1005
sS'block_loop.thisRepN'
p1135
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1136
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1137
Nsg70
Vn
sS'block_loop.thisTrialN'
p1138
I0
sg39
F2.0499753820768092
sg34
g753
(S'\x07\xdf\x07\x02\x07/\x1b\x05\x18\xb0'
tRp1139
sa(dp1140
S'trial_loop.thisTrialN'
p1141
I15
sg895
S'45-chewy_nougat_redo.png'
p1142
sS'block_loop.thisIndex'
p1143
g889
sg38
S'right'
p1144
sg59
g63
sS'trial_loop.thisN'
p1145
I15
sg33
S'45-chewy_nougat_redo.png'
p1146
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
S'41-peanuts_redo.png'
p1150
sS'block_loop.thisRepN'
p1151
I0
sg907
S'41-peanuts_redo.png'
p1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1153
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vn
sS'block_loop.thisTrialN'
p1155
I0
sg39
F1.7332218233113963
sg34
g753
(S'\x07\xdf\x07\x02\x07/"\x06\\\xe8'
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
g980
sS'block_loop.thisIndex'
p1159
g889
sg38
S'right'
p1160
sg59
g63
sS'trial_loop.thisN'
p1161
I16
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
g988
sS'block_loop.thisRepN'
p1165
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1166
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p1167
Nsg70
Vn
sS'block_loop.thisTrialN'
p1168
I0
sg39
F1.1665112425653206
sg34
g753
(S'\x07\xdf\x07\x02\x07/)\x02\xdax'
tRp1169
sa(dp1170
S'trial_loop.thisTrialN'
p1171
I17
sg895
S'42-mrkipling_lemon_slices.png'
p1172
sS'block_loop.thisIndex'
p1173
g889
sg38
S'left'
p1174
sg59
g63
sS'trial_loop.thisN'
p1175
I17
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1176
g60
(g99
S'\x11\x00\x00\x00'
tRp1177
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1178
I0
sg904
S'16-skips_prawn.png'
p1179
sS'block_loop.thisRepN'
p1180
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1181
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1182
Nsg70
Vn
sS'block_loop.thisTrialN'
p1183
I0
sg39
F3.0163002867766409
sg34
g753
(S'\x07\xdf\x07\x02\x07//\x05\xd0H'
tRp1184
sa(dp1185
S'trial_loop.thisTrialN'
p1186
I18
sg895
S'10-bounty_redo.png'
p1187
sS'block_loop.thisIndex'
p1188
g889
sg38
S'left'
p1189
sg59
g63
sS'trial_loop.thisN'
p1190
I18
sg33
S'4-corn.png'
p1191
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
S'4-corn.png'
p1195
sS'block_loop.thisRepN'
p1196
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1197
I0
sg909
S'10-bounty_redo.png'
p1198
sg55
g11
sS'block_loop.thisTrial'
p1199
Nsg70
Vn
sS'block_loop.thisTrialN'
p1200
I0
sg39
F1.9331880681043003
sg34
g753
(S'\x07\xdf\x07\x02\x07/7\x06\x8f\xb0'
tRp1201
sa(dp1202
S'trial_loop.thisTrialN'
p1203
I19
sg895
S'22-daim.png'
p1204
sS'block_loop.thisIndex'
p1205
g889
sg38
S'left'
p1206
sg59
g63
sS'trial_loop.thisN'
p1207
I19
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1208
g60
(g99
S'\x13\x00\x00\x00'
tRp1209
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1210
I0
sg904
S'7-olives.png'
p1211
sS'block_loop.thisRepN'
p1212
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1213
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vn
sS'block_loop.thisTrialN'
p1215
I0
sg39
F0.9000295643154459
sg34
g753
(S'\x07\xdf\x07\x02\x070\x02\x06&8'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
S'18-mms.png'
p1219
sS'block_loop.thisIndex'
p1220
g889
sg38
S'left'
p1221
sg59
g63
sS'trial_loop.thisN'
p1222
I20
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1223
g60
(g99
S'\x14\x00\x00\x00'
tRp1224
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1225
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1226
sS'block_loop.thisRepN'
p1227
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1228
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1229
Nsg70
Vn
sS'block_loop.thisTrialN'
p1230
I0
sg39
F1.0165602930997011
sg34
g753
(S'\x07\xdf\x07\x02\x070\x08\x05\x0c\xf8'
tRp1231
sa(dp1232
S'trial_loop.thisTrialN'
p1233
I21
sg895
S'3-ellas_strawberries_apples.png'
p1234
sS'block_loop.thisIndex'
p1235
g889
sg38
S'left'
p1236
sg59
g63
sS'trial_loop.thisN'
p1237
I21
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1238
g60
(g99
S'\x15\x00\x00\x00'
tRp1239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1240
I0
sg904
S'13-mccoys_steak_crisps.png'
p1241
sS'block_loop.thisRepN'
p1242
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1243
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1244
Nsg70
Vn
sS'block_loop.thisTrialN'
p1245
I0
sg39
F1.0331910045792938
sg34
g753
(S'\x07\xdf\x07\x02\x070\x0e\x05\xdc\x00'
tRp1246
sa(dp1247
S'trial_loop.thisTrialN'
p1248
I22
sg895
S'23-crunchie_redo.png'
p1249
sS'block_loop.thisIndex'
p1250
g889
sg38
S'left'
p1251
sg59
g63
sS'trial_loop.thisN'
p1252
I22
sg33
S'33-ambrosia_rice.png'
p1253
sg64
g65
sS'trial_loop.thisIndex'
p1254
g60
(g99
S'\x16\x00\x00\x00'
tRp1255
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1256
I0
sg904
S'33-ambrosia_rice.png'
p1257
sS'block_loop.thisRepN'
p1258
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1259
I0
sg909
S'23-crunchie_redo.png'
p1260
sg55
g11
sS'block_loop.thisTrial'
p1261
Nsg70
Vn
sS'block_loop.thisTrialN'
p1262
I0
sg39
F1.9665099311300764
sg34
g753
(S'\x07\xdf\x07\x02\x070\x14\x06\xe9\x88'
tRp1263
sa(dp1264
S'trial_loop.thisTrialN'
p1265
I23
sg895
S'1-treacle_cookies.png'
p1266
sS'block_loop.thisIndex'
p1267
g889
sg38
S'right'
p1268
sg59
g63
sS'trial_loop.thisN'
p1269
I23
sg33
S'21-nakd_banana_crunch.png'
p1270
sg64
g65
sS'trial_loop.thisIndex'
p1271
g60
(g99
S'\x17\x00\x00\x00'
tRp1272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1273
I0
sg904
S'21-nakd_banana_crunch.png'
p1274
sS'block_loop.thisRepN'
p1275
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1276
I0
sg909
S'1-treacle_cookies.png'
p1277
sg55
g11
sS'block_loop.thisTrial'
p1278
Nsg70
Vn
sS'block_loop.thisTrialN'
p1279
I0
sg39
F1.6998945434879715
sg34
g753
(S'\x07\xdf\x07\x02\x070\x1b\x06\xba\xa8'
tRp1280
sa(dp1281
S'trial_loop.thisTrialN'
p1282
I24
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1283
sS'block_loop.thisIndex'
p1284
g889
sg38
S'right'
p1285
sg59
g63
sS'trial_loop.thisN'
p1286
I24
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p1287
g60
(g99
S'\x18\x00\x00\x00'
tRp1288
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1289
I0
sg904
S'36-fig_rolls.png'
p1290
sS'block_loop.thisRepN'
p1291
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1292
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1293
Nsg70
Vn
sS'block_loop.thisTrialN'
p1294
I0
sg39
F1.1666478029037535
sg34
g753
(S'\x07\xdf\x07\x02\x070"\x02\xc3\x08'
tRp1295
sa(dp1296
S'trial_loop.thisTrialN'
p1297
I25
sg895
S'50-polo.png'
p1298
sS'block_loop.thisIndex'
p1299
g889
sg38
S'right'
p1300
sg59
g63
sS'trial_loop.thisN'
p1301
I25
sg33
S'48-twix.png'
p1302
sg64
g65
sS'trial_loop.thisIndex'
p1303
g60
(g99
S'\x19\x00\x00\x00'
tRp1304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1305
I0
sg904
S'48-twix.png'
p1306
sS'block_loop.thisRepN'
p1307
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1308
I0
sg909
S'50-polo.png'
p1309
sg55
g11
sS'block_loop.thisTrial'
p1310
Nsg70
Vn
sS'block_loop.thisTrialN'
p1311
I0
sg39
F1.8831080562899842
sg34
g753
(S'\x07\xdf\x07\x02\x070(\x05\xb4\xf0'
tRp1312
sa(dp1313
S'trial_loop.thisTrialN'
p1314
I26
sg895
g1283
sS'block_loop.thisIndex'
p1315
g889
sg38
S'right'
p1316
sg59
g63
sS'trial_loop.thisN'
p1317
I26
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p1318
g60
(g99
S'\x1a\x00\x00\x00'
tRp1319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1320
I0
sg904
g1290
sS'block_loop.thisRepN'
p1321
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1322
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1323
Nsg70
Vn
sS'block_loop.thisTrialN'
p1324
I0
sg39
F1.2331757805250163
sg34
g753
(S'\x07\xdf\x07\x02\x070/\x04\x93\xe0'
tRp1325
sa(dp1326
S'trial_loop.thisTrialN'
p1327
I27
sg895
g1266
sS'block_loop.thisIndex'
p1328
g889
sg38
S'right'
p1329
sg59
g63
sS'trial_loop.thisN'
p1330
I27
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p1331
g60
(g99
S'\x1b\x00\x00\x00'
tRp1332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1333
I0
sg904
g1274
sS'block_loop.thisRepN'
p1334
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1335
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p1336
Nsg70
Vn
sS'block_loop.thisTrialN'
p1337
I0
sg39
F0.94988777249000123
sg34
g753
(S'\x07\xdf\x07\x02\x0705\x08\xb6x'
tRp1338
sa(dp1339
S'trial_loop.thisTrialN'
p1340
I28
sg895
g1082
sS'block_loop.thisIndex'
p1341
g889
sg38
S'right'
p1342
sg59
g63
sS'trial_loop.thisN'
p1343
I28
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1344
g60
(g99
S'\x1c\x00\x00\x00'
tRp1345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1346
I0
sg904
g1090
sS'block_loop.thisRepN'
p1347
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1348
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1349
Nsg70
Vn
sS'block_loop.thisTrialN'
p1350
I0
sg39
F0.9498344597900541
sg34
g753
(S'\x07\xdf\x07\x02\x070;\x08T\xd0'
tRp1351
sa(dp1352
S'trial_loop.thisTrialN'
p1353
I29
sg895
g1172
sS'block_loop.thisIndex'
p1354
g889
sg38
S'left'
p1355
sg59
g63
sS'trial_loop.thisN'
p1356
I29
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1357
g60
(g99
S'\x1d\x00\x00\x00'
tRp1358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1359
I0
sg904
g1179
sS'block_loop.thisRepN'
p1360
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1361
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vn
sS'block_loop.thisTrialN'
p1363
I0
sg39
F1.0665251266750602
sg34
g753
(S'\x07\xdf\x07\x02\x071\x05\x081\xa8'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
g1187
sS'block_loop.thisIndex'
p1367
g889
sg38
S'right'
p1368
sg59
g63
sS'trial_loop.thisN'
p1369
I30
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1370
g60
(g99
S'\x1e\x00\x00\x00'
tRp1371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1372
I0
sg904
g1195
sS'block_loop.thisRepN'
p1373
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1374
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p1375
Nsg70
Vn
sS'block_loop.thisTrialN'
p1376
I0
sg39
F1.6382739001264781
sg34
g753
(S'\x07\xdf\x07\x02\x071\x0b\t\xb4`'
tRp1377
sa(dp1378
S'trial_loop.thisTrialN'
p1379
I31
sg895
g1204
sS'block_loop.thisIndex'
p1380
g889
sg38
S'left'
p1381
sg59
g63
sS'trial_loop.thisN'
p1382
I31
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1383
g60
(g99
S'\x1f\x00\x00\x00'
tRp1384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1385
I0
sg904
g1211
sS'block_loop.thisRepN'
p1386
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1387
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1388
Nsg70
Vn
sS'block_loop.thisTrialN'
p1389
I0
sg39
F1.1165555320189924
sg34
g753
(S'\x07\xdf\x07\x02\x071\x12\x04\x88('
tRp1390
sa(dp1391
S'trial_loop.thisTrialN'
p1392
I32
sg895
S'6-sour_patch_kids.png'
p1393
sS'block_loop.thisIndex'
p1394
g889
sg38
S'right'
p1395
sg59
g63
sS'trial_loop.thisN'
p1396
I32
sg33
S'38-maltesers.png'
p1397
sg64
g65
sS'trial_loop.thisIndex'
p1398
g60
(g99
S' \x00\x00\x00'
tRp1399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1400
I0
sg904
S'38-maltesers.png'
p1401
sS'block_loop.thisRepN'
p1402
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1403
I0
sg909
S'6-sour_patch_kids.png'
p1404
sg55
g11
sS'block_loop.thisTrial'
p1405
Nsg70
Vn
sS'block_loop.thisTrialN'
p1406
I0
sg39
F1.7663620810426437
sg34
g753
(S'\x07\xdf\x07\x02\x071\x18\x06\xc6`'
tRp1407
sa(dp1408
S'trial_loop.thisTrialN'
p1409
I33
sg895
g1014
sS'block_loop.thisIndex'
p1410
g889
sg38
S'right'
p1411
sg59
g63
sS'trial_loop.thisN'
p1412
I33
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p1413
g60
(g99
S'!\x00\x00\x00'
tRp1414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1415
I0
sg904
g1022
sS'block_loop.thisRepN'
p1416
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1417
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1418
Nsg70
Vn
sS'block_loop.thisTrialN'
p1419
I0
sg39
F1.0333449556919732
sg34
g753
(S'\x07\xdf\x07\x02\x071\x1f\x03\xc0\xf0'
tRp1420
sa(dp1421
S'trial_loop.thisTrialN'
p1422
I34
sg895
S'51-mars.png'
p1423
sS'block_loop.thisIndex'
p1424
g889
sg38
S'left'
p1425
sg59
g63
sS'trial_loop.thisN'
p1426
I34
sg33
S'51-mars.png'
p1427
sg64
g65
sS'trial_loop.thisIndex'
p1428
g60
(g99
S'"\x00\x00\x00'
tRp1429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1430
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1431
sS'block_loop.thisRepN'
p1432
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1433
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1434
sg55
g11
sS'block_loop.thisTrial'
p1435
Nsg70
Vn
sS'block_loop.thisTrialN'
p1436
I0
sg39
F2.2665577985217169
sg34
g753
(S'\x07\xdf\x07\x02\x071%\x04\xca\x90'
tRp1437
sa(dp1438
S'trial_loop.thisTrialN'
p1439
I35
sg895
S'44-crunch.png'
p1440
sS'block_loop.thisIndex'
p1441
g889
sg38
S'left'
p1442
sg59
g63
sS'trial_loop.thisN'
p1443
I35
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1444
g60
(g99
S'#\x00\x00\x00'
tRp1445
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1446
I0
sg904
S'26-walkers_smoky_bacon.png'
p1447
sS'block_loop.thisRepN'
p1448
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1449
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1450
Nsg70
Vn
sS'block_loop.thisTrialN'
p1451
I0
sg39
F1.4165700433372876
sg34
g753
(S'\x07\xdf\x07\x02\x071,\tbX'
tRp1452
sa(dp1453
S'trial_loop.thisTrialN'
p1454
I36
sg895
S'27-hartleys_raspberries_jelly.png'
p1455
sS'block_loop.thisIndex'
p1456
g889
sg38
S'right'
p1457
sg59
g63
sS'trial_loop.thisN'
p1458
I36
sg33
g1434
sg64
g65
sS'trial_loop.thisIndex'
p1459
g60
(g99
S'$\x00\x00\x00'
tRp1460
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1461
I0
sg904
S'51-mars.png'
p1462
sS'block_loop.thisRepN'
p1463
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1464
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vn
sS'block_loop.thisTrialN'
p1466
I0
sg39
F2.2165416479097075
sg34
g753
(S'\x07\xdf\x07\x02\x0713\x00\xe2\x90'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
S'25-kitkat.png'
p1470
sS'block_loop.thisIndex'
p1471
g889
sg38
S'left'
p1472
sg59
g63
sS'trial_loop.thisN'
p1473
I37
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p1474
g60
(g99
S'%\x00\x00\x00'
tRp1475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1476
I0
sg904
S'31-hobnobs.png'
p1477
sS'block_loop.thisRepN'
p1478
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1479
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p1480
Nsg70
Vn
sS'block_loop.thisTrialN'
p1481
I0
sg39
F0.98317143283156838
sg34
g753
(S'\x07\xdf\x07\x02\x071:\x04\xc2\xc0'
tRp1482
sa(dp1483
S'trial_loop.thisTrialN'
p1484
I38
sg895
S'41-peanuts_redo.png'
p1485
sS'block_loop.thisIndex'
p1486
g889
sg38
S'right'
p1487
sg59
g63
sS'trial_loop.thisN'
p1488
I38
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p1489
g60
(g99
S'&\x00\x00\x00'
tRp1490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1491
I0
sg904
S'45-chewy_nougat_redo.png'
p1492
sS'block_loop.thisRepN'
p1493
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1494
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p1495
Nsg70
Vn
sS'block_loop.thisTrialN'
p1496
I0
sg39
F3.5497705415687051
sg34
g753
(S'\x07\xdf\x07\x02\x072\x04\x05\x14\xc8'
tRp1497
sa(dp1498
S'trial_loop.thisTrialN'
p1499
I39
sg895
g1298
sS'block_loop.thisIndex'
p1500
g889
sg38
S'right'
p1501
sg59
g63
sS'trial_loop.thisN'
p1502
I39
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p1503
g60
(g99
S"'\x00\x00\x00"
tRp1504
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1505
I0
sg904
g1306
sS'block_loop.thisRepN'
p1506
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1507
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p1508
Nsg70
Vn
sS'block_loop.thisTrialN'
p1509
I0
sg39
F1.6833063111121191
sg34
g753
(S'\x07\xdf\x07\x02\x072\x0c\r\xeeh'
tRp1510
sa(dp1511
S'trial_loop.thisTrialN'
p1512
I40
sg895
g1187
sS'block_loop.thisIndex'
p1513
g889
sg38
S'right'
p1514
sg59
g63
sS'trial_loop.thisN'
p1515
I40
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p1516
g60
(g99
S'(\x00\x00\x00'
tRp1517
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1518
I0
sg904
g1195
sS'block_loop.thisRepN'
p1519
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1520
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p1521
Nsg70
Vn
sS'block_loop.thisTrialN'
p1522
I0
sg39
F3.2831240786094895
sg34
g753
(S'\x07\xdf\x07\x02\x072\x13\t\xb8H'
tRp1523
sa(dp1524
S'trial_loop.thisTrialN'
p1525
I41
sg895
g1014
sS'block_loop.thisIndex'
p1526
g889
sg38
S'left'
p1527
sg59
g63
sS'trial_loop.thisN'
p1528
I41
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1529
g60
(g99
S')\x00\x00\x00'
tRp1530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1531
I0
sg904
g1022
sS'block_loop.thisRepN'
p1532
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1533
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vn
sS'block_loop.thisTrialN'
p1535
I0
sg39
F1.5332487362466054
sg34
g753
(S'\x07\xdf\x07\x02\x072\x1b\x0e\x86\xc0'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
S'49-yorkie.png'
p1539
sS'block_loop.thisIndex'
p1540
g889
sg38
S'right'
p1541
sg59
g63
sS'trial_loop.thisN'
p1542
I42
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1543
g60
(g99
S'*\x00\x00\x00'
tRp1544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1545
I0
sg904
S'35-raisins.png'
p1546
sS'block_loop.thisRepN'
p1547
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1548
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p1549
Nsg70
Vn
sS'block_loop.thisTrialN'
p1550
I0
sg39
F1.9998660055130131
sg34
g753
(S'\x07\xdf\x07\x02\x072"\x07\xebX'
tRp1551
sa(dp1552
S'trial_loop.thisTrialN'
p1553
I43
sg895
S'8-liquorice_catherine_wheels.png'
p1554
sS'block_loop.thisIndex'
p1555
g889
sg38
S'right'
p1556
sg59
g63
sS'trial_loop.thisN'
p1557
I43
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1558
sg64
g65
sS'trial_loop.thisIndex'
p1559
g60
(g99
S'+\x00\x00\x00'
tRp1560
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1561
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1562
sS'block_loop.thisRepN'
p1563
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1564
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1565
sg55
g11
sS'block_loop.thisTrial'
p1566
Nsg70
Vn
sS'block_loop.thisTrialN'
p1567
I0
sg39
F1.9832250306262722
sg34
g753
(S'\x07\xdf\x07\x02\x072)\x089x'
tRp1568
sa(dp1569
S'trial_loop.thisTrialN'
p1570
I44
sg895
S'21-nakd_banana_crunch.png'
p1571
sS'block_loop.thisIndex'
p1572
g889
sg38
S'left'
p1573
sg59
g63
sS'trial_loop.thisN'
p1574
I44
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p1575
g60
(g99
S',\x00\x00\x00'
tRp1576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1577
I0
sg904
S'1-treacle_cookies.png'
p1578
sS'block_loop.thisRepN'
p1579
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1580
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p1581
Nsg70
Vn
sS'block_loop.thisTrialN'
p1582
I0
sg39
F1.0337164340244271
sg34
g753
(S'\x07\xdf\x07\x02\x0720\x08\x87\x98'
tRp1583
sa(dp1584
S'trial_loop.thisTrialN'
p1585
I45
sg895
g946
sS'block_loop.thisIndex'
p1586
g889
sg38
S'left'
p1587
sg59
g63
sS'trial_loop.thisN'
p1588
I45
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p1589
g60
(g99
S'-\x00\x00\x00'
tRp1590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1591
I0
sg904
g954
sS'block_loop.thisRepN'
p1592
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1593
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p1594
Nsg70
Vn
sS'block_loop.thisTrialN'
p1595
I0
sg39
F1.1665577129933808
sg34
g753
(S'\x07\xdf\x07\x02\x0726\t\x95 '
tRp1596
sa(dp1597
S'trial_loop.thisTrialN'
p1598
I46
sg895
S'48-twix.png'
p1599
sS'block_loop.thisIndex'
p1600
g889
sg38
S'left'
p1601
sg59
g63
sS'trial_loop.thisN'
p1602
I46
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p1603
g60
(g99
S'.\x00\x00\x00'
tRp1604
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1605
I0
sg904
S'50-polo.png'
p1606
sS'block_loop.thisRepN'
p1607
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1608
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p1609
Nsg70
Vn
sS'block_loop.thisTrialN'
p1610
I0
sg39
F1.0665607635064589
sg34
g753
(S'\x07\xdf\x07\x02\x073\x00\x0c\xc1\xa0'
tRp1611
sa(dp1612
S'trial_loop.thisTrialN'
p1613
I47
sg895
g1014
sS'block_loop.thisIndex'
p1614
g889
sg38
S'right'
p1615
sg59
g63
sS'trial_loop.thisN'
p1616
I47
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p1617
g60
(g99
S'/\x00\x00\x00'
tRp1618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1619
I0
sg904
g1022
sS'block_loop.thisRepN'
p1620
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1621
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1622
Nsg70
Vn
sS'block_loop.thisTrialN'
p1623
I0
sg39
F1.2498201765474732
sg34
g753
(S'\x07\xdf\x07\x02\x073\x06\x0eH@'
tRp1624
sa(dp1625
S'trial_loop.thisTrialN'
p1626
I48
sg895
g1082
sS'block_loop.thisIndex'
p1627
g889
sg38
S'right'
p1628
sg59
g63
sS'trial_loop.thisN'
p1629
I48
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1630
g60
(g99
S'0\x00\x00\x00'
tRp1631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1632
I0
sg904
g1090
sS'block_loop.thisRepN'
p1633
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1634
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1635
Nsg70
Vn
sS'block_loop.thisTrialN'
p1636
I0
sg39
F0.93322684097711317
sg34
g753
(S'\x07\xdf\x07\x02\x073\r\x03(\x98'
tRp1637
sa(dp1638
S'trial_loop.thisTrialN'
p1639
I49
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1640
sS'block_loop.thisIndex'
p1641
g889
sg38
S'left'
p1642
sg59
g63
sS'trial_loop.thisN'
p1643
I49
sg33
g1565
sg64
g65
sS'trial_loop.thisIndex'
p1644
g60
(g99
S'1\x00\x00\x00'
tRp1645
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1646
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1647
sS'block_loop.thisRepN'
p1648
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1649
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p1650
Nsg70
Vn
sS'block_loop.thisTrialN'
p1651
I0
sg39
F1.000001140378572
sg34
g753
(S'\x07\xdf\x07\x02\x073\x13\x02\xc6\xf0'
tRp1652
sa(dp1653
S'trial_loop.thisTrialN'
p1654
I50
sg895
S'38-maltesers.png'
p1655
sS'block_loop.thisIndex'
p1656
g889
sg38
S'left'
p1657
sg59
g63
sS'trial_loop.thisN'
p1658
I50
sg33
g1404
sg64
g65
sS'trial_loop.thisIndex'
p1659
g60
(g99
S'2\x00\x00\x00'
tRp1660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1661
I0
sg904
S'6-sour_patch_kids.png'
p1662
sS'block_loop.thisRepN'
p1663
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1664
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p1665
Nsg70
Vn
sS'block_loop.thisTrialN'
p1666
I0
sg39
F1.3995401993443011
sg34
g753
(S'\x07\xdf\x07\x02\x073\x19\x03Wx'
tRp1667
sa(dp1668
S'trial_loop.thisTrialN'
p1669
I51
sg895
g1440
sS'block_loop.thisIndex'
p1670
g889
sg38
S'left'
p1671
sg59
g63
sS'trial_loop.thisN'
p1672
I51
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p1673
g60
(g99
S'3\x00\x00\x00'
tRp1674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1675
I0
sg904
g1447
sS'block_loop.thisRepN'
p1676
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1677
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p1678
Nsg70
Vn
sS'block_loop.thisTrialN'
p1679
I0
sg39
F0.76657390636955824
sg34
g753
(S'\x07\xdf\x07\x02\x073\x1f\t\xdfX'
tRp1680
sa(dp1681
S'trial_loop.thisTrialN'
p1682
I52
sg895
g1283
sS'block_loop.thisIndex'
p1683
g889
sg38
S'right'
p1684
sg59
g63
sS'trial_loop.thisN'
p1685
I52
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p1686
g60
(g99
S'4\x00\x00\x00'
tRp1687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1688
I0
sg904
g1290
sS'block_loop.thisRepN'
p1689
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1690
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg70
Vn
sS'block_loop.thisTrialN'
p1692
I0
sg39
F2.2332906736701261
sg34
g753
(S'\x07\xdf\x07\x02\x073%\x06\xdd\xd0'
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I53
sg895
g1249
sS'block_loop.thisIndex'
p1696
g889
sg38
S'left'
p1697
sg59
g63
sS'trial_loop.thisN'
p1698
I53
sg33
g1260
sg64
g65
sS'trial_loop.thisIndex'
p1699
g60
(g99
S'5\x00\x00\x00'
tRp1700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1701
I0
sg904
g1257
sS'block_loop.thisRepN'
p1702
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1703
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg70
Vn
sS'block_loop.thisTrialN'
p1705
I0
sg39
F1.1000790567472905
sg34
g753
(S'\x07\xdf\x07\x02\x073,\n\xf8\x98'
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I54
sg895
S'19-caramello_redo.png'
p1709
sS'block_loop.thisIndex'
p1710
g889
sg38
S'left'
p1711
sg59
g63
sS'trial_loop.thisN'
p1712
I54
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p1713
g60
(g99
S'6\x00\x00\x00'
tRp1714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1715
I0
sg904
S'30-spaghetti_hoops.png'
p1716
sS'block_loop.thisRepN'
p1717
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1718
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1719
Nsg70
Vn
sS'block_loop.thisTrialN'
p1720
I0
sg39
F3.0832527703360029
sg34
g753
(S'\x07\xdf\x07\x02\x0732\x0c\xf8P'
tRp1721
sa(dp1722
S'trial_loop.thisTrialN'
p1723
I55
sg895
g1249
sS'block_loop.thisIndex'
p1724
g889
sg38
S'left'
p1725
sg59
g63
sS'trial_loop.thisN'
p1726
I55
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p1727
g60
(g99
S'7\x00\x00\x00'
tRp1728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1729
I0
sg904
g1257
sS'block_loop.thisRepN'
p1730
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1731
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p1732
Nsg70
Vn
sS'block_loop.thisTrialN'
p1733
I0
sg39
F1.466555403726943
sg34
g753
(S'\x07\xdf\x07\x02\x073:\x0e\xad\xd0'
tRp1734
sa(dp1735
S'trial_loop.thisTrialN'
p1736
I56
sg895
S'40-sardines.png'
p1737
sS'block_loop.thisIndex'
p1738
g889
sg38
S'right'
p1739
sg59
g63
sS'trial_loop.thisN'
p1740
I56
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p1741
g60
(g99
S'8\x00\x00\x00'
tRp1742
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1743
I0
sg904
S'5-pineapple.png'
p1744
sS'block_loop.thisRepN'
p1745
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1746
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p1747
Nsg70
Vn
sS'block_loop.thisTrialN'
p1748
I0
sg39
F0.91656476908656259
sg34
g753
(S'\x07\xdf\x07\x02\x074\x05\x07 8'
tRp1749
sa(dp1750
S'trial_loop.thisTrialN'
p1751
I57
sg895
g1266
sS'block_loop.thisIndex'
p1752
g889
sg38
S'right'
p1753
sg59
g63
sS'trial_loop.thisN'
p1754
I57
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p1755
g60
(g99
S'9\x00\x00\x00'
tRp1756
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1757
I0
sg904
g1274
sS'block_loop.thisRepN'
p1758
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1759
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p1760
Nsg70
Vn
sS'block_loop.thisTrialN'
p1761
I0
sg39
F0.76659300771143535
sg34
g753
(S'\x07\xdf\x07\x02\x074\x0b\x06Ex'
tRp1762
sa(dp1763
S'trial_loop.thisTrialN'
p1764
I58
sg895
g1393
sS'block_loop.thisIndex'
p1765
g889
sg38
S'right'
p1766
sg59
g63
sS'trial_loop.thisN'
p1767
I58
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p1768
g60
(g99
S':\x00\x00\x00'
tRp1769
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1770
I0
sg904
g1401
sS'block_loop.thisRepN'
p1771
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1772
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p1773
Nsg70
Vn
sS'block_loop.thisTrialN'
p1774
I0
sg39
F0.81632691461754803
sg34
g753
(S'\x07\xdf\x07\x02\x074\x11\x03C\xf0'
tRp1775
sa(dp1776
S'trial_loop.thisTrialN'
p1777
I59
sg895
g896
sS'block_loop.thisIndex'
p1778
g889
sg38
S'right'
p1779
sg59
g63
sS'trial_loop.thisN'
p1780
I59
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1781
g60
(g99
S';\x00\x00\x00'
tRp1782
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1783
I0
sg904
g905
sS'block_loop.thisRepN'
p1784
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1785
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1786
Nsg70
Vn
sS'block_loop.thisTrialN'
p1787
I0
sg39
F1.0831971768789117
sg34
g753
(S'\x07\xdf\x07\x02\x074\x17\x00\xfa\x00'
tRp1788
sa(dp1789
S'trial_loop.thisTrialN'
p1790
I60
sg895
g1219
sS'block_loop.thisIndex'
p1791
g889
sg38
S'left'
p1792
sg59
g63
sS'trial_loop.thisN'
p1793
I60
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1794
g60
(g99
S'<\x00\x00\x00'
tRp1795
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1796
I0
sg904
g1226
sS'block_loop.thisRepN'
p1797
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1798
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1799
Nsg70
Vn
sS'block_loop.thisTrialN'
p1800
I0
sg39
F0.9166292004774732
sg34
g753
(S'\x07\xdf\x07\x02\x074\x1d\x02\xbb8'
tRp1801
sa(dp1802
S'trial_loop.thisTrialN'
p1803
I61
sg895
g1204
sS'block_loop.thisIndex'
p1804
g889
sg38
S'left'
p1805
sg59
g63
sS'trial_loop.thisN'
p1806
I61
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p1807
g60
(g99
S'=\x00\x00\x00'
tRp1808
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1809
I0
sg904
g1211
sS'block_loop.thisRepN'
p1810
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1811
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1812
Nsg70
Vn
sS'block_loop.thisTrialN'
p1813
I0
sg39
F1.1999006730229667
sg34
g753
(S'\x07\xdf\x07\x02\x074#\x01\xe0x'
tRp1814
sa(dp1815
S'trial_loop.thisTrialN'
p1816
I62
sg895
g916
sS'block_loop.thisIndex'
p1817
g889
sg38
S'right'
p1818
sg59
g63
sS'trial_loop.thisN'
p1819
I62
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1820
g60
(g99
S'>\x00\x00\x00'
tRp1821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1822
I0
sg904
g924
sS'block_loop.thisRepN'
p1823
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1824
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1825
Nsg70
Vn
sS'block_loop.thisTrialN'
p1826
I0
sg39
F0.84973516132231453
sg34
g753
(S'\x07\xdf\x07\x02\x074)\x05\x89\xf8'
tRp1827
sa(dp1828
S'trial_loop.thisTrialN'
p1829
I63
sg895
g1709
sS'block_loop.thisIndex'
p1830
g889
sg38
S'right'
p1831
sg59
g63
sS'trial_loop.thisN'
p1832
I63
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p1833
g60
(g99
S'?\x00\x00\x00'
tRp1834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1835
I0
sg904
g1716
sS'block_loop.thisRepN'
p1836
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1837
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1838
Nsg70
Vn
sS'block_loop.thisTrialN'
p1839
I0
sg39
F1.1332024938938048
sg34
g753
(S'\x07\xdf\x07\x02\x074/\x03\xb9 '
tRp1840
sa(dp1841
S'trial_loop.thisTrialN'
p1842
I64
sg895
S'46-pistachios.png'
p1843
sS'block_loop.thisIndex'
p1844
g889
sg38
S'left'
p1845
sg59
g63
sS'trial_loop.thisN'
p1846
I64
sg33
g974
sg64
g65
sS'trial_loop.thisIndex'
p1847
g60
(g99
S'@\x00\x00\x00'
tRp1848
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1849
I0
sg904
S'29-beans.png'
p1850
sS'block_loop.thisRepN'
p1851
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1852
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p1853
Nsg70
Vn
sS'block_loop.thisTrialN'
p1854
I0
sg39
F0.78335856896183031
sg34
g753
(S'\x07\xdf\x07\x02\x0745\x061\xf0'
tRp1855
sa(dp1856
S'trial_loop.thisTrialN'
p1857
I65
sg895
g1219
sS'block_loop.thisIndex'
p1858
g889
sg38
S'left'
p1859
sg59
g63
sS'trial_loop.thisN'
p1860
I65
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1861
g60
(g99
S'A\x00\x00\x00'
tRp1862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1863
I0
sg904
g1226
sS'block_loop.thisRepN'
p1864
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1865
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1866
Nsg70
Vn
sS'block_loop.thisTrialN'
p1867
I0
sg39
F0.74991154938425097
sg34
g753
(S'\x07\xdf\x07\x02\x074;\x03n\xe8'
tRp1868
sa(dp1869
S'trial_loop.thisTrialN'
p1870
I66
sg895
g1539
sS'block_loop.thisIndex'
p1871
g889
sg38
S'right'
p1872
sg59
g63
sS'trial_loop.thisN'
p1873
I66
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1874
g60
(g99
S'B\x00\x00\x00'
tRp1875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1876
I0
sg904
g1546
sS'block_loop.thisRepN'
p1877
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1878
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p1879
Nsg70
Vn
sS'block_loop.thisTrialN'
p1880
I0
sg39
F1.0665043147650977
sg34
g753
(S'\x07\xdf\x07\x02\x075\x05\x002\xc8'
tRp1881
sa(dp1882
S'trial_loop.thisTrialN'
p1883
I67
sg895
g916
sS'block_loop.thisIndex'
p1884
g889
sg38
S'right'
p1885
sg59
g63
sS'trial_loop.thisN'
p1886
I67
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1887
g60
(g99
S'C\x00\x00\x00'
tRp1888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1889
I0
sg904
g924
sS'block_loop.thisRepN'
p1890
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1891
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1892
Nsg70
Vn
sS'block_loop.thisTrialN'
p1893
I0
sg39
F0.81653132748351709
sg34
g753
(S'\x07\xdf\x07\x02\x075\x0b\x01\xb5\x80'
tRp1894
sa(dp1895
S'trial_loop.thisTrialN'
p1896
I68
sg895
g1423
sS'block_loop.thisIndex'
p1897
g889
sg38
S'right'
p1898
sg59
g63
sS'trial_loop.thisN'
p1899
I68
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p1900
g60
(g99
S'D\x00\x00\x00'
tRp1901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1902
I0
sg904
g1431
sS'block_loop.thisRepN'
p1903
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1904
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vn
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.9665119267924638
sg34
g753
(S'\x07\xdf\x07\x02\x075\x10\x0e\xad\xd0'
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1470
sS'block_loop.thisIndex'
p1910
g889
sg38
S'left'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g991
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1477
sS'block_loop.thisRepN'
p1916
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1917
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vn
sS'block_loop.thisTrialN'
p1919
I0
sg39
F0.80002434708330838
sg34
g753
(S'\x07\xdf\x07\x02\x075\x17\x0e\xc1X'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1031
sS'block_loop.thisIndex'
p1923
g889
sg38
S'right'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1039
sS'block_loop.thisRepN'
p1929
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1930
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vn
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.0498208607750712
sg34
g753
(S'\x07\xdf\x07\x02\x075\x1d\x0c8\xe8'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
g1204
sS'block_loop.thisIndex'
p1936
g889
sg38
S'left'
p1937
sg59
g63
sS'trial_loop.thisN'
p1938
I71
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1939
g60
(g99
S'G\x00\x00\x00'
tRp1940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1941
I0
sg904
g1211
sS'block_loop.thisRepN'
p1942
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1943
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vn
sS'block_loop.thisTrialN'
p1945
I0
sg39
F0.83324671207492429
sg34
g753
(S'\x07\xdf\x07\x02\x075#\r\x81\x08'
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1655
sS'block_loop.thisIndex'
p1949
g889
sg38
S'left'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1662
sS'block_loop.thisRepN'
p1955
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1956
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vn
sS'block_loop.thisTrialN'
p1958
I0
sg39
F0.94960581387840648
sg34
g753
(S'\x07\xdf\x07\x02\x075)\x0bu\x98'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1455
sS'block_loop.thisIndex'
p1962
g889
sg38
S'right'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1462
sS'block_loop.thisRepN'
p1968
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1969
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vn
sS'block_loop.thisTrialN'
p1971
I0
sg39
F3.8665893870092987
sg34
g753
(S'\x07\xdf\x07\x02\x075/\x0b\x13\xf0'
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1539
sS'block_loop.thisIndex'
p1975
g889
sg38
S'right'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1546
sS'block_loop.thisRepN'
p1981
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1982
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vn
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.73323579294947194
sg34
g753
(S'\x07\xdf\x07\x02\x0758\t\xa8\xa8'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1048
sS'block_loop.thisIndex'
p1988
g889
sg38
S'right'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1056
sS'block_loop.thisRepN'
p1994
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1995
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vn
sS'block_loop.thisTrialN'
p1997
I0
sg39
F1.1165298735004399
sg34
g753
(S'\x07\xdf\x07\x02\x076\x02\x05\xf3p'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1554
sS'block_loop.thisIndex'
p2001
g889
sg38
S'right'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1562
sS'block_loop.thisRepN'
p2007
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2008
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vn
sS'block_loop.thisTrialN'
p2010
I0
sg39
F0.73321954255425226
sg34
g753
(S'\x07\xdf\x07\x02\x076\x08\x08l@'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g1737
sS'block_loop.thisIndex'
p2014
g889
sg38
S'right'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g957
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g1744
sS'block_loop.thisRepN'
p2020
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2021
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vn
sS'block_loop.thisTrialN'
p2023
I0
sg39
F0.79991230488440124
sg34
g753
(S'\x07\xdf\x07\x02\x076\x0e\x04\xb3 '
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
g1142
sS'block_loop.thisIndex'
p2027
g889
sg38
S'right'
p2028
sg59
g63
sS'trial_loop.thisN'
p2029
I78
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p2030
g60
(g99
S'N\x00\x00\x00'
tRp2031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2032
I0
sg904
g1150
sS'block_loop.thisRepN'
p2033
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2034
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F2.0165203798483162
sg34
g753
(S'\x07\xdf\x07\x02\x076\x14\x02*\xb0'
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g1298
sS'block_loop.thisIndex'
p2040
g889
sg38
S'right'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g1306
sS'block_loop.thisRepN'
p2046
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2047
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F0.8833244431316416
sg34
g753
(S'\x07\xdf\x07\x02\x076\x1b\x02\xf5\xd0'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1283
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1290
sS'block_loop.thisRepN'
p2059
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2060
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F1.7330784207010765
sg34
g753
(S'\x07\xdf\x07\x02\x076!\x01\x9e\x10'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1843
sS'block_loop.thisIndex'
p2066
g889
sg38
S'left'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1850
sS'block_loop.thisRepN'
p2072
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2073
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F1.0832245459655496
sg34
g753
(S"\x07\xdf\x07\x02\x076'\r]\xe0"
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g1112
sS'block_loop.thisIndex'
p2079
g889
sg38
S'right'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g1120
sS'block_loop.thisRepN'
p2085
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2086
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F0.81653617409256185
sg34
g753
(S'\x07\xdf\x07\x02\x076-\x0f#\x00'
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g896
sS'block_loop.thisIndex'
p2092
g889
sg38
S'right'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g905
sS'block_loop.thisRepN'
p2098
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2099
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F1.0330872301256022
sg34
g753
(S'\x07\xdf\x07\x02\x0763\x0c\xd9\x10'
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1219
sS'block_loop.thisIndex'
p2105
g889
sg38
S'left'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1226
sS'block_loop.thisRepN'
p2111
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2112
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F0.88338687886061962
sg34
g753
(S'\x07\xdf\x07\x02\x0769\r\xe2\xb0'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
g1082
sS'block_loop.thisIndex'
p2118
g889
sg38
S'right'
p2119
sg59
g63
sS'trial_loop.thisN'
p2120
I85
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2121
g60
(g99
S'U\x00\x00\x00'
tRp2122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2123
I0
sg904
g1090
sS'block_loop.thisRepN'
p2124
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2125
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2126
Nsg70
Vn
sS'block_loop.thisTrialN'
p2127
I0
sg39
F1.2332233913321033
sg34
g753
(S'\x07\xdf\x07\x02\x077\x03\x0c\x8e\xd8'
tRp2128
sa(dp2129
S'trial_loop.thisTrialN'
p2130
I86
sg895
g1234
sS'block_loop.thisIndex'
p2131
g889
sg38
S'left'
p2132
sg59
g63
sS'trial_loop.thisN'
p2133
I86
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2134
g60
(g99
S'V\x00\x00\x00'
tRp2135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2136
I0
sg904
g1241
sS'block_loop.thisRepN'
p2137
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2138
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2139
Nsg70
Vn
sS'block_loop.thisTrialN'
p2140
I0
sg39
F1.1498862329790427
sg34
g753
(S'\x07\xdf\x07\x02\x077\n\x01o0'
tRp2141
sa(dp2142
S'trial_loop.thisTrialN'
p2143
I87
sg895
S'4-corn.png'
p2144
sS'block_loop.thisIndex'
p2145
g889
sg38
S'left'
p2146
sg59
g63
sS'trial_loop.thisN'
p2147
I87
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2148
g60
(g99
S'W\x00\x00\x00'
tRp2149
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2150
I0
sg904
S'10-bounty_redo.png'
p2151
sS'block_loop.thisRepN'
p2152
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2153
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vn
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.2330514792565737
sg34
g753
(S'\x07\xdf\x07\x02\x077\x10\x04"\x98'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g1640
sS'block_loop.thisIndex'
p2159
g889
sg38
S'left'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g1647
sS'block_loop.thisRepN'
p2165
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2166
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vn
sS'block_loop.thisTrialN'
p2168
I0
sg39
F1.0832125719903161
sg34
g753
(S'\x07\xdf\x07\x02\x077\x16\x08I\x18'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
g1737
sS'block_loop.thisIndex'
p2172
g889
sg38
S'right'
p2173
sg59
g63
sS'trial_loop.thisN'
p2174
I89
sg33
g957
sg64
g65
sS'trial_loop.thisIndex'
p2175
g60
(g99
S'Y\x00\x00\x00'
tRp2176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2177
I0
sg904
g1744
sS'block_loop.thisRepN'
p2178
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2179
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p2180
Nsg70
Vn
sS'block_loop.thisTrialN'
p2181
I0
sg39
F0.78334431422899797
sg34
g753
(S'\x07\xdf\x07\x02\x077\x1c\n\nP'
tRp2182
sa(dp2183
S'trial_loop.thisTrialN'
p2184
I90
sg895
g1082
sS'block_loop.thisIndex'
p2185
g889
sg38
S'right'
p2186
sg59
g63
sS'trial_loop.thisN'
p2187
I90
sg33
g1093
sg64
g65
sS'trial_loop.thisIndex'
p2188
g60
(g99
S'Z\x00\x00\x00'
tRp2189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2190
I0
sg904
g1090
sS'block_loop.thisRepN'
p2191
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2192
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2193
Nsg70
Vn
sS'block_loop.thisTrialN'
p2194
I0
sg39
F0.78320461784915096
sg34
g753
(S'\x07\xdf\x07\x02\x077"\x07GH'
tRp2195
sa(dp2196
S'trial_loop.thisTrialN'
p2197
I91
sg895
g980
sS'block_loop.thisIndex'
p2198
g889
sg38
S'right'
p2199
sg59
g63
sS'trial_loop.thisN'
p2200
I91
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2201
g60
(g99
S'[\x00\x00\x00'
tRp2202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2203
I0
sg904
g988
sS'block_loop.thisRepN'
p2204
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2205
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2206
Nsg70
Vn
sS'block_loop.thisTrialN'
p2207
I0
sg39
F0.68324273500456911
sg34
g753
(S'\x07\xdf\x07\x02\x077(\x04\x80X'
tRp2208
sa(dp2209
S'trial_loop.thisTrialN'
p2210
I92
sg895
g946
sS'block_loop.thisIndex'
p2211
g889
sg38
S'left'
p2212
sg59
g63
sS'trial_loop.thisN'
p2213
I92
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p2214
g60
(g99
S'\\\x00\x00\x00'
tRp2215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2216
I0
sg904
g954
sS'block_loop.thisRepN'
p2217
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2218
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vn
sS'block_loop.thisTrialN'
p2220
I0
sg39
F0.81648485705500207
sg34
g753
(S'\x07\xdf\x07\x02\x077.\x00\x13\x88'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g1234
sS'block_loop.thisIndex'
p2224
g889
sg38
S'left'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g1241
sS'block_loop.thisRepN'
p2230
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2231
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vn
sS'block_loop.thisTrialN'
p2233
I0
sg39
F0.81656496865252848
sg34
g753
(S'\x07\xdf\x07\x02\x0773\r\x0b\xd8'
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g1283
sS'block_loop.thisIndex'
p2237
g889
sg38
S'left'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g1290
sS'block_loop.thisRepN'
p2243
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2244
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vn
sS'block_loop.thisTrialN'
p2246
I0
sg39
F0.9332168626647217
sg34
g753
(S'\x07\xdf\x07\x02\x0779\n\xc1\xe8'
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g1048
sS'block_loop.thisIndex'
p2250
g889
sg38
S'right'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g1056
sS'block_loop.thisRepN'
p2256
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2257
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vn
sS'block_loop.thisTrialN'
p2259
I0
sg39
F0.80003432539660935
sg34
g753
(S'\x07\xdf\x07\x02\x078\x03\n`@'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1266
sS'block_loop.thisIndex'
p2263
g889
sg38
S'right'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1274
sS'block_loop.thisRepN'
p2269
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2270
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vn
sS'block_loop.thisTrialN'
p2272
I0
sg39
F0.70001200248498208
sg34
g753
(S'\x07\xdf\x07\x02\x078\t\x07\xd7\xd0'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1249
sS'block_loop.thisIndex'
p2276
g889
sg38
S'right'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1260
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1257
sS'block_loop.thisRepN'
p2282
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2283
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vn
sS'block_loop.thisTrialN'
p2285
I0
sg39
F1.3332266129013988
sg34
g753
(S'\x07\xdf\x07\x02\x078\x0f\x03\xa5\x98'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1142
sS'block_loop.thisIndex'
p2289
g889
sg38
S'right'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1150
sS'block_loop.thisRepN'
p2295
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2296
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vn
sS'block_loop.thisTrialN'
p2298
I0
sg39
F0.93320374831046138
sg34
g753
(S'\x07\xdf\x07\x02\x078\x15\t7`'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g1172
sS'block_loop.thisIndex'
p2302
g889
sg38
S'left'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g1179
sS'block_loop.thisRepN'
p2308
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2309
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vn
sS'block_loop.thisTrialN'
p2311
I0
sg39
F0.88312943838900537
sg34
g753
(S'\x07\xdf\x07\x02\x078\x1b\x08\xd5\xb8'
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g1640
sS'block_loop.thisIndex'
p2315
g889
sg38
S'left'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g1647
sS'block_loop.thisRepN'
p2321
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2322
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vn
sS'block_loop.thisTrialN'
p2324
I0
sg39
F0.89991467117033608
sg34
g753
(S'\x07\xdf\x07\x02\x078!\x07}\xf8'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
g980
sS'block_loop.thisIndex'
p2328
g889
sg38
S'right'
p2329
sg59
g63
sS'trial_loop.thisN'
p2330
I101
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2331
g60
(g99
S'e\x00\x00\x00'
tRp2332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2333
I0
sg904
g988
sS'block_loop.thisRepN'
p2334
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2335
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2336
Nsg70
Vn
sS'block_loop.thisTrialN'
p2337
I0
sg39
F0.78326790886194431
sg34
g753
(S"\x07\xdf\x07\x02\x078'\x06d\xb8"
tRp2338
sa(dp2339
S'trial_loop.thisTrialN'
p2340
I102
sg895
g1423
sS'block_loop.thisIndex'
p2341
g889
sg38
S'left'
p2342
sg59
g63
sS'trial_loop.thisN'
p2343
I102
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p2344
g60
(g99
S'f\x00\x00\x00'
tRp2345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2346
I0
sg904
g1431
sS'block_loop.thisRepN'
p2347
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2348
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vn
sS'block_loop.thisTrialN'
p2350
I0
sg39
F1.866465370835158
sg34
g753
(S'\x07\xdf\x07\x02\x078-\x03\xa1\xb0'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g1393
sS'block_loop.thisIndex'
p2354
g889
sg38
S'right'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g1401
sS'block_loop.thisRepN'
p2360
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2361
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vn
sS'block_loop.thisTrialN'
p2363
I0
sg39
F0.74969801348879628
sg34
g753
(S'\x07\xdf\x07\x02\x0784\x02F\x08'
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1440
sS'block_loop.thisIndex'
p2367
g889
sg38
S'left'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1447
sS'block_loop.thisRepN'
p2373
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2374
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vn
sS'block_loop.thisTrialN'
p2376
I0
sg39
F0.84981869405555699
sg34
g753
(S'\x07\xdf\x07\x02\x0789\x0e\r\xa8'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
g1599
sS'block_loop.thisIndex'
p2380
g889
sg38
S'left'
p2381
sg59
g63
sS'trial_loop.thisN'
p2382
I105
sg33
g1309
sg64
g65
sS'trial_loop.thisIndex'
p2383
g60
(g99
S'i\x00\x00\x00'
tRp2384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2385
I0
sg904
g1606
sS'block_loop.thisRepN'
p2386
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2387
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vn
sS'block_loop.thisTrialN'
p2389
I0
sg39
F0.96644179350778359
sg34
g753
(S'\x07\xdf\x07\x02\x079\x03\x0c<\xd0'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1709
sS'block_loop.thisIndex'
p2393
g889
sg38
S'right'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1716
sS'block_loop.thisRepN'
p2399
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2400
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vn
sS'block_loop.thisTrialN'
p2402
I0
sg39
F1.6665427455241115
sg34
g753
(S'\x07\xdf\x07\x02\x079\t\x0cT@'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g1539
sS'block_loop.thisIndex'
p2406
g889
sg38
S'right'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g1546
sS'block_loop.thisRepN'
p2412
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2413
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vn
sS'block_loop.thisTrialN'
p2415
I0
sg39
F0.94989290419334793
sg34
g753
(S'\x07\xdf\x07\x02\x079\x10\x07\xdf\xa0'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g1142
sS'block_loop.thisIndex'
p2419
g889
sg38
S'right'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g1150
sS'block_loop.thisRepN'
p2425
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2426
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vn
sS'block_loop.thisTrialN'
p2428
I0
sg39
F0.89988217037989671
sg34
g753
(S'\x07\xdf\x07\x02\x079\x16\x07}\xf8'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g1031
sS'block_loop.thisIndex'
p2432
g889
sg38
S'right'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g1039
sS'block_loop.thisRepN'
p2438
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2439
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vn
sS'block_loop.thisTrialN'
p2441
I0
sg39
F0.75000791137654232
sg34
g753
(S'\x07\xdf\x07\x02\x079\x1c\x06d\xb8'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
S'20-fruit_pastilles.png'
p2445
sS'block_loop.thisIndex'
p2446
g889
sg38
S'left'
p2447
sg59
g63
sS'trial_loop.thisN'
p2448
I110
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2449
g60
(g99
S'n\x00\x00\x00'
tRp2450
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2451
I0
sg904
S'2-steamed_puddings.png'
p2452
sS'block_loop.thisRepN'
p2453
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2454
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2455
Nsg70
Vn
sS'block_loop.thisTrialN'
p2456
I0
sg39
F1.2999951248816615
sg34
g753
(S'\x07\xdf\x07\x02\x079"\x03(\x98'
tRp2457
sa(dp2458
S'trial_loop.thisTrialN'
p2459
I111
sg895
g946
sS'block_loop.thisIndex'
p2460
g889
sg38
S'left'
p2461
sg59
g63
sS'trial_loop.thisN'
p2462
I111
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p2463
g60
(g99
S'o\x00\x00\x00'
tRp2464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2465
I0
sg904
g954
sS'block_loop.thisRepN'
p2466
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2467
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F0.93323852985849953
sg34
g753
(S'\x07\xdf\x07\x02\x079(\x08=`'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1599
sS'block_loop.thisIndex'
p2473
g889
sg38
S'right'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1606
sS'block_loop.thisRepN'
p2479
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2480
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F1.0665063104279398
sg34
g753
(S'\x07\xdf\x07\x02\x079.\x07\xdb\xb8'
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g2144
sS'block_loop.thisIndex'
p2486
g889
sg38
S'left'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g2151
sS'block_loop.thisRepN'
p2492
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2493
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F0.98322103930149751
sg34
g753
(S'\x07\xdf\x07\x02\x0794\tbX'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
g1554
sS'block_loop.thisIndex'
p2499
g889
sg38
S'right'
p2500
sg59
g63
sS'trial_loop.thisN'
p2501
I114
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p2502
g60
(g99
S'r\x00\x00\x00'
tRp2503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2504
I0
sg904
g1562
sS'block_loop.thisRepN'
p2505
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2506
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p2507
Nsg70
Vn
sS'block_loop.thisTrialN'
p2508
I0
sg39
F0.81653988032257985
sg34
g753
(S'\x07\xdf\x07\x02\x079:\ty\xc8'
tRp2509
sa(dp2510
S'trial_loop.thisTrialN'
p2511
I115
sg895
g916
sS'block_loop.thisIndex'
p2512
g889
sg38
S'right'
p2513
sg59
g63
sS'trial_loop.thisN'
p2514
I115
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p2515
g60
(g99
S's\x00\x00\x00'
tRp2516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2517
I0
sg904
g924
sS'block_loop.thisRepN'
p2518
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2519
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2520
Nsg70
Vn
sS'block_loop.thisTrialN'
p2521
I0
sg39
F2.2167514775742347
sg34
g753
(S'\x07\xdf\x07\x02\x07:\x04\x07/\xd8'
tRp2522
sa(dp2523
S'trial_loop.thisTrialN'
p2524
I116
sg895
g1655
sS'block_loop.thisIndex'
p2525
g889
sg38
S'left'
p2526
sg59
g63
sS'trial_loop.thisN'
p2527
I116
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2528
g60
(g99
S't\x00\x00\x00'
tRp2529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2530
I0
sg904
g1662
sS'block_loop.thisRepN'
p2531
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2532
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p2533
Nsg70
Vn
sS'block_loop.thisTrialN'
p2534
I0
sg39
F0.73303936273396175
sg34
g753
(S'\x07\xdf\x07\x02\x07:\x0b\x0b\x10\x08'
tRp2535
sa(dp2536
S'trial_loop.thisTrialN'
p2537
I117
sg895
g1423
sS'block_loop.thisIndex'
p2538
g889
sg38
S'left'
p2539
sg59
g63
sS'trial_loop.thisN'
p2540
I117
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p2541
g60
(g99
S'u\x00\x00\x00'
tRp2542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2543
I0
sg904
g1431
sS'block_loop.thisRepN'
p2544
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2545
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p2546
Nsg70
Vn
sS'block_loop.thisTrialN'
p2547
I0
sg39
F1.4498671031274171
sg34
g753
(S'\x07\xdf\x07\x02\x07:\x11\x07\x95h'
tRp2548
sa(dp2549
S'trial_loop.thisTrialN'
p2550
I118
sg895
g1485
sS'block_loop.thisIndex'
p2551
g889
sg38
S'left'
p2552
sg59
g63
sS'trial_loop.thisN'
p2553
I118
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p2554
g60
(g99
S'v\x00\x00\x00'
tRp2555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2556
I0
sg904
g1492
sS'block_loop.thisRepN'
p2557
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2558
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p2559
Nsg70
Vn
sS'block_loop.thisTrialN'
p2560
I0
sg39
F0.93321714775902365
sg34
g753
(S'\x07\xdf\x07\x02\x07:\x17\x0e\xd0\xf8'
tRp2561
sa(dp2562
S'trial_loop.thisTrialN'
p2563
I119
sg895
g1655
sS'block_loop.thisIndex'
p2564
g889
sg38
S'left'
p2565
sg59
g63
sS'trial_loop.thisN'
p2566
I119
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2567
g60
(g99
S'w\x00\x00\x00'
tRp2568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2569
I0
sg904
g1662
sS'block_loop.thisRepN'
p2570
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2571
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p2572
Nsg70
Vn
sS'block_loop.thisTrialN'
p2573
I0
sg39
F0.64966628245383617
sg34
g753
(S'\x07\xdf\x07\x02\x07:\x1d\x0eoP'
tRp2574
sa(dp2575
S'trial_loop.thisTrialN'
p2576
I120
sg895
g1249
sS'block_loop.thisIndex'
p2577
g889
sg38
S'right'
p2578
sg59
g63
sS'trial_loop.thisN'
p2579
I120
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2580
g60
(g99
S'x\x00\x00\x00'
tRp2581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2582
I0
sg904
g1257
sS'block_loop.thisRepN'
p2583
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2584
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2585
Nsg70
Vn
sS'block_loop.thisTrialN'
p2586
I0
sg39
F1.2835272024490223
sg34
g753
(S'\x07\xdf\x07\x02\x07:#\t\x85\x80'
tRp2587
sa(dp2588
S'trial_loop.thisTrialN'
p2589
I121
sg895
g1065
sS'block_loop.thisIndex'
p2590
g889
sg38
S'left'
p2591
sg59
g63
sS'trial_loop.thisN'
p2592
I121
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p2593
g60
(g99
S'y\x00\x00\x00'
tRp2594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2595
I0
sg904
g1073
sS'block_loop.thisRepN'
p2596
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2597
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p2598
Nsg70
Vn
sS'block_loop.thisTrialN'
p2599
I0
sg39
F0.76654710747243371
sg34
g753
(S'\x07\xdf\x07\x02\x07:)\x0e_\xb0'
tRp2600
sa(dp2601
S'trial_loop.thisTrialN'
p2602
I122
sg895
g2445
sS'block_loop.thisIndex'
p2603
g889
sg38
S'right'
p2604
sg59
g63
sS'trial_loop.thisN'
p2605
I122
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2606
g60
(g99
S'z\x00\x00\x00'
tRp2607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2608
I0
sg904
g2452
sS'block_loop.thisRepN'
p2609
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2610
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2611
Nsg70
Vn
sS'block_loop.thisTrialN'
p2612
I0
sg39
F3.1831738846453845
sg34
g753
(S'\x07\xdf\x07\x02\x07:/\x0b^('
tRp2613
sa(dp2614
S'trial_loop.thisTrialN'
p2615
I123
sg895
g1298
sS'block_loop.thisIndex'
p2616
g889
sg38
S'left'
p2617
sg59
g63
sS'trial_loop.thisN'
p2618
I123
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p2619
g60
(g99
S'{\x00\x00\x00'
tRp2620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2621
I0
sg904
g1306
sS'block_loop.thisRepN'
p2622
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2623
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p2624
Nsg70
Vn
sS'block_loop.thisTrialN'
p2625
I0
sg39
F2.0666442962397014
sg34
g753
(S'\x07\xdf\x07\x02\x07:7\x0e\x82\xd8'
tRp2626
sa(dp2627
S'trial_loop.thisTrialN'
p2628
I124
sg895
g963
sS'block_loop.thisIndex'
p2629
g889
sg38
S'right'
p2630
sg59
g63
sS'trial_loop.thisN'
p2631
I124
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2632
g60
(g99
S'|\x00\x00\x00'
tRp2633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2634
I0
sg904
g971
sS'block_loop.thisRepN'
p2635
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2636
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2637
Nsg70
Vn
sS'block_loop.thisTrialN'
p2638
I0
sg39
F0.94989746570809075
sg34
g753
(S'\x07\xdf\x07\x02\x07;\x03\x00\xfd\xe8'
tRp2639
sa(dp2640
S'trial_loop.thisTrialN'
p2641
I125
sg895
S'33-ambrosia_rice.png'
p2642
sS'block_loop.thisIndex'
p2643
g889
sg38
S'left'
p2644
sg59
g63
sS'trial_loop.thisN'
p2645
I125
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2646
g60
(g99
S'}\x00\x00\x00'
tRp2647
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2648
I0
sg904
S'23-crunchie_redo.png'
p2649
sS'block_loop.thisRepN'
p2650
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.0166957130604715
sg34
g753
(S'\x07\xdf\x07\x02\x07;\t\x00\x98X'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1470
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1477
sS'block_loop.thisRepN'
p2663
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.94988748739524453
sg34
g753
(S'\x07\xdf\x07\x02\x07;\x0f\x01g`'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1843
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1850
sS'block_loop.thisRepN'
p2676
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F0.66636598683953707
sg34
g753
(S'\x07\xdf\x07\x02\x07;\x15\x01\x05\xb8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g997
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1005
sS'block_loop.thisRepN'
p2689
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F0.85007813018955858
sg34
g753
(S'\x07\xdf\x07\x02\x07;\x1a\x0b\xdb('
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1470
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1477
sS'block_loop.thisRepN'
p2702
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F0.75003528046318024
sg34
g753
(S'\x07\xdf\x07\x02\x07; \n\nP'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g2642
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g2649
sS'block_loop.thisRepN'
p2715
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.84971406431805008
sg34
g753
(S'\x07\xdf\x07\x02\x07;&\x06\xcaH'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1843
sS'block_loop.thisIndex'
p2722
g889
sg38
S'left'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1850
sS'block_loop.thisRepN'
p2728
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F0.65002464643248459
sg34
g753
(S'\x07\xdf\x07\x02\x07;,\x04\xfdX'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g997
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1005
sS'block_loop.thisRepN'
p2741
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.86658197454835317
sg34
g753
(S'\x07\xdf\x07\x02\x07;2\x00\x13\x88'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1219
sS'block_loop.thisIndex'
p2748
g889
sg38
S'left'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1226
sS'block_loop.thisRepN'
p2754
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F0.84989310375976856
sg34
g753
(S'\x07\xdf\x07\x02\x07;7\r\xc3p'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1393
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1401
sS'block_loop.thisRepN'
p2767
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.74965524929120875
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\x01\x0b\xf2\x98'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g963
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g971
sS'block_loop.thisRepN'
p2780
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F0.86656629434264687
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\x07\x08\xb6x'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g2445
sS'block_loop.thisIndex'
p2787
g889
sg38
S'right'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g2452
sS'block_loop.thisRepN'
p2793
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.1999850610400244
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\r\x07 8'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1142
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1150
sS'block_loop.thisRepN'
p2806
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F0.86665096745446135
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\x13\n\xc9\xb8'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g2642
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g2649
sS'block_loop.thisRepN'
p2819
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F0.899864779606105
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\x19\t7`'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1455
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1434
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1462
sS'block_loop.thisRepN'
p2832
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.89989471454464365
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00\x1f\x08\\\xa0'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1709
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1716
sS'block_loop.thisRepN'
p2845
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F6.1164700036233626
sg34
g753
(S'\x07\xdf\x07\x02\x08\x00%\x07C`'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1048
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1059
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1056
sS'block_loop.thisRepN'
p2858
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.84991391566973107
sg34
g753
(S'\x07\xdf\x07\x02\x08\x000\t\x9c\xf0'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1554
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1562
sS'block_loop.thisRepN'
p2871
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.81664736100719892
sg34
g753
(S'\x07\xdf\x07\x02\x08\x006\x07\xcc\x18'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1112
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1120
sS'block_loop.thisRepN'
p2884
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.66657382084122219
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x00\x05\x82('
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g963
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g971
sS'block_loop.thisRepN'
p2897
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.80013382342986006
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x06\x00\xd6\xd8'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1204
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1211
sS'block_loop.thisRepN'
p2910
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.93322997701852728
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x0b\r\x94\x90'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1234
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1241
sS'block_loop.thisRepN'
p2923
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.83315633706979497
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x11\x0c\xf4h'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1065
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1073
sS'block_loop.thisRepN'
p2936
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.7665895865757193
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x17\x0b#\x90'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1571
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1277
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1578
sS'block_loop.thisRepN'
p2949
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.73354226970150194
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01\x1d\x07\xe7p'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g916
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g924
sS'block_loop.thisRepN'
p2962
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.96656153326193817
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01#\x04l\xd0'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g946
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g954
sS'block_loop.thisRepN'
p2975
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.79991487073675671
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01)\x04\x84@'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1423
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1431
sS'block_loop.thisRepN'
p2988
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.0165106866306814
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01/\x01\xfb\xd0'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g997
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1005
sS'block_loop.thisRepN'
p3001
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.73324006936900332
sg34
g753
(S'\x07\xdf\x07\x02\x08\x015\x02\x8cX'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1455
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1462
sS'block_loop.thisRepN'
p3014
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.89990269719510252
sg34
g753
(S'\x07\xdf\x07\x02\x08\x01:\x0eS\xf8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1571
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1578
sS'block_loop.thisRepN'
p3027
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.70031306243845393
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02\x04\r:\xb8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g2144
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g2151
sS'block_loop.thisRepN'
p3040
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.79989006750201952
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02\n\tG\x00'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1640
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1558
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1647
sS'block_loop.thisRepN'
p3053
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.84983865068124942
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02\x10\x06\xbe\x90'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1298
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1306
sS'block_loop.thisRepN'
p3066
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.1331853882147698
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02\x16\x04\xf1\xa0'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1440
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1447
sS'block_loop.thisRepN'
p3079
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.78324966280433728
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02\x1c\x07jp'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1455
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1427
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1462
sS'block_loop.thisRepN'
p3092
I0
sg907
g1427
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1434
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.84988768696121042
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02"\x04\xa3\x80'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1709
sS'block_loop.thisIndex'
p3099
g889
sg38
S'left'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1716
sS'block_loop.thisRepN'
p3105
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F1.3666034991947527
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02(\x02\xd6\x90'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1485
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1492
sS'block_loop.thisRepN'
p3118
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.83324158037066809
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02.\x08\xe1p'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1599
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1606
sS'block_loop.thisRepN'
p3131
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.88324490172362857
sg34
g753
(S'\x07\xdf\x07\x02\x08\x024\x07\x10\x98'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1172
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1179
sS'block_loop.thisRepN'
p3144
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.76645302623683165
sg34
g753
(S'\x07\xdf\x07\x02\x08\x02:\x05\xb8\xd8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1031
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1041
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1039
sS'block_loop.thisRepN'
p3157
I0
sg907
g1041
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1035
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F1.0831803562941786
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03\x04\x02\xbb8'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g980
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g988
sS'block_loop.thisRepN'
p3170
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F0.76652515518389919
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03\n\x04|p'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1187
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1195
sS'block_loop.thisRepN'
p3183
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.3003269750574873
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03\x10\x01<h'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1571
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1578
sS'block_loop.thisRepN'
p3196
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.74991554070902566
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03\x16\x06U\x18'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1014
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1025
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1022
sS'block_loop.thisRepN'
p3209
I0
sg907
g1018
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F1.0833477068554203
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03\x1c\x03\x18\xf8'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1470
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g984
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1477
sS'block_loop.thisRepN'
p3222
I0
sg907
g984
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g991
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.74997398511322899
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03"\x04\xda0'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1599
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1302
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1606
sS'block_loop.thisRepN'
p3235
I0
sg907
g1302
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1309
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.7332101344304647
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03(\x01\x9a('
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1187
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1195
sS'block_loop.thisRepN'
p3248
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.75032636210380588
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03.\r]\xe0'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1440
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1086
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1447
sS'block_loop.thisRepN'
p3261
I0
sg907
g1086
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1093
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.78324966280433728
sg34
g753
(S'\x07\xdf\x07\x02\x08\x034\t\xe3@'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1234
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1241
sS'block_loop.thisRepN'
p3274
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.66651423605890159
sg34
g753
(S'\x07\xdf\x07\x02\x08\x03:\x07 8'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g2445
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g2452
sS'block_loop.thisRepN'
p3287
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.83320223730879661
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04\x04\x02\xaf\x80'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1048
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1052
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1056
sS'block_loop.thisRepN'
p3300
I0
sg907
g1052
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1059
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.74995545396041052
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04\n\x00\xa4\x10'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g1065
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1076
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1073
sS'block_loop.thisRepN'
p3313
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.1165087764961754
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04\x0f\x0ck\xb0'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1112
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1120
sS'block_loop.thisRepN'
p3326
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.95000694205509717
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04\x15\x0e\xe4\x80'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g2144
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1198
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g2151
sS'block_loop.thisRepN'
p3339
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.81665277780575707
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04\x1b\x0e\x82\xd8'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g1655
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1397
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g1662
sS'block_loop.thisRepN'
p3352
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.68293226692730968
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04!\x0c8\xe8'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g963
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g974
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g971
sS'block_loop.thisRepN'
p3365
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.89991067984556139
sg34
g753
(S"\x07\xdf\x07\x02\x08\x04'\x08\x06\xb0"
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1571
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1578
sS'block_loop.thisRepN'
p3378
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.69990908331510582
sg34
g753
(S'\x07\xdf\x07\x02\x08\x04-\x06\xedp'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g2144
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1191
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g2151
sS'block_loop.thisRepN'
p3391
I0
sg907
g1191
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g1198
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.7666420439918511
sg34
g753
(S'\x07\xdf\x07\x02\x08\x043\x02\xf9\xb8'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1393
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1404
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1401
sS'block_loop.thisRepN'
p3404
I0
sg907
g1397
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1404
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.7495030087466148
sg34
g753
(S'\x07\xdf\x07\x02\x08\x048\x0e\xfb\xf0'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g896
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g905
sS'block_loop.thisRepN'
p3417
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.79981109628306513
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05\x02\x0b\xbf\xd0'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1843
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g967
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1850
sS'block_loop.thisRepN'
p3430
I0
sg907
g967
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g974
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.8332549798196851
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05\x08\t7`'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1554
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1565
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1562
sS'block_loop.thisRepN'
p3443
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.98330485712904192
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05\x0e\x07+\xf0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1172
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1179
sS'block_loop.thisRepN'
p3456
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.96644977615778771
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05\x14\x07\x81\xe0'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1266
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1274
sS'block_loop.thisRepN'
p3469
I0
sg907
g1270
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1277
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.68328293335025592
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05\x1a\x07Z\xd0'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1539
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1546
sS'block_loop.thisRepN'
p3482
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.78327703189097519
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05 \x03(\x98'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1640
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1565
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1647
sS'block_loop.thisRepN'
p3495
I0
sg907
g1558
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g1565
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.93323254287042801
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05&\x00e\x90'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g2642
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g2649
sS'block_loop.thisRepN'
p3508
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.76656421315146872
sg34
g753
(S'\x07\xdf\x07\x02\x08\x05+\x0f\x07\xa8'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1737
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1744
sS'block_loop.thisRepN'
p3521
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.83329802911248407
sg34
g753
(S'\x07\xdf\x07\x02\x08\x051\x0c\x06 '
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1065
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1069
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1073
sS'block_loop.thisRepN'
p3534
I0
sg907
g1069
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1076
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.73325860052182179
sg34
g753
(S'\x07\xdf\x07\x02\x08\x057\t\xfa\xb0'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1737
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g950
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1744
sS'block_loop.thisRepN'
p3547
I0
sg907
g950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g957
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.84988341054167904
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\x01\x06\x80\x10'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1485
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1492
sS'block_loop.thisRepN'
p3560
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.88331532010261071
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\x07\x04\xaf8'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1112
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1120
sS'block_loop.thisRepN'
p3573
I0
sg907
g1116
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.85002510258391339
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\r\x03[`'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1485
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1152
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1492
sS'block_loop.thisRepN'
p3586
I0
sg907
g1152
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1146
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.96658719178049068
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\x13\x01\x8a\x88'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g2445
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g2452
sS'block_loop.thisRepN'
p3599
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.84975454775849357
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\x19\x02\x1b\x10'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g2642
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1253
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g2649
sS'block_loop.thisRepN'
p3612
I0
sg907
g1253
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1260
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.73319074799428563
sg34
g753
(S'\x07\xdf\x07\x02\x08\x06\x1f\x00J8'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F21.516211479792673
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'36-fig_rolls.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'34-hula_hoops_bbq_beef_redo.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'36-fig_rolls.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.0165297879725586
sg34
g753
(S'\x07\xdf\x07\x02\x08\x073\x05\xb8\xd8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'2-steamed_puddings.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'2-steamed_puddings.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'20-fruit_pastilles.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'20-fruit_pastilles.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.79997388532956393
sg34
g753
(S'\x07\xdf\x07\x02\x08\x079\x06I`'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'21-nakd_banana_crunch.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'21-nakd_banana_crunch.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'1-treacle_cookies.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'1-treacle_cookies.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.76657105542335557
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08\x03\x03\xc4\xd8'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.2831979181246425
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08\t\x00\xc3P'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'7-olives.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'22-daim.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'22-daim.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'7-olives.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.78324994789909397
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08\x0f\x05\x9d\x80'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'8-liquorice_catherine_wheels.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3726
g60
(g99
S'\x05\x00\x00\x00'
tRp3727
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3728
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3729
sS'block_loop.thisRepN'
p3730
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3731
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3732
Nsg70
Vn
sS'block_loop.thisTrialN'
p3733
I0
sg39
F0.83356231185507568
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08\x15\x02\xdax'
tRp3734
sa(dp3735
S'trial_loop.thisTrialN'
p3736
I6
sg3633
S'16-skips_prawn.png'
p3737
sS'block_loop.thisIndex'
p3738
g3627
sg38
S'right'
p3739
sg59
g63
sS'trial_loop.thisN'
p3740
I6
sg33
S'42-mrkipling_lemon_slices.png'
p3741
sg64
g65
sS'trial_loop.thisIndex'
p3742
g60
(g99
S'\x06\x00\x00\x00'
tRp3743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3744
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3745
sS'block_loop.thisRepN'
p3746
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3747
I1
sg3647
S'16-skips_prawn.png'
p3748
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.78313077833399802
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08\x1b\x00\xcb '
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'1-treacle_cookies.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'right'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3758
g60
(g99
S'\x07\x00\x00\x00'
tRp3759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3760
I0
sg3642
S'21-nakd_banana_crunch.png'
p3761
sS'block_loop.thisRepN'
p3762
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3763
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vn
sS'block_loop.thisTrialN'
p3765
I0
sg39
F0.86662046232686407
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08 \rJX'
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
S'25-kitkat.png'
p3769
sS'block_loop.thisIndex'
p3770
g3627
sg38
S'left'
p3771
sg59
g63
sS'trial_loop.thisN'
p3772
I8
sg33
S'25-kitkat.png'
p3773
sg64
g65
sS'trial_loop.thisIndex'
p3774
g60
(g99
S'\x08\x00\x00\x00'
tRp3775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3776
I0
sg3642
S'31-hobnobs.png'
p3777
sS'block_loop.thisRepN'
p3778
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3779
I1
sg3647
S'31-hobnobs.png'
p3780
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vn
sS'block_loop.thisTrialN'
p3782
I0
sg39
F0.81657551715443333
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08&\x0b\xb8\x00'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
g3737
sS'block_loop.thisIndex'
p3786
g3627
sg38
S'right'
p3787
sg59
g63
sS'trial_loop.thisN'
p3788
I9
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p3789
g60
(g99
S'\t\x00\x00\x00'
tRp3790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3791
I0
sg3642
g3745
sS'block_loop.thisRepN'
p3792
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3793
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vn
sS'block_loop.thisTrialN'
p3795
I0
sg39
F0.78313705041637149
sg34
g753
(S'\x07\xdf\x07\x02\x08\x08,\tn\x10'
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'10-bounty_redo.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'right'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
S'4-corn.png'
p3803
sg64
g65
sS'trial_loop.thisIndex'
p3804
g60
(g99
S'\n\x00\x00\x00'
tRp3805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3806
I0
sg3642
S'4-corn.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3809
I1
sg3647
S'10-bounty_redo.png'
p3810
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vn
sS'block_loop.thisTrialN'
p3812
I0
sg39
F0.78322400428533001
sg34
g753
(S'\x07\xdf\x07\x02\x08\x082\x06\xab\x08'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'38-maltesers.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'left'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
S'38-maltesers.png'
p3820
sg64
g65
sS'trial_loop.thisIndex'
p3821
g60
(g99
S'\x0b\x00\x00\x00'
tRp3822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3823
I0
sg3642
S'6-sour_patch_kids.png'
p3824
sS'block_loop.thisRepN'
p3825
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3826
I1
sg3647
S'6-sour_patch_kids.png'
p3827
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vn
sS'block_loop.thisTrialN'
p3829
I0
sg39
F0.66676882558385842
sg34
g753
(S'\x07\xdf\x07\x02\x08\x088\x03\xe8\x00'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
g3754
sS'block_loop.thisIndex'
p3833
g3627
sg38
S'right'
p3834
sg59
g63
sS'trial_loop.thisN'
p3835
I12
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p3836
g60
(g99
S'\x0c\x00\x00\x00'
tRp3837
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3838
I0
sg3642
g3761
sS'block_loop.thisRepN'
p3839
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3840
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3841
Nsg70
Vn
sS'block_loop.thisTrialN'
p3842
I0
sg39
F0.66658465443788373
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\x01\x0e~\xf0'
tRp3843
sa(dp3844
S'trial_loop.thisTrialN'
p3845
I13
sg3633
S'45-chewy_nougat_redo.png'
p3846
sS'block_loop.thisIndex'
p3847
g3627
sg38
S'right'
p3848
sg59
g63
sS'trial_loop.thisN'
p3849
I13
sg33
S'41-peanuts_redo.png'
p3850
sg64
g65
sS'trial_loop.thisIndex'
p3851
g60
(g99
S'\r\x00\x00\x00'
tRp3852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3853
I0
sg3642
S'41-peanuts_redo.png'
p3854
sS'block_loop.thisRepN'
p3855
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3856
I1
sg3647
S'45-chewy_nougat_redo.png'
p3857
sg55
g11
sS'block_loop.thisTrial'
p3858
Nsg70
Vn
sS'block_loop.thisTrialN'
p3859
I0
sg39
F0.61654883229493862
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\x07\n\x0e8'
tRp3860
sa(dp3861
S'trial_loop.thisTrialN'
p3862
I14
sg3633
S'3-ellas_strawberries_apples.png'
p3863
sS'block_loop.thisIndex'
p3864
g3627
sg38
S'left'
p3865
sg59
g63
sS'trial_loop.thisN'
p3866
I14
sg33
S'13-mccoys_steak_crisps.png'
p3867
sg64
g65
sS'trial_loop.thisIndex'
p3868
g60
(g99
S'\x0e\x00\x00\x00'
tRp3869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3870
I0
sg3642
S'13-mccoys_steak_crisps.png'
p3871
sS'block_loop.thisRepN'
p3872
I1
sg3645
S'3-ellas_strawberries_apples.png'
p3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vn
sS'block_loop.thisTrialN'
p3876
I0
sg39
F0.83322761073304719
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\r\x04\xabP'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
g3816
sS'block_loop.thisIndex'
p3880
g3627
sg38
S'left'
p3881
sg59
g63
sS'trial_loop.thisN'
p3882
I15
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p3883
g60
(g99
S'\x0f\x00\x00\x00'
tRp3884
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3885
I0
sg3642
g3824
sS'block_loop.thisRepN'
p3886
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3887
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p3888
Nsg70
Vn
sS'block_loop.thisTrialN'
p3889
I0
sg39
F0.61626744387240251
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\x13\x02\x9f\xe0'
tRp3890
sa(dp3891
S'trial_loop.thisTrialN'
p3892
I16
sg3633
S'41-peanuts_redo.png'
p3893
sS'block_loop.thisIndex'
p3894
g3627
sg38
S'left'
p3895
sg59
g63
sS'trial_loop.thisN'
p3896
I16
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p3897
g60
(g99
S'\x10\x00\x00\x00'
tRp3898
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3899
I0
sg3642
S'45-chewy_nougat_redo.png'
p3900
sS'block_loop.thisRepN'
p3901
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3902
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p3903
Nsg70
Vn
sS'block_loop.thisTrialN'
p3904
I0
sg39
F0.8332709451201481
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\x18\x0c\x7f8'
tRp3905
sa(dp3906
S'trial_loop.thisTrialN'
p3907
I17
sg3633
g3654
sS'block_loop.thisIndex'
p3908
g3627
sg38
S'left'
p3909
sg59
g63
sS'trial_loop.thisN'
p3910
I17
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p3911
g60
(g99
S'\x11\x00\x00\x00'
tRp3912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3913
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3914
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3915
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3916
Nsg70
Vn
sS'block_loop.thisTrialN'
p3917
I0
sg39
F0.90000162503974934
sg34
g753
(S'\x07\xdf\x07\x02\x08\t\x1e\ns\xc8'
tRp3918
sa(dp3919
S'trial_loop.thisTrialN'
p3920
I18
sg3633
S'27-hartleys_raspberries_jelly.png'
p3921
sS'block_loop.thisIndex'
p3922
g3627
sg38
S'right'
p3923
sg59
g63
sS'trial_loop.thisN'
p3924
I18
sg33
S'51-mars.png'
p3925
sg64
g65
sS'trial_loop.thisIndex'
p3926
g60
(g99
S'\x12\x00\x00\x00'
tRp3927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3928
I0
sg3642
S'51-mars.png'
p3929
sS'block_loop.thisRepN'
p3930
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3931
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p3932
sg55
g11
sS'block_loop.thisTrial'
p3933
Nsg70
Vn
sS'block_loop.thisTrialN'
p3934
I0
sg39
F0.76665259249421069
sg34
g753
(S'\x07\xdf\x07\x02\x08\t$\tZ\x88'
tRp3935
sa(dp3936
S'trial_loop.thisTrialN'
p3937
I19
sg3633
S'50-polo.png'
p3938
sS'block_loop.thisIndex'
p3939
g3627
sg38
S'right'
p3940
sg59
g63
sS'trial_loop.thisN'
p3941
I19
sg33
S'48-twix.png'
p3942
sg64
g65
sS'trial_loop.thisIndex'
p3943
g60
(g99
S'\x13\x00\x00\x00'
tRp3944
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3945
I0
sg3642
S'48-twix.png'
p3946
sS'block_loop.thisRepN'
p3947
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3948
I1
sg3647
S'50-polo.png'
p3949
sg55
g11
sS'block_loop.thisTrial'
p3950
Nsg70
Vn
sS'block_loop.thisTrialN'
p3951
I0
sg39
F0.68324159462554235
sg34
g753
(S'\x07\xdf\x07\x02\x08\t*\x06Y\x00'
tRp3952
sa(dp3953
S'trial_loop.thisTrialN'
p3954
I20
sg3633
g3769
sS'block_loop.thisIndex'
p3955
g3627
sg38
S'left'
p3956
sg59
g63
sS'trial_loop.thisN'
p3957
I20
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p3958
g60
(g99
S'\x14\x00\x00\x00'
tRp3959
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3960
I0
sg3642
g3777
sS'block_loop.thisRepN'
p3961
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3962
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p3963
Nsg70
Vn
sS'block_loop.thisTrialN'
p3964
I0
sg39
F0.69990537708463307
sg34
g753
(S'\x07\xdf\x07\x02\x08\t0\x02&\xc8'
tRp3965
sa(dp3966
S'trial_loop.thisTrialN'
p3967
I21
sg3633
S'30-spaghetti_hoops.png'
p3968
sS'block_loop.thisIndex'
p3969
g3627
sg38
S'right'
p3970
sg59
g63
sS'trial_loop.thisN'
p3971
I21
sg33
S'30-spaghetti_hoops.png'
p3972
sg64
g65
sS'trial_loop.thisIndex'
p3973
g60
(g99
S'\x15\x00\x00\x00'
tRp3974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3975
I0
sg3642
S'19-caramello_redo.png'
p3976
sS'block_loop.thisRepN'
p3977
I1
sg3645
S'19-caramello_redo.png'
p3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3979
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p3980
Nsg70
Vn
sS'block_loop.thisTrialN'
p3981
I0
sg39
F1.0498944151954674
sg34
g753
(S'\x07\xdf\x07\x02\x08\t5\r6\xd0'
tRp3982
sa(dp3983
S'trial_loop.thisTrialN'
p3984
I22
sg3633
g3799
sS'block_loop.thisIndex'
p3985
g3627
sg38
S'right'
p3986
sg59
g63
sS'trial_loop.thisN'
p3987
I22
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p3988
g60
(g99
S'\x16\x00\x00\x00'
tRp3989
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3990
I0
sg3642
g3807
sS'block_loop.thisRepN'
p3991
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3992
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p3993
Nsg70
Vn
sS'block_loop.thisTrialN'
p3994
I0
sg39
F0.69995954506885028
sg34
g753
(S'\x07\xdf\x07\x02\x08\t;\x0e~\xf0'
tRp3995
sa(dp3996
S'trial_loop.thisTrialN'
p3997
I23
sg3633
g3634
sS'block_loop.thisIndex'
p3998
g3627
sg38
S'right'
p3999
sg59
g63
sS'trial_loop.thisN'
p4000
I23
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4001
g60
(g99
S'\x17\x00\x00\x00'
tRp4002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4003
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4004
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4005
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4006
Nsg70
Vn
sS'block_loop.thisTrialN'
p4007
I0
sg39
F0.9999036380072539
sg34
g753
(S'\x07\xdf\x07\x02\x08\n\x05\n\x8b8'
tRp4008
sa(dp4009
S'trial_loop.thisTrialN'
p4010
I24
sg3633
g3654
sS'block_loop.thisIndex'
p4011
g3627
sg38
S'left'
p4012
sg59
g63
sS'trial_loop.thisN'
p4013
I24
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4014
g60
(g99
S'\x18\x00\x00\x00'
tRp4015
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4016
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4017
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4018
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4019
Nsg70
Vn
sS'block_loop.thisTrialN'
p4020
I0
sg39
F0.91654281679757332
sg34
g753
(S'\x07\xdf\x07\x02\x08\n\x0b\n\xe1('
tRp4021
sa(dp4022
S'trial_loop.thisTrialN'
p4023
I25
sg3633
S'29-beans.png'
p4024
sS'block_loop.thisIndex'
p4025
g3627
sg38
S'right'
p4026
sg59
g63
sS'trial_loop.thisN'
p4027
I25
sg33
S'46-pistachios.png'
p4028
sg64
g65
sS'trial_loop.thisIndex'
p4029
g60
(g99
S'\x19\x00\x00\x00'
tRp4030
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4031
I0
sg3642
S'46-pistachios.png'
p4032
sS'block_loop.thisRepN'
p4033
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4034
I1
sg3647
S'29-beans.png'
p4035
sg55
g11
sS'block_loop.thisTrial'
p4036
Nsg70
Vn
sS'block_loop.thisTrialN'
p4037
I0
sg39
F0.64992657387210784
sg34
g753
(S'\x07\xdf\x07\x02\x08\n\x11\nA\x00'
tRp4038
sa(dp4039
S'trial_loop.thisTrialN'
p4040
I26
sg3633
g3705
sS'block_loop.thisIndex'
p4041
g3627
sg38
S'right'
p4042
sg59
g63
sS'trial_loop.thisN'
p4043
I26
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4044
g60
(g99
S'\x1a\x00\x00\x00'
tRp4045
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4046
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4047
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4048
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4049
Nsg70
Vn
sS'block_loop.thisTrialN'
p4050
I0
sg39
F0.69991763615507807
sg34
g753
(S'\x07\xdf\x07\x02\x08\n\x17\x05[\x18'
tRp4051
sa(dp4052
S'trial_loop.thisTrialN'
p4053
I27
sg3633
g3688
sS'block_loop.thisIndex'
p4054
g3627
sg38
S'left'
p4055
sg59
g63
sS'trial_loop.thisN'
p4056
I27
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4057
g60
(g99
S'\x1b\x00\x00\x00'
tRp4058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4059
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4060
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4061
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4062
Nsg70
Vn
sS'block_loop.thisTrialN'
p4063
I0
sg39
F1.1666170126809448
sg34
g753
(S'\x07\xdf\x07\x02\x08\n\x1d\x01cx'
tRp4064
sa(dp4065
S'trial_loop.thisTrialN'
p4066
I28
sg3633
S'51-mars.png'
p4067
sS'block_loop.thisIndex'
p4068
g3627
sg38
S'left'
p4069
sg59
g63
sS'trial_loop.thisN'
p4070
I28
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4071
g60
(g99
S'\x1c\x00\x00\x00'
tRp4072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4073
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4074
sS'block_loop.thisRepN'
p4075
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4076
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4077
Nsg70
Vn
sS'block_loop.thisTrialN'
p4078
I0
sg39
F0.78335058631137144
sg34
g753
(S'\x07\xdf\x07\x02\x08\n#\x04YH'
tRp4079
sa(dp4080
S'trial_loop.thisTrialN'
p4081
I29
sg3633
S'42-mrkipling_lemon_slices.png'
p4082
sS'block_loop.thisIndex'
p4083
g3627
sg38
S'left'
p4084
sg59
g63
sS'trial_loop.thisN'
p4085
I29
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4086
g60
(g99
S'\x1d\x00\x00\x00'
tRp4087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4088
I0
sg3642
S'16-skips_prawn.png'
p4089
sS'block_loop.thisRepN'
p4090
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4091
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4092
Nsg70
Vn
sS'block_loop.thisTrialN'
p4093
I0
sg39
F0.78321146012058307
sg34
g753
(S'\x07\xdf\x07\x02\x08\n)\x01\x92X'
tRp4094
sa(dp4095
S'trial_loop.thisTrialN'
p4096
I30
sg3633
g3816
sS'block_loop.thisIndex'
p4097
g3627
sg38
S'left'
p4098
sg59
g63
sS'trial_loop.thisN'
p4099
I30
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4100
g60
(g99
S'\x1e\x00\x00\x00'
tRp4101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4102
I0
sg3642
g3824
sS'block_loop.thisRepN'
p4103
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4104
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4105
Nsg70
Vn
sS'block_loop.thisTrialN'
p4106
I0
sg39
F0.69963938377350132
sg34
g753
(S'\x07\xdf\x07\x02\x08\n.\x0e\x11\x90'
tRp4107
sa(dp4108
S'trial_loop.thisTrialN'
p4109
I31
sg3633
g4024
sS'block_loop.thisIndex'
p4110
g3627
sg38
S'right'
p4111
sg59
g63
sS'trial_loop.thisN'
p4112
I31
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p4113
g60
(g99
S'\x1f\x00\x00\x00'
tRp4114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4115
I0
sg3642
g4032
sS'block_loop.thisRepN'
p4116
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4117
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4118
Nsg70
Vn
sS'block_loop.thisTrialN'
p4119
I0
sg39
F0.78323426769293292
sg34
g753
(S'\x07\xdf\x07\x02\x08\n4\t\xdfX'
tRp4120
sa(dp4121
S'trial_loop.thisTrialN'
p4122
I32
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4123
sS'block_loop.thisIndex'
p4124
g3627
sg38
S'left'
p4125
sg59
g63
sS'trial_loop.thisN'
p4126
I32
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4127
g60
(g99
S' \x00\x00\x00'
tRp4128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4129
I0
sg3642
S'36-fig_rolls.png'
p4130
sS'block_loop.thisRepN'
p4131
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4132
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4133
Nsg70
Vn
sS'block_loop.thisTrialN'
p4134
I0
sg39
F1.049782372997015
sg34
g753
(S'\x07\xdf\x07\x02\x08\n:\x07\x1cP'
tRp4135
sa(dp4136
S'trial_loop.thisTrialN'
p4137
I33
sg3633
S'18-mms.png'
p4138
sS'block_loop.thisIndex'
p4139
g3627
sg38
S'left'
p4140
sg59
g63
sS'trial_loop.thisN'
p4141
I33
sg33
S'18-mms.png'
p4142
sg64
g65
sS'trial_loop.thisIndex'
p4143
g60
(g99
S'!\x00\x00\x00'
tRp4144
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4145
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p4146
sS'block_loop.thisRepN'
p4147
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4148
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p4149
sg55
g11
sS'block_loop.thisTrial'
p4150
Nsg70
Vn
sS'block_loop.thisTrialN'
p4151
I0
sg39
F0.73323180162424251
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b\x04\x08dp'
tRp4152
sa(dp4153
S'trial_loop.thisTrialN'
p4154
I34
sg3633
S'48-twix.png'
p4155
sS'block_loop.thisIndex'
p4156
g3627
sg38
S'left'
p4157
sg59
g63
sS'trial_loop.thisN'
p4158
I34
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4159
g60
(g99
S'"\x00\x00\x00'
tRp4160
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4161
I0
sg3642
S'50-polo.png'
p4162
sS'block_loop.thisRepN'
p4163
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4164
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4165
Nsg70
Vn
sS'block_loop.thisTrialN'
p4166
I0
sg39
F0.69992504861556881
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b\n\x04\xe9\xd0'
tRp4167
sa(dp4168
S'trial_loop.thisTrialN'
p4169
I35
sg3633
S'35-raisins.png'
p4170
sS'block_loop.thisIndex'
p4171
g3627
sg38
S'left'
p4172
sg59
g63
sS'trial_loop.thisN'
p4173
I35
sg33
S'35-raisins.png'
p4174
sg64
g65
sS'trial_loop.thisIndex'
p4175
g60
(g99
S'#\x00\x00\x00'
tRp4176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4177
I0
sg3642
S'49-yorkie.png'
p4178
sS'block_loop.thisRepN'
p4179
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4180
I1
sg3647
S'49-yorkie.png'
p4181
sg55
g11
sS'block_loop.thisTrial'
p4182
Nsg70
Vn
sS'block_loop.thisTrialN'
p4183
I0
sg39
F0.7832910015285961
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b\x10\x00\xb7\x98'
tRp4184
sa(dp4185
S'trial_loop.thisTrialN'
p4186
I36
sg3633
g4024
sS'block_loop.thisIndex'
p4187
g3627
sg38
S'right'
p4188
sg59
g63
sS'trial_loop.thisN'
p4189
I36
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p4190
g60
(g99
S'$\x00\x00\x00'
tRp4191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4192
I0
sg3642
g4032
sS'block_loop.thisRepN'
p4193
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4194
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4195
Nsg70
Vn
sS'block_loop.thisTrialN'
p4196
I0
sg39
F0.58316168259443657
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b\x15\r6\xd0'
tRp4197
sa(dp4198
S'trial_loop.thisTrialN'
p4199
I37
sg3633
S'4-corn.png'
p4200
sS'block_loop.thisIndex'
p4201
g3627
sg38
S'left'
p4202
sg59
g63
sS'trial_loop.thisN'
p4203
I37
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4204
g60
(g99
S'%\x00\x00\x00'
tRp4205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4206
I0
sg3642
S'10-bounty_redo.png'
p4207
sS'block_loop.thisRepN'
p4208
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4209
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4210
Nsg70
Vn
sS'block_loop.thisTrialN'
p4211
I0
sg39
F0.73321498103996419
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b\x1b\x07Z\xd0'
tRp4212
sa(dp4213
S'trial_loop.thisTrialN'
p4214
I38
sg3633
S'20-fruit_pastilles.png'
p4215
sS'block_loop.thisIndex'
p4216
g3627
sg38
S'right'
p4217
sg59
g63
sS'trial_loop.thisN'
p4218
I38
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p4219
g60
(g99
S'&\x00\x00\x00'
tRp4220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4221
I0
sg3642
S'2-steamed_puddings.png'
p4222
sS'block_loop.thisRepN'
p4223
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4224
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4225
Nsg70
Vn
sS'block_loop.thisTrialN'
p4226
I0
sg39
F0.78320775389011033
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b!\x03\xe00'
tRp4227
sa(dp4228
S'trial_loop.thisTrialN'
p4229
I39
sg3633
g4155
sS'block_loop.thisIndex'
p4230
g3627
sg38
S'left'
p4231
sg59
g63
sS'trial_loop.thisN'
p4232
I39
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4233
g60
(g99
S"'\x00\x00\x00"
tRp4234
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4235
I0
sg3642
g4162
sS'block_loop.thisRepN'
p4236
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4237
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4238
Nsg70
Vn
sS'block_loop.thisTrialN'
p4239
I0
sg39
F0.68322363366223726
sg34
g753
(S"\x07\xdf\x07\x02\x08\x0b'\x01\x1d("
tRp4240
sa(dp4241
S'trial_loop.thisTrialN'
p4242
I40
sg3633
S'26-walkers_smoky_bacon.png'
p4243
sS'block_loop.thisIndex'
p4244
g3627
sg38
S'right'
p4245
sg59
g63
sS'trial_loop.thisN'
p4246
I40
sg33
S'44-crunch.png'
p4247
sg64
g65
sS'trial_loop.thisIndex'
p4248
g60
(g99
S'(\x00\x00\x00'
tRp4249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4250
I0
sg3642
S'44-crunch.png'
p4251
sS'block_loop.thisRepN'
p4252
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4253
I1
sg3647
S'26-walkers_smoky_bacon.png'
p4254
sg55
g11
sS'block_loop.thisTrial'
p4255
Nsg70
Vn
sS'block_loop.thisTrialN'
p4256
I0
sg39
F0.76657761260048574
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b,\x0b\xf2\x98'
tRp4257
sa(dp4258
S'trial_loop.thisTrialN'
p4259
I41
sg3633
S'31-hobnobs.png'
p4260
sS'block_loop.thisIndex'
p4261
g3627
sg38
S'right'
p4262
sg59
g63
sS'trial_loop.thisN'
p4263
I41
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p4264
g60
(g99
S')\x00\x00\x00'
tRp4265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4266
I0
sg3642
S'25-kitkat.png'
p4267
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4269
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vn
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.60003073320376643
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b2\x08\xf1\x10'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
g3863
sS'block_loop.thisIndex'
p4275
g3627
sg38
S'left'
p4276
sg59
g63
sS'trial_loop.thisN'
p4277
I42
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p4278
g60
(g99
S'*\x00\x00\x00'
tRp4279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4280
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4281
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4282
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg70
Vn
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.96662254351758747
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0b8\x03O\xa8'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I43
sg3633
S'44-crunch.png'
p4288
sS'block_loop.thisIndex'
p4289
g3627
sg38
S'left'
p4290
sg59
g63
sS'trial_loop.thisN'
p4291
I43
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p4292
g60
(g99
S'+\x00\x00\x00'
tRp4293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4294
I0
sg3642
S'26-walkers_smoky_bacon.png'
p4295
sS'block_loop.thisRepN'
p4296
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4297
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p4298
Nsg70
Vn
sS'block_loop.thisTrialN'
p4299
I0
sg39
F0.68325955558884743
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\x02\x03g\x18'
tRp4300
sa(dp4301
S'trial_loop.thisTrialN'
p4302
I44
sg3633
S'13-mccoys_steak_crisps.png'
p4303
sS'block_loop.thisIndex'
p4304
g3627
sg38
S'right'
p4305
sg59
g63
sS'trial_loop.thisN'
p4306
I44
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4307
g60
(g99
S',\x00\x00\x00'
tRp4308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4309
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4310
sS'block_loop.thisRepN'
p4311
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4312
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4313
Nsg70
Vn
sS'block_loop.thisTrialN'
p4314
I0
sg39
F0.69993018031937027
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\x07\x0e<\x88'
tRp4315
sa(dp4316
S'trial_loop.thisTrialN'
p4317
I45
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4318
sS'block_loop.thisIndex'
p4319
g3627
sg38
S'right'
p4320
sg59
g63
sS'trial_loop.thisN'
p4321
I45
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p4322
g60
(g99
S'-\x00\x00\x00'
tRp4323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4324
I0
sg3642
S'18-mms.png'
p4325
sS'block_loop.thisRepN'
p4326
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4327
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4328
Nsg70
Vn
sS'block_loop.thisTrialN'
p4329
I0
sg39
F0.71659282240034372
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\r\nH\xd0'
tRp4330
sa(dp4331
S'trial_loop.thisTrialN'
p4332
I46
sg3633
g4215
sS'block_loop.thisIndex'
p4333
g3627
sg38
S'right'
p4334
sg59
g63
sS'trial_loop.thisN'
p4335
I46
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4336
g60
(g99
S'.\x00\x00\x00'
tRp4337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4338
I0
sg3642
g4222
sS'block_loop.thisRepN'
p4339
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4340
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4341
Nsg70
Vn
sS'block_loop.thisTrialN'
p4342
I0
sg39
F0.68335107097209402
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\x13\x06U\x18'
tRp4343
sa(dp4344
S'trial_loop.thisTrialN'
p4345
I47
sg3633
g3754
sS'block_loop.thisIndex'
p4346
g3627
sg38
S'right'
p4347
sg59
g63
sS'trial_loop.thisN'
p4348
I47
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4349
g60
(g99
S'/\x00\x00\x00'
tRp4350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4351
I0
sg3642
g3761
sS'block_loop.thisRepN'
p4352
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4353
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vn
sS'block_loop.thisTrialN'
p4355
I0
sg39
F0.61655681494539749
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\x19\x02"\xe0'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
g4170
sS'block_loop.thisIndex'
p4359
g3627
sg38
S'left'
p4360
sg59
g63
sS'trial_loop.thisN'
p4361
I48
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p4362
g60
(g99
S'0\x00\x00\x00'
tRp4363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4364
I0
sg3642
g4178
sS'block_loop.thisRepN'
p4365
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4366
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p4367
Nsg70
Vn
sS'block_loop.thisTrialN'
p4368
I0
sg39
F0.76654026520054686
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c\x1e\x0c\x028'
tRp4369
sa(dp4370
S'trial_loop.thisTrialN'
p4371
I49
sg3633
g4318
sS'block_loop.thisIndex'
p4372
g3627
sg38
S'right'
p4373
sg59
g63
sS'trial_loop.thisN'
p4374
I49
sg33
g4149
sg64
g65
sS'trial_loop.thisIndex'
p4375
g60
(g99
S'1\x00\x00\x00'
tRp4376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4377
I0
sg3642
g4325
sS'block_loop.thisRepN'
p4378
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4379
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4380
Nsg70
Vn
sS'block_loop.thisTrialN'
p4381
I0
sg39
F0.59992296742484541
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c$\t\x00\xb0'
tRp4382
sa(dp4383
S'trial_loop.thisTrialN'
p4384
I50
sg3633
S'22-daim.png'
p4385
sS'block_loop.thisIndex'
p4386
g3627
sg38
S'left'
p4387
sg59
g63
sS'trial_loop.thisN'
p4388
I50
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4389
g60
(g99
S'2\x00\x00\x00'
tRp4390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4391
I0
sg3642
S'7-olives.png'
p4392
sS'block_loop.thisRepN'
p4393
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4394
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4395
Nsg70
Vn
sS'block_loop.thisTrialN'
p4396
I0
sg39
F0.96653017284961606
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c*\x03c0'
tRp4397
sa(dp4398
S'trial_loop.thisTrialN'
p4399
I51
sg3633
S'19-caramello_redo.png'
p4400
sS'block_loop.thisIndex'
p4401
g3627
sg38
S'right'
p4402
sg59
g63
sS'trial_loop.thisN'
p4403
I51
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p4404
g60
(g99
S'3\x00\x00\x00'
tRp4405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4406
I0
sg3642
S'30-spaghetti_hoops.png'
p4407
sS'block_loop.thisRepN'
p4408
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4409
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p4410
Nsg70
Vn
sS'block_loop.thisTrialN'
p4411
I0
sg39
F1.1665668360224117
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c0\x03< '
tRp4412
sa(dp4413
S'trial_loop.thisTrialN'
p4414
I52
sg3633
g4200
sS'block_loop.thisIndex'
p4415
g3627
sg38
S'left'
p4416
sg59
g63
sS'trial_loop.thisN'
p4417
I52
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p4418
g60
(g99
S'4\x00\x00\x00'
tRp4419
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4420
I0
sg3642
g4207
sS'block_loop.thisRepN'
p4421
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4422
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4423
Nsg70
Vn
sS'block_loop.thisTrialN'
p4424
I0
sg39
F0.76669792254369895
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0c6\x06l\x88'
tRp4425
sa(dp4426
S'trial_loop.thisTrialN'
p4427
I53
sg3633
g3816
sS'block_loop.thisIndex'
p4428
g3627
sg38
S'left'
p4429
sg59
g63
sS'trial_loop.thisN'
p4430
I53
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p4431
g60
(g99
S'5\x00\x00\x00'
tRp4432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4433
I0
sg3642
g3824
sS'block_loop.thisRepN'
p4434
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4435
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4436
Nsg70
Vn
sS'block_loop.thisTrialN'
p4437
I0
sg39
F0.61642481612125266
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x00\x030h'
tRp4438
sa(dp4439
S'trial_loop.thisTrialN'
p4440
I54
sg3633
g3705
sS'block_loop.thisIndex'
p4441
g3627
sg38
S'right'
p4442
sg59
g63
sS'trial_loop.thisN'
p4443
I54
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4444
g60
(g99
S'6\x00\x00\x00'
tRp4445
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4446
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4447
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4448
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg70
Vn
sS'block_loop.thisTrialN'
p4450
I0
sg39
F0.64990262592118597
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x05\rN@'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I55
sg3633
g3799
sS'block_loop.thisIndex'
p4454
g3627
sg38
S'right'
p4455
sg59
g63
sS'trial_loop.thisN'
p4456
I55
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4457
g60
(g99
S'7\x00\x00\x00'
tRp4458
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4459
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4460
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vn
sS'block_loop.thisTrialN'
p4463
I0
sg39
F0.83329090174584053
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x0b\x08dp'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
g3921
sS'block_loop.thisIndex'
p4467
g3627
sg38
S'right'
p4468
sg59
g63
sS'trial_loop.thisN'
p4469
I56
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4470
g60
(g99
S'8\x00\x00\x00'
tRp4471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4472
I0
sg3642
g3929
sS'block_loop.thisRepN'
p4473
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vn
sS'block_loop.thisTrialN'
p4476
I0
sg39
F0.74989187785286049
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x11\x06Y\x00'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3754
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3761
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vn
sS'block_loop.thisTrialN'
p4489
I0
sg39
F0.71652496987235281
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x17\x03\x18\xf8'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
g3769
sS'block_loop.thisIndex'
p4493
g3627
sg38
S'left'
p4494
sg59
g63
sS'trial_loop.thisN'
p4495
I58
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4496
g60
(g99
S':\x00\x00\x00'
tRp4497
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4498
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4499
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4500
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vn
sS'block_loop.thisTrialN'
p4502
I0
sg39
F0.7666243681233027
sg34
g753
(S'\x07\xdf\x07\x02\x08\r\x1c\x0eg\x80'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
g3799
sS'block_loop.thisIndex'
p4506
g3627
sg38
S'right'
p4507
sg59
g63
sS'trial_loop.thisN'
p4508
I59
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4509
g60
(g99
S';\x00\x00\x00'
tRp4510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4511
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4512
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4513
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4514
Nsg70
Vn
sS'block_loop.thisTrialN'
p4515
I0
sg39
F0.81662654909769117
sg34
g753
(S'\x07\xdf\x07\x02\x08\r"\x0be\xf8'
tRp4516
sa(dp4517
S'trial_loop.thisTrialN'
p4518
I60
sg3633
S'46-pistachios.png'
p4519
sS'block_loop.thisIndex'
p4520
g3627
sg38
S'left'
p4521
sg59
g63
sS'trial_loop.thisN'
p4522
I60
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p4523
g60
(g99
S'<\x00\x00\x00'
tRp4524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4525
I0
sg3642
S'29-beans.png'
p4526
sS'block_loop.thisRepN'
p4527
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4528
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4529
Nsg70
Vn
sS'block_loop.thisTrialN'
p4530
I0
sg39
F0.79989862034153703
sg34
g753
(S'\x07\xdf\x07\x02\x08\r(\t\x1c\x08'
tRp4531
sa(dp4532
S'trial_loop.thisTrialN'
p4533
I61
sg3633
S'23-crunchie_redo.png'
p4534
sS'block_loop.thisIndex'
p4535
g3627
sg38
S'right'
p4536
sg59
g63
sS'trial_loop.thisN'
p4537
I61
sg33
S'33-ambrosia_rice.png'
p4538
sg64
g65
sS'trial_loop.thisIndex'
p4539
g60
(g99
S'=\x00\x00\x00'
tRp4540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4541
I0
sg3642
S'33-ambrosia_rice.png'
p4542
sS'block_loop.thisRepN'
p4543
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4544
I1
sg3647
S'23-crunchie_redo.png'
p4545
sg55
g11
sS'block_loop.thisTrial'
p4546
Nsg70
Vn
sS'block_loop.thisTrialN'
p4547
I0
sg39
F0.63308774329652806
sg34
g753
(S'\x07\xdf\x07\x02\x08\r.\x06\x97\x80'
tRp4548
sa(dp4549
S'trial_loop.thisTrialN'
p4550
I62
sg3633
g3968
sS'block_loop.thisIndex'
p4551
g3627
sg38
S'left'
p4552
sg59
g63
sS'trial_loop.thisN'
p4553
I62
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p4554
g60
(g99
S'>\x00\x00\x00'
tRp4555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4556
I0
sg3642
g3976
sS'block_loop.thisRepN'
p4557
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4558
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p4559
Nsg70
Vn
sS'block_loop.thisTrialN'
p4560
I0
sg39
F1.2831936417051111
sg34
g753
(S'\x07\xdf\x07\x02\x08\r4\x01o0'
tRp4561
sa(dp4562
S'trial_loop.thisTrialN'
p4563
I63
sg3633
g3863
sS'block_loop.thisIndex'
p4564
g3627
sg38
S'left'
p4565
sg59
g63
sS'trial_loop.thisN'
p4566
I63
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p4567
g60
(g99
S'?\x00\x00\x00'
tRp4568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4569
I0
sg3642
g3871
sS'block_loop.thisRepN'
p4570
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4571
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4572
Nsg70
Vn
sS'block_loop.thisTrialN'
p4573
I0
sg39
F0.76662123208188859
sg34
g753
(S'\x07\xdf\x07\x02\x08\r:\x06I`'
tRp4574
sa(dp4575
S'trial_loop.thisTrialN'
p4576
I64
sg3633
g3938
sS'block_loop.thisIndex'
p4577
g3627
sg38
S'right'
p4578
sg59
g63
sS'trial_loop.thisN'
p4579
I64
sg33
g3949
sg64
g65
sS'trial_loop.thisIndex'
p4580
g60
(g99
S'@\x00\x00\x00'
tRp4581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4582
I0
sg3642
g3946
sS'block_loop.thisRepN'
p4583
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4584
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4585
Nsg70
Vn
sS'block_loop.thisTrialN'
p4586
I0
sg39
F0.70001855966165749
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e\x04\x03K\xc0'
tRp4587
sa(dp4588
S'trial_loop.thisTrialN'
p4589
I65
sg3633
g3921
sS'block_loop.thisIndex'
p4590
g3627
sg38
S'right'
p4591
sg59
g63
sS'trial_loop.thisN'
p4592
I65
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4593
g60
(g99
S'A\x00\x00\x00'
tRp4594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4595
I0
sg3642
g3929
sS'block_loop.thisRepN'
p4596
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4597
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4598
Nsg70
Vn
sS'block_loop.thisTrialN'
p4599
I0
sg39
F0.54987716696859934
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e\t\x0e\x9aH'
tRp4600
sa(dp4601
S'trial_loop.thisTrialN'
p4602
I66
sg3633
g4138
sS'block_loop.thisIndex'
p4603
g3627
sg38
S'left'
p4604
sg59
g63
sS'trial_loop.thisN'
p4605
I66
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p4606
g60
(g99
S'B\x00\x00\x00'
tRp4607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4608
I0
sg3642
g4146
sS'block_loop.thisRepN'
p4609
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4610
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4611
Nsg70
Vn
sS'block_loop.thisTrialN'
p4612
I0
sg39
F0.84996922403206554
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e\x0f\x08\x06\xb0'
tRp4613
sa(dp4614
S'trial_loop.thisTrialN'
p4615
I67
sg3633
g3671
sS'block_loop.thisIndex'
p4616
g3627
sg38
S'left'
p4617
sg59
g63
sS'trial_loop.thisN'
p4618
I67
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4619
g60
(g99
S'C\x00\x00\x00'
tRp4620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4621
I0
sg3642
g3679
sS'block_loop.thisRepN'
p4622
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4623
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4624
Nsg70
Vn
sS'block_loop.thisTrialN'
p4625
I0
sg39
F0.69985691099373071
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e\x15\x06tX'
tRp4626
sa(dp4627
S'trial_loop.thisTrialN'
p4628
I68
sg3633
g4318
sS'block_loop.thisIndex'
p4629
g3627
sg38
S'right'
p4630
sg59
g63
sS'trial_loop.thisN'
p4631
I68
sg33
g4149
sg64
g65
sS'trial_loop.thisIndex'
p4632
g60
(g99
S'D\x00\x00\x00'
tRp4633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4634
I0
sg3642
g4325
sS'block_loop.thisRepN'
p4635
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4636
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4637
Nsg70
Vn
sS'block_loop.thisTrialN'
p4638
I0
sg39
F0.6165987238591697
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e\x1b\x02B '
tRp4639
sa(dp4640
S'trial_loop.thisTrialN'
p4641
I69
sg3633
g3705
sS'block_loop.thisIndex'
p4642
g3627
sg38
S'right'
p4643
sg59
g63
sS'trial_loop.thisN'
p4644
I69
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4645
g60
(g99
S'E\x00\x00\x00'
tRp4646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4647
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4648
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4649
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4650
Nsg70
Vn
sS'block_loop.thisTrialN'
p4651
I0
sg39
F0.64990718743547404
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e \x0c!x'
tRp4652
sa(dp4653
S'trial_loop.thisTrialN'
p4654
I70
sg3633
g4519
sS'block_loop.thisIndex'
p4655
g3627
sg38
S'left'
p4656
sg59
g63
sS'trial_loop.thisN'
p4657
I70
sg33
g4035
sg64
g65
sS'trial_loop.thisIndex'
p4658
g60
(g99
S'F\x00\x00\x00'
tRp4659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4660
I0
sg3642
g4526
sS'block_loop.thisRepN'
p4661
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4662
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4663
Nsg70
Vn
sS'block_loop.thisTrialN'
p4664
I0
sg39
F0.63334518376768756
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e&\x07v('
tRp4665
sa(dp4666
S'trial_loop.thisTrialN'
p4667
I71
sg3633
S'49-yorkie.png'
p4668
sS'block_loop.thisIndex'
p4669
g3627
sg38
S'right'
p4670
sg59
g63
sS'trial_loop.thisN'
p4671
I71
sg33
g4181
sg64
g65
sS'trial_loop.thisIndex'
p4672
g60
(g99
S'G\x00\x00\x00'
tRp4673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4674
I0
sg3642
S'35-raisins.png'
p4675
sS'block_loop.thisRepN'
p4676
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4677
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p4678
Nsg70
Vn
sS'block_loop.thisTrialN'
p4679
I0
sg39
F0.78325080318290929
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e,\x02Q\xc0'
tRp4680
sa(dp4681
S'trial_loop.thisTrialN'
p4682
I72
sg3633
g4303
sS'block_loop.thisIndex'
p4683
g3627
sg38
S'right'
p4684
sg59
g63
sS'trial_loop.thisN'
p4685
I72
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p4686
g60
(g99
S'H\x00\x00\x00'
tRp4687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4688
I0
sg3642
g4310
sS'block_loop.thisRepN'
p4689
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4690
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4691
Nsg70
Vn
sS'block_loop.thisTrialN'
p4692
I0
sg39
F0.86657285151932228
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e1\x0e\xd0\xf8'
tRp4693
sa(dp4694
S'trial_loop.thisTrialN'
p4695
I73
sg3633
g4123
sS'block_loop.thisIndex'
p4696
g3627
sg38
S'left'
p4697
sg59
g63
sS'trial_loop.thisN'
p4698
I73
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4699
g60
(g99
S'I\x00\x00\x00'
tRp4700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4701
I0
sg3642
g4130
sS'block_loop.thisRepN'
p4702
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4703
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4704
Nsg70
Vn
sS'block_loop.thisTrialN'
p4705
I0
sg39
F0.99980185921640441
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0e7\r:\xb8'
tRp4706
sa(dp4707
S'trial_loop.thisTrialN'
p4708
I74
sg3633
g3737
sS'block_loop.thisIndex'
p4709
g3627
sg38
S'right'
p4710
sg59
g63
sS'trial_loop.thisN'
p4711
I74
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p4712
g60
(g99
S'J\x00\x00\x00'
tRp4713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4714
I0
sg3642
g3745
sS'block_loop.thisRepN'
p4715
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4716
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p4717
Nsg70
Vn
sS'block_loop.thisTrialN'
p4718
I0
sg39
F0.74979580095487108
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\x01\r\xcf('
tRp4719
sa(dp4720
S'trial_loop.thisTrialN'
p4721
I75
sg3633
g3893
sS'block_loop.thisIndex'
p4722
g3627
sg38
S'left'
p4723
sg59
g63
sS'trial_loop.thisN'
p4724
I75
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p4725
g60
(g99
S'K\x00\x00\x00'
tRp4726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4727
I0
sg3642
g3900
sS'block_loop.thisRepN'
p4728
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4729
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4730
Nsg70
Vn
sS'block_loop.thisTrialN'
p4731
I0
sg39
F0.81656895997730317
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\x07\nT\x88'
tRp4732
sa(dp4733
S'trial_loop.thisTrialN'
p4734
I76
sg3633
g4024
sS'block_loop.thisIndex'
p4735
g3627
sg38
S'right'
p4736
sg59
g63
sS'trial_loop.thisN'
p4737
I76
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p4738
g60
(g99
S'L\x00\x00\x00'
tRp4739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4740
I0
sg3642
g4032
sS'block_loop.thisRepN'
p4741
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vn
sS'block_loop.thisTrialN'
p4744
I0
sg39
F0.58333986675233973
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\r\x08\n\x98'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
g3769
sS'block_loop.thisIndex'
p4748
g3627
sg38
S'left'
p4749
sg59
g63
sS'trial_loop.thisN'
p4750
I77
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4751
g60
(g99
S'M\x00\x00\x00'
tRp4752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4753
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4754
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4755
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vn
sS'block_loop.thisTrialN'
p4757
I0
sg39
F0.73353799328151581
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\x13\x02.\x98'
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
g4400
sS'block_loop.thisIndex'
p4761
g3627
sg38
S'left'
p4762
sg59
g63
sS'trial_loop.thisN'
p4763
I78
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p4764
g60
(g99
S'N\x00\x00\x00'
tRp4765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4766
I0
sg3642
g4407
sS'block_loop.thisRepN'
p4767
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4768
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p4769
Nsg70
Vn
sS'block_loop.thisTrialN'
p4770
I0
sg39
F1.2165681617125301
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\x18\r\xf68'
tRp4771
sa(dp4772
S'trial_loop.thisTrialN'
p4773
I79
sg3633
g4385
sS'block_loop.thisIndex'
p4774
g3627
sg38
S'left'
p4775
sg59
g63
sS'trial_loop.thisN'
p4776
I79
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4777
g60
(g99
S'O\x00\x00\x00'
tRp4778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4779
I0
sg3642
g4392
sS'block_loop.thisRepN'
p4780
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4781
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4782
Nsg70
Vn
sS'block_loop.thisTrialN'
p4783
I0
sg39
F0.71650529834141707
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f\x1f\x02\x98\x10'
tRp4784
sa(dp4785
S'trial_loop.thisTrialN'
p4786
I80
sg3633
g4303
sS'block_loop.thisIndex'
p4787
g3627
sg38
S'right'
p4788
sg59
g63
sS'trial_loop.thisN'
p4789
I80
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p4790
g60
(g99
S'P\x00\x00\x00'
tRp4791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4792
I0
sg3642
g4310
sS'block_loop.thisRepN'
p4793
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4794
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p4795
Nsg70
Vn
sS'block_loop.thisTrialN'
p4796
I0
sg39
F0.64993256085972462
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f$\r\xe6\x98'
tRp4797
sa(dp4798
S'trial_loop.thisTrialN'
p4799
I81
sg3633
S'40-sardines.png'
p4800
sS'block_loop.thisIndex'
p4801
g3627
sg38
S'right'
p4802
sg59
g63
sS'trial_loop.thisN'
p4803
I81
sg33
S'5-pineapple.png'
p4804
sg64
g65
sS'trial_loop.thisIndex'
p4805
g60
(g99
S'Q\x00\x00\x00'
tRp4806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4807
I0
sg3642
S'5-pineapple.png'
p4808
sS'block_loop.thisRepN'
p4809
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4810
I1
sg3647
S'40-sardines.png'
p4811
sg55
g11
sS'block_loop.thisTrial'
p4812
Nsg70
Vn
sS'block_loop.thisTrialN'
p4813
I0
sg39
F0.93323767457422946
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f*\t;H'
tRp4814
sa(dp4815
S'trial_loop.thisTrialN'
p4816
I82
sg3633
g4067
sS'block_loop.thisIndex'
p4817
g3627
sg38
S'left'
p4818
sg59
g63
sS'trial_loop.thisN'
p4819
I82
sg33
g3932
sg64
g65
sS'trial_loop.thisIndex'
p4820
g60
(g99
S'R\x00\x00\x00'
tRp4821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4822
I0
sg3642
g4074
sS'block_loop.thisRepN'
p4823
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4824
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4825
Nsg70
Vn
sS'block_loop.thisTrialN'
p4826
I0
sg39
F0.73371446687178832
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f0\x08\x9b '
tRp4827
sa(dp4828
S'trial_loop.thisTrialN'
p4829
I83
sg3633
g3688
sS'block_loop.thisIndex'
p4830
g3627
sg38
S'left'
p4831
sg59
g63
sS'trial_loop.thisN'
p4832
I83
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4833
g60
(g99
S'S\x00\x00\x00'
tRp4834
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4835
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4836
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4837
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4838
Nsg70
Vn
sS'block_loop.thisTrialN'
p4839
I0
sg39
F0.71659937957701914
sg34
g753
(S'\x07\xdf\x07\x02\x08\x0f6\x05 \x80'
tRp4840
sa(dp4841
S'trial_loop.thisTrialN'
p4842
I84
sg3633
g4155
sS'block_loop.thisIndex'
p4843
g3627
sg38
S'left'
p4844
sg59
g63
sS'trial_loop.thisN'
p4845
I84
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p4846
g60
(g99
S'T\x00\x00\x00'
tRp4847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4848
I0
sg3642
g4162
sS'block_loop.thisRepN'
p4849
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4850
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p4851
Nsg70
Vn
sS'block_loop.thisTrialN'
p4852
I0
sg39
F0.79990802846532461
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x00\x01,\xc8'
tRp4853
sa(dp4854
S'trial_loop.thisTrialN'
p4855
I85
sg3633
g3688
sS'block_loop.thisIndex'
p4856
g3627
sg38
S'left'
p4857
sg59
g63
sS'trial_loop.thisN'
p4858
I85
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4859
g60
(g99
S'U\x00\x00\x00'
tRp4860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4861
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4862
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4863
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vn
sS'block_loop.thisTrialN'
p4865
I0
sg39
F1.0998090721104745
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x05\r\xea\x80'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g3846
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'right'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g3857
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g3854
sS'block_loop.thisRepN'
p4875
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vn
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.89982515144947683
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x0c\x00\xa4\x10'
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g3688
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'left'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4888
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vn
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.6999484263769773
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x11\x0f\x0b\x90'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g3634
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4901
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vn
sS'block_loop.thisTrialN'
p4904
I0
sg39
F0.83334763558195846
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x17\n\xd9X'
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g4138
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'left'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g4146
sS'block_loop.thisRepN'
p4914
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vn
sS'block_loop.thisTrialN'
p4917
I0
sg39
F0.73325688995373639
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10\x1d\x08\xcd\xe8'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
g4800
sS'block_loop.thisIndex'
p4921
g3627
sg38
S'right'
p4922
sg59
g63
sS'trial_loop.thisN'
p4923
I90
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p4924
g60
(g99
S'Z\x00\x00\x00'
tRp4925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4926
I0
sg3642
g4808
sS'block_loop.thisRepN'
p4927
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4928
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p4929
Nsg70
Vn
sS'block_loop.thisTrialN'
p4930
I0
sg39
F0.99986828627061186
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10#\x05SH'
tRp4931
sa(dp4932
S'trial_loop.thisTrialN'
p4933
I91
sg3633
g4024
sS'block_loop.thisIndex'
p4934
g3627
sg38
S'right'
p4935
sg59
g63
sS'trial_loop.thisN'
p4936
I91
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p4937
g60
(g99
S'[\x00\x00\x00'
tRp4938
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4939
I0
sg3642
g4032
sS'block_loop.thisRepN'
p4940
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4941
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p4942
Nsg70
Vn
sS'block_loop.thisTrialN'
p4943
I0
sg39
F0.58326631233194348
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10)\x05\xe3\xd0'
tRp4944
sa(dp4945
S'trial_loop.thisTrialN'
p4946
I92
sg3633
g4318
sS'block_loop.thisIndex'
p4947
g3627
sg38
S'right'
p4948
sg59
g63
sS'trial_loop.thisN'
p4949
I92
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p4950
g60
(g99
S'\\\x00\x00\x00'
tRp4951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4952
I0
sg3642
g4325
sS'block_loop.thisRepN'
p4953
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4954
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p4955
Nsg70
Vn
sS'block_loop.thisTrialN'
p4956
I0
sg39
F0.66667959095684637
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10/\x00\x07\xd0'
tRp4957
sa(dp4958
S'trial_loop.thisTrialN'
p4959
I93
sg3633
S'33-ambrosia_rice.png'
p4960
sS'block_loop.thisIndex'
p4961
g3627
sg38
S'left'
p4962
sg59
g63
sS'trial_loop.thisN'
p4963
I93
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p4964
g60
(g99
S']\x00\x00\x00'
tRp4965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4966
I0
sg3642
S'23-crunchie_redo.png'
p4967
sS'block_loop.thisRepN'
p4968
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4969
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p4970
Nsg70
Vn
sS'block_loop.thisTrialN'
p4971
I0
sg39
F0.99989451497913251
sg34
g753
(S'\x07\xdf\x07\x02\x08\x104\n\x9e\xc0'
tRp4972
sa(dp4973
S'trial_loop.thisTrialN'
p4974
I94
sg3633
g4067
sS'block_loop.thisIndex'
p4975
g3627
sg38
S'left'
p4976
sg59
g63
sS'trial_loop.thisN'
p4977
I94
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4978
g60
(g99
S'^\x00\x00\x00'
tRp4979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4980
I0
sg3642
g4074
sS'block_loop.thisRepN'
p4981
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4982
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p4983
Nsg70
Vn
sS'block_loop.thisTrialN'
p4984
I0
sg39
F0.74993720790280349
sg34
g753
(S'\x07\xdf\x07\x02\x08\x10:\x0b/H'
tRp4985
sa(dp4986
S'trial_loop.thisTrialN'
p4987
I95
sg3633
g4200
sS'block_loop.thisIndex'
p4988
g3627
sg38
S'left'
p4989
sg59
g63
sS'trial_loop.thisN'
p4990
I95
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4991
g60
(g99
S'_\x00\x00\x00'
tRp4992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4993
I0
sg3642
g4207
sS'block_loop.thisRepN'
p4994
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4995
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4996
Nsg70
Vn
sS'block_loop.thisTrialN'
p4997
I0
sg39
F0.69977252297667292
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11\x04\x07\xf3('
tRp4998
sa(dp4999
S'trial_loop.thisTrialN'
p5000
I96
sg3633
S'6-sour_patch_kids.png'
p5001
sS'block_loop.thisIndex'
p5002
g3627
sg38
S'right'
p5003
sg59
g63
sS'trial_loop.thisN'
p5004
I96
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5005
g60
(g99
S'`\x00\x00\x00'
tRp5006
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5007
I0
sg3642
S'38-maltesers.png'
p5008
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.71631399982925359
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11\n\x03\xc0\xf0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g4082
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.84989281866455713
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11\x10\x00\x07\xd0'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4288
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g4254
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4295
sS'block_loop.thisRepN'
p5035
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.63323912855685194
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11\x15\r} '
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
S'5-pineapple.png'
p5042
sS'block_loop.thisIndex'
p5043
g3627
sg38
S'left'
p5044
sg59
g63
sS'trial_loop.thisN'
p5045
I99
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p5046
g60
(g99
S'c\x00\x00\x00'
tRp5047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5048
I0
sg3642
S'40-sardines.png'
p5049
sS'block_loop.thisRepN'
p5050
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5051
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p5052
Nsg70
Vn
sS'block_loop.thisTrialN'
p5053
I0
sg39
F0.7498493987495749
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11\x1b\x08T\xd0'
tRp5054
sa(dp5055
S'trial_loop.thisTrialN'
p5056
I100
sg3633
g4668
sS'block_loop.thisIndex'
p5057
g3627
sg38
S'right'
p5058
sg59
g63
sS'trial_loop.thisN'
p5059
I100
sg33
g4181
sg64
g65
sS'trial_loop.thisIndex'
p5060
g60
(g99
S'd\x00\x00\x00'
tRp5061
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5062
I0
sg3642
g4675
sS'block_loop.thisRepN'
p5063
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5064
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p5065
Nsg70
Vn
sS'block_loop.thisTrialN'
p5066
I0
sg39
F0.78335970933949284
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11!\x05\x18\xb0'
tRp5067
sa(dp5068
S'trial_loop.thisTrialN'
p5069
I101
sg3633
g4138
sS'block_loop.thisIndex'
p5070
g3627
sg38
S'left'
p5071
sg59
g63
sS'trial_loop.thisN'
p5072
I101
sg33
g4149
sg64
g65
sS'trial_loop.thisIndex'
p5073
g60
(g99
S'e\x00\x00\x00'
tRp5074
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5075
I0
sg3642
g4146
sS'block_loop.thisRepN'
p5076
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5077
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p5078
Nsg70
Vn
sS'block_loop.thisTrialN'
p5079
I0
sg39
F0.63323257137926703
sg34
g753
(S"\x07\xdf\x07\x02\x08\x11'\x02U\xa8"
tRp5080
sa(dp5081
S'trial_loop.thisTrialN'
p5082
I102
sg3633
g4385
sS'block_loop.thisIndex'
p5083
g3627
sg38
S'left'
p5084
sg59
g63
sS'trial_loop.thisN'
p5085
I102
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5086
g60
(g99
S'f\x00\x00\x00'
tRp5087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5088
I0
sg3642
g4392
sS'block_loop.thisRepN'
p5089
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5090
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5091
Nsg70
Vn
sS'block_loop.thisTrialN'
p5092
I0
sg39
F0.86657570246552496
sg34
g753
(S'\x07\xdf\x07\x02\x08\x11,\x0cs\x80'
tRp5093
sa(dp5094
S'trial_loop.thisTrialN'
p5095
I103
sg3633
g4123
sS'block_loop.thisIndex'
p5096
g3627
sg38
S'left'
p5097
sg59
g63
sS'trial_loop.thisN'
p5098
I103
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5099
g60
(g99
S'g\x00\x00\x00'
tRp5100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5101
I0
sg3642
g4130
sS'block_loop.thisRepN'
p5102
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5103
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5104
Nsg70
Vn
sS'block_loop.thisTrialN'
p5105
I0
sg39
F0.81668271274429571
sg34
g753
(S'\x07\xdf\x07\x02\x08\x112\n\xe1('
tRp5106
sa(dp5107
S'trial_loop.thisTrialN'
p5108
I104
sg3633
g4668
sS'block_loop.thisIndex'
p5109
g3627
sg38
S'right'
p5110
sg59
g63
sS'trial_loop.thisN'
p5111
I104
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p5112
g60
(g99
S'h\x00\x00\x00'
tRp5113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5114
I0
sg3642
g4675
sS'block_loop.thisRepN'
p5115
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5116
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p5117
Nsg70
Vn
sS'block_loop.thisTrialN'
p5118
I0
sg39
F0.59995774897288356
sg34
g753
(S'\x07\xdf\x07\x02\x08\x118\x08\x978'
tRp5119
sa(dp5120
S'trial_loop.thisTrialN'
p5121
I105
sg3633
g4519
sS'block_loop.thisIndex'
p5122
g3627
sg38
S'left'
p5123
sg59
g63
sS'trial_loop.thisN'
p5124
I105
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5125
g60
(g99
S'i\x00\x00\x00'
tRp5126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5127
I0
sg3642
g4526
sS'block_loop.thisRepN'
p5128
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5129
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5130
Nsg70
Vn
sS'block_loop.thisTrialN'
p5131
I0
sg39
F0.61656223174395564
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\x02\x02\xf5\xd0'
tRp5132
sa(dp5133
S'trial_loop.thisTrialN'
p5134
I106
sg3633
g3671
sS'block_loop.thisIndex'
p5135
g3627
sg38
S'left'
p5136
sg59
g63
sS'trial_loop.thisN'
p5137
I106
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5138
g60
(g99
S'j\x00\x00\x00'
tRp5139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5140
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5141
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5142
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vn
sS'block_loop.thisTrialN'
p5144
I0
sg39
F0.71703044269179372
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\x07\x0c\xd5('
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g4385
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'left'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g4392
sS'block_loop.thisRepN'
p5154
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5155
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vn
sS'block_loop.thisTrialN'
p5157
I0
sg39
F0.79987923390490323
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\r\t\x1f\xf0'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g4170
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'left'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g4178
sS'block_loop.thisRepN'
p5167
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5168
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F0.6499311353873054
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\x13\x06\x97\x80'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4215
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'right'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4222
sS'block_loop.thisRepN'
p5180
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5181
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.78321858748677187
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\x19\x01\xb1\x98'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g3671
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'left'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5194
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.6166477601391307
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12\x1e\x0e,\xe8'
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g4243
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'right'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g4251
sS'block_loop.thisRepN'
p5206
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5207
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F1.1665676913062271
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12$\x08\xcd\xe8'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g4960
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'left'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5219
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5220
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F0.73335581779883796
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12*\x0b\xfah'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4385
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'left'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4392
sS'block_loop.thisRepN'
p5232
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5233
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F0.63322572910783492
sg34
g753
(S'\x07\xdf\x07\x02\x08\x120\x08E0'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g3769
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g3777
sS'block_loop.thisRepN'
p5245
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5246
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F0.64992999500736914
sg34
g753
(S'\x07\xdf\x07\x02\x08\x126\x03[`'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3671
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'left'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5259
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F0.58322867983770266
sg34
g753
(S'\x07\xdf\x07\x02\x08\x12;\r\xb7\xb8'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4534
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'right'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4542
sS'block_loop.thisRepN'
p5271
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5272
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.76655680069052323
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13\x05\x07\xdb\xb8'
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4260
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'right'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4267
sS'block_loop.thisRepN'
p5284
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5285
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F0.66661629994450777
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13\x0b\x04\xda0'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4138
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'left'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4146
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5298
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F0.70001684909402684
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13\x11\x00.\xe0'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4215
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4222
sS'block_loop.thisRepN'
p5310
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5311
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F0.71654891782327468
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13\x16\x0b}h'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g4960
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5323
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5324
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.79997787665433862
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13\x1c\x07\x85\xc8'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g4067
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g4074
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5337
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F1.0331844474021636
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13"\x05\x01@'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3938
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3946
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5350
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.83353294710559567
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13(\x06\n\xe0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3722
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5363
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.89990497795224655
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13.\x03\xffp'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4400
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4407
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5376
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.9665164883072066
sg34
g753
(S'\x07\xdf\x07\x02\x08\x134\x02\xe60'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4288
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'left'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4295
sS'block_loop.thisRepN'
p5388
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5389
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.69993160579269897
sg34
g753
(S'\x07\xdf\x07\x02\x08\x13:\x02\xfd\xa0'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g4800
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'right'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g4808
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5402
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.89985708205040282
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14\x03\x0e\r\xa8'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4260
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4267
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5415
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.68323332688032679
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14\t\r2\xe8'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4400
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4407
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5428
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.84990678830308752
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14\x0f\x08\xc20'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g3634
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5440
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5441
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.91654424227181153
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14\x15\x06\xf5@'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3893
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3900
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5454
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.84996295195014682
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14\x1b\x06U\x18'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g3921
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3932
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g3929
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5467
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.79990318185627984
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14!\x04\x84@'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4960
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g4545
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5479
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5480
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.88322266434079211
sg34
g753
(S"\x07\xdf\x07\x02\x08\x14'\x01\xfb\xd0"
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g5042
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'left'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g4811
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g5049
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F0.79976434075979341
sg34
g753
(S'\x07\xdf\x07\x02\x08\x14-\x00\xa7\xf8'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4200
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4207
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.61662865879770834
sg34
g753
(S'\x07\xdf\x07\x02\x08\x142\ra\xc8'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3968
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3976
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.8666369978163857
sg34
g753
(S'\x07\xdf\x07\x02\x08\x148\x07\xfe\xe0'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g5001
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g5008
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.83304743091230193
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x02\x06l\x88'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3846
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.73327000430799671
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x08\x04a\x18'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4243
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'right'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4251
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.86657570246552496
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x0e\x00\xe6x'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3968
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3972
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3976
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.64984760265360819
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x13\x0e\x96`'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4519
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g4035
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4526
sS'block_loop.thisRepN'
p5583
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.69984066059805627
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x19\t\xeb\x10'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3938
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3946
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.73333215494221804
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15\x1f\x05\xb8\xd8'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3722
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3729
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.8166761555676203
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15%\x02>8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4534
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'right'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4542
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.81662227267770504
sg34
g753
(S'\x07\xdf\x07\x02\x08\x15*\x0f6\x88'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g4800
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g4808
sS'block_loop.thisRepN'
p5635
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.74990983881616557
sg34
g753
(S'\x07\xdf\x07\x02\x08\x150\x0c\xec\x98'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4960
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4967
sS'block_loop.thisRepN'
p5648
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.89989157850413903
sg34
g753
(S'\x07\xdf\x07\x02\x08\x156\t\xb0x'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g4303
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g4310
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.81667301952620619
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x00\x08\x978'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g3846
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'right'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g3854
sS'block_loop.thisRepN'
p5674
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.81658435508870753
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x06\x06MH'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4318
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4325
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4142
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4149
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.61709592893384979
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x0c\x04\x03X'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g5042
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g5049
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.81656496865252848
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x11\r\xe2\xb0'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4170
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4178
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.76660954320141173
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x17\x0b\x98\xc0'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3938
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3949
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3946
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.76657305108619767
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16\x1d\x08\x978'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4082
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'left'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.99985773776825226
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16#\x05\x95\xb0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3654
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.84989481432785396
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16)\x05\xeb\xa0'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3634
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.84994442079732835
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16/\x04YH'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3705
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F0.74989102256949991
sg34
g753
(S'\x07\xdf\x07\x02\x08\x165\x02\x88p'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4288
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4295
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.76652772103625466
sg34
g753
(S'\x07\xdf\x07\x02\x08\x16:\x0eP\x10'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4123
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'left'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4130
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.93325449515850778
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17\x04\x0bN\x88'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g5001
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g5008
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.69963596263733052
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17\n\n\xec\xe0'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3737
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3745
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.76644618396585429
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17\x10\x06\xba\xa8'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3863
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3871
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.83356345223364769
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17\x16\x03\xb9 '
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4215
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4222
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.69995897487933689
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17\x1c\x01\xad\xb0'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3968
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3976
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.6499140297073609
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17!\x0c\xfc8'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4534
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4542
sS'block_loop.thisRepN'
p5882
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.63331011712580221
sg34
g753
(S"\x07\xdf\x07\x02\x08\x17'\x08\x12h"
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4170
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4178
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.74989929031380598
sg34
g753
(S'\x07\xdf\x07\x02\x08\x17-\x02\xee\x00'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4519
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4028
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4526
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4028
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4035
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.66659691350832873
sg34
g753
(S'\x07\xdf\x07\x02\x08\x172\x0e\xf4 '
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4288
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'left'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4295
sS'block_loop.thisRepN'
p5921
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.64998444808679778
sg34
g753
(S'\x07\xdf\x07\x02\x08\x178\nH\xd0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g5001
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g5008
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.84959147361769283
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x02\x05_\x00'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4200
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4207
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.88332016671211022
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x08\x03\xcc\xa8'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4123
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4130
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.049891849343112
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x0e\x02t\xe8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3893
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3900
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.64990148554261395
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x14\x03\xbd\x08'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3921
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3929
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.86657513227692107
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x19\x0e\x19`'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4082
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3748
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4089
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.78328501454143407
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18\x1f\x0c\x83 '
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g5042
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'left'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4811
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g5049
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.84987001109311677
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18%\t\xc0\x18'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g3737
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g3745
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.93312534728102037
sg34
g753
(S'\x07\xdf\x07\x02\x08\x18+\x07\xef@'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3863
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3873
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3871
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.69987829309320659
sg34
g753
(S'\x07\xdf\x07\x02\x08\x181\x07\x8d\x98'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g5001
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g5008
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.71615349153944408
sg34
g753
(S'\x07\xdf\x07\x02\x08\x187\x03[`'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4067
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3932
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4074
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3925
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3932
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.81651365161451395
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x00\x0e\xe8h'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3722
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3729
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.91663262161364401
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x06\x0c\x9ex'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4400
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3978
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4407
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3978
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g3972
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.86649587596366473
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x0c\x0b\xbf\xd0'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4260
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4267
sS'block_loop.thisRepN'
p6103
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.83320907958022872
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x12\nk\xf8'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g3816
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g3824
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.61632731374993455
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x18\x08\\\xa0'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4303
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3867
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4310
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3867
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.63328274803916429
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19\x1e\x02\xfd\xa0'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g4800
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g4804
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g4808
sS'block_loop.thisRepN'
p6142
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.76655594540716265
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19#\r\x1bx'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g4534
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g4538
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g4542
sS'block_loop.thisRepN'
p6155
I1
sg3645
g4538
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g4545
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.66671579797821323
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19)\n\x19\xf0'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3654
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'left'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3662
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.73320984933616273
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19/\x05n\xa0'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3722
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3729
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.86667719616252725
sg34
g753
(S'\x07\xdf\x07\x02\x08\x195\x01\xf4\x00'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4155
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4162
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.76648609721632965
sg34
g753
(S'\x07\xdf\x07\x02\x08\x19;\x00a\xa8'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4243
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4247
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4251
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.73321070462043281
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a\x04\x0c\xa2`'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4082
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3741
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4089
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3741
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g3748
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.71646567018524365
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a\n\x08\xe9@'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4243
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4254
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4251
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4247
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g4254
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.63336342982529459
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a\x10\x054\x08'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4260
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'right'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3780
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4267
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.63324796649067139
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a\x16\x00\x0b\xb8'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3754
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3761
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.6666188657964085
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a\x1b\nh\x10'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4155
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3942
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4162
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3942
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3949
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.88323919983031374
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a!\x05\xbc\xc0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3799
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3807
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.71656060670375155
sg34
g753
(S"\x07\xdf\x07\x02\x08\x1a'\x04e\x00"
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g3893
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'left'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g3900
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.88330078027502168
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a-\x00\xaf\xc8'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4668
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4675
sS'block_loop.thisRepN'
p6311
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.80036018858481839
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a2\x0e\x9aH'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g5042
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4811
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g5049
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4804
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g4811
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.83324870773776638
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1a8\x0c\x11\xd8'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4668
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4174
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4675
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4174
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g4181
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.86651697296747443
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1b\x02\n\x06h'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3846
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3850
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3854
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3850
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g3857
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.78323426769293292
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1b\x08\x08t\x10'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F209.35897978308276
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'2-steamed_puddings.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'20-fruit_pastilles.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'20-fruit_pastilles.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
S'2-steamed_puddings.png'
p6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6385
I2
sS'img_wrong'
p6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.78314246721492964
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1f!\x05SH'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'13-mccoys_steak_crisps.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'3-ellas_strawberries_apples.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6386
S'13-mccoys_steak_crisps.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.61665688316861633
sg34
g753
(S"\x07\xdf\x07\x02\x08\x1f'\x02\x90@"
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'22-daim.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'22-daim.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'7-olives.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6386
S'7-olives.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.76665202230469731
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1f,\x0co\x98'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'10-bounty_redo.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'10-bounty_redo.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'4-corn.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
S'4-corn.png'
p6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6437
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.59986366773682676
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1f2\tn\x10'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
g6392
sS'block_loop.thisIndex'
p6443
g6365
sg38
S'right'
p6444
sg59
g63
sS'trial_loop.thisN'
p6445
I4
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6449
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6450
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6451
Nsg70
Vn
sS'block_loop.thisTrialN'
p6452
I0
sg39
F0.58320330641436158
sg34
g753
(S'\x07\xdf\x07\x02\x08\x1f8\x03\xd0\x90'
tRp6453
sa(dp6454
S'trial_loop.thisTrialN'
p6455
I5
sg6371
S'45-chewy_nougat_redo.png'
p6456
sS'block_loop.thisIndex'
p6457
g6365
sg38
S'right'
p6458
sg59
g63
sS'trial_loop.thisN'
p6459
I5
sg33
S'41-peanuts_redo.png'
p6460
sg64
g65
sS'trial_loop.thisIndex'
p6461
g60
(g99
S'\x05\x00\x00\x00'
tRp6462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6463
I0
sg6380
S'41-peanuts_redo.png'
p6464
sS'block_loop.thisRepN'
p6465
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6466
I2
sg6386
S'45-chewy_nougat_redo.png'
p6467
sg55
g11
sS'block_loop.thisTrial'
p6468
Nsg70
Vn
sS'block_loop.thisTrialN'
p6469
I0
sg39
F0.7337324278350934
sg34
g753
(S'\x07\xdf\x07\x02\x08 \x01\r6\xd0'
tRp6470
sa(dp6471
S'trial_loop.thisTrialN'
p6472
I6
sg6371
S'38-maltesers.png'
p6473
sS'block_loop.thisIndex'
p6474
g6365
sg38
S'left'
p6475
sg59
g63
sS'trial_loop.thisN'
p6476
I6
sg33
S'38-maltesers.png'
p6477
sg64
g65
sS'trial_loop.thisIndex'
p6478
g60
(g99
S'\x06\x00\x00\x00'
tRp6479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6480
I0
sg6380
S'6-sour_patch_kids.png'
p6481
sS'block_loop.thisRepN'
p6482
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6483
I2
sg6386
S'6-sour_patch_kids.png'
p6484
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vn
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.56638870888400561
sg34
g753
(S'\x07\xdf\x07\x02\x08 \x07\t\xbc0'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'4-corn.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'left'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p6494
g60
(g99
S'\x07\x00\x00\x00'
tRp6495
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6496
I0
sg6380
S'10-bounty_redo.png'
p6497
sS'block_loop.thisRepN'
p6498
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6499
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vn
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.61655481928301015
sg34
g753
(S'\x07\xdf\x07\x02\x08 \r\x03\xa1\xb0'
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'44-crunch.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'left'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
S'44-crunch.png'
p6509
sg64
g65
sS'trial_loop.thisIndex'
p6510
g60
(g99
S'\x08\x00\x00\x00'
tRp6511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6512
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6515
I2
sg6386
S'26-walkers_smoky_bacon.png'
p6516
sg55
g11
sS'block_loop.thisTrial'
p6517
Nsg70
Vn
sS'block_loop.thisTrialN'
p6518
I0
sg39
F0.68316632963797019
sg34
g753
(S'\x07\xdf\x07\x02\x08 \x12\r\x81\x08'
tRp6519
sa(dp6520
S'trial_loop.thisTrialN'
p6521
I9
sg6371
S'51-mars.png'
p6522
sS'block_loop.thisIndex'
p6523
g6365
sg38
S'left'
p6524
sg59
g63
sS'trial_loop.thisN'
p6525
I9
sg33
S'51-mars.png'
p6526
sg64
g65
sS'trial_loop.thisIndex'
p6527
g60
(g99
S'\t\x00\x00\x00'
tRp6528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6529
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6530
sS'block_loop.thisRepN'
p6531
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6532
I2
sg6386
S'27-hartleys_raspberries_jelly.png'
p6533
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vn
sS'block_loop.thisTrialN'
p6535
I0
sg39
F0.74988418029715831
sg34
g753
(S'\x07\xdf\x07\x02\x08 \x18\tN\xd0'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
S'19-caramello_redo.png'
p6539
sS'block_loop.thisIndex'
p6540
g6365
sg38
S'left'
p6541
sg59
g63
sS'trial_loop.thisN'
p6542
I10
sg33
S'19-caramello_redo.png'
p6543
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
S'30-spaghetti_hoops.png'
p6547
sS'block_loop.thisRepN'
p6548
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6549
I2
sg6386
S'30-spaghetti_hoops.png'
p6550
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vn
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.84977022796465462
sg34
g753
(S'\x07\xdf\x07\x02\x08 \x1e\x05\xd40'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'50-polo.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'right'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
S'48-twix.png'
p6560
sg64
g65
sS'trial_loop.thisIndex'
p6561
g60
(g99
S'\x0b\x00\x00\x00'
tRp6562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6563
I0
sg6380
S'48-twix.png'
p6564
sS'block_loop.thisRepN'
p6565
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6566
I2
sg6386
S'50-polo.png'
p6567
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.70015968151528796
sg34
g753
(S'\x07\xdf\x07\x02\x08 $\x04\x07@'
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
S'36-fig_rolls.png'
p6573
sS'block_loop.thisIndex'
p6574
g6365
sg38
S'right'
p6575
sg59
g63
sS'trial_loop.thisN'
p6576
I12
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p6577
sg64
g65
sS'trial_loop.thisIndex'
p6578
g60
(g99
S'\x0c\x00\x00\x00'
tRp6579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6580
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6581
sS'block_loop.thisRepN'
p6582
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6583
I2
sg6386
S'36-fig_rolls.png'
p6584
sg55
g11
sS'block_loop.thisTrial'
p6585
Nsg70
Vn
sS'block_loop.thisTrialN'
p6586
I0
sg39
F0.89989471454464365
sg34
g753
(S'\x07\xdf\x07\x02\x08 *\x00\x0f\xa0'
tRp6587
sa(dp6588
S'trial_loop.thisTrialN'
p6589
I13
sg6371
S'26-walkers_smoky_bacon.png'
p6590
sS'block_loop.thisIndex'
p6591
g6365
sg38
S'right'
p6592
sg59
g63
sS'trial_loop.thisN'
p6593
I13
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p6594
g60
(g99
S'\r\x00\x00\x00'
tRp6595
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6596
I0
sg6380
S'44-crunch.png'
p6597
sS'block_loop.thisRepN'
p6598
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6599
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p6600
Nsg70
Vn
sS'block_loop.thisTrialN'
p6601
I0
sg39
F0.61660955745628598
sg34
g753
(S'\x07\xdf\x07\x02\x08 /\x0e8\xa0'
tRp6602
sa(dp6603
S'trial_loop.thisTrialN'
p6604
I14
sg6371
g6456
sS'block_loop.thisIndex'
p6605
g6365
sg38
S'right'
p6606
sg59
g63
sS'trial_loop.thisN'
p6607
I14
sg33
g6467
sg64
g65
sS'trial_loop.thisIndex'
p6608
g60
(g99
S'\x0e\x00\x00\x00'
tRp6609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6610
I0
sg6380
g6464
sS'block_loop.thisRepN'
p6611
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6612
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p6613
Nsg70
Vn
sS'block_loop.thisTrialN'
p6614
I0
sg39
F0.699916780870808
sg34
g753
(S'\x07\xdf\x07\x02\x08 5\x08\xd9\xa0'
tRp6615
sa(dp6616
S'trial_loop.thisTrialN'
p6617
I15
sg6371
S'35-raisins.png'
p6618
sS'block_loop.thisIndex'
p6619
g6365
sg38
S'left'
p6620
sg59
g63
sS'trial_loop.thisN'
p6621
I15
sg33
S'35-raisins.png'
p6622
sg64
g65
sS'trial_loop.thisIndex'
p6623
g60
(g99
S'\x0f\x00\x00\x00'
tRp6624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6625
I0
sg6380
S'49-yorkie.png'
p6626
sS'block_loop.thisRepN'
p6627
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6628
I2
sg6386
S'49-yorkie.png'
p6629
sg55
g11
sS'block_loop.thisTrial'
p6630
Nsg70
Vn
sS'block_loop.thisTrialN'
p6631
I0
sg39
F0.86648504236654844
sg34
g753
(S'\x07\xdf\x07\x02\x08 ;\x04\xe2\x00'
tRp6632
sa(dp6633
S'trial_loop.thisTrialN'
p6634
I16
sg6371
g6372
sS'block_loop.thisIndex'
p6635
g6365
sg38
S'left'
p6636
sg59
g63
sS'trial_loop.thisN'
p6637
I16
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p6638
g60
(g99
S'\x10\x00\x00\x00'
tRp6639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6640
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6641
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6642
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p6643
Nsg70
Vn
sS'block_loop.thisTrialN'
p6644
I0
sg39
F1.5165376280756391
sg34
g753
(S'\x07\xdf\x07\x02\x08!\x05\x03O\xa8'
tRp6645
sa(dp6646
S'trial_loop.thisTrialN'
p6647
I17
sg6371
S'27-hartleys_raspberries_jelly.png'
p6648
sS'block_loop.thisIndex'
p6649
g6365
sg38
S'right'
p6650
sg59
g63
sS'trial_loop.thisN'
p6651
I17
sg33
g6533
sg64
g65
sS'trial_loop.thisIndex'
p6652
g60
(g99
S'\x11\x00\x00\x00'
tRp6653
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6654
I0
sg6380
S'51-mars.png'
p6655
sS'block_loop.thisRepN'
p6656
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6657
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p6658
Nsg70
Vn
sS'block_loop.thisTrialN'
p6659
I0
sg39
F0.75003471027412161
sg34
g753
(S'\x07\xdf\x07\x02\x08!\x0b\x0b\xbb\xe8'
tRp6660
sa(dp6661
S'trial_loop.thisTrialN'
p6662
I18
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6663
sS'block_loop.thisIndex'
p6664
g6365
sg38
S'right'
p6665
sg59
g63
sS'trial_loop.thisN'
p6666
I18
sg33
S'18-mms.png'
p6667
sg64
g65
sS'trial_loop.thisIndex'
p6668
g60
(g99
S'\x12\x00\x00\x00'
tRp6669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6670
I0
sg6380
S'18-mms.png'
p6671
sS'block_loop.thisRepN'
p6672
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6673
I2
sg6386
S'43-mrporky_pork_crackles_redo.png'
p6674
sg55
g11
sS'block_loop.thisTrial'
p6675
Nsg70
Vn
sS'block_loop.thisTrialN'
p6676
I0
sg39
F0.88322437490842276
sg34
g753
(S'\x07\xdf\x07\x02\x08!\x11\x08\x7f\xc8'
tRp6677
sa(dp6678
S'trial_loop.thisTrialN'
p6679
I19
sg6371
S'41-peanuts_redo.png'
p6680
sS'block_loop.thisIndex'
p6681
g6365
sg38
S'left'
p6682
sg59
g63
sS'trial_loop.thisN'
p6683
I19
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p6684
g60
(g99
S'\x13\x00\x00\x00'
tRp6685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6686
I0
sg6380
S'45-chewy_nougat_redo.png'
p6687
sS'block_loop.thisRepN'
p6688
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6689
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p6690
Nsg70
Vn
sS'block_loop.thisTrialN'
p6691
I0
sg39
F0.80028663416396739
sg34
g753
(S'\x07\xdf\x07\x02\x08!\x17\x07(\x08'
tRp6692
sa(dp6693
S'trial_loop.thisTrialN'
p6694
I20
sg6371
S'5-pineapple.png'
p6695
sS'block_loop.thisIndex'
p6696
g6365
sg38
S'left'
p6697
sg59
g63
sS'trial_loop.thisN'
p6698
I20
sg33
S'40-sardines.png'
p6699
sg64
g65
sS'trial_loop.thisIndex'
p6700
g60
(g99
S'\x14\x00\x00\x00'
tRp6701
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6702
I0
sg6380
S'40-sardines.png'
p6703
sS'block_loop.thisRepN'
p6704
I2
sg6383
S'5-pineapple.png'
p6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6706
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p6707
Nsg70
Vn
sS'block_loop.thisTrialN'
p6708
I0
sg39
F0.83319368446973385
sg34
g753
(S'\x07\xdf\x07\x02\x08!\x1d\x04\xa3\x80'
tRp6709
sa(dp6710
S'trial_loop.thisTrialN'
p6711
I21
sg6371
S'46-pistachios.png'
p6712
sS'block_loop.thisIndex'
p6713
g6365
sg38
S'left'
p6714
sg59
g63
sS'trial_loop.thisN'
p6715
I21
sg33
S'46-pistachios.png'
p6716
sg64
g65
sS'trial_loop.thisIndex'
p6717
g60
(g99
S'\x15\x00\x00\x00'
tRp6718
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6719
I0
sg6380
S'29-beans.png'
p6720
sS'block_loop.thisRepN'
p6721
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6722
I2
sg6386
S'29-beans.png'
p6723
sg55
g11
sS'block_loop.thisTrial'
p6724
Nsg70
Vn
sS'block_loop.thisTrialN'
p6725
I0
sg39
F0.64991288932833413
sg34
g753
(S'\x07\xdf\x07\x02\x08!#\x02\x94('
tRp6726
sa(dp6727
S'trial_loop.thisTrialN'
p6728
I22
sg6371
g6573
sS'block_loop.thisIndex'
p6729
g6365
sg38
S'right'
p6730
sg59
g63
sS'trial_loop.thisN'
p6731
I22
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p6732
g60
(g99
S'\x16\x00\x00\x00'
tRp6733
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6734
I0
sg6380
g6581
sS'block_loop.thisRepN'
p6735
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6736
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p6737
Nsg70
Vn
sS'block_loop.thisTrialN'
p6738
I0
sg39
F0.78322400428533001
sg34
g753
(S'\x07\xdf\x07\x02\x08!(\x0c\xf0\x80'
tRp6739
sa(dp6740
S'trial_loop.thisTrialN'
p6741
I23
sg6371
g6473
sS'block_loop.thisIndex'
p6742
g6365
sg38
S'left'
p6743
sg59
g63
sS'trial_loop.thisN'
p6744
I23
sg33
g6484
sg64
g65
sS'trial_loop.thisIndex'
p6745
g60
(g99
S'\x17\x00\x00\x00'
tRp6746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6747
I0
sg6380
g6481
sS'block_loop.thisRepN'
p6748
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6749
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vn
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.84975910927278164
sg34
g753
(S'\x07\xdf\x07\x02\x08!.\n-x'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
g6590
sS'block_loop.thisIndex'
p6755
g6365
sg38
S'right'
p6756
sg59
g63
sS'trial_loop.thisN'
p6757
I24
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p6758
g60
(g99
S'\x18\x00\x00\x00'
tRp6759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6760
I0
sg6380
g6597
sS'block_loop.thisRepN'
p6761
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6762
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p6763
Nsg70
Vn
sS'block_loop.thisTrialN'
p6764
I0
sg39
F0.83329432288155658
sg34
g753
(S'\x07\xdf\x07\x02\x08!4\x08\\\xa0'
tRp6765
sa(dp6766
S'trial_loop.thisTrialN'
p6767
I25
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6768
sS'block_loop.thisIndex'
p6769
g6365
sg38
S'left'
p6770
sg59
g63
sS'trial_loop.thisN'
p6771
I25
sg33
S'8-liquorice_catherine_wheels.png'
p6772
sg64
g65
sS'trial_loop.thisIndex'
p6773
g60
(g99
S'\x19\x00\x00\x00'
tRp6774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6775
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6776
sS'block_loop.thisRepN'
p6777
I2
sg6383
S'17-jacobs_mini_cheddars_redo.png'
p6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vn
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.93332833467411547
sg34
g753
(S'\x07\xdf\x07\x02\x08!:\x06MH'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'3-ellas_strawberries_apples.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'left'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6789
g60
(g99
S'\x1a\x00\x00\x00'
tRp6790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6791
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6792
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vn
sS'block_loop.thisTrialN'
p6796
I0
sg39
F0.66655129836362903
sg34
g753
(S'\x07\xdf\x07\x02\x08"\x04\x05\xeb\xa0'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
g6490
sS'block_loop.thisIndex'
p6800
g6365
sg38
S'left'
p6801
sg59
g63
sS'trial_loop.thisN'
p6802
I27
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p6803
g60
(g99
S'\x1b\x00\x00\x00'
tRp6804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6805
I0
sg6380
g6497
sS'block_loop.thisRepN'
p6806
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6807
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p6808
Nsg70
Vn
sS'block_loop.thisTrialN'
p6809
I0
sg39
F0.68319654967035603
sg34
g753
(S'\x07\xdf\x07\x02\x08"\n\x01@P'
tRp6810
sa(dp6811
S'trial_loop.thisTrialN'
p6812
I28
sg6371
g6505
sS'block_loop.thisIndex'
p6813
g6365
sg38
S'left'
p6814
sg59
g63
sS'trial_loop.thisN'
p6815
I28
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p6816
g60
(g99
S'\x1c\x00\x00\x00'
tRp6817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6818
I0
sg6380
g6513
sS'block_loop.thisRepN'
p6819
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6820
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p6821
Nsg70
Vn
sS'block_loop.thisTrialN'
p6822
I0
sg39
F0.56655178302480635
sg34
g753
(S'\x07\xdf\x07\x02\x08"\x0f\x0cPX'
tRp6823
sa(dp6824
S'trial_loop.thisTrialN'
p6825
I29
sg6371
S'16-skips_prawn.png'
p6826
sS'block_loop.thisIndex'
p6827
g6365
sg38
S'right'
p6828
sg59
g63
sS'trial_loop.thisN'
p6829
I29
sg33
S'42-mrkipling_lemon_slices.png'
p6830
sg64
g65
sS'trial_loop.thisIndex'
p6831
g60
(g99
S'\x1d\x00\x00\x00'
tRp6832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6833
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6834
sS'block_loop.thisRepN'
p6835
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6836
I2
sg6386
S'16-skips_prawn.png'
p6837
sg55
g11
sS'block_loop.thisTrial'
p6838
Nsg70
Vn
sS'block_loop.thisTrialN'
p6839
I0
sg39
F0.81643753134267172
sg34
g753
(S'\x07\xdf\x07\x02\x08"\x15\x069\xc0'
tRp6840
sa(dp6841
S'trial_loop.thisTrialN'
p6842
I30
sg6371
g6785
sS'block_loop.thisIndex'
p6843
g6365
sg38
S'left'
p6844
sg59
g63
sS'trial_loop.thisN'
p6845
I30
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6846
g60
(g99
S'\x1e\x00\x00\x00'
tRp6847
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6848
I0
sg6380
g6792
sS'block_loop.thisRepN'
p6849
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6850
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p6851
Nsg70
Vn
sS'block_loop.thisTrialN'
p6852
I0
sg39
F0.88337461979062937
sg34
g753
(S'\x07\xdf\x07\x02\x08"\x1b\x03\xef\xd0'
tRp6853
sa(dp6854
S'trial_loop.thisTrialN'
p6855
I31
sg6371
g6522
sS'block_loop.thisIndex'
p6856
g6365
sg38
S'left'
p6857
sg59
g63
sS'trial_loop.thisN'
p6858
I31
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p6859
g60
(g99
S'\x1f\x00\x00\x00'
tRp6860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6861
I0
sg6380
g6530
sS'block_loop.thisRepN'
p6862
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6863
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p6864
Nsg70
Vn
sS'block_loop.thisTrialN'
p6865
I0
sg39
F0.88325915645600617
sg34
g753
(S'\x07\xdf\x07\x02\x08"!\x02\x98\x10'
tRp6866
sa(dp6867
S'trial_loop.thisTrialN'
p6868
I32
sg6371
S'23-crunchie_redo.png'
p6869
sS'block_loop.thisIndex'
p6870
g6365
sg38
S'right'
p6871
sg59
g63
sS'trial_loop.thisN'
p6872
I32
sg33
S'33-ambrosia_rice.png'
p6873
sg64
g65
sS'trial_loop.thisIndex'
p6874
g60
(g99
S' \x00\x00\x00'
tRp6875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6876
I0
sg6380
S'33-ambrosia_rice.png'
p6877
sS'block_loop.thisRepN'
p6878
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6879
I2
sg6386
S'23-crunchie_redo.png'
p6880
sg55
g11
sS'block_loop.thisTrial'
p6881
Nsg70
Vn
sS'block_loop.thisTrialN'
p6882
I0
sg39
F0.69991107897749316
sg34
g753
(S'\x07\xdf\x07\x02\x08"\'\x01D8'
tRp6883
sa(dp6884
S'trial_loop.thisTrialN'
p6885
I33
sg6371
g6456
sS'block_loop.thisIndex'
p6886
g6365
sg38
S'right'
p6887
sg59
g63
sS'trial_loop.thisN'
p6888
I33
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p6889
g60
(g99
S'!\x00\x00\x00'
tRp6890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6891
I0
sg6380
g6464
sS'block_loop.thisRepN'
p6892
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6893
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p6894
Nsg70
Vn
sS'block_loop.thisTrialN'
p6895
I0
sg39
F0.68323247159696621
sg34
g753
(S'\x07\xdf\x07\x02\x08",\x0c\x8e\xd8'
tRp6896
sa(dp6897
S'trial_loop.thisTrialN'
p6898
I34
sg6371
g6539
sS'block_loop.thisIndex'
p6899
g6365
sg38
S'left'
p6900
sg59
g63
sS'trial_loop.thisN'
p6901
I34
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6902
g60
(g99
S'"\x00\x00\x00'
tRp6903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6904
I0
sg6380
g6547
sS'block_loop.thisRepN'
p6905
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6906
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p6907
Nsg70
Vn
sS'block_loop.thisTrialN'
p6908
I0
sg39
F0.84992189831973519
sg34
g753
(S'\x07\xdf\x07\x02\x08"2\x08"\x08'
tRp6909
sa(dp6910
S'trial_loop.thisTrialN'
p6911
I35
sg6371
S'49-yorkie.png'
p6912
sS'block_loop.thisIndex'
p6913
g6365
sg38
S'right'
p6914
sg59
g63
sS'trial_loop.thisN'
p6915
I35
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p6916
g60
(g99
S'#\x00\x00\x00'
tRp6917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6918
I0
sg6380
S'35-raisins.png'
p6919
sS'block_loop.thisRepN'
p6920
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6921
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p6922
Nsg70
Vn
sS'block_loop.thisTrialN'
p6923
I0
sg39
F0.76650690912629216
sg34
g753
(S'\x07\xdf\x07\x02\x08"8\x06Q0'
tRp6924
sa(dp6925
S'trial_loop.thisTrialN'
p6926
I36
sg6371
g6663
sS'block_loop.thisIndex'
p6927
g6365
sg38
S'right'
p6928
sg59
g63
sS'trial_loop.thisN'
p6929
I36
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p6930
g60
(g99
S'$\x00\x00\x00'
tRp6931
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6932
I0
sg6380
g6671
sS'block_loop.thisRepN'
p6933
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6934
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p6935
Nsg70
Vn
sS'block_loop.thisTrialN'
p6936
I0
sg39
F0.61658874554632348
sg34
g753
(S'\x07\xdf\x07\x02\x08#\x02\x03S\x90'
tRp6937
sa(dp6938
S'trial_loop.thisTrialN'
p6939
I37
sg6371
S'21-nakd_banana_crunch.png'
p6940
sS'block_loop.thisIndex'
p6941
g6365
sg38
S'left'
p6942
sg59
g63
sS'trial_loop.thisN'
p6943
I37
sg33
S'21-nakd_banana_crunch.png'
p6944
sg64
g65
sS'trial_loop.thisIndex'
p6945
g60
(g99
S'%\x00\x00\x00'
tRp6946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6947
I0
sg6380
S'1-treacle_cookies.png'
p6948
sS'block_loop.thisRepN'
p6949
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6950
I2
sg6386
S'1-treacle_cookies.png'
p6951
sg55
g11
sS'block_loop.thisTrial'
p6952
Nsg70
Vn
sS'block_loop.thisTrialN'
p6953
I0
sg39
F0.71656887444896711
sg34
g753
(S'\x07\xdf\x07\x02\x08#\x07\r2\xe8'
tRp6954
sa(dp6955
S'trial_loop.thisTrialN'
p6956
I38
sg6371
g6869
sS'block_loop.thisIndex'
p6957
g6365
sg38
S'right'
p6958
sg59
g63
sS'trial_loop.thisN'
p6959
I38
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p6960
g60
(g99
S'&\x00\x00\x00'
tRp6961
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6962
I0
sg6380
g6877
sS'block_loop.thisRepN'
p6963
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6964
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p6965
Nsg70
Vn
sS'block_loop.thisTrialN'
p6966
I0
sg39
F0.63322316325684369
sg34
g753
(S'\x07\xdf\x07\x02\x08#\r\ty\xc8'
tRp6967
sa(dp6968
S'trial_loop.thisTrialN'
p6969
I39
sg6371
g6618
sS'block_loop.thisIndex'
p6970
g6365
sg38
S'left'
p6971
sg59
g63
sS'trial_loop.thisN'
p6972
I39
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p6973
g60
(g99
S"'\x00\x00\x00"
tRp6974
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6975
I0
sg6380
g6626
sS'block_loop.thisRepN'
p6976
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6977
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p6978
Nsg70
Vn
sS'block_loop.thisTrialN'
p6979
I0
sg39
F0.63324055403063539
sg34
g753
(S'\x07\xdf\x07\x02\x08#\x13\x04U`'
tRp6980
sa(dp6981
S'trial_loop.thisTrialN'
p6982
I40
sg6371
S'42-mrkipling_lemon_slices.png'
p6983
sS'block_loop.thisIndex'
p6984
g6365
sg38
S'left'
p6985
sg59
g63
sS'trial_loop.thisN'
p6986
I40
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p6987
g60
(g99
S'(\x00\x00\x00'
tRp6988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6989
I0
sg6380
S'16-skips_prawn.png'
p6990
sS'block_loop.thisRepN'
p6991
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6992
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p6993
Nsg70
Vn
sS'block_loop.thisTrialN'
p6994
I0
sg39
F0.66647033148183255
sg34
g753
(S'\x07\xdf\x07\x02\x08#\x18\x0es8'
tRp6995
sa(dp6996
S'trial_loop.thisTrialN'
p6997
I41
sg6371
g6663
sS'block_loop.thisIndex'
p6998
g6365
sg38
S'right'
p6999
sg59
g63
sS'trial_loop.thisN'
p7000
I41
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7001
g60
(g99
S')\x00\x00\x00'
tRp7002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7003
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7004
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7005
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7006
Nsg70
Vn
sS'block_loop.thisTrialN'
p7007
I0
sg39
F0.68327266994310776
sg34
g753
(S'\x07\xdf\x07\x02\x08#\x1e\n\x02\x80'
tRp7008
sa(dp7009
S'trial_loop.thisTrialN'
p7010
I42
sg6371
g6392
sS'block_loop.thisIndex'
p7011
g6365
sg38
S'right'
p7012
sg59
g63
sS'trial_loop.thisN'
p7013
I42
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7014
g60
(g99
S'*\x00\x00\x00'
tRp7015
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7016
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7017
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7018
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7019
Nsg70
Vn
sS'block_loop.thisTrialN'
p7020
I0
sg39
F0.69989596896084549
sg34
g753
(S'\x07\xdf\x07\x02\x08#$\x05\x95\xb0'
tRp7021
sa(dp7022
S'trial_loop.thisTrialN'
p7023
I43
sg6371
g6456
sS'block_loop.thisIndex'
p7024
g6365
sg38
S'right'
p7025
sg59
g63
sS'trial_loop.thisN'
p7026
I43
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p7027
g60
(g99
S'+\x00\x00\x00'
tRp7028
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7029
I0
sg6380
g6464
sS'block_loop.thisRepN'
p7030
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7031
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p7032
Nsg70
Vn
sS'block_loop.thisTrialN'
p7033
I0
sg39
F0.86666949860682507
sg34
g753
(S'\x07\xdf\x07\x02\x08#*\x01\xa1\xf8'
tRp7034
sa(dp7035
S'trial_loop.thisTrialN'
p7036
I44
sg6371
S'7-olives.png'
p7037
sS'block_loop.thisIndex'
p7038
g6365
sg38
S'right'
p7039
sg59
g63
sS'trial_loop.thisN'
p7040
I44
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7041
g60
(g99
S',\x00\x00\x00'
tRp7042
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7043
I0
sg6380
S'22-daim.png'
p7044
sS'block_loop.thisRepN'
p7045
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7046
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7047
Nsg70
Vn
sS'block_loop.thisTrialN'
p7048
I0
sg39
F0.68327751655124302
sg34
g753
(S'\x07\xdf\x07\x02\x08#0\x00\x0f\xa0'
tRp7049
sa(dp7050
S'trial_loop.thisTrialN'
p7051
I45
sg6371
S'48-twix.png'
p7052
sS'block_loop.thisIndex'
p7053
g6365
sg38
S'left'
p7054
sg59
g63
sS'trial_loop.thisN'
p7055
I45
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7056
g60
(g99
S'-\x00\x00\x00'
tRp7057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7058
I0
sg6380
S'50-polo.png'
p7059
sS'block_loop.thisRepN'
p7060
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7061
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7062
Nsg70
Vn
sS'block_loop.thisTrialN'
p7063
I0
sg39
F0.79990090109822631
sg34
g753
(S'\x07\xdf\x07\x02\x08#5\n\xe1('
tRp7064
sa(dp7065
S'trial_loop.thisTrialN'
p7066
I46
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7067
sS'block_loop.thisIndex'
p7068
g6365
sg38
S'left'
p7069
sg59
g63
sS'trial_loop.thisN'
p7070
I46
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7071
g60
(g99
S'.\x00\x00\x00'
tRp7072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7073
I0
sg6380
S'36-fig_rolls.png'
p7074
sS'block_loop.thisRepN'
p7075
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7076
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p7077
Nsg70
Vn
sS'block_loop.thisTrialN'
p7078
I0
sg39
F0.84983636992456013
sg34
g753
(S'\x07\xdf\x07\x02\x08#;\x08\\\xa0'
tRp7079
sa(dp7080
S'trial_loop.thisTrialN'
p7081
I47
sg6371
S'20-fruit_pastilles.png'
p7082
sS'block_loop.thisIndex'
p7083
g6365
sg38
S'right'
p7084
sg59
g63
sS'trial_loop.thisN'
p7085
I47
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7086
g60
(g99
S'/\x00\x00\x00'
tRp7087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7088
I0
sg6380
S'2-steamed_puddings.png'
p7089
sS'block_loop.thisRepN'
p7090
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7091
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7092
Nsg70
Vn
sS'block_loop.thisTrialN'
p7093
I0
sg39
F0.78368927875908412
sg34
g753
(S'\x07\xdf\x07\x02\x08$\x05\x06\x8b\xc8'
tRp7094
sa(dp7095
S'trial_loop.thisTrialN'
p7096
I48
sg6371
g6680
sS'block_loop.thisIndex'
p7097
g6365
sg38
S'left'
p7098
sg59
g63
sS'trial_loop.thisN'
p7099
I48
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p7100
g60
(g99
S'0\x00\x00\x00'
tRp7101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7102
I0
sg6380
g6687
sS'block_loop.thisRepN'
p7103
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7104
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p7105
Nsg70
Vn
sS'block_loop.thisTrialN'
p7106
I0
sg39
F0.99988938327533106
sg34
g753
(S'\x07\xdf\x07\x02\x08$\x0b\x03\xc8\xc0'
tRp7107
sa(dp7108
S'trial_loop.thisTrialN'
p7109
I49
sg6371
g6590
sS'block_loop.thisIndex'
p7110
g6365
sg38
S'right'
p7111
sg59
g63
sS'trial_loop.thisN'
p7112
I49
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7113
g60
(g99
S'1\x00\x00\x00'
tRp7114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7115
I0
sg6380
g6597
sS'block_loop.thisRepN'
p7116
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7117
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p7118
Nsg70
Vn
sS'block_loop.thisTrialN'
p7119
I0
sg39
F0.74988418029715831
sg34
g753
(S'\x07\xdf\x07\x02\x08$\x11\x04YH'
tRp7120
sa(dp7121
S'trial_loop.thisTrialN'
p7122
I50
sg6371
g6712
sS'block_loop.thisIndex'
p7123
g6365
sg38
S'left'
p7124
sg59
g63
sS'trial_loop.thisN'
p7125
I50
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p7126
g60
(g99
S'2\x00\x00\x00'
tRp7127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7128
I0
sg6380
g6720
sS'block_loop.thisRepN'
p7129
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7130
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p7131
Nsg70
Vn
sS'block_loop.thisTrialN'
p7132
I0
sg39
F0.63325937027730106
sg34
g753
(S'\x07\xdf\x07\x02\x08$\x17\x01\x19@'
tRp7133
sa(dp7134
S'trial_loop.thisTrialN'
p7135
I51
sg6371
g6505
sS'block_loop.thisIndex'
p7136
g6365
sg38
S'left'
p7137
sg59
g63
sS'trial_loop.thisN'
p7138
I51
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7139
g60
(g99
S'3\x00\x00\x00'
tRp7140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7141
I0
sg6380
g6513
sS'block_loop.thisRepN'
p7142
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7143
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p7144
Nsg70
Vn
sS'block_loop.thisTrialN'
p7145
I0
sg39
F0.84982525123268715
sg34
g753
(S'\x07\xdf\x07\x02\x08$\x1c\x0b7\x18'
tRp7146
sa(dp7147
S'trial_loop.thisTrialN'
p7148
I52
sg6371
g6473
sS'block_loop.thisIndex'
p7149
g6365
sg38
S'left'
p7150
sg59
g63
sS'trial_loop.thisN'
p7151
I52
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7152
g60
(g99
S'4\x00\x00\x00'
tRp7153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7154
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7155
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7156
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p7157
Nsg70
Vn
sS'block_loop.thisTrialN'
p7158
I0
sg39
F0.6497107572204186
sg34
g753
(S'\x07\xdf\x07\x02\x08$"\tf@'
tRp7159
sa(dp7160
S'trial_loop.thisTrialN'
p7161
I53
sg6371
g6663
sS'block_loop.thisIndex'
p7162
g6365
sg38
S'right'
p7163
sg59
g63
sS'trial_loop.thisN'
p7164
I53
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p7165
g60
(g99
S'5\x00\x00\x00'
tRp7166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7167
I0
sg6380
g6671
sS'block_loop.thisRepN'
p7168
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7169
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7170
Nsg70
Vn
sS'block_loop.thisTrialN'
p7171
I0
sg39
F0.78332521288757562
sg34
g753
(S'\x07\xdf\x07\x02\x08$(\x04\x80X'
tRp7172
sa(dp7173
S'trial_loop.thisTrialN'
p7174
I54
sg6371
g6912
sS'block_loop.thisIndex'
p7175
g6365
sg38
S'right'
p7176
sg59
g63
sS'trial_loop.thisN'
p7177
I54
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7178
g60
(g99
S'6\x00\x00\x00'
tRp7179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7180
I0
sg6380
g6919
sS'block_loop.thisRepN'
p7181
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7182
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p7183
Nsg70
Vn
sS'block_loop.thisTrialN'
p7184
I0
sg39
F0.7498984350304454
sg34
g753
(S'\x07\xdf\x07\x02\x08$.\x01\xbdP'
tRp7185
sa(dp7186
S'trial_loop.thisTrialN'
p7187
I55
sg6371
g6505
sS'block_loop.thisIndex'
p7188
g6365
sg38
S'left'
p7189
sg59
g63
sS'trial_loop.thisN'
p7190
I55
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7191
g60
(g99
S'7\x00\x00\x00'
tRp7192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7193
I0
sg6380
g6513
sS'block_loop.thisRepN'
p7194
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7195
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p7196
Nsg70
Vn
sS'block_loop.thisTrialN'
p7197
I0
sg39
F0.58327315460337559
sg34
g753
(S'\x07\xdf\x07\x02\x08$3\r\xbf\x88'
tRp7198
sa(dp7199
S'trial_loop.thisTrialN'
p7200
I56
sg6371
S'30-spaghetti_hoops.png'
p7201
sS'block_loop.thisIndex'
p7202
g6365
sg38
S'right'
p7203
sg59
g63
sS'trial_loop.thisN'
p7204
I56
sg33
g6550
sg64
g65
sS'trial_loop.thisIndex'
p7205
g60
(g99
S'8\x00\x00\x00'
tRp7206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7207
I0
sg6380
S'19-caramello_redo.png'
p7208
sS'block_loop.thisRepN'
p7209
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7210
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7211
Nsg70
Vn
sS'block_loop.thisTrialN'
p7212
I0
sg39
F0.899938334026956
sg34
g753
(S'\x07\xdf\x07\x02\x08$9\x07\xe3\x88'
tRp7213
sa(dp7214
S'trial_loop.thisTrialN'
p7215
I57
sg6371
S'29-beans.png'
p7216
sS'block_loop.thisIndex'
p7217
g6365
sg38
S'right'
p7218
sg59
g63
sS'trial_loop.thisN'
p7219
I57
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p7220
g60
(g99
S'9\x00\x00\x00'
tRp7221
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7222
I0
sg6380
S'46-pistachios.png'
p7223
sS'block_loop.thisRepN'
p7224
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7225
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p7226
Nsg70
Vn
sS'block_loop.thisTrialN'
p7227
I0
sg39
F0.58327600555003301
sg34
g753
(S'\x07\xdf\x07\x02\x08%\x03\x06\xcaH'
tRp7228
sa(dp7229
S'trial_loop.thisTrialN'
p7230
I58
sg6371
g6409
sS'block_loop.thisIndex'
p7231
g6365
sg38
S'left'
p7232
sg59
g63
sS'trial_loop.thisN'
p7233
I58
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7234
g60
(g99
S':\x00\x00\x00'
tRp7235
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7236
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7237
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7238
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7239
Nsg70
Vn
sS'block_loop.thisTrialN'
p7240
I0
sg39
F0.74992894015758793
sg34
g753
(S'\x07\xdf\x07\x02\x08%\t\x00\xeeH'
tRp7241
sa(dp7242
S'trial_loop.thisTrialN'
p7243
I59
sg6371
S'1-treacle_cookies.png'
p7244
sS'block_loop.thisIndex'
p7245
g6365
sg38
S'right'
p7246
sg59
g63
sS'trial_loop.thisN'
p7247
I59
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7248
g60
(g99
S';\x00\x00\x00'
tRp7249
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7250
I0
sg6380
S'21-nakd_banana_crunch.png'
p7251
sS'block_loop.thisRepN'
p7252
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7253
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7254
Nsg70
Vn
sS'block_loop.thisTrialN'
p7255
I0
sg39
F0.73374069557939947
sg34
g753
(S'\x07\xdf\x07\x02\x08%\x0e\x0c\xf4h'
tRp7256
sa(dp7257
S'trial_loop.thisTrialN'
p7258
I60
sg6371
S'18-mms.png'
p7259
sS'block_loop.thisIndex'
p7260
g6365
sg38
S'left'
p7261
sg59
g63
sS'trial_loop.thisN'
p7262
I60
sg33
g6674
sg64
g65
sS'trial_loop.thisIndex'
p7263
g60
(g99
S'<\x00\x00\x00'
tRp7264
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7265
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p7266
sS'block_loop.thisRepN'
p7267
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7268
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7269
Nsg70
Vn
sS'block_loop.thisTrialN'
p7270
I0
sg39
F0.81657979357441945
sg34
g753
(S'\x07\xdf\x07\x02\x08%\x14\ty\xc8'
tRp7271
sa(dp7272
S'trial_loop.thisTrialN'
p7273
I61
sg6371
g6826
sS'block_loop.thisIndex'
p7274
g6365
sg38
S'right'
p7275
sg59
g63
sS'trial_loop.thisN'
p7276
I61
sg33
g6837
sg64
g65
sS'trial_loop.thisIndex'
p7277
g60
(g99
S'=\x00\x00\x00'
tRp7278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7279
I0
sg6380
g6834
sS'block_loop.thisRepN'
p7280
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7281
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p7282
Nsg70
Vn
sS'block_loop.thisTrialN'
p7283
I0
sg39
F0.81646204948265222
sg34
g753
(S'\x07\xdf\x07\x02\x08%\x1a\x07/\xd8'
tRp7284
sa(dp7285
S'trial_loop.thisTrialN'
p7286
I62
sg6371
g7201
sS'block_loop.thisIndex'
p7287
g6365
sg38
S'right'
p7288
sg59
g63
sS'trial_loop.thisN'
p7289
I62
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7290
g60
(g99
S'>\x00\x00\x00'
tRp7291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7292
I0
sg6380
g7208
sS'block_loop.thisRepN'
p7293
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7294
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7295
Nsg70
Vn
sS'block_loop.thisTrialN'
p7296
I0
sg39
F0.63321147437545733
sg34
g753
(S'\x07\xdf\x07\x02\x08% \x04\xe5\xe8'
tRp7297
sa(dp7298
S'trial_loop.thisTrialN'
p7299
I63
sg6371
g6409
sS'block_loop.thisIndex'
p7300
g6365
sg38
S'left'
p7301
sg59
g63
sS'trial_loop.thisN'
p7302
I63
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7303
g60
(g99
S'?\x00\x00\x00'
tRp7304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7305
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7306
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7307
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vn
sS'block_loop.thisTrialN'
p7309
I0
sg39
F0.73322467425805371
sg34
g753
(S'\x07\xdf\x07\x02\x08%%\x0f\x03\xc0'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
S'6-sour_patch_kids.png'
p7313
sS'block_loop.thisIndex'
p7314
g6365
sg38
S'right'
p7315
sg59
g63
sS'trial_loop.thisN'
p7316
I64
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7317
g60
(g99
S'@\x00\x00\x00'
tRp7318
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7319
I0
sg6380
S'38-maltesers.png'
p7320
sS'block_loop.thisRepN'
p7321
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7322
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p7323
Nsg70
Vn
sS'block_loop.thisTrialN'
p7324
I0
sg39
F0.81626761492952937
sg34
g753
(S'\x07\xdf\x07\x02\x08%+\x0b\x89 '
tRp7325
sa(dp7326
S'trial_loop.thisTrialN'
p7327
I65
sg6371
g6426
sS'block_loop.thisIndex'
p7328
g6365
sg38
S'right'
p7329
sg59
g63
sS'trial_loop.thisN'
p7330
I65
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p7331
g60
(g99
S'A\x00\x00\x00'
tRp7332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7333
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7334
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7335
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p7336
Nsg70
Vn
sS'block_loop.thisTrialN'
p7337
I0
sg39
F0.70037036646317574
sg34
g753
(S'\x07\xdf\x07\x02\x08%1\t?0'
tRp7338
sa(dp7339
S'trial_loop.thisTrialN'
p7340
I66
sg6371
g6712
sS'block_loop.thisIndex'
p7341
g6365
sg38
S'left'
p7342
sg59
g63
sS'trial_loop.thisN'
p7343
I66
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p7344
g60
(g99
S'B\x00\x00\x00'
tRp7345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7346
I0
sg6380
g6720
sS'block_loop.thisRepN'
p7347
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7348
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p7349
Nsg70
Vn
sS'block_loop.thisTrialN'
p7350
I0
sg39
F0.74985538573673693
sg34
g753
(S'\x07\xdf\x07\x02\x08%7\x05\x0c\xf8'
tRp7351
sa(dp7352
S'trial_loop.thisTrialN'
p7353
I67
sg6371
g7082
sS'block_loop.thisIndex'
p7354
g6365
sg38
S'right'
p7355
sg59
g63
sS'trial_loop.thisN'
p7356
I67
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7357
g60
(g99
S'C\x00\x00\x00'
tRp7358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7359
I0
sg6380
g7089
sS'block_loop.thisRepN'
p7360
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7361
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7362
Nsg70
Vn
sS'block_loop.thisTrialN'
p7363
I0
sg39
F0.8166730195252967
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x01\x01\xd0\xd8'
tRp7364
sa(dp7365
S'trial_loop.thisTrialN'
p7366
I68
sg6371
g7201
sS'block_loop.thisIndex'
p7367
g6365
sg38
S'right'
p7368
sg59
g63
sS'trial_loop.thisN'
p7369
I68
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7370
g60
(g99
S'D\x00\x00\x00'
tRp7371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7372
I0
sg6380
g7208
sS'block_loop.thisRepN'
p7373
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7374
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7375
Nsg70
Vn
sS'block_loop.thisTrialN'
p7376
I0
sg39
F0.63326193612920179
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x06\x0e\xc9('
tRp7377
sa(dp7378
S'trial_loop.thisTrialN'
p7379
I69
sg6371
g6392
sS'block_loop.thisIndex'
p7380
g6365
sg38
S'right'
p7381
sg59
g63
sS'trial_loop.thisN'
p7382
I69
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7383
g60
(g99
S'E\x00\x00\x00'
tRp7384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7385
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7386
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7387
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7388
Nsg70
Vn
sS'block_loop.thisTrialN'
p7389
I0
sg39
F0.68311415731568559
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x0c\t\xa0\xd8'
tRp7390
sa(dp7391
S'trial_loop.thisTrialN'
p7392
I70
sg6371
g6940
sS'block_loop.thisIndex'
p7393
g6365
sg38
S'left'
p7394
sg59
g63
sS'trial_loop.thisN'
p7395
I70
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7396
g60
(g99
S'F\x00\x00\x00'
tRp7397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7398
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7399
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7400
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7401
Nsg70
Vn
sS'block_loop.thisTrialN'
p7402
I0
sg39
F0.78322286390721274
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x12\x05r\x88'
tRp7403
sa(dp7404
S'trial_loop.thisTrialN'
p7405
I71
sg6371
S'31-hobnobs.png'
p7406
sS'block_loop.thisIndex'
p7407
g6365
sg38
S'right'
p7408
sg59
g63
sS'trial_loop.thisN'
p7409
I71
sg33
S'31-hobnobs.png'
p7410
sg64
g65
sS'trial_loop.thisIndex'
p7411
g60
(g99
S'G\x00\x00\x00'
tRp7412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7413
I0
sg6380
S'25-kitkat.png'
p7414
sS'block_loop.thisRepN'
p7415
I2
sg6383
S'25-kitkat.png'
p7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7417
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.61664804523479688
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x18\x02q\x00'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
g6505
sS'block_loop.thisIndex'
p7423
g6365
sg38
S'left'
p7424
sg59
g63
sS'trial_loop.thisN'
p7425
I72
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p7426
g60
(g99
S'H\x00\x00\x00'
tRp7427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7428
I0
sg6380
g6513
sS'block_loop.thisRepN'
p7429
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7430
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p7431
Nsg70
Vn
sS'block_loop.thisTrialN'
p7432
I0
sg39
F0.63325537895161688
sg34
g753
(S'\x07\xdf\x07\x02\x08&\x1d\x0c\x8e\xd8'
tRp7433
sa(dp7434
S'trial_loop.thisTrialN'
p7435
I73
sg6371
g6539
sS'block_loop.thisIndex'
p7436
g6365
sg38
S'left'
p7437
sg59
g63
sS'trial_loop.thisN'
p7438
I73
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7439
g60
(g99
S'I\x00\x00\x00'
tRp7440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7441
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7442
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7443
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7444
Nsg70
Vn
sS'block_loop.thisTrialN'
p7445
I0
sg39
F0.5665888453295338
sg34
g753
(S'\x07\xdf\x07\x02\x08&#\x07f\x88'
tRp7446
sa(dp7447
S'trial_loop.thisTrialN'
p7448
I74
sg6371
g6940
sS'block_loop.thisIndex'
p7449
g6365
sg38
S'left'
p7450
sg59
g63
sS'trial_loop.thisN'
p7451
I74
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7452
g60
(g99
S'J\x00\x00\x00'
tRp7453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7454
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7455
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7456
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7457
Nsg70
Vn
sS'block_loop.thisTrialN'
p7458
I0
sg39
F0.66658066311265429
sg34
g753
(S'\x07\xdf\x07\x02\x08&)\x01O\xf0'
tRp7459
sa(dp7460
S'trial_loop.thisTrialN'
p7461
I75
sg6371
g7259
sS'block_loop.thisIndex'
p7462
g6365
sg38
S'left'
p7463
sg59
g63
sS'trial_loop.thisN'
p7464
I75
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7465
g60
(g99
S'K\x00\x00\x00'
tRp7466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7467
I0
sg6380
g7266
sS'block_loop.thisRepN'
p7468
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7469
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7470
Nsg70
Vn
sS'block_loop.thisTrialN'
p7471
I0
sg39
F0.81657409168110462
sg34
g753
(S'\x07\xdf\x07\x02\x08&.\x0b\xe6\xe0'
tRp7472
sa(dp7473
S'trial_loop.thisTrialN'
p7474
I76
sg6371
g7201
sS'block_loop.thisIndex'
p7475
g6365
sg38
S'right'
p7476
sg59
g63
sS'trial_loop.thisN'
p7477
I76
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p7478
g60
(g99
S'L\x00\x00\x00'
tRp7479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7480
I0
sg6380
g7208
sS'block_loop.thisRepN'
p7481
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7482
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p7483
Nsg70
Vn
sS'block_loop.thisTrialN'
p7484
I0
sg39
F0.766606977349511
sg34
g753
(S'\x07\xdf\x07\x02\x08&4\t\x9c\xf0'
tRp7485
sa(dp7486
S'trial_loop.thisTrialN'
p7487
I77
sg6371
g7082
sS'block_loop.thisIndex'
p7488
g6365
sg38
S'right'
p7489
sg59
g63
sS'trial_loop.thisN'
p7490
I77
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7491
g60
(g99
S'M\x00\x00\x00'
tRp7492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7493
I0
sg6380
g7089
sS'block_loop.thisRepN'
p7494
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7495
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7496
Nsg70
Vn
sS'block_loop.thisTrialN'
p7497
I0
sg39
F0.70001428324212611
sg34
g753
(S'\x07\xdf\x07\x02\x08&:\x06\x9bh'
tRp7498
sa(dp7499
S'trial_loop.thisTrialN'
p7500
I78
sg6371
g6940
sS'block_loop.thisIndex'
p7501
g6365
sg38
S'left'
p7502
sg59
g63
sS'trial_loop.thisN'
p7503
I78
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7504
g60
(g99
S'N\x00\x00\x00'
tRp7505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7506
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7507
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7508
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7509
Nsg70
Vn
sS'block_loop.thisTrialN'
p7510
I0
sg39
F0.66657724197739299
sg34
g753
(S"\x07\xdf\x07\x02\x08'\x04\x02\xa7\xb0"
tRp7511
sa(dp7512
S'trial_loop.thisTrialN'
p7513
I79
sg6371
g6409
sS'block_loop.thisIndex'
p7514
g6365
sg38
S'left'
p7515
sg59
g63
sS'trial_loop.thisN'
p7516
I79
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7517
g60
(g99
S'O\x00\x00\x00'
tRp7518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7519
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7520
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7521
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7522
Nsg70
Vn
sS'block_loop.thisTrialN'
p7523
I0
sg39
F0.6333175295858382
sg34
g753
(S"\x07\xdf\x07\x02\x08'\t\r>\xa0"
tRp7524
sa(dp7525
S'trial_loop.thisTrialN'
p7526
I80
sg6371
g6372
sS'block_loop.thisIndex'
p7527
g6365
sg38
S'left'
p7528
sg59
g63
sS'trial_loop.thisN'
p7529
I80
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7530
g60
(g99
S'P\x00\x00\x00'
tRp7531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7532
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7533
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7534
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7535
Nsg70
Vn
sS'block_loop.thisTrialN'
p7536
I0
sg39
F0.7165970988198751
sg34
g753
(S"\x07\xdf\x07\x02\x08'\x0f\x08\x1a8"
tRp7537
sa(dp7538
S'trial_loop.thisTrialN'
p7539
I81
sg6371
g7259
sS'block_loop.thisIndex'
p7540
g6365
sg38
S'left'
p7541
sg59
g63
sS'trial_loop.thisN'
p7542
I81
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7543
g60
(g99
S'Q\x00\x00\x00'
tRp7544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7545
I0
sg6380
g7266
sS'block_loop.thisRepN'
p7546
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7547
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7548
Nsg70
Vn
sS'block_loop.thisTrialN'
p7549
I0
sg39
F0.68324815180221776
sg34
g753
(S"\x07\xdf\x07\x02\x08'\x15\x04a\x18"
tRp7550
sa(dp7551
S'trial_loop.thisTrialN'
p7552
I82
sg6371
S'33-ambrosia_rice.png'
p7553
sS'block_loop.thisIndex'
p7554
g6365
sg38
S'left'
p7555
sg59
g63
sS'trial_loop.thisN'
p7556
I82
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p7557
g60
(g99
S'R\x00\x00\x00'
tRp7558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7559
I0
sg6380
S'23-crunchie_redo.png'
p7560
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7562
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.63324853668018477
sg34
g753
(S"\x07\xdf\x07\x02\x08'\x1a\x0f6\x88"
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6473
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'left'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7575
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.6164128421460191
sg34
g753
(S"\x07\xdf\x07\x02\x08' \n\x12 "
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g7082
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'right'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g7089
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7588
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.71652211892615014
sg34
g753
(S"\x07\xdf\x07\x02\x08'&\x04\xe9\xd0"
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
S'8-liquorice_catherine_wheels.png'
p7594
sS'block_loop.thisIndex'
p7595
g6365
sg38
S'right'
p7596
sg59
g63
sS'trial_loop.thisN'
p7597
I85
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p7598
g60
(g99
S'U\x00\x00\x00'
tRp7599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7600
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7601
sS'block_loop.thisRepN'
p7602
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7603
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p7604
Nsg70
Vn
sS'block_loop.thisTrialN'
p7605
I0
sg39
F1.0999239652555843
sg34
g753
(S"\x07\xdf\x07\x02\x08',\x00\xf6\x18"
tRp7606
sa(dp7607
S'trial_loop.thisTrialN'
p7608
I86
sg6371
g6785
sS'block_loop.thisIndex'
p7609
g6365
sg38
S'left'
p7610
sg59
g63
sS'trial_loop.thisN'
p7611
I86
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7612
g60
(g99
S'V\x00\x00\x00'
tRp7613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7614
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7615
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7616
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p7617
Nsg70
Vn
sS'block_loop.thisTrialN'
p7618
I0
sg39
F0.69992077219649218
sg34
g753
(S"\x07\xdf\x07\x02\x08'2\x02\xf5\xd0"
tRp7619
sa(dp7620
S'trial_loop.thisTrialN'
p7621
I87
sg6371
g7244
sS'block_loop.thisIndex'
p7622
g6365
sg38
S'right'
p7623
sg59
g63
sS'trial_loop.thisN'
p7624
I87
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7625
g60
(g99
S'W\x00\x00\x00'
tRp7626
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7627
I0
sg6380
g7251
sS'block_loop.thisRepN'
p7628
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7629
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7630
Nsg70
Vn
sS'block_loop.thisTrialN'
p7631
I0
sg39
F0.68324900708648784
sg34
g753
(S"\x07\xdf\x07\x02\x08'7\x0eDX"
tRp7632
sa(dp7633
S'trial_loop.thisTrialN'
p7634
I88
sg6371
g6618
sS'block_loop.thisIndex'
p7635
g6365
sg38
S'left'
p7636
sg59
g63
sS'trial_loop.thisN'
p7637
I88
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p7638
g60
(g99
S'X\x00\x00\x00'
tRp7639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7640
I0
sg6380
g6626
sS'block_loop.thisRepN'
p7641
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7642
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p7643
Nsg70
Vn
sS'block_loop.thisTrialN'
p7644
I0
sg39
F0.76649065873061772
sg34
g753
(S'\x07\xdf\x07\x02\x08(\x01\t\xd3\xa0'
tRp7645
sa(dp7646
S'trial_loop.thisTrialN'
p7647
I89
sg6371
g7553
sS'block_loop.thisIndex'
p7648
g6365
sg38
S'left'
p7649
sg59
g63
sS'trial_loop.thisN'
p7650
I89
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p7651
g60
(g99
S'Y\x00\x00\x00'
tRp7652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7653
I0
sg6380
g7560
sS'block_loop.thisRepN'
p7654
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7655
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p7656
Nsg70
Vn
sS'block_loop.thisTrialN'
p7657
I0
sg39
F0.73334355872793822
sg34
g753
(S'\x07\xdf\x07\x02\x08(\x07\x06\xd6\x00'
tRp7658
sa(dp7659
S'trial_loop.thisTrialN'
p7660
I90
sg6371
g6473
sS'block_loop.thisIndex'
p7661
g6365
sg38
S'left'
p7662
sg59
g63
sS'trial_loop.thisN'
p7663
I90
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7664
g60
(g99
S'Z\x00\x00\x00'
tRp7665
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7666
I0
sg6380
g6481
sS'block_loop.thisRepN'
p7667
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7668
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p7669
Nsg70
Vn
sS'block_loop.thisTrialN'
p7670
I0
sg39
F0.64958702614057984
sg34
g753
(S'\x07\xdf\x07\x02\x08(\r\x03[`'
tRp7671
sa(dp7672
S'trial_loop.thisTrialN'
p7673
I91
sg6371
g6490
sS'block_loop.thisIndex'
p7674
g6365
sg38
S'left'
p7675
sg59
g63
sS'trial_loop.thisN'
p7676
I91
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p7677
g60
(g99
S'[\x00\x00\x00'
tRp7678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7679
I0
sg6380
g6497
sS'block_loop.thisRepN'
p7680
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7681
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p7682
Nsg70
Vn
sS'block_loop.thisTrialN'
p7683
I0
sg39
F0.91658757665845769
sg34
g753
(S'\x07\xdf\x07\x02\x08(\x12\r\xb3\xd0'
tRp7684
sa(dp7685
S'trial_loop.thisTrialN'
p7686
I92
sg6371
S'25-kitkat.png'
p7687
sS'block_loop.thisIndex'
p7688
g6365
sg38
S'left'
p7689
sg59
g63
sS'trial_loop.thisN'
p7690
I92
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p7691
g60
(g99
S'\\\x00\x00\x00'
tRp7692
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7693
I0
sg6380
S'31-hobnobs.png'
p7694
sS'block_loop.thisRepN'
p7695
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vn
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.74985624102100701
sg34
g753
(S'\x07\xdf\x07\x02\x08(\x18\x0c\xd9\x10'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g6522
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'left'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.74988959709571645
sg34
g753
(S'\x07\xdf\x07\x02\x08(\x1e\t\x99\x08'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6556
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'right'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F0.69993502692886977
sg34
g753
(S'\x07\xdf\x07\x02\x08($\x06\\\xe8'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g7406
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'right'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g7414
sS'block_loop.thisRepN'
p7734
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.61702351489202556
sg34
g753
(S'\x07\xdf\x07\x02\x08(*\x02*\xb0'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g7037
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'right'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g7044
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.71656060670375155
sg34
g753
(S'\x07\xdf\x07\x02\x08(/\x0cH\x88'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6426
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'right'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.61658019270635123
sg34
g753
(S'\x07\xdf\x07\x02\x08(5\x08T\xd0'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g6826
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'right'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g6834
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.73311434262723196
sg34
g753
(S'\x07\xdf\x07\x02\x08(;\x02\xf1\xe8'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6648
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6533
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6655
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.8165572710968263
sg34
g753
(S'\x07\xdf\x07\x02\x08)\x04\x0e\xb9\x88'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6590
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'right'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6597
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.63325252800586895
sg34
g753
(S'\x07\xdf\x07\x02\x08)\n\x0co\x98'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g7259
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'left'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g7266
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.84999716330821684
sg34
g753
(S'\x07\xdf\x07\x02\x08)\x10\x07K0'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6695
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6703
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.89993206194503728
sg34
g753
(S'\x07\xdf\x07\x02\x08)\x16\x05zX'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6768
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'left'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6776
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F0.74985852177815104
sg34
g753
(S'\x07\xdf\x07\x02\x08)\x1c\x04\x9f\x98'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6826
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'right'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6834
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.79985585614304
sg34
g753
(S'\x07\xdf\x07\x02\x08)"\x01_\x90'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g6869
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g6877
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.58324407494910702
sg34
g753
(S"\x07\xdf\x07\x02\x08)'\r\xde\xc8"
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6426
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.66657866745026695
sg34
g753
(S'\x07\xdf\x07\x02\x08)-\x08\x02\xc8'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g7313
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g7320
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.58342710571560019
sg34
g753
(S'\x07\xdf\x07\x02\x08)3\x03\x95\xf8'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6940
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.7665300017933987
sg34
g753
(S'\x07\xdf\x07\x02\x08)8\x0c\xfc8'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6522
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'left'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.94989005324714526
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x02\t\xfa\xb0'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
S'40-sardines.png'
p7923
sS'block_loop.thisIndex'
p7924
g6365
sg38
S'right'
p7925
sg59
g63
sS'trial_loop.thisN'
p7926
I110
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p7927
g60
(g99
S'n\x00\x00\x00'
tRp7928
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7929
I0
sg6380
S'5-pineapple.png'
p7930
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7932
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.89989927605984121
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x08\t\x99\x08'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7052
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'left'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7059
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7945
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.66650653850319941
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x0e\x08\xba`'
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g7244
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'right'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g7251
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.6666151595663905
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x14\x04\x0f\x10'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g7052
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'left'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g7059
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.79997730646573473
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x19\x0e\xa6\x00'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7594
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7601
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.76654767766194709
sg34
g753
(S'\x07\xdf\x07\x02\x08*\x1f\x0c!x'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7052
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7059
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.8499250343611493
sg34
g753
(S'\x07\xdf\x07\x02\x08*%\t\x1f\xf0'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6983
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6990
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.8498725769450175
sg34
g753
(S'\x07\xdf\x07\x02\x08*+\x07O\x18'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6695
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'left'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6703
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.74990071578667994
sg34
g753
(S'\x07\xdf\x07\x02\x08*1\x05~@'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6539
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.94989604023521679
sg34
g753
(S'\x07\xdf\x07\x02\x08*7\x02B '
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7687
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'left'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7694
sS'block_loop.thisRepN'
p8048
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.63334318810484547
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x01\x02\x1b\x10'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6456
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'right'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6464
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.66653960948315216
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x06\x0c8\xe8'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7067
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'left'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7074
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.78343754018078471
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x0c\x07\x8d\x98'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6712
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6720
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.58325490854622331
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x12\x04\xca\x90'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6912
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6919
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.7832385441124643
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x17\x0e0\xd0'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6768
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6772
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6776
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.69990509198942163
sg34
g753
(S'\x07\xdf\x07\x02\x08+\x1d\x0bm\xc8'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g7687
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g7694
sS'block_loop.thisRepN'
p8126
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.61704489699150145
sg34
g753
(S'\x07\xdf\x07\x02\x08+#\x07;\x90'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6695
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6699
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6703
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.84989025281356589
sg34
g753
(S'\x07\xdf\x07\x02\x08+)\x02\x17('
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6372
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6384
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.76658188902092661
sg34
g753
(S'\x07\xdf\x07\x02\x08+/\x00FP'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7067
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7074
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.79990688808720734
sg34
g753
(S'\x07\xdf\x07\x02\x08+4\x0c\x87\x08'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7594
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7601
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.74988703124381573
sg34
g753
(S'\x07\xdf\x07\x02\x08+:\t\xc4\x00'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g7923
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'right'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g7930
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.89989442944988696
sg34
g753
(S'\x07\xdf\x07\x02\x08,\x04\x06\x87\xe0'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6648
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6533
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6655
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.76695194187959714
sg34
g753
(S'\x07\xdf\x07\x02\x08,\n\x05\xa98'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6573
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.74993236129375873
sg34
g753
(S'\x07\xdf\x07\x02\x08,\x10\x02m\x18'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6912
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6919
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.68321707648556185
sg34
g753
(S'\x07\xdf\x07\x02\x08,\x15\x0eoP'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6695
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6703
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.76657077032905363
sg34
g753
(S'\x07\xdf\x07\x02\x08,\x1b\n\x02\x80'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7313
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7320
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.7163273992782706
sg34
g753
(S'\x07\xdf\x07\x02\x08,!\x07\x00\xf8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7037
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7044
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.8499951676458295
sg34
g753
(S"\x07\xdf\x07\x02\x08,'\x03K\xc0"
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6618
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.90003041959971597
sg34
g753
(S'\x07\xdf\x07\x02\x08,-\x01z\xe8'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7553
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6880
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.69969212628438981
sg34
g753
(S'\x07\xdf\x07\x02\x08,3\x00a\xa8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7259
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7266
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.78336683670659113
sg34
g753
(S'\x07\xdf\x07\x02\x08,8\x0b\xb00'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6680
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6687
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.74996229623229738
sg34
g753
(S'\x07\xdf\x07\x02\x08-\x02\x08\xed('
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6409
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.83325612019780237
sg34
g753
(S'\x07\xdf\x07\x02\x08-\x08\x05r\x88'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7082
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7089
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.74986279819859192
sg34
g753
(S'\x07\xdf\x07\x02\x08-\x0e\x03c0'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6590
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6597
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6509
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6386
g6516
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.61682879524414602
sg34
g753
(S"\x07\xdf\x07\x02\x08-\x14\x00'\x10"
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g7594
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g7601
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.83319425465833774
sg34
g753
(S'\x07\xdf\x07\x02\x08-\x19\n\x06h'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7037
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7044
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.61658019270635123
sg34
g753
(S'\x07\xdf\x07\x02\x08-\x1f\x07\xfa\xf8'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6983
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6990
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.88312259611757327
sg34
g753
(S'\x07\xdf\x07\x02\x08-%\x02\xd2\xa8'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6785
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.6165670783520909
sg34
g753
(S'\x07\xdf\x07\x02\x08-+\x01~\xd0'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6618
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'left'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.71657315086849849
sg34
g753
(S'\x07\xdf\x07\x02\x08-0\x0b^('
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6539
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.65008023989048525
sg34
g753
(S'\x07\xdf\x07\x02\x08-6\x07\xa5\x08'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6983
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'left'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6990
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.64980911487509729
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x00\x02\xbf '
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6768
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6776
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.61657848213872057
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x05\r\x17\x90'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g7313
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6484
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g7320
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.78298366949366027
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x0b\x07\xb4\xa8'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7553
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7560
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.69989197763607081
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x11\x04\xf1\xa0'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6768
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6776
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.88324461662887188
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x17\x00\xfd\xe8'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7923
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7930
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.89999991447166394
sg34
g753
(S'\x07\xdf\x07\x02\x08.\x1c\x0e\xecP'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6869
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6877
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.71656374274516565
sg34
g753
(S'\x07\xdf\x07\x02\x08."\r\xd3\x10'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6556
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.71657657200466929
sg34
g753
(S'\x07\xdf\x07\x02\x08.(\n\x19\xf0'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g7923
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g7930
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.78320005633486289
sg34
g753
(S'\x07\xdf\x07\x02\x08..\x06`\xd0'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6522
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6533
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.83327522154013423
sg34
g753
(S'\x07\xdf\x07\x02\x08.4\x03c0'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6712
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6720
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.6665872202902392
sg34
g753
(S'\x07\xdf\x07\x02\x08.:\x01\x92X'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6826
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6834
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.74992352335902979
sg34
g753
(S'\x07\xdf\x07\x02\x08/\x03\x0c)H'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6490
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.64988323948455218
sg34
g753
(S'\x07\xdf\x07\x02\x08/\t\x08\xe9@'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7216
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7223
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.56660737648235227
sg34
g753
(S'\x07\xdf\x07\x02\x08/\x0f\x04\x03X'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g7052
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g7059
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.66670125815107895
sg34
g753
(S'\x07\xdf\x07\x02\x08/\x14\r+\x18'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7923
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'right'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6705
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7930
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6705
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6386
g6699
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.0665533510446039
sg34
g753
(S'\x07\xdf\x07\x02\x08/\x1a\x08\x7f\xc8'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g7067
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7074
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.74993891847134364
sg34
g753
(S'\x07\xdf\x07\x02\x08/ \n\x06h'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7216
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7223
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.76661923641950125
sg34
g753
(S'\x07\xdf\x07\x02\x08/&\x06\xc6`'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7244
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7251
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.71651413627569127
sg34
g753
(S'\x07\xdf\x07\x02\x08/,\x03\xc8\xc0'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7406
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7414
sS'block_loop.thisRepN'
p8698
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.63329757296105527
sg34
g753
(S'\x07\xdf\x07\x02\x08/1\x0f\x13`'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6372
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6384
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6386
g6376
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.70006617046965403
sg34
g753
(S'\x07\xdf\x07\x02\x08/7\n-x'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g7216
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g7223
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.75002701271841943
sg34
g753
(S'\x07\xdf\x07\x02\x080\x01\x05\xfb@'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7687
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7694
sS'block_loop.thisRepN'
p8737
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.84989167828643986
sg34
g753
(S'\x07\xdf\x07\x02\x080\x07\x02\xbf '
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6556
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.050117074119953
sg34
g753
(S'\x07\xdf\x07\x02\x080\r\x00\xeeH'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6392
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.73332189153461513
sg34
g753
(S'\x07\xdf\x07\x02\x080\x13\x026h'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6663
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6671
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6667
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6386
g6674
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.86659138267168601
sg34
g753
(S'\x07\xdf\x07\x02\x080\x18\r\xfe\x08'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g7406
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g7414
sS'block_loop.thisRepN'
p8789
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.5332279243366429
sg34
g753
(S'\x07\xdf\x07\x02\x080\x1e\x0ck\xb0'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6490
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'left'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6497
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.78320860917392565
sg34
g753
(S'\x07\xdf\x07\x02\x080$\x05\xd8\x18'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g7687
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g7410
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g7694
sS'block_loop.thisRepN'
p8815
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.68325328350601922
sg34
g753
(S'\x07\xdf\x07\x02\x080*\x03\x15\x10'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6426
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6436
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6436
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6386
g6430
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F1.099978418335013
sg34
g753
(S'\x07\xdf\x07\x02\x080/\r\xe6\x98'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6556
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6560
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6386
g6567
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.79992570433296351
sg34
g753
(S'\x07\xdf\x07\x02\x0806\x00\xa4\x10'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7216
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6716
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7223
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6716
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6386
g6723
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.58327343969813228
sg34
g753
(S'\x07\xdf\x07\x02\x080;\ra\xc8'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7201
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'right'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7208
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6543
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6386
g6550
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.56662134612088266
sg34
g753
(S'\x07\xdf\x07\x02\x081\x05\x07\x85\xc8'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6648
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'right'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6655
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.78323683354483364
sg34
g753
(S'\x07\xdf\x07\x02\x081\x0b\x01kH'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7313
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6477
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7320
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6477
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6386
g6484
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.59959282781710499
sg34
g753
(S'\x07\xdf\x07\x02\x081\x10\r\xea\x80'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7067
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7074
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F1.3332574031237527
sg34
g753
(S'\x07\xdf\x07\x02\x081\x16\x08I\x18'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g7594
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6778
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g7601
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6778
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6386
g6772
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.78322314900196943
sg34
g753
(S'\x07\xdf\x07\x02\x081\x1c\r\xda\xe0'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6680
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'left'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6687
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.88314084217472555
sg34
g753
(S'\x07\xdf\x07\x02\x081"\x0b\x17\xd8'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6869
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6880
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6877
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.63322259306733031
sg34
g753
(S'\x07\xdf\x07\x02\x081(\t\xc0\x18'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g7406
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'right'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g7416
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g7414
sS'block_loop.thisRepN'
p8958
I2
sg6383
g7416
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6386
g7410
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.69992732937316759
sg34
g753
(S'\x07\xdf\x07\x02\x081.\x04\xda0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6573
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6584
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.69991763615507807
sg34
g753
(S'\x07\xdf\x07\x02\x0814\x00\xa7\xf8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6983
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6830
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6990
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6830
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6386
g6837
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F1.0498328347503048
sg34
g753
(S'\x07\xdf\x07\x02\x0819\x0b\xf6\x80'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6648
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6533
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6655
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6526
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6386
g6533
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.79994081434961117
sg34
g753
(S'\x07\xdf\x07\x02\x082\x03\r\x00 '
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7244
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6951
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7251
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6944
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6386
g6951
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.73324577126186341
sg34
g753
(S'\x07\xdf\x07\x02\x082\t\n{\x98'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7553
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6873
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7560
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6873
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6386
g6880
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.85005874375292478
sg34
g753
(S'\x07\xdf\x07\x02\x082\x0f\x07\x00\xf8'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6785
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6792
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6386
g6403
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.71663758226077334
sg34
g753
(S'\x07\xdf\x07\x02\x082\x15\x050 '
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6573
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'right'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6581
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6577
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6386
g6584
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.91663946388598561
sg34
g753
(S'\x07\xdf\x07\x02\x082\x1b\x01w\x00'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6912
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6919
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6386
g6629
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.88324946323882614
sg34
g753
(S'\x07\xdf\x07\x02\x082!\x00\x9c@'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7037
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7044
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6386
g6420
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.79992627452247689
sg34
g753
(S'\x07\xdf\x07\x02\x082&\x0e\x86\xc0'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6680
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6460
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6687
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6460
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6386
g6467
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.68319198815606796
sg34
g753
(S'\x07\xdf\x07\x02\x082,\x0c\x028'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I27
sg56
g57
sg58
Vn
sg42
I573
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I27
sg55
g11
sg56
g57
sg45
F0.25
sg42
I573
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I01
sg48
I25
sg47
g481
sg51
F30.48
sg46
F0.97999999999999932
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I84889936
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xd7\xa3p?q=\n?=\nW?\x8f\xc2\xf5>\xecQ8?\x00\x00\x80?{\x14.?\x8f\xc2u>\xb8\x1e\x05?\x00\x00\x00?\\\x8fB?H\xe1z?H\xe1z?=\nW?\x85\xebQ?\xcd\xccL?\xcd\xccL?\x8f\xc2\xf5>q=\x8a?\xaeG\xe1>\x00\x00\x00?q=\n?=\n\xd7>\x00\x00\x80?\xb8\x1e\x85>=\n\xd7>\x8f\xc2u>33\xb3?\x00\x00\xc0?\x00\x00\x00\x00\x85\xebQ?ff\xa6?\x9a\x99\x99>\x8f\xc2u?\x8f\xc2\xf5>\x00\x00\x00@\x14\xaeG?\xf6(\\?\xc3\xf5(?\xcd\xccL?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'D\x8b\xa8@\xc9v6@ff\x1eA\xcb\xa1\x81@\x87\x16A@\xaa\xf1\x86@\xee|w@\xdb\xf9.@b\x10 @\x0e-"@\xc9v6@\x87\x16\xa9@\xfc\xa9)@\x0e-\x02@\x98n\xb6@\xa8\xc6{@u\x93\x08@\x91\xed\xec?b\x10 @b\x100@\xc9vF@\x96C\x13@\x10X\xa5@u\x93\x18@\xdb\xf9>@!\xb0\n@w\xbe\xeb@\x0e-"@b\x10p@b\x100@\x87\x16\xd9@\xdd$\x8a@\xa8\xc6\x0b@\x87\x16q@\xbaI\x14@\xdb\xf9n@/\xdd\x1c@+\x87\xc6?\xdb\xf9>@+\x87\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xb8A\x00\x00\xc8A\x00\x00\x00\x00\x00\x00PA\x00\x00\x08B\x00\x00\x00A\x00\x00\x00B\x00\x00\x80A\x00\x00@A\x00\x00\xe0@\x00\x00\x90A\x00\x00\xa0@\x00\x00\x88A\x00\x00\x80@\x00\x00\x80?\x00\x00\x10B\x00\x00\x04B\x00\x00\xa0A\x00\x00\xe8A\x00\x00 A\x00\x00`A\x00\x00\xe0A\x00\x00\x00@\x00\x00\xf8A\x00\x00\xc0@\x00\x00\x98A\x00\x00\x18B\x00\x00\xd8A\x00\x00\x10A\x00\x00\x14B\x00\x00\x1cB\x00\x00\xf0A\x00\x00\x0cB\x00\x00\xa8A\x00\x00\xb0A\x00\x00pA\x00\x00@@\x00\x00\xc0A\x00\x00\xd0A\x00\x000A'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x9a\x99\xd9?33\xf3?\x9a\x99\xd9?\x9a\x99\x99?\x00\x00\x00@33\xf3?33\xf3?\x9a\x99\xd9?ff\xa6?\xcd\xcc\x8c?33\xf3?\xcd\xcc\x8c?\x9a\x99\xd9?\x9a\x99\x99?33\xf3?ff\xa6?ff\xa6?\xcd\xcc\x8c?ff\xe6?\x9a\x99\xd9?33\xf3?\x9a\x99\x99?\x00\x00\xc0?\x00\x00\x80?ff\xe6?\x9a\x99\x99?\x9a\x99\xd9?33\xb3?\x9a\x99\xd9?\x00\x00\xc0?33\xf3?ff\xa6?ff\xa6?\x00\x00\xc0?\x9a\x99\xd9?\x00\x00\x00@33\xb3?\x00\x00\x80?ff\xe6?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x02\x00\x00\x00\x0e\x00\x00\x00\x16\x00\x00\x00$\x00\x00\x00\r\x00\x00\x00\x0b\x00\x00\x00\x18\x00\x00\x00\t\x00\x00\x00\x05\x00\x00\x00\x1c\x00\x00\x00\x13\x00\x00\x00\'\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\x14\x00\x00\x00#\x00\x00\x00\x07\x00\x00\x00\x0c\x00\x00\x00\n\x00\x00\x00\x19\x00\x00\x00\x11\x00\x00\x00!\x00\x00\x00"\x00\x00\x00\x00\x00\x00\x00%\x00\x00\x00\x01\x00\x00\x00&\x00\x00\x00\x1b\x00\x00\x00\x15\x00\x00\x00\x12\x00\x00\x00\x1f\x00\x00\x00\x17\x00\x00\x00\x06\x00\x00\x00\x10\x00\x00\x00\x04\x00\x00\x00 \x00\x00\x00\x0f\x00\x00\x00\x1d\x00\x00\x00\x1a\x00\x00\x00\x1e\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g264
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g278
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g103
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g194
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g341
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g159
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g327
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g215
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g187
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g152
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g229
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g138
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g222
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g131
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g110
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g355
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g334
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g243
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g306
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g173
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g201
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g299
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g117
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g320
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g145
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g236
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g369
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g292
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g166
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g362
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g376
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g313
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g348
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g250
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g257
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g208
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g124
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g271
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g285
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g180
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I84889936
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\xcd\xcc\x0c@\x00\x00\x80@ff\x86@\x9a\x999@33S@\x00\x00\xc0@\x00\x00\xa0@ff\x86@\xcd\xcc\xac@\x00\x00\xc0?33\x93@\x00\x00@@ff&@\xcd\xccl@\x00\x00@@ff\xb6@33\x93@\xcd\xcc\x9c@ff\xa6?\x9a\x99y@33s@\x00\x00\xc0@33\xb3@33s@33\xa3@ff\x86@ff\xb6@\x9a\x999@33s@fff@ff\x86@\x9a\x99y@\x9a\x99\xa9@ff\xb6@ff\x86@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\xac@ff\x96@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\xc8E\xa4?\xfb2s@\xab\x02\xc0?\x08eVAB\xaa\x92@\x16#\x82?SB\xdaA$\x12\x91?C\xcf\xac?T\xf0\x8e?\xbd\xff\xaf@\x86\x9dY?n\'\x82?$\xa9\xe2@\xe60\xd3?\xa3\xee\xae?\xb5\x9b\x99?>\xf4\x8e?\xfc!\x82?\x8d\x9a\x99?>\xa3\x8a?\xc8\x9b\x99?\xbb\xb0j?\xba\xbe{?Z\xe9.?\x95yw?\x05G\x84?r\xf5n?\xc7\x02\xc0?"\x9dY?\xd6\xbc{?\xbbhf?\xab\xff\x8f@\x85\x13Q?\r\xe0]?\x8dmf?\x1e\x18Q?\xc4YU?\xff\x12Q?\xe5FD?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'333@33S@\x9a\x99\x89@\xcd\xccL@\xcd\xccL@33S@\x9a\x99Y@\x9a\x99\x89@\x9a\x999@33s@\xcd\xccl@\x9a\x999@\x00\x00@@\xcd\xccl@\x9a\x99\x89@33\x83@33S@33s@ffF@\x9a\x99y@\x9a\x99y@ff\x86@ff\x86@ff\x86@33s@\x9a\x99Y@ff\x86@\xcd\xccL@ff\x86@\xcd\xcc,@33\x83@\x9a\x999@\x9a\x999@\x9a\x99y@\x9a\x99\x89@33S@\x9a\x999@ffF@\x00\x00@@\x9a\x99y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xa0\x83\xad\x0c\x00\xdb\xaf\x0c\x00!\xc1\x04\x80!\xc1\x04`\n\xae\x0c\xa0\t\xae\x0c`\x0b\xae\x0c\x00\x84\xad\x0c\x00\x0b\xae\x0c\xe0\x05\xae\x0c\xa0\n\xae\x0c\xc0\x81\xad\x0c\xc0$\xc3\x04@H\xc2\x04\xa0\xc4\xc3\x04\xe0\xc8\n\r`!\xc1\x04@ \xc1\x04  \xc1\x04\x80\xd3\xaf\x0c`\xd6\xaf\x0c\xa0\xd5\xaf\x0c@\xd4\xaf\x0c\xe0\xd5\xaf\x0c\xe0\xd7\xaf\x0c\xc0\xd6\xaf\x0c\x00\xdc\xaf\x0c\x00\xdd\xaf\x0c`\xdd\xaf\x0c\xc0 \xc1\x04\x80\xd7\xaf\x0c@\xdc\xaf\x0c\xe0\xdb\xaf\x0c B\xc2\x04\xe0;\n\r\x80:\n\r\xc09\n\r\xa0:\n\r\xc0;\n\r\xc0:\n\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'P\x8d\xf7?/\xdd\x0c@B`\xb5?\x96C\x03@\xee|\x87@j\xbc\x91AP\x8d\x97?B`\x95?\x83\xc0\xaa?\x06\x81U?\xdb\xf9\xae?\xb6\xf3]?^\xba\xd9?u\x93\xa8?\xbcts?\xbcts?P\x8dw?9\xb4H?\x83\xc0\x8a?\x91\xed\x8c?\xd3Mb?\xf0\xa7f?m\xe7{?V\x0eM?\x83\xc0\xaa?+\x87\x86?\xe9&\xd1?\x1dZ\x84?\x91\xed\x8c?B`\x95?\x89A@?\xa0\x1ao?\xe9&\x91?\xd3Mb?\x06\x81U?+\x87\xe6?\xc5 \x80?+\x87\xa6?\x91\xed\xac?\xb6\xf3\xfd?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I84889936
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'\x903I\r\xb83I\r\xe03I\r\x903I\r\x80F.\r\x10G.\r04I\r\xb0F.\r\x80F.\r\x10G.\r@G.\r\xe03I\r04I\r\xb83I\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'XT\xf7\x04\xc0[\xf7\x04\xa0]\xf7\x04\x90^\xf7\x04pT\xf7\x04\xe0\\\xf7\x04`R\xf7\x04\x90\x9b\x17\x05\xf0\x95\x17\x05P\x96\x17\x05h\x9f\x17\x05\x08\x9c\x17\x05(\x9d\x17\x05x\x95\x17\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g744
sg83
g778
sg84
g749
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g787
sg83
g831
sg84
g792
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g798
sg83
g840
sg84
g803
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g820
sg83
g849
sg84
g825
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g767
sg83
g858
sg84
g772
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g809
sg83
g867
sg84
g814
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g756
sg83
g876
sg84
g761
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I84889936
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I84889936
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'p\xdfJ\rP6K\rp\xdfJ\r\xc8RK\r\xf0RK\r\x18SK\r`\x11\t\r\x806K\r\xd0TK\r `K\r@SK\rhSK\r\xd0TK\r@\x15\t\r`\x11\t\r\xd07K\r\x18SK\rp\xdfJ\r@\x14\t\r`\x11\t\r@\x15\t\r `K\r\xb06K\r\xe06K\r\xa8\xdfJ\r\x00\x13\t\r\xa8\xdfJ\r\xe06K\rhSK\rp\xdfJ\r@\x14\t\r`\x11\t\r\xb8SK\r@7K\r \x16\t\rhSK\r\xc8`K\r\x18SK\r\x90SK\r\x00\x13\t\r@\x14\t\r\x806K\r@SK\rX`K\r\xe06K\r\xc8RK\r\x00\x13\t\r@7K\rhSK\r\x00aK\r`8K\rhSK\r\xa8\xdfJ\r\x008K\r@7K\r\xb06K\r\xc8RK\r\xe06K\r\xb8SK\rp\xdfJ\r@\x15\t\r\xa8TK\r\x107K\r@7K\rXTK\r@\x15\t\r@SK\rP6K\r \x16\t\r\x80TK\r\xd0TK\r`\x11\t\r\xb8SK\r \x16\t\r@SK\r `K\rX`K\r0TK\r\x90SK\r\xc0\x13\t\r\xa8\xdfJ\r\xf0RK\r@\x15\t\r\x08TK\r@\x15\t\rhSK\r `K\r@\x14\t\rX`K\r0TK\r\xa07K\r\x18SK\r\xc8RK\r `K\r\xa8\xdfJ\r `K\r\xe06K\r\x008K\r\x90SK\r\x08TK\rX`K\r\x18SK\r \x16\t\r\xb8SK\rhSK\r\xc0\x13\t\r\x806K\r@SK\r\x90SK\r\xa8\xdfJ\rP6K\r\xc8RK\r\x00\x13\t\r@\x14\t\rX`K\r\x107K\r\xb8SK\r \x16\t\r\x90SK\r\xb8SK\r\xb06K\r\xf8TK\rP6K\r\x00\x13\t\r\xf0RK\r\xb06K\r\x18SK\r\xf0RK\r`\x11\t\r\x18SK\r\xb06K\r\xf0RK\r`\x11\t\r\x90`K\r\xb8SK\r\xf0RK\rP6K\r\x90SK\r\xb06K\r\xc8`K\r\x806K\rp7K\rX`K\r\x90`K\r\xf0RK\r\xa8TK\r `K\r\xf8TK\r08K\rP6K\r\xc8RK\r \x16\t\r`\x11\t\r \x16\t\r\xe06K\r UK\rX`K\r\x00\x13\t\rhSK\r \x16\t\r\x806K\r\x90SK\r\x00\x13\t\rp\xdfJ\r\xa8\xdfJ\r\x18SK\r@\x14\t\r\xe06K\r@7K\r\x18SK\r\x00\x13\t\r@\x14\t\rhSK\r `K\r\x107K\r `K\r\xf8TK\r@\x15\t\r UK\r\xb8SK\rXTK\r\xe06K\r@\x14\t\r`8K\rp\xdfJ\r\xf0RK\r\x00aK\rp\xdfJ\r\xe06K\r@SK\r\x00aK\r\xb06K\r\xc8RK\r@SK\r\xc8RK\r\xd07K\r@\x15\t\r\x90SK\rP6K\r\xb06K\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\x80\xe7.\r`\xe9.\r\xc0\xe9.\r\xa0\xea.\r`\xea.\r \xe8.\r\xc0\xea.\r\xe0\xea.\r\x80\xea.\r`\xf0\x07\r`\xe7.\r`\xe8.\r\xa0\xe7.\r@\xea.\r \xea.\r\x80\xeb.\r \xe9.\r\xe0\xe7.\r\xe0\xe8.\r\xa0\xeb.\r\x00\xeb.\r\xc0\xe7.\r@\xeb.\r`\xec.\r\x00\xec.\r\xa0\xec.\r\xe0\xe9.\r \xeb.\r \xec.\r\xa0\xe8.\r\xa0\xd6\xaf\x0c\xe0\xec.\r\xe0n\t\r`e\t\r\xc0o\t\r\xa0o\t\r Q\xb0\x0c@%\xc1\x04\x00\xcc\n\r\x00\xcb\n\r\xc0\xcb\n\r@\xce\n\r@\xcc\n\r\xc0\xcc\n\r\x00\xcd\n\r@\xcb\n\r\x80\xcb\n\r`\xc7\n\r\xa0\xc6\n\r\xe0\xc6\n\r\x00\xc6\n\r\x00\xcf\n\r\xc0\xca\n\r\xc0\xc5\n\r`\xc5\n\r\x80\xcc\n\r\x80\xc9\n\r\xc0\xc9\n\r\x80\xce\n\r@\xc8\n\r\x00\xc8\n\r\xc0\xc7\n\r\xa0!\x0b\r\x80\xcd\n\r\x80\xc6\n\r\xc0\xc8\n\r\x00\xce\n\r@\xcd\n\r@\xc6\n\r@\xc9\n\r\xe0\xc0\n\r\x00\xca\n\r\x80\xc0\n\r\xc0\xc0\n\r\x80\xca\n\r\x80\xc8\n\r`\xc0\n\r \xc0\n\r \xc1\n\r\x00\xc9\n\r ^\xb0\x0c\x00\xc1\n\r\xa0\xc0\n\r \xc7\n\r@\xc0\n\r\xc0\xce\n\r@\xfb\x07\r`V\x0f\x05 3\n\r\xc0>\n\r`>\n\r\x002\n\r`?\n\r@3\n\r >\n\r ?\n\r\xa02\n\r@;\n\r\x00?\n\r\xe0>\n\r\x801\n\r\xa01\n\r\xa0?\n\r@1\n\r\xc02\n\r\xe0?\n\r\x001\n\r\xc01\n\r`1\n\r\x003\n\r\xa03\n\r`3\n\r\x004\n\r\x802\n\r 4\n\r@?\n\r`0\n\r 2\n\r@\xcf\n\r`m\t\r\xa0>\n\r 1\n\r@2\n\r\xc03\n\r\x803\n\r\xe02\n\r`2\n\r\x80>\n\r\x80?\n\r@>\n\r\x80<\n\r\x00K\xc2\x04\xc0?\n\r\x00L\xc2\x04@\xed.\r\x80\xec.\r\x80\xe6.\r\xc0\xed.\r\x00\xe8.\r`\xed.\r\xa0\xe6.\r`\xeb.\r\xe0\xed.\r`\xee.\r@\xee.\r@\xec.\r\x00\xea.\r\x80\xee.\r\xa0\xee.\r\xe0\xeb.\r\xe0\xee.\r\xc0\xee.\r\xc0\xec.\r\xa0\xef.\r\x80\xed.\r`\xef.\r@\xe8.\r\xa0\xe9.\r \xef.\r\x00\xee.\r\x80\xef.\r\x00\xef.\r\x00\xed.\r \xed.\r@\xef.\r\xa0\xed.\r\xc0\xeb.\r\xc0\xef.\r\xe03\n\r\xc0\xcd\n\r\x80 0\r@"0\r` 0\r\x80!0\r !0\r@ 0\r\xe0!0\r@!0\r\xc0!0\r`"0\r\xc0"0\r\xe0"0\r\xa0"0\r\xe01\n\r\x00!0\r\xe0 0\r`#0\r\x00$0\r #0\r  0\r $0\r`!0\r`$0\r\xe0#0\r\xe0$0\r\xa0$0\r\xc0 0\r\xa0#0\r \x1d8\x05\xe0\x188\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'E-#@\xd3\x93\x99?\xa1\x1e\x8a@\x88\xba\x9b?\x0ew\xb7?\x1f\xeb.@1\xb7\xdb?\xb9\xf9\x7f?\xdb\xe9~@J\xc4\xcc?\x87N\xf5?\x91\xc8\xcc?\xb0e\x86?\xc4\xa7\x8a?\xcc2\x03@6\xda\xdd?>P\x95?\x10\x0bA@\xb5r\xf7?Vhf?\xa6\x1e\x82?\x9a?\x84?\x99\xb6\xfb?%\x96\xd9?\xb7T\x95?\xaf\t\xf1?\xb4\xd8\x9d?\xd8+s?Z(s?\xe5\x83\x88?\xf6\xb2\xd1?K\xeb\x8e?\'\x18\xe2?\xa6D\x84?H\x0f\x11@+R\xb5?\xd1\xdb\r@\x1f\xb1{?q/c@\x95v\xd7?\xb4\x1eR@\x7fA\xc4?\x9c\xfb\xff?Q\xda\xfd?\xd2P\x84?\xc3Q\x95?\x10\x85\x88?\x1c\xfa\x9f?\xf4\xe7n?\n\x00\x80?"$\xb3?0>D?<\xee\x0e@d\xcf\x8c?\x03TE@\x16\xb8\xbb?\xfd\xa3j?p?D?\xcd\xfaP?5\xa6\x8a?6\xa8j?X\x96\x99?>\x88Y?\xc8\x0c\x91?0\x8aH?4\xfa??7\x83\x88?2\x08Q?\xaa\xb6\xfb?e\xceL?\x88`\x86?\xa8OU?^\x19s?3vw@W\xb5;?s\xea\x8e?G\xb4;?\x0e\xc7L?\xab\x0e\x01@\x8d!b?\x84\xd5\xdd?\x1a\xa7\x8a?\x84\x08Q?4<\x84?\xa4%b?D\xda\x9d?y/\x93?\xa2\xd4\x9d?\xb6\xa6\x8a?A\x89H?\x19\x80H?\xff\xe8.?\'\x05Q?g\nQ?M\xe7n?\r\xcfL?\xfd33?+\xa7\xaa?q\xe6n?\xc5\x14b?\xcf`f??\x84H?V\xe8\xee?6\xec??\xb8\x8dY?\xbbhw?FQ\xd5?.,s?\xae^f?\x85\x00@?>f\xa6?\xb8\xe8n?G\x83\x88?`\xb4{?\xc2\x08Q?B\xdf\r@x\xa8;??\x95\xb9?R\xe7n?\x88P&?\x9fJ\xa4?n<D?\x1f\xb9K@\xe6C\x04@{,s?\x16#\x82?\xd4+s?\xf6\x96*?\xb8\x9eY?P\x02@?\xdc\x86Y?\x04h&?Q\xd8]?\x98\x92Y?h\xe9??J\xd7]?\x1c\x99\x99?\xd6\xdc]?\x8a]f?\x80_f?\x1f\xba\xc3@\xf5\x93Y?\xcd\x0fQ?\x95\xa4*?\x92\xd5L?)\xe8n?\xbcIU?7?D?m\xc9;?\x94pw?9\xc7L?\x06\x1d\x82?\x9f\xb5;?\x06`f?\xb8G3?\x98\xc5L?\x07\x8fY?8\x0c\x91?\r\x83H?=\x92Y?\xdd\xec\xae?ROU?V\x1cb?D6D?\xa7\xa5\x8a?\xfe:D?\x1dq\xa6?w\xfa??#\xab\x8a?L\xfe??\xd4\xd9\xdd?c\x15@?\r\x83H?\xad\xa0*?\xbeLU?\x15\xfd??\xc2\xe9\x8e?\xa83s?(\x10Q?\xa6\xd4.?\x8c`f?>-3?\xa7BD?n\xdf??l\xc0L?3PU?\xde\xb9{?Aiw?\xa1\xeb.?\xd8\x84H?T\xe8n?\x8d=D?\x05SU?\xd6\xb6;?\xf6\x91Y?\xf4 b??\x9bY?Brw?\x84\x89Y?d\xb2;?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xb0\x93\x17\x05\x80\x90\x17\x05\xb8\x01\xf6\x04P\x03\xf6\x04\x88\x01\xf6\x04\x08\x0f\xf6\x04X\x01\xf6\x04\x80\x00\xf6\x04`\x0e\xf6\x04\x90\x0b\xf6\x04\xe8\x04\xf6\x04\xc8\x06\xf6\x04\xa8\x02\xf6\x04\x98\x0c\xf6\x04X\n\xf6\x04 \t\xf6\x04\xd0\x01\xf6\x04`\x02\xf6\x04\x90\x02\xf6\x04(\n\xf6\x04 \x0c\xf6\x04\xc8\x0c\xf6\x04h\t\xf6\x04\xd8\x02\xf6\x04p\x07\xf6\x04\xb0\x0c\xf6\x04\xa8\x0e\xf6\x04\xd8\x0e\xf6\x04\x80\x06\xf6\x04\xe8\x01\xf6\x04p\r\xf6\x04\xa0\n\xf6\x04@\x07\xf6\x04\x00\x02\xf6\x04\xd0\n\xf6\x04\xc8\x03\xf6\x04\xf0\x08\xf6\x04\xb0\x03\xf6\x04\x80\x03\xf6\x04\x18\x0b\xf6\x040\x0b\xf6\x04 \x00\xf6\x04\xf0\x0e\xf6\x048\x0f\xf6\x04\x10\x07\xf6\x04\xb8\x04\xf6\x04\xc0\x0b\xf6\x04\xd0\r\xf6\x04\x00\x0b\xf6\x04h\x0f\xf6\x048\x06\xf6\x04\x98\x00\xf6\x04\xf8\x00\xf6\x04H\x08\xf6\x04p\n\xf6\x04\xb8\n\xf6\x04\xe0\x06\xf6\x04`\x0b\xf6\x04\x18\x02\xf6\x04H\x0e\xf6\x04X\x07\xf6\x04@\x04\xf6\x04\x18\x08\xf6\x04\xc0\x05\xf6\x04\xc8\x0f\xf6\x04P\x06\xf6\x04\xa8\x0b\xf6\x04\x98\x0f\xf6\x04\xf8\x0c\xf6\x04\xa0\x01\xf6\x040\x0e\xf6\x04\xb0\x06\xf6\x04x\x08\xf6\x04\xf8\t\xf6\x04@\r\xf6\x04\x08\t\xf6\x048\x00\xf6\x04\xb8\r\xf6\x04\xe0\x0c\xf6\x04\x00\x05\xf6\x04x\x02\xf6\x04h\x06\xf6\x04H\x0b\xf6\x04p\x04\xf6\x04 \x0f\xf6\x04\xb8\x07\xf6\x04x\x0e\xf6\x04\x88\r\xf6\x04h\x00\xf6\x04\xd8\x0b\xf6\x04\xc0\x02\xf6\x04\xb0\x00\xf6\x04P\t\xf6\x04\x00\x08\xf6\x04\x90\x08\xf6\x04\x80\x0c\xf6\x04\xb0\x0f\xf6\x04\xf8\x03\xf6\x04P\x0f\xf6\x04\x10\x04\xf6\x04\xc8\t\xf6\x04\x00\x0e\xf6\x04\xe0\t\xf6\x04\xe0\x0f\xf6\x04\x90\x05\xf6\x04\xe8\r\xf6\x048\t\xf6\x04\xe8Di\x02 \x1c\xf2\x03X\x17\xf2\x03\xe8g\xf7\x04\xd0g\xf7\x04\xe0f\xf7\x04\x80i\xf7\x04Hk\xf7\x04\xf8i\xf7\x04\xf0h\xf7\x04\x88g\xf7\x04 c\xf7\x04\xc8l\xf7\x04\xc0h\xf7\x04\xc8f\xf7\x04\xa0m\xf7\x04@g\xf7\x04`e\xf7\x040^\xf7\x04xR\xf7\x04\x00U\xf7\x04\x80S\xf7\x04\xe0Y\xf7\x04\x00R\xf7\x04\xa8R\xf7\x04`X\xf7\x04\xf8V\xf7\x04(T\xf7\x04h\\\xf7\x04\xb8T\xf7\x04\xa8U\xf7\x04\xc8V\xf7\x04\x10Q\xf7\x04XQ\xf7\x04\x08v\xfe\x04Hx\xfe\x04\x80s\xfe\x04\x88\x07\xf6\x04 \x03\xf6\x04(\x01\xf6\x04P\x0c\xf6\x04p\x01\xf6\x04\xd0\x04\xf6\x04H\x05\xf6\x04\xd8\x05\xf6\x04P\x00\xf6\x04 \x06\xf6\x04\x08\x06\xf6\x04\xc0\x08\xf6\x04h\x03\xf6\x04\xe0\x00\xf6\x04\x88\n\xf6\x048\x0c\xf6\x04@\x01\xf6\x04H\x02\xf6\x040\x08\xf6\x04\xf0\x05\xf6\x04\xf0\x0b\xf6\x040\x02\xf6\x04\xa8\x08\xf6\x048\x03\xf6\x04\x18\x05\xf6\x04\x98\x03\xf6\x04\xc8\x00\xf6\x04\xe0\x03\xf6\x04\x08\x0c\xf6\x04\x88\x04\xf6\x04`\x05\xf6\x04(\x04\xf6\x04\xa0\x04\xf6\x04\xf0\x02\xf6\x04\x08\x03\xf6\x04\xd8\x08\xf6\x04\x10\n\xf6\x04\x80\t\xf6\x04\x10\x01\xf6\x04\xa8\x05\xf6\x04\x98\x06\xf6\x04\xa0\x07\xf6\x04\xe8\n\xf6\x04@\n\xf6\x04\xf8\x06\xf6\x04x\x0b\xf6\x04\xe8\x07\xf6\x04X\r\xf6\x040\x05\xf6\x04\xd0\x07\xf6\x04X\x04\xf6\x04x\x05\xf6\x04\x80\x0f\xf6\x04(\x07\xf6\x048V\xf7\x04PP\xf7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g950
sg895
g946
sg909
g957
sg904
g954
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1069
sg895
g1065
sg909
g1076
sg904
g1073
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1152
sg895
g1142
sg909
g1146
sg904
g1150
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g900
sg895
g1172
sg909
g910
sg904
g1179
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1001
sg895
g1204
sg909
g1008
sg904
g1211
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1116
sg895
g1219
sg909
g1123
sg904
g1226
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1052
sg895
g1234
sg909
g1059
sg904
g1241
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1253
sg895
g1249
sg909
g1260
sg904
g1257
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1270
sg895
g1266
sg909
g1277
sg904
g1274
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1041
sg895
g1283
sg909
g1035
sg904
g1290
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1302
sg895
g1298
sg909
g1309
sg904
g1306
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1041
sg895
g1283
sg909
g1035
sg904
g1290
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1270
sg895
g1266
sg909
g1277
sg904
g1274
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g900
sg895
g1172
sg909
g910
sg904
g1179
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1001
sg895
g1204
sg909
g1008
sg904
g1211
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1397
sg895
g1393
sg909
g1404
sg904
g1401
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1427
sg895
g1423
sg909
g1434
sg904
g1431
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1086
sg895
g1440
sg909
g1093
sg904
g1447
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1427
sg895
g1455
sg909
g1434
sg904
g1462
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g984
sg895
g1470
sg909
g991
sg904
g1477
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1152
sg895
g1485
sg909
g1146
sg904
g1492
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1302
sg895
g1298
sg909
g1309
sg904
g1306
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1069
sg895
g1539
sg909
g1076
sg904
g1546
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1558
sg895
g1554
sg909
g1565
sg904
g1562
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1270
sg895
g1571
sg909
g1277
sg904
g1578
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g950
sg895
g946
sg909
g957
sg904
g954
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1302
sg895
g1599
sg909
g1309
sg904
g1606
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1558
sg895
g1640
sg909
g1565
sg904
g1647
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1397
sg895
g1655
sg909
g1404
sg904
g1662
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1086
sg895
g1440
sg909
g1093
sg904
g1447
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1041
sg895
g1283
sg909
g1035
sg904
g1290
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1253
sg895
g1249
sg909
g1260
sg904
g1257
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1018
sg895
g1709
sg909
g1025
sg904
g1716
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1253
sg895
g1249
sg909
g1260
sg904
g1257
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g950
sg895
g1737
sg909
g957
sg904
g1744
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1270
sg895
g1266
sg909
g1277
sg904
g1274
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1397
sg895
g1393
sg909
g1404
sg904
g1401
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1116
sg895
g1219
sg909
g1123
sg904
g1226
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1001
sg895
g1204
sg909
g1008
sg904
g1211
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1018
sg895
g1709
sg909
g1025
sg904
g1716
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g967
sg895
g1843
sg909
g974
sg904
g1850
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1116
sg895
g1219
sg909
g1123
sg904
g1226
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1069
sg895
g1539
sg909
g1076
sg904
g1546
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1427
sg895
g1423
sg909
g1434
sg904
g1431
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g984
sg895
g1470
sg909
g991
sg904
g1477
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1001
sg895
g1204
sg909
g1008
sg904
g1211
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1397
sg895
g1655
sg909
g1404
sg904
g1662
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1427
sg895
g1455
sg909
g1434
sg904
g1462
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1069
sg895
g1539
sg909
g1076
sg904
g1546
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1558
sg895
g1554
sg909
g1565
sg904
g1562
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g950
sg895
g1737
sg909
g957
sg904
g1744
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1152
sg895
g1142
sg909
g1146
sg904
g1150
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1302
sg895
g1298
sg909
g1309
sg904
g1306
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1041
sg895
g1283
sg909
g1035
sg904
g1290
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g967
sg895
g1843
sg909
g974
sg904
g1850
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1116
sg895
g1219
sg909
g1123
sg904
g1226
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1052
sg895
g1234
sg909
g1059
sg904
g1241
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1191
sg895
g2144
sg909
g1198
sg904
g2151
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1558
sg895
g1640
sg909
g1565
sg904
g1647
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g950
sg895
g1737
sg909
g957
sg904
g1744
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1086
sg895
g1082
sg909
g1093
sg904
g1090
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g950
sg895
g946
sg909
g957
sg904
g954
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1052
sg895
g1234
sg909
g1059
sg904
g1241
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1041
sg895
g1283
sg909
g1035
sg904
g1290
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1270
sg895
g1266
sg909
g1277
sg904
g1274
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1253
sg895
g1249
sg909
g1260
sg904
g1257
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1152
sg895
g1142
sg909
g1146
sg904
g1150
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g900
sg895
g1172
sg909
g910
sg904
g1179
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1558
sg895
g1640
sg909
g1565
sg904
g1647
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1427
sg895
g1423
sg909
g1434
sg904
g1431
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1397
sg895
g1393
sg909
g1404
sg904
g1401
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1086
sg895
g1440
sg909
g1093
sg904
g1447
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1302
sg895
g1599
sg909
g1309
sg904
g1606
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1018
sg895
g1709
sg909
g1025
sg904
g1716
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1069
sg895
g1539
sg909
g1076
sg904
g1546
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1152
sg895
g1142
sg909
g1146
sg904
g1150
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g920
sg895
g2445
sg909
g927
sg904
g2452
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g950
sg895
g946
sg909
g957
sg904
g954
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1302
sg895
g1599
sg909
g1309
sg904
g1606
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1191
sg895
g2144
sg909
g1198
sg904
g2151
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1558
sg895
g1554
sg909
g1565
sg904
g1562
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1397
sg895
g1655
sg909
g1404
sg904
g1662
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1427
sg895
g1423
sg909
g1434
sg904
g1431
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1152
sg895
g1485
sg909
g1146
sg904
g1492
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1397
sg895
g1655
sg909
g1404
sg904
g1662
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1253
sg895
g1249
sg909
g1260
sg904
g1257
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1069
sg895
g1065
sg909
g1076
sg904
g1073
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g920
sg895
g2445
sg909
g927
sg904
g2452
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1302
sg895
g1298
sg909
g1309
sg904
g1306
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1253
sg895
g2642
sg909
g1260
sg904
g2649
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g984
sg895
g1470
sg909
g991
sg904
g1477
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g967
sg895
g1843
sg909
g974
sg904
g1850
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g984
sg895
g1470
sg909
g991
sg904
g1477
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1253
sg895
g2642
sg909
g1260
sg904
g2649
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g967
sg895
g1843
sg909
g974
sg904
g1850
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1116
sg895
g1219
sg909
g1123
sg904
g1226
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1397
sg895
g1393
sg909
g1404
sg904
g1401
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g920
sg895
g2445
sg909
g927
sg904
g2452
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g1152
sg895
g1142
sg909
g1146
sg904
g1150
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1253
sg895
g2642
sg909
g1260
sg904
g2649
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1427
sg895
g1455
sg909
g1434
sg904
g1462
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1018
sg895
g1709
sg909
g1025
sg904
g1716
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1558
sg895
g1554
sg909
g1565
sg904
g1562
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1001
sg895
g1204
sg909
g1008
sg904
g1211
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1052
sg895
g1234
sg909
g1059
sg904
g1241
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1069
sg895
g1065
sg909
g1076
sg904
g1073
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1270
sg895
g1571
sg909
g1277
sg904
g1578
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g950
sg895
g946
sg909
g957
sg904
g954
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1427
sg895
g1423
sg909
g1434
sg904
g1431
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1427
sg895
g1455
sg909
g1434
sg904
g1462
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1270
sg895
g1571
sg909
g1277
sg904
g1578
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1191
sg895
g2144
sg909
g1198
sg904
g2151
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1558
sg895
g1640
sg909
g1565
sg904
g1647
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1302
sg895
g1298
sg909
g1309
sg904
g1306
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1086
sg895
g1440
sg909
g1093
sg904
g1447
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1427
sg895
g1455
sg909
g1434
sg904
g1462
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1018
sg895
g1709
sg909
g1025
sg904
g1716
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1152
sg895
g1485
sg909
g1146
sg904
g1492
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1302
sg895
g1599
sg909
g1309
sg904
g1606
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g900
sg895
g1172
sg909
g910
sg904
g1179
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1041
sg895
g1031
sg909
g1035
sg904
g1039
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g984
sg895
g980
sg909
g991
sg904
g988
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1270
sg895
g1571
sg909
g1277
sg904
g1578
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g984
sg895
g1470
sg909
g991
sg904
g1477
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1302
sg895
g1599
sg909
g1309
sg904
g1606
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1191
sg895
g1187
sg909
g1198
sg904
g1195
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1086
sg895
g1440
sg909
g1093
sg904
g1447
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1052
sg895
g1234
sg909
g1059
sg904
g1241
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g920
sg895
g2445
sg909
g927
sg904
g2452
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1052
sg895
g1048
sg909
g1059
sg904
g1056
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1069
sg895
g1065
sg909
g1076
sg904
g1073
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1191
sg895
g2144
sg909
g1198
sg904
g2151
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1397
sg895
g1655
sg909
g1404
sg904
g1662
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g967
sg895
g963
sg909
g974
sg904
g971
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1270
sg895
g1571
sg909
g1277
sg904
g1578
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1191
sg895
g2144
sg909
g1198
sg904
g2151
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1397
sg895
g1393
sg909
g1404
sg904
g1401
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g967
sg895
g1843
sg909
g974
sg904
g1850
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1558
sg895
g1554
sg909
g1565
sg904
g1562
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g900
sg895
g1172
sg909
g910
sg904
g1179
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1270
sg895
g1266
sg909
g1277
sg904
g1274
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1069
sg895
g1539
sg909
g1076
sg904
g1546
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1558
sg895
g1640
sg909
g1565
sg904
g1647
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1253
sg895
g2642
sg909
g1260
sg904
g2649
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g950
sg895
g1737
sg909
g957
sg904
g1744
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1069
sg895
g1065
sg909
g1076
sg904
g1073
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g950
sg895
g1737
sg909
g957
sg904
g1744
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1152
sg895
g1485
sg909
g1146
sg904
g1492
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1152
sg895
g1485
sg909
g1146
sg904
g1492
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g920
sg895
g2445
sg909
g927
sg904
g2452
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1253
sg895
g2642
sg909
g1260
sg904
g2649
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I84889936
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\xf0\xbb\xd3\x1b@\x84\xaf\x0cp\x84\xaf\x0c(\xbc\xd3\x1b\xc07\n\r(\xbc\xd3\x1b`\xbc\xd3\x1bp\x84\xaf\x0c\xe8\n\xaf\x0c`\xbc\xd3\x1b\x009\n\r\xc0\n\xaf\x0c0\x85\xaf\x0c\x98\n\xaf\x0c\xc0\x85\xaf\x0c\xc0\n\xaf\x0c\x98\n\xaf\x0c\x00\x85\xaf\x0c\x005\n\r`8\n\r\xe8\n\xaf\x0c\xf0\x85\xaf\x0c\x009\n\r\xa8\t\xaf\x0c@\x84\xaf\x0cp\n\xaf\x0c\xc07\n\r(\xbc\xd3\x1b\x005\n\r`\xbc\xd3\x1b\xc0\n\xaf\x0cp\n\xaf\x0c\xf0\xbb\xd3\x1b\xe05\n\r`8\n\rH\n\xaf\x0cp\n\xaf\x0c\x009\n\r\x00\x85\xaf\x0c`8\n\r \n\xaf\x0c\x08\t\xaf\x0c\x98\xbc\xd3\x1b \n\xaf\x0c\xc0\x85\xaf\x0c\xe05\n\r@\x84\xaf\x0c0\x85\xaf\x0cH\n\xaf\x0c@\xbd\xd3\x1b\xc07\n\r\xa0\x84\xaf\x0c\xe0\x08\xaf\x0c`\x85\xaf\x0c\xc07\n\r\x009\n\r\x005\n\r0\x85\xaf\x0c\xe8\n\xaf\x0c\x009\n\rp\n\xaf\x0c\xd0\x84\xaf\x0c\xa0\x84\xaf\x0c\x98\xbc\xd3\x1b`6\n\r\x005\n\r\xe05\n\rp\x84\xaf\x0c@\xbd\xd3\x1b\xc07\n\r\xb8\x08\xaf\x0c\x90\x08\xaf\x0c\xc0\x85\xaf\x0c\xa8\t\xaf\x0c`\xbc\xd3\x1b\x98\n\xaf\x0cp\n\xaf\x0c\xe8\n\xaf\x0c\xa0\x84\xaf\x0c\xc07\n\r\x98\xbc\xd3\x1b\xf8\t\xaf\x0c\x08\xbd\xd3\x1b(\xbc\xd3\x1b`8\n\r(\xbc\xd3\x1b\x90\x85\xaf\x0c(\xbc\xd3\x1b\xf0\xbb\xd3\x1b\xe05\n\r\xf8\t\xaf\x0cp\n\xaf\x0c\xe05\n\r\xd0\x84\xaf\x0c\x005\n\r\x009\n\r\xc0\n\xaf\x0c0\t\xaf\x0c \x86\xaf\x0c\xf8\t\xaf\x0c\x90\x08\xaf\x0c@\xbd\xd3\x1b\xc07\n\r\xa8\t\xaf\x0cH\n\xaf\x0cp\n\xaf\x0cp\x84\xaf\x0c\xc07\n\rH\n\xaf\x0c\x00\x85\xaf\x0cp\x84\xaf\x0c \n\xaf\x0c\xd0\x84\xaf\x0c\xc07\n\r\xe8\n\xaf\x0cp\x84\xaf\x0c\xd0\x84\xaf\x0c\xe8\n\xaf\x0c\xe05\n\r@\x84\xaf\x0c\xd0\x84\xaf\x0c\x005\n\r`8\n\r(\xbc\xd3\x1b\xa0\x84\xaf\x0c \n\xaf\x0c\xf8\t\xaf\x0c\xe8\n\xaf\x0c\xa0\x84\xaf\x0c\xf0\xbb\xd3\x1b\x98\n\xaf\x0c\x08\xbd\xd3\x1bP\x86\xaf\x0ch\x08\xaf\x0c\xe0\x08\xaf\x0c\xa0\x84\xaf\x0c\xc0\n\xaf\x0c\x98\n\xaf\x0c \n\xaf\x0c\xf0\x85\xaf\x0c\xb8\x08\xaf\x0c`8\n\r(\xbc\xd3\x1b\xd0\x84\xaf\x0c\xf8\t\xaf\x0c\xd0\x84\xaf\x0c\xc0\x85\xaf\x0c\x98\n\xaf\x0c\xe05\n\r\xf8\t\xaf\x0cH\n\xaf\x0c`6\n\r`\xbc\xd3\x1b@\x84\xaf\x0c\xa8\t\xaf\x0c\xc07\n\r \n\xaf\x0c\xa8\t\xaf\x0c\xc0\n\xaf\x0c`\xbc\xd3\x1b\x98\xbc\xd3\x1b@\x84\xaf\x0c\xa0\x84\xaf\x0c\xd0\x84\xaf\x0cH\n\xaf\x0cp\n\xaf\x0c \n\xaf\x0c\xc0\n\xaf\x0c\xe0\x08\xaf\x0c\xf0\xbb\xd3\x1b\x98\n\xaf\x0c\x005\n\r0\t\xaf\x0ch\x08\xaf\x0c`\xbc\xd3\x1b\x98\xbc\xd3\x1b\xc0\n\xaf\x0c\x08\xbd\xd3\x1b(\xbc\xd3\x1b\xa0\x84\xaf\x0c\x08\t\xaf\x0c`\x85\xaf\x0c\xc0\x85\xaf\x0c\xf8\t\xaf\x0c\xd0\x84\xaf\x0c@\x84\xaf\x0c(\xbc\xd3\x1b`8\n\r \n\xaf\x0c`\xbc\xd3\x1b \x86\xaf\x0c\x08\t\xaf\x0c0\x85\xaf\x0c`8\n\r\xe0\x08\xaf\x0c\x98\n\xaf\x0cH\n\xaf\x0ch\x08\xaf\x0cH\n\xaf\x0c\x98\n\xaf\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S"\xe0'0\r \x198\x05\xa0\x198\x05\x80\x198\x05\xc0'0\r@(0\r '0\r\x00(0\r\xa0'0\r\xe0&0\r (0\r@'0\r\xa0(0\r@&0\r\x80(0\r\x00)0\r\xe0%0\r\xc0(0\r )0\r\xa0)0\r\xe0(0\r`)0\r\xe0)0\r`'0\r\x80&0\r\x00*0\r`*0\r\x80*0\r\x00'0\r\xc0*0\r\xa0*0\r\x00+0\r\xe0*0\r\xc0)0\r +0\r@+0\r`+0\r\xc0+0\r\xa0+0\r\x00,0\r\xe0+0\r\xa0&0\r`,0\r\x80,0\r\x80'0\r`&0\r\xa0,0\r\xc0,0\r\xe0,0\r\x00-0\r`-0\r@-0\r *0\r\x80-0\r\xa0-0\r\xc0-0\r\xe0-0\r\x00.0\r`.0\r@.0\r\xc0&0\r\x80.0\r\xa0.0\r\xc0.0\r /0\r\xa0/0\r .0\r@*0\r@,0\r\x80)0\r\x80+0\r ,0\r`/0\r -0\r@)0\r\x00/0\r@/0\r`(0\r\xc0\x188\x05\x80/0\r`\x198\x05\xe0/0\r \xb2\xf3\x1b@\xb0\xf3\x1b`\xb1\xf3\x1b\x00\xb1\xf3\x1b`\xb0\xf3\x1b\xc0\xb1\xf3\x1b \xb1\xf3\x1b\xa0\xb1\xf3\x1b@\xb2\xf3\x1b\xa0\xb2\xf3\x1b\xc0\xb2\xf3\x1b\x80\xb2\xf3\x1b\x00\xb3\xf3\x1b\x80\x188\x05 \xb0\xf3\x1b \xb3\xf3\x1b@\xb3\xf3\x1b`\xb3\xf3\x1b@\xb4\xf3\x1b\xa0\xb0\xf3\x1b\xc0\xb3\xf3\x1b\x80\xb4\xf3\x1b`\xb2\xf3\x1b\xe0\xb4\xf3\x1b`\xb4\xf3\x1b\x80\xb1\xf3\x1b\xc0\xb4\xf3\x1b\xc0\xb0\xf3\x1b \xb4\xf3\x1b\xa0\xb5\xf3\x1b\x80\xb0\xf3\x1b\xc0\xb5\xf3\x1b`\xb5\xf3\x1b\x00\xb4\xf3\x1b\x80\xb3\xf3\x1b \xb5\xf3\x1b`\xb6\xf3\x1b \xb6\xf3\x1b\xe0\xb2\xf3\x1b\xc0\xb6\xf3\x1b@\xb1\xf3\x1b\x80\xb6\xf3\x1b\xe0\xb0\xf3\x1b\xe0\xb5\xf3\x1b\x00\xb2\xf3\x1b\xa0\xb4\xf3\x1b \xb7\xf3\x1b`\xb7\xf3\x1b\x00\xb7\xf3\x1b\xe0\xb6\xf3\x1b \xb8\xf3\x1b@\xb8\xf3\x1b\x80\xb5\xf3\x1b@\xb5\xf3\x1b\xe0\xb1\xf3\x1b\x80\xb8\xf3\x1b\xc0\xb7\xf3\x1b\xe0\xb7\xf3\x1b\xc0\xb8\xf3\x1b\xa0\xb6\xf3\x1b`\xb9\xf3\x1b@\xb7\xf3\x1b\xa0\xb7\xf3\x1b\x00\xb9\xf3\x1b\xa0\xb8\xf3\x1b\xe0\xb8\xf3\x1b\x00\xb5\xf3\x1b\xe0\xb3\xf3\x1b\x80\xb7\xf3\x1b\xa0\xb9\xf3\x1b@\xb6\xf3\x1b\xa0\xb3\xf3\x1b\x00\xbb\xf3\x1b\x00\xb8\xf3\x1b\xe0\xb9\xf3\x1b\x00\xba\xf3\x1b@\xba\xf3\x1b`\xb8\xf3\x1b`\xbb\xf3\x1b\x80\xbb\xf3\x1b\x80\xb9\xf3\x1b \xbc\xf3\x1b\xc0\xba\xf3\x1b@\xbc\xf3\x1b\x00\xbc\xf3\x1b\x00\xb6\xf3\x1b\xc0\xbc\xf3\x1b \xbb\xf3\x1b\x80\xbc\xf3\x1b\xc0\xb9\xf3\x1b\xc0\xbb\xf3\x1b\x00\xbd\xf3\x1b`\xbc\xf3\x1b\xe0\xbb\xf3\x1b@\xbb\xf3\x1b \xbd\xf3\x1b@\xb9\xf3\x1b`\xba\xf3\x1b\xc0\xbd\xf3\x1b\xa0\xba\xf3\x1b \xb9\xf3\x1b\x00\xbe\xf3\x1b`\xbd\xf3\x1b\xe0\xba\xf3\x1b\xa0\xbb\xf3\x1b@\xbd\xf3\x1b\xa0\xbc\xf3\x1b@\xbf\xf3\x1b\xe0\xbc\xf3\x1b`\xbe\xf3\x1b \xbf\xf3\x1b\x80\xba\xf3\x1b\xe0\xbd\xf3\x1b\xa0\xbe\xf3\x1b\xe0\xbe\xf3\x1b\x00\xbf\xf3\x1b\x80\xbe\xf3\x1b\xa0\xbd\xf3\x1b"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\xa6\x1d\x82?\x17\xcbL?\x00>D?\xd4?\xa4?\x12\x83H?WdU?B{H?\xd7\xda]?\x18\x0bQ?\xab{H?^\x81H?]\xb1*?K\xa5*?%\xd6\x1d?hNU?\xb4\xc3\x1d??QU?\x82ff?XCD?\xec\xe8.?\x00-3?\xf1b\x86?\x8c03?\xaf\xf9\x7f?\x8d\xa2j?\x97a&?\xcd-3?\xb5S\x95?\xaa\x89H?\x8c\x80H?\x91\x1b3?\n\x82H?E_\x86?\x14\xb5;?J.3?\xc2\x85H?\x16J\x15?\xfa\xb3;?N\x80H?\xbe\xe7.?n>D?\x9d\x9b\x19?\x93tw?\x19\xea.?\xa0.3?\xa1r7?\x19\xf0.?\xab\xd6\x1d?\xfc;D?\x8d\x94\x19?\x85nw?\x10R\x95?QFD?\x04\xce\x1d?\x05`&?\x8dRU?\xea\xf8??.n7?\x7fAD?p\x0eQ?(\xc6L?\n\x12"?\xb0?\xa4?JAD?k43?\xc0\xc4\x0c?\x95\x97Y?\xd3)3?j\xd9\x1d?Q`&?\xe9""? \x83H?\xb8\xd7]?\x04\xf3\x7f?\x9e\xf2??\xaa\nQ?\xc3U\x15?%\xc9;?\x81\xb8\x9b?\xe4l7?\xfba&?\xaa\xe8n?\xb6\xd4;?\x0fs7?\xc6\xc6L?\x8b\xc6\x8c?\xf1Zf?\xd2/3?EVU?\xb9\xb6;?^\xf7\x7f?\xf1P\x15?\x84\xab*?\x16\xf9\x7f?\xe3\xfb??K$3?[`7?\x93\x92Y?\xf6\x1b"?!\xf6??C\x8aH?\x88\x1b"?\xe8\xd7]?\x1e\x12Q?\xd5\x96\x19?\x06\xd7\x1d?O\x8f7?\xe3\xc4L?\xe3a&?\x03\x81H?\xa1\xdc\x1d?\x17R\x95?5\xbd;?\x15\x1b"?\xd0a&?zN\x15?\x11=D?^\xa7*?N43?\xc0o7?Z\xcbL?c?\x84?jbU?,`f?\xa0mw?\xb8.3?\t]f?a\xe8.?~\x93Y?\xa5\xa2j?,\x97Y?t\xc6L?\xe1\x1ab?[\xbdL?`\xdb\x1d?\xec\xdb]?\x99BU?\x95\xb7;?\xe8\xd7]?j\\&?\xc2(3?\xa8\xbb;?\xb0\x11Q?(\x0eQ?\x17\xfa??K_f?|\x11Q?\xac\x0bQ?\x00\xfa\x1d?g\nQ?\x86@D?">D?\xad\xf6\x7f?\xb5\x92Y?\xf5\x95Y?\xdc\xf8??);D?\xc4\xe9n?X\x1b3?\xd15D?jdU?\x8303?\xc4`&?\x9d "?f\xf9??\x18\xa6*?ae&?\xd4~Y?E!b?\xdbb\x86?\xf2_&?\xde\xd7]?^\x85H?\x15\x91Y?N\xe1n?9+3?\xd6U7?\n\x07Q?o\xa8j?\xac\xd2]?1MU?\xa0\xc7\x1d?\xd1\x1e"?\x03=D?\xe3\xad*?\xa4\xb3;?\x8f\xde]?o8D?\xb2\xb3;?Kj7?\x1b$"?\x8a\x1c"?\x89\xa7*?\xf7\x1bb?\x84p7?\x00 b?h\xe4L?\xcaOU?\x0e\xd4]?\n\x82H?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'8S\xf7\x04\xb0S\xf7\x04(\x97\x17\x058\x90\x17\x05\x80\x99\x17\x050\x98\x17\x05H\x9e\x17\x05\x80\x93\x17\x05 \x93\x17\x05h\x9c\x17\x05\x80\x96\x17\x05\x00\x9b\x17\x05\xd0\x94\x17\x05\xf8\x90\x17\x05\x18\x9e\x17\x05\xa8\x92\x17\x05H\x92\x17\x05\x18\x95\x17\x05\xb0\x99\x17\x05\xa0\x94\x17\x05`\x9b\x17\x05\xe8\x91\x17\x05h\x93\x17\x05 \x99\x17\x05\xd0\x91\x17\x05\x98\x99\x17\x05\xa8\x9e\x17\x05\x18\x9b\x17\x05\x10\x9d\x17\x05`\x95\x17\x05\x00\x95\x17\x05\xa8\x98\x17\x05\xf8\x9c\x17\x050\x9e\x17\x05\xd0\x9a\x17\x05\xd8\x95\x17\x05(\x94\x17\x05\x88\x91\x17\x05\xb0\x90\x17\x05\x00\x9e\x17\x05@\x97\x17\x05(\x91\x17\x05H\x9b\x17\x05\x90\x9e\x17\x05\xd0\x97\x17\x050\x92\x17\x05\x10\x91\x17\x05\xf8\x99\x17\x05@\x94\x17\x058\x9c\x17\x05\xc0\x9b\x17\x05\xb8\x97\x17\x05\xb0\x96\x17\x05 \x96\x17\x05\xa8\x9b\x17\x05\x10\x9a\x17\x05p\x9d\x17\x058\x96\x17\x05\xb8\x9a\x17\x05\x90\x98\x17\x05h\x90\x17\x05\x10\x97\x17\x05\xf0\x98\x17\x050x\xfe\x04\xc0~\xfe\x04\xa8x\xfe\x04@z\xfe\x04\x90~\xfe\x04@}\xfe\x04\xd8~\xfe\x04\x10q\xfe\x04\x98\x7f\xfe\x04\x00x\xfe\x04\x00r\xfe\x04\xd0}\xfe\x04Xw\xfe\x04\xa8r\xfe\x04\x88w\xfe\x04\xa8{\xfe\x04\xb8t\xfe\x04p}\xfe\x04xx\xfe\x04\xa8~\xfe\x04\x00{\xfe\x04\xd0t\xfe\x04\xc0u\xfe\x04\xa0w\xfe\x04\x08|\xfe\x048s\xfe\x04\xc8y\xfe\x04\xf0r\xfe\x04\xa8u\xfe\x04xu\xfe\x04\xf0{\xfe\x04\xe0\x7f\xfe\x04hy\xfe\x04`~\xfe\x04`{\xfe\x04`x\xfe\x04\xb0v\xfe\x04\xd0z\xfe\x04\x98s\xfe\x04P|\xfe\x04\x90r\xfe\x04\x10t\xfe\x04\xd8u\xfe\x04\x18r\xfe\x04\x00u\xfe\x04\xc0{\xfe\x04\xe0v\xfe\x04\x88q\xfe\x04\xf8|\xfe\x04\xf8s\xfe\x04\xa0t\xfe\x04Xq\xfe\x04\x80y\xfe\x04pw\xfe\x04\xf0u\xfe\x04\xb0s\xfe\x04H~\xfe\x04\x18{\xfe\x04Ps\xfe\x04\x08y\xfe\x04hs\xfe\x04(t\xfe\x04\xf8v\xfe\x04@t\xfe\x04\x18u\xfe\x04Pv\xfe\x04\xe0|\xfe\x04h|\xfe\x04P\x7f\xfe\x04\xf0x\xfe\x04\xa0z\xfe\x04\xb8w\xfe\x04h\x7f\xfe\x04\x18~\xfe\x04@w\xfe\x04\xf8p\xfe\x04 y\xfe\x048|\xfe\x04\x98\x96\x17\x05`\x9e\x17\x05x\x9e\x17\x05\xc0\x92\x17\x05\xc8\x9c\x17\x05H\x95\x17\x05@\x9a\x17\x05\xf0\x9b\x17\x05\x80\x9c\x17\x05x\x98\x17\x05h\x99\x17\x05\x98\x93\x17\x05p\x9a\x17\x05\xd8\x98\x17\x05\xe0\x96\x17\x05\xd8\x9b\x17\x05H\x98\x17\x05 \x9c\x17\x05\xe0\x9f\x17\x058\x99\x17\x05\xc0\x9e\x17\x05X\x97\x17\x05P\x99\x17\x05\xf0\x9e\x17\x05\xe0\x93\x17\x05X\x9d\x17\x05\xc0\x98\x17\x05\xb8\x9d\x17\x05\xc8\x9f\x17\x05\x00\x98\x17\x05\xc8\x96\x17\x05\xa0\x97\x17\x05`\x98\x17\x05\xa0\x9d\x17\x05\x88\x9a\x17\x05\xc8\x93\x17\x05\xe0\x99\x17\x05\xd0\x9d\x17\x05\xd8\x9e\x17\x05P\x9c\x17\x05p\x94\x17\x05\x08\x99\x17\x05\x98\x9c\x17\x05X\x94\x17\x05(\x9a\x17\x05\xc8\x99\x17\x05@\x91\x17\x05\xe0\x9c\x17\x05\xa8\x95\x17\x05\x98\x9f\x17\x05\x80\x9f\x17\x05\xe8\x9d\x17\x05h\x96\x17\x05\xf8\x93\x17\x05\x08\x96\x17\x05x\x92\x17\x050\x9b\x17\x05\xb0\x9c\x17\x05\x18\x92\x17\x05'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3675
sg3633
g3754
sg3647
g3682
sg3642
g3761
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3675
sg3633
g3754
sg3647
g3682
sg3642
g3761
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3850
sg3633
g3893
sg3647
g3857
sg3642
g3900
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3978
sg3633
g3968
sg3647
g3972
sg3642
g3976
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g3925
sg3633
g4067
sg3647
g3932
sg3642
g4074
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3741
sg3633
g4082
sg3647
g3748
sg3642
g4089
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3638
sg3633
g4123
sg3647
g3648
sg3642
g4130
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4142
sg3633
g4138
sg3647
g4149
sg3642
g4146
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3942
sg3633
g4155
sg3647
g3949
sg3642
g4162
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4174
sg3633
g4170
sg3647
g4181
sg3642
g4178
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3803
sg3633
g4200
sg3647
g3810
sg3642
g4207
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3658
sg3633
g4215
sg3647
g3665
sg3642
g4222
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3942
sg3633
g4155
sg3647
g3949
sg3642
g4162
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4247
sg3633
g4243
sg3647
g4254
sg3642
g4251
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3773
sg3633
g4260
sg3647
g3780
sg3642
g4267
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g4247
sg3633
g4288
sg3647
g4254
sg3642
g4295
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3873
sg3633
g4303
sg3647
g3867
sg3642
g4310
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g4142
sg3633
g4318
sg3647
g4149
sg3642
g4325
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3658
sg3633
g4215
sg3647
g3665
sg3642
g4222
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3675
sg3633
g3754
sg3647
g3682
sg3642
g3761
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4174
sg3633
g4170
sg3647
g4181
sg3642
g4178
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4142
sg3633
g4318
sg3647
g4149
sg3642
g4325
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3709
sg3633
g4385
sg3647
g3716
sg3642
g4392
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3978
sg3633
g4400
sg3647
g3972
sg3642
g4407
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3803
sg3633
g4200
sg3647
g3810
sg3642
g4207
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3675
sg3633
g3754
sg3647
g3682
sg3642
g3761
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g4028
sg3633
g4519
sg3647
g4035
sg3642
g4526
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g4538
sg3633
g4534
sg3647
g4545
sg3642
g4542
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g3978
sg3633
g3968
sg3647
g3972
sg3642
g3976
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4142
sg3633
g4138
sg3647
g4149
sg3642
g4146
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4142
sg3633
g4318
sg3647
g4149
sg3642
g4325
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4028
sg3633
g4519
sg3647
g4035
sg3642
g4526
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4174
sg3633
g4668
sg3647
g4181
sg3642
g4675
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3873
sg3633
g4303
sg3647
g3867
sg3642
g4310
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3638
sg3633
g4123
sg3647
g3648
sg3642
g4130
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3850
sg3633
g3893
sg3647
g3857
sg3642
g3900
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3978
sg3633
g4400
sg3647
g3972
sg3642
g4407
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3709
sg3633
g4385
sg3647
g3716
sg3642
g4392
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3873
sg3633
g4303
sg3647
g3867
sg3642
g4310
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g4804
sg3633
g4800
sg3647
g4811
sg3642
g4808
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3925
sg3633
g4067
sg3647
g3932
sg3642
g4074
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3942
sg3633
g4155
sg3647
g3949
sg3642
g4162
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4142
sg3633
g4138
sg3647
g4149
sg3642
g4146
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g4804
sg3633
g4800
sg3647
g4811
sg3642
g4808
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4028
sg3633
g4024
sg3647
g4035
sg3642
g4032
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g4142
sg3633
g4318
sg3647
g4149
sg3642
g4325
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4538
sg3633
g4960
sg3647
g4545
sg3642
g4967
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3925
sg3633
g4067
sg3647
g3932
sg3642
g4074
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3803
sg3633
g4200
sg3647
g3810
sg3642
g4207
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3820
sg3633
g5001
sg3647
g3827
sg3642
g5008
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3741
sg3633
g4082
sg3647
g3748
sg3642
g4089
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g4247
sg3633
g4288
sg3647
g4254
sg3642
g4295
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g4804
sg3633
g5042
sg3647
g4811
sg3642
g5049
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g4174
sg3633
g4668
sg3647
g4181
sg3642
g4675
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g4142
sg3633
g4138
sg3647
g4149
sg3642
g4146
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3709
sg3633
g4385
sg3647
g3716
sg3642
g4392
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3638
sg3633
g4123
sg3647
g3648
sg3642
g4130
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g4174
sg3633
g4668
sg3647
g4181
sg3642
g4675
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4028
sg3633
g4519
sg3647
g4035
sg3642
g4526
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g3709
sg3633
g4385
sg3647
g3716
sg3642
g4392
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4174
sg3633
g4170
sg3647
g4181
sg3642
g4178
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g3658
sg3633
g4215
sg3647
g3665
sg3642
g4222
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4247
sg3633
g4243
sg3647
g4254
sg3642
g4251
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4538
sg3633
g4960
sg3647
g4545
sg3642
g4967
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3709
sg3633
g4385
sg3647
g3716
sg3642
g4392
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g4538
sg3633
g4534
sg3647
g4545
sg3642
g4542
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3773
sg3633
g4260
sg3647
g3780
sg3642
g4267
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4142
sg3633
g4138
sg3647
g4149
sg3642
g4146
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3658
sg3633
g4215
sg3647
g3665
sg3642
g4222
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4538
sg3633
g4960
sg3647
g4545
sg3642
g4967
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3925
sg3633
g4067
sg3647
g3932
sg3642
g4074
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3978
sg3633
g4400
sg3647
g3972
sg3642
g4407
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g4247
sg3633
g4288
sg3647
g4254
sg3642
g4295
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4804
sg3633
g4800
sg3647
g4811
sg3642
g4808
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3773
sg3633
g4260
sg3647
g3780
sg3642
g4267
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3978
sg3633
g4400
sg3647
g3972
sg3642
g4407
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3850
sg3633
g3893
sg3647
g3857
sg3642
g3900
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g4538
sg3633
g4960
sg3647
g4545
sg3642
g4967
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4804
sg3633
g5042
sg3647
g4811
sg3642
g5049
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3803
sg3633
g4200
sg3647
g3810
sg3642
g4207
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3978
sg3633
g3968
sg3647
g3972
sg3642
g3976
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3820
sg3633
g5001
sg3647
g3827
sg3642
g5008
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4247
sg3633
g4243
sg3647
g4254
sg3642
g4251
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3978
sg3633
g3968
sg3647
g3972
sg3642
g3976
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4028
sg3633
g4519
sg3647
g4035
sg3642
g4526
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4538
sg3633
g4534
sg3647
g4545
sg3642
g4542
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g4804
sg3633
g4800
sg3647
g4811
sg3642
g4808
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g4538
sg3633
g4960
sg3647
g4545
sg3642
g4967
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3873
sg3633
g4303
sg3647
g3867
sg3642
g4310
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4142
sg3633
g4318
sg3647
g4149
sg3642
g4325
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4804
sg3633
g5042
sg3647
g4811
sg3642
g5049
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4174
sg3633
g4170
sg3647
g4181
sg3642
g4178
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3942
sg3633
g3938
sg3647
g3949
sg3642
g3946
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3741
sg3633
g4082
sg3647
g3748
sg3642
g4089
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4247
sg3633
g4288
sg3647
g4254
sg3642
g4295
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3638
sg3633
g4123
sg3647
g3648
sg3642
g4130
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3820
sg3633
g5001
sg3647
g3827
sg3642
g5008
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3658
sg3633
g4215
sg3647
g3665
sg3642
g4222
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3978
sg3633
g3968
sg3647
g3972
sg3642
g3976
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g4538
sg3633
g4534
sg3647
g4545
sg3642
g4542
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4174
sg3633
g4170
sg3647
g4181
sg3642
g4178
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4028
sg3633
g4519
sg3647
g4035
sg3642
g4526
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g4247
sg3633
g4288
sg3647
g4254
sg3642
g4295
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3820
sg3633
g5001
sg3647
g3827
sg3642
g5008
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3803
sg3633
g4200
sg3647
g3810
sg3642
g4207
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3638
sg3633
g4123
sg3647
g3648
sg3642
g4130
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3850
sg3633
g3893
sg3647
g3857
sg3642
g3900
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3925
sg3633
g3921
sg3647
g3932
sg3642
g3929
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3741
sg3633
g4082
sg3647
g3748
sg3642
g4089
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4804
sg3633
g5042
sg3647
g4811
sg3642
g5049
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3741
sg3633
g3737
sg3647
g3748
sg3642
g3745
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3873
sg3633
g3863
sg3647
g3867
sg3642
g3871
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3820
sg3633
g5001
sg3647
g3827
sg3642
g5008
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3925
sg3633
g4067
sg3647
g3932
sg3642
g4074
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3978
sg3633
g4400
sg3647
g3972
sg3642
g4407
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g3773
sg3633
g4260
sg3647
g3780
sg3642
g4267
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3873
sg3633
g4303
sg3647
g3867
sg3642
g4310
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g4804
sg3633
g4800
sg3647
g4811
sg3642
g4808
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g4538
sg3633
g4534
sg3647
g4545
sg3642
g4542
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3692
sg3633
g3722
sg3647
g3699
sg3642
g3729
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3942
sg3633
g4155
sg3647
g3949
sg3642
g4162
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4247
sg3633
g4243
sg3647
g4254
sg3642
g4251
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3741
sg3633
g4082
sg3647
g3748
sg3642
g4089
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4247
sg3633
g4243
sg3647
g4254
sg3642
g4251
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3773
sg3633
g4260
sg3647
g3780
sg3642
g4267
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3675
sg3633
g3754
sg3647
g3682
sg3642
g3761
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3942
sg3633
g4155
sg3647
g3949
sg3642
g4162
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3850
sg3633
g3893
sg3647
g3857
sg3642
g3900
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g4174
sg3633
g4668
sg3647
g4181
sg3642
g4675
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4804
sg3633
g5042
sg3647
g4811
sg3642
g5049
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4174
sg3633
g4668
sg3647
g4181
sg3642
g4675
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3850
sg3633
g3846
sg3647
g3857
sg3642
g3854
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I84889936
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'P\x1c\x10\x1c\x10\xf4\x10\x1c`\x11\x11\x1cp%\x11\x1c\x10\xf4\x10\x1c\x08$\x11\x1c0$\x11\x1c\x80\x11\x11\x1cX$\x11\x1c\xa0\x11\x11\x1c\xc0\x1b\x10\x1c\xc0\x11\x11\x1cH\xf4\x10\x1c\x10\x1d\x10\x1c\xb0\x1c\x10\x1c\x80$\x11\x1c\x90\x1b\x10\x1c\xf0\xf4\x10\x1c\xe0\x11\x11\x1c\x08$\x11\x1c\xe8%\x11\x1c\xd0$\x11\x1cH\xf4\x10\x1c\xe0\x1c\x10\x1cX$\x11\x1c`\xf5\x10\x1c\x10\xf4\x10\x1c\x80\x11\x11\x1cX$\x11\x1c\xb8\xf4\x10\x1c\x80\x1c\x10\x1c\xa0\x11\x11\x1c\xf0\x1b\x10\x1c\x08$\x11\x1c\xc0\x1b\x10\x1c\x80$\x11\x1c\xe0\x11\x11\x1c \x1c\x10\x1c\xf0\x1b\x10\x1c\x80$\x11\x1c\xb8\xf4\x10\x1c\xe0\x11\x11\x1c\x10\xf4\x10\x1c\x08$\x11\x1c`\x11\x11\x1c\xc0\x11\x11\x1cH\xf4\x10\x1c\x90\x1b\x10\x1c\x08$\x11\x1cX$\x11\x1c\xd0$\x11\x1cX$\x11\x1c0$\x11\x1c(\xf5\x10\x1c\x80$\x11\x1cX$\x11\x1c@\x1d\x10\x1c\xd0$\x11\x1cH%\x11\x1c \x1c\x10\x1c(\xf5\x10\x1c8&\x11\x1c\xc0\x1b\x10\x1c`\x11\x11\x1c0$\x11\x1c\x80\x11\x11\x1c\xd0$\x11\x1c\x90\x1b\x10\x1c\xc0\x1b\x10\x1c\x80\x1c\x10\x1c \x1c\x10\x1c`&\x11\x1c\x10\x1d\x10\x1c\xc0\x1b\x10\x1c \x1c\x10\x1c\xe0\x11\x11\x1c\xc0\x1b\x10\x1c\x90\x1b\x10\x1c \x1c\x10\x1c`\x11\x11\x1c\x90\x1b\x10\x1c\xe0\x11\x11\x1c\xf0\x1b\x10\x1c0$\x11\x1c\x90\x1b\x10\x1c\x80\xf4\x10\x1c\x10\xf4\x10\x1c \x1c\x10\x1c\xc0%\x11\x1c\xf0\x1b\x10\x1c0$\x11\x1c\x80\x11\x11\x1c\xf8$\x11\x1c\xa0\x11\x11\x1c\xc0\x11\x11\x1c\xf8$\x11\x1c`\x11\x11\x1c\x80\x11\x11\x1c\xb8\xf4\x10\x1c\xf0\xf4\x10\x1cX$\x11\x1c\xe0\x11\x11\x1c\xa8$\x11\x1c\x80\xf4\x10\x1c\xb8\xf4\x10\x1c\xf0\x1b\x10\x1c\x80\x11\x11\x1c0$\x11\x1c \x1c\x10\x1c\xa0\x11\x11\x1c\xa8$\x11\x1c\xc0\x11\x11\x1c \x1c\x10\x1c\xc0\x11\x11\x1c`\xf5\x10\x1c\xc0\x11\x11\x1c\xb8\xf4\x10\x1c\xa8$\x11\x1c\xc0\x1b\x10\x1c\xf8$\x11\x1c\x08$\x11\x1cH\xf4\x10\x1c\xd0$\x11\x1c\x80$\x11\x1c`\xf5\x10\x1c\xf8$\x11\x1c\xe8%\x11\x1c\x90\x1b\x10\x1cH\xf4\x10\x1c\x80\xf4\x10\x1c\xa8$\x11\x1c\xf0\xf4\x10\x1c\x98%\x11\x1c\x80$\x11\x1c\xa8$\x11\x1c0$\x11\x1c`\x11\x11\x1c\xc0%\x11\x1cp\x1d\x10\x1c\xe0\x11\x11\x1c\x08$\x11\x1c`\x11\x11\x1cP\x1c\x10\x1cX$\x11\x1c\x80\xf4\x10\x1cH%\x11\x1c\xb8\xf4\x10\x1c\x10\xf4\x10\x1c\x80$\x11\x1c\xc0\x1b\x10\x1c\xb8\xf4\x10\x1c\x80\xf4\x10\x1c\xe0\x1c\x10\x1c\xf0\x1b\x10\x1c\x80\xf4\x10\x1c\xa8$\x11\x1c\xf0\x1b\x10\x1c\xc0\x11\x11\x1c\xa8$\x11\x1c\xf0\xf4\x10\x1c\xd0$\x11\x1c\xb8\xf4\x10\x1c\x80\x11\x11\x1c\xd0$\x11\x1c\xc0\x11\x11\x1c\xa8$\x11\x1c\x98%\x11\x1c\xd0$\x11\x1c \x1c\x10\x1c\xf8$\x11\x1cP\x1c\x10\x1c\xd0$\x11\x1c\xf8$\x11\x1c\xc0\x11\x11\x1c\x10\xf4\x10\x1c\xe0\x11\x11\x1c\xf8$\x11\x1cp%\x11\x1c`&\x11\x1c\x80\x11\x11\x1c\xc0\x11\x11\x1c\xd0$\x11\x1c\xc0\x1b\x10\x1c\xa0\x11\x11\x1c0$\x11\x1cH\xf4\x10\x1c\x80\xf4\x10\x1c\x08$\x11\x1cp\x1d\x10\x1c\xf8$\x11\x1c\x98%\x11\x1c\xb8\xf4\x10\x1c\xf0\xf4\x10\x1c\xa0\x1d\x10\x1c\xf0\x1b\x10\x1c\x10\xf4\x10\x1cH\xf4\x10\x1c\xc0%\x11\x1c`\x11\x11\x1c\x08$\x11\x1c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'\xa0\xbf\xf3\x1b\xa0\x12\x11\x1c@\x13\x11\x1c`\x13\x11\x1c\xe0\x13\x11\x1c\xa0\x13\x11\x1c \x14\x11\x1c\x80\x14\x11\x1c\x00\x13\x11\x1c\x00\x14\x11\x1c\xa0\x14\x11\x1c\xc0\x14\x11\x1c\xe0\x12\x11\x1c\x00\x15\x11\x1c\xe0\x14\x11\x1c\xc0\x13\x11\x1c \x15\x11\x1c@\x15\x11\x1c\xa0\x15\x11\x1c\x80\x15\x11\x1c\xe0\x15\x11\x1c\xc0\x15\x11\x1c`\x14\x11\x1c\x00\x16\x11\x1c \x16\x11\x1c\x80\x16\x11\x1c`\x16\x11\x1c`\x15\x11\x1c\xe0\x16\x11\x1c\xc0\x16\x11\x1c`\x12\x11\x1c\x00\x17\x11\x1c \x17\x11\x1c\x80\x17\x11\x1c`\x17\x11\x1c\xc0\x17\x11\x1c\xa0\x17\x11\x1c\x80\x13\x11\x1c \x18\x11\x1c@\x18\x11\x1c\xa0\x16\x11\x1c\x80\x18\x11\x1c`\x18\x11\x1c\xc0\x18\x11\x1c\xe0\x18\x11\x1c\xc0\x12\x11\x1c@\x12\x11\x1c\x00\x19\x11\x1c`\x19\x11\x1c\x80\x19\x11\x1c@\x16\x11\x1c\x80\x12\x11\x1c\xa0\x19\x11\x1c\xc0\x19\x11\x1c \x1a\x11\x1c\x00\x1a\x11\x1c\xa0\x18\x11\x1c@\x1a\x11\x1c`\x1a\x11\x1c\x80\x1a\x11\x1c\xe0\x1a\x11\x1c\xc0\x1a\x11\x1c \x1b\x11\x1c@\x1b\x11\x1c@\x14\x11\x1c\xe0\x19\x11\x1c\xa0\x1b\x11\x1c\xc0\x1b\x11\x1c\xe0\x1b\x11\x1c \x13\x11\x1c@\x17\x11\x1c\x00\x1c\x11\x1c \x1c\x11\x1c@\x1c\x11\x1c\xa0\x1c\x11\x1c\xc0\x1c\x11\x1c\xe0\x1c\x11\x1c \x19\x11\x1c\x80\x1b\x11\x1c\x00\x1d\x11\x1c`\x1d\x11\x1c\x80\x1d\x11\x1c\xa0\x1d\x11\x1c \x12\x11\x1c\xe0\x1d\x11\x1c\xc0\x1d\x11\x1c\x80\x1c\x11\x1c@\x1e\x11\x1c\x80\x1e\x11\x1c@\x19\x11\x1c\x00\x18\x11\x1c\xc0\x1e\x11\x1c \x1d\x11\x1c`\x1c\x11\x1c\xe0\x1e\x11\x1c\xa0\x1f\x11\x1c@\x1d\x11\x1c\x00\x1f\x11\x1c\xa0\x1e\x11\x1c\x80\x1f\x11\x1c \x1e\x11\x1c\x00\x1e\x11\x1c`\x1f\x11\x1c\xe0\x17\x11\x1c \x1f\x11\x1c`\x1e\x11\x1c\xc0\x1f\x11\x1c`\x1b\x11\x1c \xba\xf3\x1b@\x1f\x11\x1c\xe0\x1f\x11\x1c@\x1d8\x05\x80\xf09\x1c@\xf29\x1c@\xf09\x1c\x80\xf19\x1c \xf19\x1c \xf09\x1c\xe0\xf19\x1c@\xf19\x1c\xc0\xf29\x1c`\xf29\x1c\xa0\xf09\x1c\x80\xf29\x1c\xa0\xf29\x1c \xf39\x1c@\xf39\x1c`\xf19\x1c\x00\xf29\x1c\xa0\xf39\x1c\x80\xf39\x1c\xe0\xf39\x1c\xc0\xf39\x1c \xf29\x1c\x00\xf49\x1c`\xf49\x1c@\xf49\x1c\xc0\xf09\x1c\xc0\xf49\x1c\xe0\xf49\x1c`\xf39\x1c\xa0\xf19\x1c\x00\xf59\x1c \xf59\x1c\x80\xf59\x1c\xa0\xf59\x1c\xc0\xf59\x1c\x80\xf49\x1c \xf49\x1c\xe0\xf59\x1c@\xf69\x1c \xf69\x1c\xe0\xf09\x1c`\xf69\x1c\x80\xf69\x1c\xa0\xf69\x1c\xc0\xf69\x1c\xe0\xf69\x1c\x00\xf79\x1c`\xf79\x1c@\xf79\x1c@\xf59\x1c\xc0\xf79\x1c\xa0\xf79\x1c`\xf59\x1c\xe0\xf79\x1c\x00\xf89\x1c`\xf89\x1c\x80\xf89\x1c\xa0\xf89\x1c\x00\xf19\x1c \xf79\x1c\xc0\xf89\x1c \xf99\x1c\x00\xf99\x1c\x00\xf69\x1c@\xf99\x1c\xa0\xf99\x1c\xc0\xf99\x1c\x00\xf39\x1c\x00\xfa9\x1c\xe0\xf99\x1c\x80\xf79\x1c`\xfa9\x1c`\xf99\x1c\xc0\xf19\x1c\xe0\xf89\x1c\xe0\xfa9\x1c\x00\xfb9\x1c\x80\xfa9\x1c\x80\xf99\x1c \xfb9\x1c\x80\xfb9\x1c\xa0\xfb9\x1c\xc0\xfb9\x1c \xfa9\x1c\x00\xfc9\x1c\xe0\xfb9\x1c \xf89\x1c \xfc9\x1c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\x06|H?:\xdd\x1d?OCD?\xaa\x90\x19?\xd0L\x15?\xe3\xd5;?\xda\xfe\x10?\x89\xd6\x1d?\xfd\xe3.?i\xf8??\x8b\x8aY?\xaa=3?\x80_f? \xda\x1d?\xbf-3?\xf7\xd1]?\xe8\x1d\xc2?F\x02@?\xfe\x1ab?\x96\xdfL?.LU?\xb1`&?^\x81H?\xd0\x89Y?\xc7RU?\x9b\xeen?\x1b\xa3*?\xf8\xe5.?\x8a\t\x11?\r\x02Q?\xd7$b?F\x1db?_-3?S\xe8.?{\x94Y?\xcc9D?\xc3\xd8\x1d?\x0fq7?\xea\x1a"?\x0e\x1c"?\xcd\x9d*?\xf5\xea.?b,3?\r\xde]?F\xeb.?N\xc6L?\xe0\x8eY?\xdc\x9fH?\xc0\xf8\x7f?i\xf8??I\x1d"?&\x8eY?rS&?\x00\x88H?X\xf9??dQ\x15?\\bf?\x94Q\x15?X\xfb??n\xd6;?`\x0bQ?\xa8\x03Q?&\x1a"?\x9d\xb4;?\xea\xf6P?yK3?\x86\xf6??|\x11Q?t\x1d"?\x92\xe0.?K\x81H?\xa5\xdc\x1d?\x06\x1d"?\xf7\x0b\x11?\x08\xa5*?\x00\x0bQ?[@D?#43?\xce\xa4*?\x19!"?\xe8r7?Z\xe9.?\x93\x1c"?;\xcd\x1d?\xfem7?O\xca\x8c?\x02.3?h\xe9.?\xbb8D?g\xbc;?VK&?|\xa5j?\x94\xf6??\xc4\xf8??\xf1.3?A\xf5\x1d?\x84p7?3\xd8\x1d?b\xad;?\xe6\tQ?\xd6\x1c"?j\x99Y?\xf3af?\xba\xf6??Z\xc3L?|O\x15?\xe6\xa4*?{[\x15?O;D?\xff+s?\xcd_f?,\xa0*?K\xa7*?P\xcbL?x<D?\xb0\x94Y?@\x91Y?~\xf9??c,s?\xc7""?W\xa2*?]\x8fH?2P\x15?R\x82H?\xfb,3?\xa8\xf6\x1d?h\x92Y?\xb6>D?\xb3\xc6L?\x99\xf8??{_f?\xf6VD?\x91\xfb??P\xe7.?\xfb=D?<a7?I\x99Y?ehf?\x06\x1f3?\xbb\x8aH?\x87\xfd??FPU?\x02\xf7??~\xe8\x1d?8LU?3\xd8\x1d?S\x14b?W\xd7\x1d?Wq7?\xa9k&?\xe4Y&?\x16\xd8\x1d?\x9eqH?\x1f,3?R\x1cb?eff?\xb9p7?\x90q7?\xcd\x7fH?\x86QU?v\xa5*?\xfd\xfa??\xbf^&?.\r\x11?\xef\xac*?\xd2\x84\x88?\xff\xfb??)AD?xm7?\xca\x1f"?\x8973?\xc5\x01@?\x80\x92Y?<j\x86?\xfc\xba;?\xef\xd8]?\xa0\x81\x08?\\\x80H?\xb0\xe9.?\x18\xcc\x8c?\xee\xc7L?hQ\x15?\x19\x0e\x11?6\x82H?\xea~\x19?.\xa8\xaa?P\x81H?\x85\x15b?\xe0\x1a"?p.3?\xcd-3?\xec`\x86?\xec\xc8L?\xff\xb5;?s\x9dY?\x90u7?\xe2\xa8j?\xa3\x1cb?\xf8\xc7L?\xac\xe5.?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\xc8s\xfe\x04hY\xf7\x04\xe0\x99\xb4\x0c\xa8\x9b\xb4\x0c0\x92\xb4\x0cP\x9f\xb4\x0c\xb8\x94\xb4\x0c(\x91\xb4\x0c\xe8\x97\xb4\x0c \x96\xb4\x0c0\x9b\xb4\x0cP\x99\xb4\x0c \x99\xb4\x0c\xc8\x9c\xb4\x0c\x10\x9a\xb4\x0c\x90\x95\xb4\x0c`\x9b\xb4\x0c\xc0\x98\xb4\x0c\xb8\x91\xb4\x0c\x10\x97\xb4\x0c\xa8\x9e\xb4\x0c\xe0\x9c\xb4\x0cH\x98\xb4\x0c\xf0\x98\xb4\x0c0.\xfe\x04h,\xfe\x04X-\xfe\x04\xa8"\xfe\x04 &\xfe\x04\xa0*\xfe\x04H(\xfe\x04`%\xfe\x04\xc0"\xfe\x04h/\xfe\x04@\'\xfe\x04\x80#\xfe\x04h&\xfe\x04\xb0 \xfe\x04\xa0$\xfe\x04\x88$\xfe\x04\xc8)\xfe\x04\xa0\'\xfe\x04\xe8!\xfe\x04\x80,\xfe\x04\x08#\xfe\x04(\'\xfe\x04x"\xfe\x04p*\xfe\x04x.\xfe\x04\x90.\xfe\x04\xa8(\xfe\x04\x10*\xfe\x04P/\xfe\x04\xd8"\xfe\x04P&\xfe\x04\xd0\'\xfe\x04\xc0%\xfe\x04\x80 \xfe\x04\xd0!\xfe\x04\x08&\xfe\x04\x98 \xfe\x04\x90%\xfe\x04H.\xfe\x04\xb8$\xfe\x04`"\xfe\x04\x18%\xfe\x04\xc8 \xfe\x04x+\xfe\x040(\xfe\x04\x98#\xfe\x04\x88-\xfe\x04\xd8+\xfe\x04\xb8\'\xfe\x04\xe0&\xfe\x04\xf8&\xfe\x04P \xfe\x04  \xfe\x04\xe0,\xfe\x04\xb8!\xfe\x04\xe8$\xfe\x04\xe0#\xfe\x04\x10$\xfe\x04\xd8(\xfe\x04X!\xfe\x04\x90+\xfe\x04\xc8#\xfe\x04\x00+\xfe\x04\x10!\xfe\x04($\xfe\x04\xb8*\xfe\x04\xd8%\xfe\x040"\xfe\x04@!\xfe\x04X*\xfe\x04\xf0%\xfe\x048/\xfe\x04\xa8.\xfe\x04`+\xfe\x04\xd0-\xfe\x04H"\xfe\x04\x80/\xfe\x04\xa0!\xfe\x04\x98,\xfe\x04\x98&\xfe\x04\xe0 \xfe\x04\x18"\xfe\x04\xa8%\xfe\x04\xe8\'\xfe\x04 /\xfe\x04h)\xfe\x04\xf0+\xfe\x04\x00"\xfe\x04\xe8*\xfe\x04\xf8)\xfe\x04`.\xfe\x04@$\xfe\x04\x00%\xfe\x04@*\xfe\x04\xf8#\xfe\x04p\'\xfe\x04\xa8+\xfe\x04\x00(\xfe\x04x%\xfe\x04x(\xfe\x04X\'\xfe\x04\xe0/\xfe\x04\xd8.\xfe\x04h#\xfe\x04\xc0+\xfe\x04(-\xfe\x04\xf8,\xfe\x04\xf0.\xfe\x04\x98/\xfe\x04\x88*\xfe\x04\xc8,\xfe\x04\x90(\xfe\x04P,\xfe\x04\xb8-\xfe\x04H%\xfe\x04\x10-\xfe\x04\x88\'\xfe\x04(!\xfe\x04\x10\'\xfe\x04 ,\xfe\x04\xb0,\xfe\x04\x88!\xfe\x040+\xfe\x04\xb0/\xfe\x048#\xfe\x04\xc8/\xfe\x048,\xfe\x04\x08/\xfe\x04p-\xfe\x048&\xfe\x04\xb0&\xfe\x04H+\xfe\x04\x18(\xfe\x04`(\xfe\x04 )\xfe\x048)\xfe\x04\x80)\xfe\x04\x98)\xfe\x04\x08)\xfe\x040%\xfe\x04\xf0"\xfe\x04\xc0.\xfe\x04X$\xfe\x04\xc0(\xfe\x04@-\xfe\x04\xb0#\xfe\x04\xc8&\xfe\x04\x08,\xfe\x04p!\xfe\x04\xf0(\xfe\x04\xa0-\xfe\x04\x18.\xfe\x04\x18+\xfe\x04P#\xfe\x04\xe8-\xfe\x04(*\xfe\x04`\x08\xf6\x04\xa0\r\xf6\x04\x90\x0e\xf6\x04\xc0\x9e\xb4\x0c\x08\x9c\xb4\x0c0\x9e\xb4\x0c \x90\xb4\x0c\xa0\x97\xb4\x0cX\x9a\xb4\x0c\x88\x9d\xb4\x0c8\x99\xb4\x0cx\x9b\xb4\x0c\x98\x96\xb4\x0c \x93\xb4\x0c\xf8\x9c\xb4\x0c\xf0\x9e\xb4\x0c\x08\x99\xb4\x0c\xa8\x98\xb4\x0cX\x9d\xb4\x0c(\x94\xb4\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6436
sg6371
g6426
sg6386
g6430
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6460
sg6371
g6456
sg6386
g6467
sg6380
g6464
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6477
sg6371
g6473
sg6386
g6484
sg6380
g6481
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6436
sg6371
g6490
sg6386
g6430
sg6380
g6497
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6509
sg6371
g6505
sg6386
g6516
sg6380
g6513
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6526
sg6371
g6522
sg6386
g6533
sg6380
g6530
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6509
sg6371
g6590
sg6386
g6516
sg6380
g6597
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6460
sg6371
g6456
sg6386
g6467
sg6380
g6464
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6622
sg6371
g6618
sg6386
g6629
sg6380
g6626
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6526
sg6371
g6648
sg6386
g6533
sg6380
g6655
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6667
sg6371
g6663
sg6386
g6674
sg6380
g6671
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6460
sg6371
g6680
sg6386
g6467
sg6380
g6687
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6705
sg6371
g6695
sg6386
g6699
sg6380
g6703
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6716
sg6371
g6712
sg6386
g6723
sg6380
g6720
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6477
sg6371
g6473
sg6386
g6484
sg6380
g6481
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6509
sg6371
g6590
sg6386
g6516
sg6380
g6597
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6778
sg6371
g6768
sg6386
g6772
sg6380
g6776
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6396
sg6371
g6785
sg6386
g6403
sg6380
g6792
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6436
sg6371
g6490
sg6386
g6430
sg6380
g6497
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6509
sg6371
g6505
sg6386
g6516
sg6380
g6513
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6830
sg6371
g6826
sg6386
g6837
sg6380
g6834
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6396
sg6371
g6785
sg6386
g6403
sg6380
g6792
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6526
sg6371
g6522
sg6386
g6533
sg6380
g6530
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6873
sg6371
g6869
sg6386
g6880
sg6380
g6877
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6460
sg6371
g6456
sg6386
g6467
sg6380
g6464
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6622
sg6371
g6912
sg6386
g6629
sg6380
g6919
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6667
sg6371
g6663
sg6386
g6674
sg6380
g6671
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6944
sg6371
g6940
sg6386
g6951
sg6380
g6948
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6873
sg6371
g6869
sg6386
g6880
sg6380
g6877
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6622
sg6371
g6618
sg6386
g6629
sg6380
g6626
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6830
sg6371
g6983
sg6386
g6837
sg6380
g6990
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6667
sg6371
g6663
sg6386
g6674
sg6380
g6671
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6460
sg6371
g6456
sg6386
g6467
sg6380
g6464
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6413
sg6371
g7037
sg6386
g6420
sg6380
g7044
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6560
sg6371
g7052
sg6386
g6567
sg6380
g7059
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6577
sg6371
g7067
sg6386
g6584
sg6380
g7074
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6384
sg6371
g7082
sg6386
g6376
sg6380
g7089
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6460
sg6371
g6680
sg6386
g6467
sg6380
g6687
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6509
sg6371
g6590
sg6386
g6516
sg6380
g6597
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6716
sg6371
g6712
sg6386
g6723
sg6380
g6720
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6509
sg6371
g6505
sg6386
g6516
sg6380
g6513
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6477
sg6371
g6473
sg6386
g6484
sg6380
g6481
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6667
sg6371
g6663
sg6386
g6674
sg6380
g6671
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6622
sg6371
g6912
sg6386
g6629
sg6380
g6919
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6509
sg6371
g6505
sg6386
g6516
sg6380
g6513
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6543
sg6371
g7201
sg6386
g6550
sg6380
g7208
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6716
sg6371
g7216
sg6386
g6723
sg6380
g7223
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6944
sg6371
g7244
sg6386
g6951
sg6380
g7251
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6667
sg6371
g7259
sg6386
g6674
sg6380
g7266
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6830
sg6371
g6826
sg6386
g6837
sg6380
g6834
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6543
sg6371
g7201
sg6386
g6550
sg6380
g7208
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6477
sg6371
g7313
sg6386
g6484
sg6380
g7320
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6436
sg6371
g6426
sg6386
g6430
sg6380
g6434
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6716
sg6371
g6712
sg6386
g6723
sg6380
g6720
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6384
sg6371
g7082
sg6386
g6376
sg6380
g7089
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6543
sg6371
g7201
sg6386
g6550
sg6380
g7208
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6944
sg6371
g6940
sg6386
g6951
sg6380
g6948
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g7416
sg6371
g7406
sg6386
g7410
sg6380
g7414
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6509
sg6371
g6505
sg6386
g6516
sg6380
g6513
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6944
sg6371
g6940
sg6386
g6951
sg6380
g6948
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6667
sg6371
g7259
sg6386
g6674
sg6380
g7266
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6543
sg6371
g7201
sg6386
g6550
sg6380
g7208
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6384
sg6371
g7082
sg6386
g6376
sg6380
g7089
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6944
sg6371
g6940
sg6386
g6951
sg6380
g6948
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6667
sg6371
g7259
sg6386
g6674
sg6380
g7266
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6873
sg6371
g7553
sg6386
g6880
sg6380
g7560
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6477
sg6371
g6473
sg6386
g6484
sg6380
g6481
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6384
sg6371
g7082
sg6386
g6376
sg6380
g7089
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6778
sg6371
g7594
sg6386
g6772
sg6380
g7601
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6396
sg6371
g6785
sg6386
g6403
sg6380
g6792
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6944
sg6371
g7244
sg6386
g6951
sg6380
g7251
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6622
sg6371
g6618
sg6386
g6629
sg6380
g6626
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6873
sg6371
g7553
sg6386
g6880
sg6380
g7560
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6477
sg6371
g6473
sg6386
g6484
sg6380
g6481
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6436
sg6371
g6490
sg6386
g6430
sg6380
g6497
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g7416
sg6371
g7687
sg6386
g7410
sg6380
g7694
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6526
sg6371
g6522
sg6386
g6533
sg6380
g6530
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g7416
sg6371
g7406
sg6386
g7410
sg6380
g7414
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6413
sg6371
g7037
sg6386
g6420
sg6380
g7044
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6436
sg6371
g6426
sg6386
g6430
sg6380
g6434
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6830
sg6371
g6826
sg6386
g6837
sg6380
g6834
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6526
sg6371
g6648
sg6386
g6533
sg6380
g6655
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6509
sg6371
g6590
sg6386
g6516
sg6380
g6597
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6667
sg6371
g7259
sg6386
g6674
sg6380
g7266
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6705
sg6371
g6695
sg6386
g6699
sg6380
g6703
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6778
sg6371
g6768
sg6386
g6772
sg6380
g6776
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6830
sg6371
g6826
sg6386
g6837
sg6380
g6834
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6873
sg6371
g6869
sg6386
g6880
sg6380
g6877
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6436
sg6371
g6426
sg6386
g6430
sg6380
g6434
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6477
sg6371
g7313
sg6386
g6484
sg6380
g7320
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6944
sg6371
g6940
sg6386
g6951
sg6380
g6948
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6526
sg6371
g6522
sg6386
g6533
sg6380
g6530
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6705
sg6371
g7923
sg6386
g6699
sg6380
g7930
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6560
sg6371
g7052
sg6386
g6567
sg6380
g7059
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6944
sg6371
g7244
sg6386
g6951
sg6380
g7251
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6560
sg6371
g7052
sg6386
g6567
sg6380
g7059
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6778
sg6371
g7594
sg6386
g6772
sg6380
g7601
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6560
sg6371
g7052
sg6386
g6567
sg6380
g7059
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6830
sg6371
g6983
sg6386
g6837
sg6380
g6990
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6705
sg6371
g6695
sg6386
g6699
sg6380
g6703
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g7416
sg6371
g7687
sg6386
g7410
sg6380
g7694
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6460
sg6371
g6456
sg6386
g6467
sg6380
g6464
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6577
sg6371
g7067
sg6386
g6584
sg6380
g7074
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6716
sg6371
g6712
sg6386
g6723
sg6380
g6720
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6622
sg6371
g6912
sg6386
g6629
sg6380
g6919
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6778
sg6371
g6768
sg6386
g6772
sg6380
g6776
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g7416
sg6371
g7687
sg6386
g7410
sg6380
g7694
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6705
sg6371
g6695
sg6386
g6699
sg6380
g6703
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6577
sg6371
g7067
sg6386
g6584
sg6380
g7074
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6778
sg6371
g7594
sg6386
g6772
sg6380
g7601
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6705
sg6371
g7923
sg6386
g6699
sg6380
g7930
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6526
sg6371
g6648
sg6386
g6533
sg6380
g6655
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6622
sg6371
g6912
sg6386
g6629
sg6380
g6919
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6705
sg6371
g6695
sg6386
g6699
sg6380
g6703
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6477
sg6371
g7313
sg6386
g6484
sg6380
g7320
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6413
sg6371
g7037
sg6386
g6420
sg6380
g7044
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6622
sg6371
g6618
sg6386
g6629
sg6380
g6626
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6873
sg6371
g7553
sg6386
g6880
sg6380
g7560
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6667
sg6371
g7259
sg6386
g6674
sg6380
g7266
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6460
sg6371
g6680
sg6386
g6467
sg6380
g6687
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6413
sg6371
g6409
sg6386
g6420
sg6380
g6417
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6384
sg6371
g7082
sg6386
g6376
sg6380
g7089
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6509
sg6371
g6590
sg6386
g6516
sg6380
g6597
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6778
sg6371
g7594
sg6386
g6772
sg6380
g7601
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6413
sg6371
g7037
sg6386
g6420
sg6380
g7044
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6830
sg6371
g6983
sg6386
g6837
sg6380
g6990
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6396
sg6371
g6785
sg6386
g6403
sg6380
g6792
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6622
sg6371
g6618
sg6386
g6629
sg6380
g6626
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6543
sg6371
g6539
sg6386
g6550
sg6380
g6547
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6830
sg6371
g6983
sg6386
g6837
sg6380
g6990
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6778
sg6371
g6768
sg6386
g6772
sg6380
g6776
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6477
sg6371
g7313
sg6386
g6484
sg6380
g7320
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6873
sg6371
g7553
sg6386
g6880
sg6380
g7560
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6778
sg6371
g6768
sg6386
g6772
sg6380
g6776
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6705
sg6371
g7923
sg6386
g6699
sg6380
g7930
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6873
sg6371
g6869
sg6386
g6880
sg6380
g6877
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6705
sg6371
g7923
sg6386
g6699
sg6380
g7930
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6526
sg6371
g6522
sg6386
g6533
sg6380
g6530
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6716
sg6371
g6712
sg6386
g6723
sg6380
g6720
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6830
sg6371
g6826
sg6386
g6837
sg6380
g6834
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6436
sg6371
g6490
sg6386
g6430
sg6380
g6497
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6716
sg6371
g7216
sg6386
g6723
sg6380
g7223
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6560
sg6371
g7052
sg6386
g6567
sg6380
g7059
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6705
sg6371
g7923
sg6386
g6699
sg6380
g7930
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6577
sg6371
g7067
sg6386
g6584
sg6380
g7074
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6716
sg6371
g7216
sg6386
g6723
sg6380
g7223
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6944
sg6371
g7244
sg6386
g6951
sg6380
g7251
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g7416
sg6371
g7406
sg6386
g7410
sg6380
g7414
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6384
sg6371
g6372
sg6386
g6376
sg6380
g6381
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6716
sg6371
g7216
sg6386
g6723
sg6380
g7223
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g7416
sg6371
g7687
sg6386
g7410
sg6380
g7694
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6396
sg6371
g6392
sg6386
g6403
sg6380
g6400
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6667
sg6371
g6663
sg6386
g6674
sg6380
g6671
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g7416
sg6371
g7406
sg6386
g7410
sg6380
g7414
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6436
sg6371
g6490
sg6386
g6430
sg6380
g6497
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g7416
sg6371
g7687
sg6386
g7410
sg6380
g7694
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6436
sg6371
g6426
sg6386
g6430
sg6380
g6434
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6560
sg6371
g6556
sg6386
g6567
sg6380
g6564
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6716
sg6371
g7216
sg6386
g6723
sg6380
g7223
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6543
sg6371
g7201
sg6386
g6550
sg6380
g7208
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6526
sg6371
g6648
sg6386
g6533
sg6380
g6655
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6477
sg6371
g7313
sg6386
g6484
sg6380
g7320
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6577
sg6371
g7067
sg6386
g6584
sg6380
g7074
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6778
sg6371
g7594
sg6386
g6772
sg6380
g7601
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6460
sg6371
g6680
sg6386
g6467
sg6380
g6687
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6873
sg6371
g6869
sg6386
g6880
sg6380
g6877
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g7416
sg6371
g7406
sg6386
g7410
sg6380
g7414
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6830
sg6371
g6983
sg6386
g6837
sg6380
g6990
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6526
sg6371
g6648
sg6386
g6533
sg6380
g6655
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6944
sg6371
g7244
sg6386
g6951
sg6380
g7251
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6873
sg6371
g7553
sg6386
g6880
sg6380
g7560
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6396
sg6371
g6785
sg6386
g6403
sg6380
g6792
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6577
sg6371
g6573
sg6386
g6584
sg6380
g6581
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6622
sg6371
g6912
sg6386
g6629
sg6380
g6919
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6413
sg6371
g7037
sg6386
g6420
sg6380
g7044
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6460
sg6371
g6680
sg6386
g6467
sg6380
g6687
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.