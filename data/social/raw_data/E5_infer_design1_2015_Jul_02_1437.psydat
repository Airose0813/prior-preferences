ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E5_infer_design1_2015_Jul_02_1437
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vy
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x8d\xf2b\xafx\x04N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_02_1437
p67
sVparticipant
p68
VE5
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F2.5167602869987604
sg14
S'space'
p89
sg59
g63
sg58
Vy
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F7.3332528416103742
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P1\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F13.817
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F0.2199999999999987
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x02\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p103
sg21
F1.8
sg70
Vn
sa(dp104
g64
g65
sg20
F11.4
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0.8199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'&\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V50-polo.png
p110
sg21
F1.6000000000000001
sg70
Vn
sa(dp111
g64
g65
sg20
F27.015999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F2.5000000000000009
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\x00\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p117
sg21
F1.5
sg70
Vn
sa(dp118
g64
g65
sg20
F4.5670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F0.53999999999999937
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'"\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p124
sg21
F1.2
sg70
Vn
sa(dp125
g64
g65
sg20
F5.2839999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.87999999999999945
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x08\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p131
sg21
F1.3999999999999999
sg70
Vn
sa(dp132
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.61999999999999922
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x1a\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V35-raisins.png
p138
sg21
F1.3999999999999999
sg70
Vn
sa(dp139
g64
g65
sg20
F7.0670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0.55999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x10\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V22-daim.png
p145
sg21
F1.5
sg70
Vn
sa(dp146
g64
g65
sg20
F3.0339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.99999999999999978
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x12\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p152
sg21
F1.2
sg70
Vn
sa(dp153
g64
g65
sg20
F6.3179999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.77999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x13\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p159
sg21
F2
sg70
Vn
sa(dp160
g64
g65
sg20
F6.0839999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F1.6000000000000001
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\x1c\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p166
sg21
F1.6000000000000001
sg70
Vn
sa(dp167
g64
g65
sg20
F3.0840000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.31999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x11\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p173
sg21
F2
sg70
Vn
sa(dp174
g64
g65
sg20
F2.4670000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F1.5399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x1f\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p180
sg21
F1.7
sg70
Vn
sa(dp181
g64
g65
sg20
F4.4340000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.89999999999999947
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x14\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p187
sg21
F1.3999999999999999
sg70
Vn
sa(dp188
g64
g65
sg20
F9.3670000000000009
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0.15999999999999873
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x07\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p194
sg21
F1.7
sg70
Vn
sa(dp195
g64
g65
sg20
F8.6340000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F1.8600000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x17\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p201
sg21
F1.2
sg70
Vn
sa(dp202
g64
g65
sg20
F3.8839999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F1.3399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x18\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p208
sg21
F1.6000000000000001
sg70
Vn
sa(dp209
g64
g65
sg20
F2.8170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.0199999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x15\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V29-beans.png
p215
sg21
F2
sg70
Vn
sa(dp216
g64
g65
sg20
F3.7669999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.19999999999999871
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x19\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p222
sg21
F1.7
sg70
Vn
sa(dp223
g64
g65
sg20
F2.1669999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F1.5200000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x1b\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p229
sg21
F1.3
sg70
Vn
sa(dp230
g64
g65
sg20
F1.5509999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.91999999999999926
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\r\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p236
sg21
F1.8
sg70
Vn
sa(dp237
g64
g65
sg20
F3.9510000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.2399999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x1e\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p243
sg21
F1.6000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F6.7670000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F1.2199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'#\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p250
sg21
F1.7
sg70
Vn
sa(dp251
g64
g65
sg20
F4.3010000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F1.6400000000000003
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'$\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V48-twix.png
p257
sg21
F1.3
sg70
Vn
sa(dp258
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.7399999999999991
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\t\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p264
sg21
F1.7
sg70
Vn
sa(dp265
g64
g65
sg20
F3.1669999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.15999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x16\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p271
sg21
F1.6000000000000001
sg70
Vn
sa(dp272
g64
g65
sg20
F5.3170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.8599999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x03\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V4-corn.png
p278
sg21
F1.7
sg70
Vn
sa(dp279
g64
g65
sg20
F1.601
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x01\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p285
sg21
F1.3999999999999999
sg70
Vn
sa(dp286
g64
g65
sg20
F2.734
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.87999999999999967
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\n\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p292
sg21
F1.3
sg70
Vn
sa(dp293
g64
g65
sg20
F2.1339999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.47999999999999909
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x0b\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p299
sg21
F1.3999999999999999
sg70
Vn
sa(dp300
g64
g65
sg20
F2.5169999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.13999999999999874
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x06\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V7-olives.png
p306
sg21
F1.7
sg70
Vn
sa(dp307
g64
g65
sg20
F2.3839999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x1d\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V40-sardines.png
p313
sg21
F1.3999999999999999
sg70
Vn
sa(dp314
g64
g65
sg20
F5.7169999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.13999999999999918
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'\x05\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p320
sg21
F1.2
sg70
Vn
sa(dp321
g64
g65
sg20
F1.901
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F1.6800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x04\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p327
sg21
F1.5
sg70
Vn
sa(dp328
g64
g65
sg20
F1.784
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F1.0199999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'!\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V44-crunch.png
p334
sg21
F1.2
sg70
Vn
sa(dp335
g64
g65
sg20
F2.867
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S' \x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p341
sg21
F1.3999999999999999
sg70
Vn
sa(dp342
g64
g65
sg20
F4.5170000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F1.6800000000000002
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S"'\x00\x00\x00"
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V51-mars.png
p348
sg21
F1.5
sg70
Vn
sa(dp349
g64
g65
sg20
F1.484
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.61999999999999966
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'%\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p355
sg21
F1
sg70
Vn
sa(dp356
g64
g65
sg20
F6.3840000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x0f\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p362
sg21
F1.3999999999999999
sg70
Vn
sa(dp363
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x0c\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V18-mms.png
p369
sg21
F1.6000000000000001
sg70
Vn
sa(dp370
g64
g65
sg20
F3.9009999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x0e\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p376
sg21
F1.5
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F5.767153788896394
sg58
Vy
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p381
sg26
F3.0999999999999992
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'44-crunch.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F9.9831720030197175
sg27
F6.9340000000000002
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'5-pineapple.png'
p390
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'40-sardines.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'left'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F1.2333511137367168
sg27
F1.2509999999999999
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p399
sg26
F5.1000000000000014
sg28
F3
sg59
g63
sg58
Vy
sg81
S'36-fig_rolls.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F3.2166990201585577
sg27
F1.5669999999999999
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'44-crunch.png'
p408
sg26
F2.7999999999999985
sg28
F4.2999999999999998
sg59
g63
sg58
Vy
sg81
S'26-walkers_smoky_bacon.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F10.382972208688443
sg27
F6.5999999999999996
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p417
sg26
F5.5
sg28
F3
sg59
g63
sg58
Vy
sg81
S'16-skips_prawn.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'left'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F3.4499797155149281
sg27
F1.5509999999999999
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p426
sg26
F5.6999999999999993
sg28
F3.2000000000000002
sg59
g63
sg58
Vy
sg81
S'18-mms.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F2.4666252519164118
sg27
F1.901
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p435
sg26
F4.3000000000000007
sg28
F4
sg59
g63
sg58
Vy
sg81
S'33-ambrosia_rice.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F3.1999445775982167
sg27
F6.0670000000000002
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p444
sg26
F3.7000000000000006
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'3-ellas_strawberries_apples.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F3.7833876486147346
sg27
F2.8010000000000002
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'49-yorkie.png'
p453
sg26
F4.9000000000000021
sg28
F3
sg59
g63
sg58
Vy
sg81
S'35-raisins.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F6.2330654488941946
sg27
F3.0339999999999998
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'31-hobnobs.png'
p462
sg26
F2.6999999999999988
sg28
F4
sg59
g63
sg58
Vy
sg81
S'25-kitkat.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F2.8334286024655739
sg27
F1.351
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p471
sg26
F5.4999999999999991
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'30-spaghetti_hoops.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.0834306693977851
sg27
F1.651
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p480
sg26
F3.1000000000000001
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'20-fruit_pastilles.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F3.3334313108643983
sg27
F1.784
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p489
sg26
F5.8999999999999986
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'38-maltesers.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F2.3997970696254924
sg27
F1.484
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'46-pistachios.png'
p498
sg26
F5.4000000000000004
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'29-beans.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.7833639857599337
sg27
F3.851
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p507
sg26
F4.4000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vy
sg81
S'2-steamed_puddings.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F3.3166298276883026
sg27
F3.0339999999999998
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'18-mms.png'
p516
sg26
F5.5999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'43-mrporky_pork_crackles_redo.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.683454275236727
sg27
F1.4510000000000001
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p525
sg26
F4.3000000000000007
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'42-mrkipling_lemon_slices.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F1.2500012116543076
sg27
F1.667
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'25-kitkat.png'
p534
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'31-hobnobs.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.70016566850245
sg27
F1.851
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'7-olives.png'
p543
sg26
F5.1000000000000005
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'22-daim.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F2.0667557682463666
sg27
F1.234
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'4-corn.png'
p552
sg26
F2.3999999999999986
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'10-bounty_redo.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F4.2166479882143904
sg27
F2.0840000000000001
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'22-daim.png'
p561
sg26
F5.4999999999999991
sg28
F3.2999999999999998
sg59
g63
sg58
Vy
sg81
S'7-olives.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F1.4834535339905415
sg27
F1.417
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p570
sg26
F3.7000000000000002
sg28
F3.7000000000000002
sg59
g63
sg58
Vy
sg81
S'1-treacle_cookies.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'left'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F34.998839379666606
sg27
F2.7170000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p579
sg26
F4.3000000000000007
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'23-crunchie_redo.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F2.0001185993751278
sg27
F2.6339999999999999
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p588
sg26
F5.0000000000000018
sg28
F2.7000000000000002
sg59
g63
sg58
Vy
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.2168184748152271
sg27
F1.7010000000000001
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p597
sg26
F4.4000000000000004
sg28
F4
sg59
g63
sg58
Vy
sg81
S'45-chewy_nougat_redo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F2.0834734335985559
sg27
F1.3169999999999999
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p606
sg26
F2.2999999999999985
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'4-corn.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.6501212935218064
sg27
F1.034
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p615
sg26
F5.3999999999999995
sg28
F3.2999999999999998
sg59
g63
sg58
Vy
sg81
S'19-caramello_redo.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.1170917950621515
sg27
F3.4670000000000001
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'48-twix.png'
p624
sg26
F4.5000000000000009
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'50-polo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.3333637434297998
sg27
F0.98399999999999999
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'51-mars.png'
p633
sg26
F3.6000000000000001
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'27-hartleys_raspberries_jelly.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.8000192153813259
sg27
F0.66700000000000004
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p642
sg26
F2.4999999999999996
sg28
F3
sg59
g63
sg58
Vy
sg81
S'13-mccoys_steak_crisps.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'right'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.7500241617708525
sg27
F1.351
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p651
sg26
F4
sg28
F4
sg59
g63
sg58
Vy
sg81
S'41-peanuts_redo.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'right'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F1.3166931186970032
sg27
F1.034
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p660
sg26
F5.2999999999999998
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'8-liquorice_catherine_wheels.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F2.0666839243967843
sg27
F1.784
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'29-beans.png'
p669
sg26
F5.4000000000000004
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'46-pistachios.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F0.96670351039938396
sg27
F1.234
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p678
sg26
F3.8999999999999999
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'21-nakd_banana_crunch.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'right'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F3.1499620681570377
sg27
F2.9340000000000002
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p687
sg26
F5.0000000000000009
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'17-jacobs_mini_cheddars_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'right'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.0665998214717547
sg27
F1.284
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'40-sardines.png'
p696
sg26
F5.5999999999999988
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'5-pineapple.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.2834718940866878
sg27
F1.0009999999999999
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p705
sg26
F4.2000000000000002
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'51-mars.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'right'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.3333454973690095
sg27
F2.8839999999999999
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'50-polo.png'
p714
sg26
F5.2000000000000002
sg28
F4
sg59
g63
sg58
Vy
sg81
S'48-twix.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F1.0834634552848001
sg27
F0.90100000000000002
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'38-maltesers.png'
p723
sg26
F5.5999999999999996
sg28
F2.7000000000000002
sg59
g63
sg58
Vy
sg81
S'6-sour_patch_kids.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.2331053621455794
sg27
F1.401
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'35-raisins.png'
p732
sg26
F5.8999999999999977
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'49-yorkie.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'left'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F1.2667260043672286
sg27
F1.167
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vy
sg59
g63
sg30
F284.43908197241035
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vy
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F6.3833513845747802
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'32-hovis_crackers.png'
p744
sg83
S'24-food_doctor_apple_walnut_bar.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x02\x0e4\x01\x02]x'
tRp754
sa(dp755
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p756
sg83
S'9-yu_mango_pieces.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'9-yu_mango_pieces.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x02\x0e4\t\x0f\x07\xa8'
tRp765
sa(dp766
g64
g65
sg82
S'15-walnut_whip.png'
p767
sg83
S'15-walnut_whip.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'28-maple_pecan.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x02\x0e4\x11\x02t\xe8'
tRp776
sa(dp777
g64
g65
sg82
S'53-cheestrings.png'
p778
sg83
S'47-picnic.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'47-picnic.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x02\x0e4\x17\nd('
tRp787
sa(dp788
g64
g65
sg82
S'52-aero_mousse.png'
p789
sg83
S'14-discos_salt_vinegar.png'
p790
sg56
g57
sS'practice_loop.thisN'
p791
I4
sS'practice_loop.thisTrialN'
p792
I4
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p793
I0
sg84
S'14-discos_salt_vinegar.png'
p794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p795
sS'practice_loop.thisIndex'
p796
g60
(g99
S'\x04\x00\x00\x00'
tRp797
sg34
g753
(S'\x07\xdf\x07\x02\x0e4\x1e\x05;\xd8'
tRp798
sa(dp799
g64
g65
sg82
S'11-snickers.png'
p800
sg83
S'54-frubes_yogurt.png'
p801
sg56
g57
sS'practice_loop.thisN'
p802
I5
sS'practice_loop.thisTrialN'
p803
I5
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p804
I0
sg84
S'54-frubes_yogurt.png'
p805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p806
sS'practice_loop.thisIndex'
p807
g60
(g99
S'\x05\x00\x00\x00'
tRp808
sg34
g753
(S'\x07\xdf\x07\x02\x0e4%\x04\x1a\xc8'
tRp809
sa(dp810
g64
g65
sg82
S'12-topic.png'
p811
sg83
S'39-mackerel.png'
p812
sg56
g57
sS'practice_loop.thisN'
p813
I6
sS'practice_loop.thisTrialN'
p814
I6
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p815
I0
sg84
S'39-mackerel.png'
p816
sg33
g811
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p817
sS'practice_loop.thisIndex'
p818
g60
(g99
S'\x06\x00\x00\x00'
tRp819
sg34
g753
(S'\x07\xdf\x07\x02\x0e4+\r\xb7\xb8'
tRp820
sa(dp821
g64
g65
sg82
g744
sg83
S'32-hovis_crackers.png'
p822
sg56
g57
sS'practice_loop.thisN'
p823
I7
sS'practice_loop.thisTrialN'
p824
I7
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p825
I0
sg84
g749
sg33
g749
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x02\x0e42\x07 8'
tRp829
sa(dp830
g64
g65
sg82
g756
sg83
S'37-nakd_cashew_cookie.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x02\x0e48\n\x12 '
tRp838
sa(dp839
g64
g65
sg82
g811
sg83
S'12-topic.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g816
sg33
g811
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x02\x0e5\x05\n\xcd\xa0'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'28-maple_pecan.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x02\x0e5\x0c\t\xeb\x10'
tRp856
sa(dp857
g64
g65
sg82
g778
sg83
S'53-cheestrings.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x02\x0e5\x14\x05\xad '
tRp865
sa(dp866
g64
g65
sg82
g789
sg83
S'52-aero_mousse.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g794
sg33
g789
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x02\x0e5\x1b\x06tX'
tRp874
sa(dp875
g64
g65
sg82
g800
sg83
S'11-snickers.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g805
sg33
g800
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x02\x0e5"\x01\r\x88'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F165.36075107616125
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'5-pineapple.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'40-sardines.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'40-sardines.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
S'5-pineapple.png'
p908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p909
I0
sS'img_wrong'
p910
g900
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F4.266460581246065
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02\x05\x08\xd1\xd0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'30-spaghetti_hoops.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'30-spaghetti_hoops.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'19-caramello_redo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
S'19-caramello_redo.png'
p926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p927
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F2.3332708025700413
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02\x0e\r\x1f`'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'35-raisins.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'49-yorkie.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'49-yorkie.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p943
I0
sg910
S'35-raisins.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F2.2665093324285408
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02\x16\x03\xa5\x98'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'21-nakd_banana_crunch.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'1-treacle_cookies.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'1-treacle_cookies.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p960
I0
sg910
S'21-nakd_banana_crunch.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F0.98322360515521723
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02\x1d\x08=`'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'45-chewy_nougat_redo.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'41-peanuts_redo.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'41-peanuts_redo.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p977
I0
sg910
S'45-chewy_nougat_redo.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F2.3502610184114019
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02#\x08T\xd0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
S'13-mccoys_steak_crisps.png'
p984
sS'block_loop.thisIndex'
p985
g889
sg38
S'right'
p986
sg59
g63
sS'trial_loop.thisN'
p987
I5
sg33
S'3-ellas_strawberries_apples.png'
p988
sg64
g65
sS'trial_loop.thisIndex'
p989
g60
(g99
S'\x05\x00\x00\x00'
tRp990
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p991
I0
sg904
S'3-ellas_strawberries_apples.png'
p992
sS'block_loop.thisRepN'
p993
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p994
I0
sg910
S'13-mccoys_steak_crisps.png'
p995
sg55
g11
sS'block_loop.thisTrial'
p996
Nsg70
Vn
sS'block_loop.thisTrialN'
p997
I0
sg39
F1.8999942125774396
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x02*\x0eW\xe0'
tRp998
sa(dp999
S'trial_loop.thisTrialN'
p1000
I6
sg895
S'42-mrkipling_lemon_slices.png'
p1001
sS'block_loop.thisIndex'
p1002
g889
sg38
S'left'
p1003
sg59
g63
sS'trial_loop.thisN'
p1004
I6
sg33
S'42-mrkipling_lemon_slices.png'
p1005
sg64
g65
sS'trial_loop.thisIndex'
p1006
g60
(g99
S'\x06\x00\x00\x00'
tRp1007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1008
I0
sg904
S'16-skips_prawn.png'
p1009
sS'block_loop.thisRepN'
p1010
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1011
I0
sg910
S'16-skips_prawn.png'
p1012
sg55
g11
sS'block_loop.thisTrial'
p1013
Nsg70
Vn
sS'block_loop.thisTrialN'
p1014
I0
sg39
F1.7664829611749155
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x021\r:\xb8'
tRp1015
sa(dp1016
S'trial_loop.thisTrialN'
p1017
I7
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1018
sS'block_loop.thisIndex'
p1019
g889
sg38
S'left'
p1020
sg59
g63
sS'trial_loop.thisN'
p1021
I7
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1022
sg64
g65
sS'trial_loop.thisIndex'
p1023
g60
(g99
S'\x07\x00\x00\x00'
tRp1024
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1025
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1026
sS'block_loop.thisRepN'
p1027
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1028
I0
sg910
S'8-liquorice_catherine_wheels.png'
p1029
sg55
g11
sS'block_loop.thisTrial'
p1030
Nsg70
Vn
sS'block_loop.thisTrialN'
p1031
I0
sg39
F2.1999026686862635
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x028\n1`'
tRp1032
sa(dp1033
S'trial_loop.thisTrialN'
p1034
I8
sg895
S'43-mrporky_pork_crackles_redo.png'
p1035
sS'block_loop.thisIndex'
p1036
g889
sg38
S'right'
p1037
sg59
g63
sS'trial_loop.thisN'
p1038
I8
sg33
S'43-mrporky_pork_crackles_redo.png'
p1039
sg64
g65
sS'trial_loop.thisIndex'
p1040
g60
(g99
S'\x08\x00\x00\x00'
tRp1041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1042
I0
sg904
S'18-mms.png'
p1043
sS'block_loop.thisRepN'
p1044
I0
sg907
S'18-mms.png'
p1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1046
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p1047
Nsg70
Vn
sS'block_loop.thisTrialN'
p1048
I0
sg39
F1.1998778654524358
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03\x03\r\xd6\xf8'
tRp1049
sa(dp1050
S'trial_loop.thisTrialN'
p1051
I9
sg895
S'4-corn.png'
p1052
sS'block_loop.thisIndex'
p1053
g889
sg38
S'right'
p1054
sg59
g63
sS'trial_loop.thisN'
p1055
I9
sg33
S'10-bounty_redo.png'
p1056
sg64
g65
sS'trial_loop.thisIndex'
p1057
g60
(g99
S'\t\x00\x00\x00'
tRp1058
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1059
I0
sg904
S'10-bounty_redo.png'
p1060
sS'block_loop.thisRepN'
p1061
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1062
I0
sg910
S'4-corn.png'
p1063
sg55
g11
sS'block_loop.thisTrial'
p1064
Nsg70
Vn
sS'block_loop.thisTrialN'
p1065
I0
sg39
F1.0503080875350861
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03\n\x01\xff\xb8'
tRp1066
sa(dp1067
S'trial_loop.thisTrialN'
p1068
I10
sg895
S'26-walkers_smoky_bacon.png'
p1069
sS'block_loop.thisIndex'
p1070
g889
sg38
S'left'
p1071
sg59
g63
sS'trial_loop.thisN'
p1072
I10
sg33
S'44-crunch.png'
p1073
sg64
g65
sS'trial_loop.thisIndex'
p1074
g60
(g99
S'\n\x00\x00\x00'
tRp1075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1076
I0
sg904
S'44-crunch.png'
p1077
sS'block_loop.thisRepN'
p1078
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1079
I0
sg910
S'26-walkers_smoky_bacon.png'
p1080
sg55
g11
sS'block_loop.thisTrial'
p1081
Nsg70
Vn
sS'block_loop.thisTrialN'
p1082
I0
sg39
F1.3832256578316446
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03\x10\x03G\xd8'
tRp1083
sa(dp1084
S'trial_loop.thisTrialN'
p1085
I11
sg895
S'18-mms.png'
p1086
sS'block_loop.thisIndex'
p1087
g889
sg38
S'right'
p1088
sg59
g63
sS'trial_loop.thisN'
p1089
I11
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p1090
g60
(g99
S'\x0b\x00\x00\x00'
tRp1091
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1092
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1093
sS'block_loop.thisRepN'
p1094
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1095
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p1096
Nsg70
Vn
sS'block_loop.thisTrialN'
p1097
I0
sg39
F1.4331825087610923
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03\x16\t\x918'
tRp1098
sa(dp1099
S'trial_loop.thisTrialN'
p1100
I12
sg895
S'2-steamed_puddings.png'
p1101
sS'block_loop.thisIndex'
p1102
g889
sg38
S'left'
p1103
sg59
g63
sS'trial_loop.thisN'
p1104
I12
sg33
S'2-steamed_puddings.png'
p1105
sg64
g65
sS'trial_loop.thisIndex'
p1106
g60
(g99
S'\x0c\x00\x00\x00'
tRp1107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1108
I0
sg904
S'20-fruit_pastilles.png'
p1109
sS'block_loop.thisRepN'
p1110
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1111
I0
sg910
S'20-fruit_pastilles.png'
p1112
sg55
g11
sS'block_loop.thisTrial'
p1113
Nsg70
Vn
sS'block_loop.thisTrialN'
p1114
I0
sg39
F1.3499177644443989
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03\x1d\x01\x8a\x88'
tRp1115
sa(dp1116
S'trial_loop.thisTrialN'
p1117
I13
sg895
S'3-ellas_strawberries_apples.png'
p1118
sS'block_loop.thisIndex'
p1119
g889
sg38
S'left'
p1120
sg59
g63
sS'trial_loop.thisN'
p1121
I13
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1122
g60
(g99
S'\r\x00\x00\x00'
tRp1123
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1124
I0
sg904
S'13-mccoys_steak_crisps.png'
p1125
sS'block_loop.thisRepN'
p1126
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1127
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1128
Nsg70
Vn
sS'block_loop.thisTrialN'
p1129
I0
sg39
F0.91662634953172528
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03#\x07V\xe8'
tRp1130
sa(dp1131
S'trial_loop.thisTrialN'
p1132
I14
sg895
g896
sS'block_loop.thisIndex'
p1133
g889
sg38
S'left'
p1134
sg59
g63
sS'trial_loop.thisN'
p1135
I14
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1136
g60
(g99
S'\x0e\x00\x00\x00'
tRp1137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1138
I0
sg904
g905
sS'block_loop.thisRepN'
p1139
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1140
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1141
Nsg70
Vn
sS'block_loop.thisTrialN'
p1142
I0
sg39
F1.583327322587138
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x03)\x06\xb6\xc0'
tRp1143
sa(dp1144
S'trial_loop.thisTrialN'
p1145
I15
sg895
S'7-olives.png'
p1146
sS'block_loop.thisIndex'
p1147
g889
sg38
S'right'
p1148
sg59
g63
sS'trial_loop.thisN'
p1149
I15
sg33
S'22-daim.png'
p1150
sg64
g65
sS'trial_loop.thisIndex'
p1151
g60
(g99
S'\x0f\x00\x00\x00'
tRp1152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1153
I0
sg904
S'22-daim.png'
p1154
sS'block_loop.thisRepN'
p1155
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1156
I0
sg910
S'7-olives.png'
p1157
sg55
g11
sS'block_loop.thisTrial'
p1158
Nsg70
Vn
sS'block_loop.thisTrialN'
p1159
I0
sg39
F1.2665908695016697
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x030\x00\xd6\xd8'
tRp1160
sa(dp1161
S'trial_loop.thisTrialN'
p1162
I16
sg895
g1086
sS'block_loop.thisIndex'
p1163
g889
sg38
S'left'
p1164
sg59
g63
sS'trial_loop.thisN'
p1165
I16
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p1166
g60
(g99
S'\x10\x00\x00\x00'
tRp1167
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1168
I0
sg904
g1093
sS'block_loop.thisRepN'
p1169
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1170
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p1171
Nsg70
Vn
sS'block_loop.thisTrialN'
p1172
I0
sg39
F1.5498939875542419
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x036\x05r\x88'
tRp1173
sa(dp1174
S'trial_loop.thisTrialN'
p1175
I17
sg895
S'31-hobnobs.png'
p1176
sS'block_loop.thisIndex'
p1177
g889
sg38
S'left'
p1178
sg59
g63
sS'trial_loop.thisN'
p1179
I17
sg33
S'25-kitkat.png'
p1180
sg64
g65
sS'trial_loop.thisIndex'
p1181
g60
(g99
S'\x11\x00\x00\x00'
tRp1182
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1183
I0
sg904
S'25-kitkat.png'
p1184
sS'block_loop.thisRepN'
p1185
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1186
I0
sg910
S'31-hobnobs.png'
p1187
sg55
g11
sS'block_loop.thisTrial'
p1188
Nsg70
Vn
sS'block_loop.thisTrialN'
p1189
I0
sg39
F1.5664619782110094
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04\x00\x0eW\xe0'
tRp1190
sa(dp1191
S'trial_loop.thisTrialN'
p1192
I18
sg895
g950
sS'block_loop.thisIndex'
p1193
g889
sg38
S'right'
p1194
sg59
g63
sS'trial_loop.thisN'
p1195
I18
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1196
g60
(g99
S'\x12\x00\x00\x00'
tRp1197
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1198
I0
sg904
g958
sS'block_loop.thisRepN'
p1199
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1200
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1201
Nsg70
Vn
sS'block_loop.thisTrialN'
p1202
I0
sg39
F1.0332634186197538
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04\x07\x089x'
tRp1203
sa(dp1204
S'trial_loop.thisTrialN'
p1205
I19
sg895
S'29-beans.png'
p1206
sS'block_loop.thisIndex'
p1207
g889
sg38
S'right'
p1208
sg59
g63
sS'trial_loop.thisN'
p1209
I19
sg33
S'46-pistachios.png'
p1210
sg64
g65
sS'trial_loop.thisIndex'
p1211
g60
(g99
S'\x13\x00\x00\x00'
tRp1212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1213
I0
sg904
S'46-pistachios.png'
p1214
sS'block_loop.thisRepN'
p1215
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1216
I0
sg910
S'29-beans.png'
p1217
sg55
g11
sS'block_loop.thisTrial'
p1218
Nsg70
Vn
sS'block_loop.thisTrialN'
p1219
I0
sg39
F1.5502406626510492
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04\r\t\x08\x80'
tRp1220
sa(dp1221
S'trial_loop.thisTrialN'
p1222
I20
sg895
S'25-kitkat.png'
p1223
sS'block_loop.thisIndex'
p1224
g889
sg38
S'left'
p1225
sg59
g63
sS'trial_loop.thisN'
p1226
I20
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1227
g60
(g99
S'\x14\x00\x00\x00'
tRp1228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1229
I0
sg904
S'31-hobnobs.png'
p1230
sS'block_loop.thisRepN'
p1231
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1232
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p1233
Nsg70
Vn
sS'block_loop.thisTrialN'
p1234
I0
sg39
F1.4332822918840975
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04\x14\x02\xab\x98'
tRp1235
sa(dp1236
S'trial_loop.thisTrialN'
p1237
I21
sg895
S'8-liquorice_catherine_wheels.png'
p1238
sS'block_loop.thisIndex'
p1239
g889
sg38
S'right'
p1240
sg59
g63
sS'trial_loop.thisN'
p1241
I21
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p1242
g60
(g99
S'\x15\x00\x00\x00'
tRp1243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1244
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p1245
sS'block_loop.thisRepN'
p1246
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1247
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1248
Nsg70
Vn
sS'block_loop.thisTrialN'
p1249
I0
sg39
F1.5164994253937039
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04\x1a\t\xe7('
tRp1250
sa(dp1251
S'trial_loop.thisTrialN'
p1252
I22
sg895
g984
sS'block_loop.thisIndex'
p1253
g889
sg38
S'right'
p1254
sg59
g63
sS'trial_loop.thisN'
p1255
I22
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1256
g60
(g99
S'\x16\x00\x00\x00'
tRp1257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1258
I0
sg904
g992
sS'block_loop.thisRepN'
p1259
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1260
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1261
Nsg70
Vn
sS'block_loop.thisTrialN'
p1262
I0
sg39
F1.0999749971997517
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04!\x03\x11('
tRp1263
sa(dp1264
S'trial_loop.thisTrialN'
p1265
I23
sg895
S'33-ambrosia_rice.png'
p1266
sS'block_loop.thisIndex'
p1267
g889
sg38
S'right'
p1268
sg59
g63
sS'trial_loop.thisN'
p1269
I23
sg33
S'23-crunchie_redo.png'
p1270
sg64
g65
sS'trial_loop.thisIndex'
p1271
g60
(g99
S'\x17\x00\x00\x00'
tRp1272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1273
I0
sg904
S'23-crunchie_redo.png'
p1274
sS'block_loop.thisRepN'
p1275
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1276
I0
sg910
S'33-ambrosia_rice.png'
p1277
sg55
g11
sS'block_loop.thisTrial'
p1278
Nsg70
Vn
sS'block_loop.thisTrialN'
p1279
I0
sg39
F2.4498673882226285
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x04'\x05\x10\xe0"
tRp1280
sa(dp1281
S'trial_loop.thisTrialN'
p1282
I24
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1283
sS'block_loop.thisIndex'
p1284
g889
sg38
S'right'
p1285
sg59
g63
sS'trial_loop.thisN'
p1286
I24
sg33
S'36-fig_rolls.png'
p1287
sg64
g65
sS'trial_loop.thisIndex'
p1288
g60
(g99
S'\x18\x00\x00\x00'
tRp1289
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1290
I0
sg904
S'36-fig_rolls.png'
p1291
sS'block_loop.thisRepN'
p1292
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1293
I0
sg910
S'34-hula_hoops_bbq_beef_redo.png'
p1294
sg55
g11
sS'block_loop.thisTrial'
p1295
Nsg70
Vn
sS'block_loop.thisTrialN'
p1296
I0
sg39
F1.1670170004799729
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04.\x0c\x83 '
tRp1297
sa(dp1298
S'trial_loop.thisTrialN'
p1299
I25
sg895
S'22-daim.png'
p1300
sS'block_loop.thisIndex'
p1301
g889
sg38
S'left'
p1302
sg59
g63
sS'trial_loop.thisN'
p1303
I25
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1304
g60
(g99
S'\x19\x00\x00\x00'
tRp1305
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1306
I0
sg904
S'7-olives.png'
p1307
sS'block_loop.thisRepN'
p1308
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1309
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p1310
Nsg70
Vn
sS'block_loop.thisTrialN'
p1311
I0
sg39
F1.0999077148590004
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x045\x002\xc8'
tRp1312
sa(dp1313
S'trial_loop.thisTrialN'
p1314
I26
sg895
S'50-polo.png'
p1315
sS'block_loop.thisIndex'
p1316
g889
sg38
S'right'
p1317
sg59
g63
sS'trial_loop.thisN'
p1318
I26
sg33
S'50-polo.png'
p1319
sg64
g65
sS'trial_loop.thisIndex'
p1320
g60
(g99
S'\x1a\x00\x00\x00'
tRp1321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1322
I0
sg904
S'48-twix.png'
p1323
sS'block_loop.thisRepN'
p1324
I0
sg907
S'48-twix.png'
p1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1326
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p1327
Nsg70
Vn
sS'block_loop.thisTrialN'
p1328
I0
sg39
F1.149665284621733
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x04;\x022\x80'
tRp1329
sa(dp1330
S'trial_loop.thisTrialN'
p1331
I27
sg895
g1238
sS'block_loop.thisIndex'
p1332
g889
sg38
S'right'
p1333
sg59
g63
sS'trial_loop.thisN'
p1334
I27
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1335
g60
(g99
S'\x1b\x00\x00\x00'
tRp1336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1337
I0
sg904
g1245
sS'block_loop.thisRepN'
p1338
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1339
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1340
Nsg70
Vn
sS'block_loop.thisTrialN'
p1341
I0
sg39
F1.5499242075857182
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05\x05\x05$h'
tRp1342
sa(dp1343
S'trial_loop.thisTrialN'
p1344
I28
sg895
S'44-crunch.png'
p1345
sS'block_loop.thisIndex'
p1346
g889
sg38
S'left'
p1347
sg59
g63
sS'trial_loop.thisN'
p1348
I28
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1349
g60
(g99
S'\x1c\x00\x00\x00'
tRp1350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1351
I0
sg904
S'26-walkers_smoky_bacon.png'
p1352
sS'block_loop.thisRepN'
p1353
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1354
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p1355
Nsg70
Vn
sS'block_loop.thisTrialN'
p1356
I0
sg39
F1.4166455934209807
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05\x0b\x0e\t\xc0'
tRp1357
sa(dp1358
S'trial_loop.thisTrialN'
p1359
I29
sg895
S'40-sardines.png'
p1360
sS'block_loop.thisIndex'
p1361
g889
sg38
S'right'
p1362
sg59
g63
sS'trial_loop.thisN'
p1363
I29
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1364
g60
(g99
S'\x1d\x00\x00\x00'
tRp1365
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1366
I0
sg904
S'5-pineapple.png'
p1367
sS'block_loop.thisRepN'
p1368
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1369
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1370
Nsg70
Vn
sS'block_loop.thisTrialN'
p1371
I0
sg39
F1.017035260792909
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05\x12\x05\x89\xf8'
tRp1372
sa(dp1373
S'trial_loop.thisTrialN'
p1374
I30
sg895
g1069
sS'block_loop.thisIndex'
p1375
g889
sg38
S'right'
p1376
sg59
g63
sS'trial_loop.thisN'
p1377
I30
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1378
g60
(g99
S'\x1e\x00\x00\x00'
tRp1379
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1380
I0
sg904
g1077
sS'block_loop.thisRepN'
p1381
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1382
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p1383
Nsg70
Vn
sS'block_loop.thisTrialN'
p1384
I0
sg39
F0.96651705849581049
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05\x18\x06Y\x00'
tRp1385
sa(dp1386
S'trial_loop.thisTrialN'
p1387
I31
sg895
S'6-sour_patch_kids.png'
p1388
sS'block_loop.thisIndex'
p1389
g889
sg38
S'right'
p1390
sg59
g63
sS'trial_loop.thisN'
p1391
I31
sg33
S'38-maltesers.png'
p1392
sg64
g65
sS'trial_loop.thisIndex'
p1393
g60
(g99
S'\x1f\x00\x00\x00'
tRp1394
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1395
I0
sg904
S'38-maltesers.png'
p1396
sS'block_loop.thisRepN'
p1397
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1398
I0
sg910
S'6-sour_patch_kids.png'
p1399
sg55
g11
sS'block_loop.thisTrial'
p1400
Nsg70
Vn
sS'block_loop.thisTrialN'
p1401
I0
sg39
F1.5995857004527352
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05\x1e\x06pp'
tRp1402
sa(dp1403
S'trial_loop.thisTrialN'
p1404
I32
sg895
S'41-peanuts_redo.png'
p1405
sS'block_loop.thisIndex'
p1406
g889
sg38
S'left'
p1407
sg59
g63
sS'trial_loop.thisN'
p1408
I32
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1409
g60
(g99
S' \x00\x00\x00'
tRp1410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1411
I0
sg904
S'45-chewy_nougat_redo.png'
p1412
sS'block_loop.thisRepN'
p1413
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1414
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1415
Nsg70
Vn
sS'block_loop.thisTrialN'
p1416
I0
sg39
F1.6998802887574129
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05%\x00\xcb '
tRp1417
sa(dp1418
S'trial_loop.thisTrialN'
p1419
I33
sg895
S'20-fruit_pastilles.png'
p1420
sS'block_loop.thisIndex'
p1421
g889
sg38
S'right'
p1422
sg59
g63
sS'trial_loop.thisN'
p1423
I33
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p1424
g60
(g99
S'!\x00\x00\x00'
tRp1425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1426
I0
sg904
S'2-steamed_puddings.png'
p1427
sS'block_loop.thisRepN'
p1428
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1429
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p1430
Nsg70
Vn
sS'block_loop.thisTrialN'
p1431
I0
sg39
F2.4331619819458865
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x05+\x0b\xd7@'
tRp1432
sa(dp1433
S'trial_loop.thisTrialN'
p1434
I34
sg895
g1300
sS'block_loop.thisIndex'
p1435
g889
sg38
S'left'
p1436
sg59
g63
sS'trial_loop.thisN'
p1437
I34
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1438
g60
(g99
S'"\x00\x00\x00'
tRp1439
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1440
I0
sg904
g1307
sS'block_loop.thisRepN'
p1441
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1442
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p1443
Nsg70
Vn
sS'block_loop.thisTrialN'
p1444
I0
sg39
F1.3831945825186267
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x053\x03\xc8\xc0'
tRp1445
sa(dp1446
S'trial_loop.thisTrialN'
p1447
I35
sg895
S'38-maltesers.png'
p1448
sS'block_loop.thisIndex'
p1449
g889
sg38
S'left'
p1450
sg59
g63
sS'trial_loop.thisN'
p1451
I35
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p1452
g60
(g99
S'#\x00\x00\x00'
tRp1453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1454
I0
sg904
S'6-sour_patch_kids.png'
p1455
sS'block_loop.thisRepN'
p1456
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1457
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p1458
Nsg70
Vn
sS'block_loop.thisTrialN'
p1459
I0
sg39
F1.0330119651371206
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x059\n\x12 '
tRp1460
sa(dp1461
S'trial_loop.thisTrialN'
p1462
I36
sg895
g1238
sS'block_loop.thisIndex'
p1463
g889
sg38
S'right'
p1464
sg59
g63
sS'trial_loop.thisN'
p1465
I36
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1466
g60
(g99
S'$\x00\x00\x00'
tRp1467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1468
I0
sg904
g1245
sS'block_loop.thisRepN'
p1469
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1470
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1471
Nsg70
Vn
sS'block_loop.thisTrialN'
p1472
I0
sg39
F1.7496598108045873
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06\x03\x0b\x1b\xc0'
tRp1473
sa(dp1474
S'trial_loop.thisTrialN'
p1475
I37
sg895
S'51-mars.png'
p1476
sS'block_loop.thisIndex'
p1477
g889
sg38
S'left'
p1478
sg59
g63
sS'trial_loop.thisN'
p1479
I37
sg33
S'51-mars.png'
p1480
sg64
g65
sS'trial_loop.thisIndex'
p1481
g60
(g99
S'%\x00\x00\x00'
tRp1482
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1483
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1484
sS'block_loop.thisRepN'
p1485
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1486
I0
sg910
S'27-hartleys_raspberries_jelly.png'
p1487
sg55
g11
sS'block_loop.thisTrial'
p1488
Nsg70
Vn
sS'block_loop.thisTrialN'
p1489
I0
sg39
F1.2833766724725137
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06\n\x07\xd7\xd0'
tRp1490
sa(dp1491
S'trial_loop.thisTrialN'
p1492
I38
sg895
S'46-pistachios.png'
p1493
sS'block_loop.thisIndex'
p1494
g889
sg38
S'left'
p1495
sg59
g63
sS'trial_loop.thisN'
p1496
I38
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p1497
g60
(g99
S'&\x00\x00\x00'
tRp1498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1499
I0
sg904
S'29-beans.png'
p1500
sS'block_loop.thisRepN'
p1501
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1502
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p1503
Nsg70
Vn
sS'block_loop.thisTrialN'
p1504
I0
sg39
F1.0667090127244592
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06\x10\x0c\xb2\x00'
tRp1505
sa(dp1506
S'trial_loop.thisTrialN'
p1507
I39
sg895
g1018
sS'block_loop.thisIndex'
p1508
g889
sg38
S'left'
p1509
sg59
g63
sS'trial_loop.thisN'
p1510
I39
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1511
g60
(g99
S"'\x00\x00\x00"
tRp1512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1513
I0
sg904
g1026
sS'block_loop.thisRepN'
p1514
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1515
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1516
Nsg70
Vn
sS'block_loop.thisTrialN'
p1517
I0
sg39
F1.1999739423517894
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06\x16\x0e8\xa0'
tRp1518
sa(dp1519
S'trial_loop.thisTrialN'
p1520
I40
sg895
g967
sS'block_loop.thisIndex'
p1521
g889
sg38
S'right'
p1522
sg59
g63
sS'trial_loop.thisN'
p1523
I40
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1524
g60
(g99
S'(\x00\x00\x00'
tRp1525
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1526
I0
sg904
g975
sS'block_loop.thisRepN'
p1527
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1528
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p1529
Nsg70
Vn
sS'block_loop.thisTrialN'
p1530
I0
sg39
F0.89996399254596327
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06\x1d\x02\x9f\xe0'
tRp1531
sa(dp1532
S'trial_loop.thisTrialN'
p1533
I41
sg895
g896
sS'block_loop.thisIndex'
p1534
g889
sg38
S'left'
p1535
sg59
g63
sS'trial_loop.thisN'
p1536
I41
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1537
g60
(g99
S')\x00\x00\x00'
tRp1538
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1539
I0
sg904
g905
sS'block_loop.thisRepN'
p1540
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1541
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1542
Nsg70
Vn
sS'block_loop.thisTrialN'
p1543
I0
sg39
F0.93320289302573656
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06#\x01\x86\xa0'
tRp1544
sa(dp1545
S'trial_loop.thisTrialN'
p1546
I42
sg895
S'48-twix.png'
p1547
sS'block_loop.thisIndex'
p1548
g889
sg38
S'left'
p1549
sg59
g63
sS'trial_loop.thisN'
p1550
I42
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p1551
g60
(g99
S'*\x00\x00\x00'
tRp1552
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1553
I0
sg904
S'50-polo.png'
p1554
sS'block_loop.thisRepN'
p1555
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1556
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p1557
Nsg70
Vn
sS'block_loop.thisTrialN'
p1558
I0
sg39
F1.7162219142555841
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06)\x00\xe6x'
tRp1559
sa(dp1560
S'trial_loop.thisTrialN'
p1561
I43
sg895
S'1-treacle_cookies.png'
p1562
sS'block_loop.thisIndex'
p1563
g889
sg38
S'left'
p1564
sg59
g63
sS'trial_loop.thisN'
p1565
I43
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1566
g60
(g99
S'+\x00\x00\x00'
tRp1567
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1568
I0
sg904
S'21-nakd_banana_crunch.png'
p1569
sS'block_loop.thisRepN'
p1570
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1571
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p1572
Nsg70
Vn
sS'block_loop.thisTrialN'
p1573
I0
sg39
F1.2165359460195759
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x06/\x0ck\xb0'
tRp1574
sa(dp1575
S'trial_loop.thisTrialN'
p1576
I44
sg895
g1360
sS'block_loop.thisIndex'
p1577
g889
sg38
S'right'
p1578
sg59
g63
sS'trial_loop.thisN'
p1579
I44
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p1580
g60
(g99
S',\x00\x00\x00'
tRp1581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1582
I0
sg904
g1367
sS'block_loop.thisRepN'
p1583
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1584
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p1585
Nsg70
Vn
sS'block_loop.thisTrialN'
p1586
I0
sg39
F1.0333204375529021
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x066\x01\r\x88'
tRp1587
sa(dp1588
S'trial_loop.thisTrialN'
p1589
I45
sg895
S'16-skips_prawn.png'
p1590
sS'block_loop.thisIndex'
p1591
g889
sg38
S'right'
p1592
sg59
g63
sS'trial_loop.thisN'
p1593
I45
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1594
g60
(g99
S'-\x00\x00\x00'
tRp1595
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1596
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1597
sS'block_loop.thisRepN'
p1598
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1599
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1600
Nsg70
Vn
sS'block_loop.thisTrialN'
p1601
I0
sg39
F1.1831359670541133
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07\x00\x02\x1b\x10'
tRp1602
sa(dp1603
S'trial_loop.thisTrialN'
p1604
I46
sg895
g1176
sS'block_loop.thisIndex'
p1605
g889
sg38
S'right'
p1606
sg59
g63
sS'trial_loop.thisN'
p1607
I46
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1608
g60
(g99
S'.\x00\x00\x00'
tRp1609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1610
I0
sg904
g1184
sS'block_loop.thisRepN'
p1611
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1612
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p1613
Nsg70
Vn
sS'block_loop.thisTrialN'
p1614
I0
sg39
F2.0999028682526841
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07\x06\x05Kx'
tRp1615
sa(dp1616
S'trial_loop.thisTrialN'
p1617
I47
sg895
g1493
sS'block_loop.thisIndex'
p1618
g889
sg38
S'left'
p1619
sg59
g63
sS'trial_loop.thisN'
p1620
I47
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p1621
g60
(g99
S'/\x00\x00\x00'
tRp1622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1623
I0
sg904
g1500
sS'block_loop.thisRepN'
p1624
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1625
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p1626
Nsg70
Vn
sS'block_loop.thisTrialN'
p1627
I0
sg39
F1.1331751248071669
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07\r\x07C`'
tRp1628
sa(dp1629
S'trial_loop.thisTrialN'
p1630
I48
sg895
g1118
sS'block_loop.thisIndex'
p1631
g889
sg38
S'left'
p1632
sg59
g63
sS'trial_loop.thisN'
p1633
I48
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1634
g60
(g99
S'0\x00\x00\x00'
tRp1635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1636
I0
sg904
g1125
sS'block_loop.thisRepN'
p1637
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1638
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1639
Nsg70
Vn
sS'block_loop.thisTrialN'
p1640
I0
sg39
F2.233156679183594
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07\x13\t\xf6\xc8'
tRp1641
sa(dp1642
S'trial_loop.thisTrialN'
p1643
I49
sg895
S'36-fig_rolls.png'
p1644
sS'block_loop.thisIndex'
p1645
g889
sg38
S'left'
p1646
sg59
g63
sS'trial_loop.thisN'
p1647
I49
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p1648
g60
(g99
S'1\x00\x00\x00'
tRp1649
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1650
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1651
sS'block_loop.thisRepN'
p1652
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1653
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p1654
Nsg70
Vn
sS'block_loop.thisTrialN'
p1655
I0
sg39
F0.7167578922053508
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07\x1a\r\xd6\xf8'
tRp1656
sa(dp1657
S'trial_loop.thisTrialN'
p1658
I50
sg895
g984
sS'block_loop.thisIndex'
p1659
g889
sg38
S'right'
p1660
sg59
g63
sS'trial_loop.thisN'
p1661
I50
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1662
g60
(g99
S'2\x00\x00\x00'
tRp1663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1664
I0
sg904
g992
sS'block_loop.thisRepN'
p1665
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1666
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1667
Nsg70
Vn
sS'block_loop.thisTrialN'
p1668
I0
sg39
F0.79995449889247539
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07 \n!\xc0'
tRp1669
sa(dp1670
S'trial_loop.thisTrialN'
p1671
I51
sg895
g1018
sS'block_loop.thisIndex'
p1672
g889
sg38
S'left'
p1673
sg59
g63
sS'trial_loop.thisN'
p1674
I51
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1675
g60
(g99
S'3\x00\x00\x00'
tRp1676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1677
I0
sg904
g1026
sS'block_loop.thisRepN'
p1678
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1679
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1680
Nsg70
Vn
sS'block_loop.thisTrialN'
p1681
I0
sg39
F1.4832217520342965
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07&\x07\x99P'
tRp1682
sa(dp1683
S'trial_loop.thisTrialN'
p1684
I52
sg895
S'27-hartleys_raspberries_jelly.png'
p1685
sS'block_loop.thisIndex'
p1686
g889
sg38
S'right'
p1687
sg59
g63
sS'trial_loop.thisN'
p1688
I52
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p1689
g60
(g99
S'4\x00\x00\x00'
tRp1690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1691
I0
sg904
S'51-mars.png'
p1692
sS'block_loop.thisRepN'
p1693
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1694
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p1695
Nsg70
Vn
sS'block_loop.thisTrialN'
p1696
I0
sg39
F1.099999230245885
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x07-\x00J8'
tRp1697
sa(dp1698
S'trial_loop.thisTrialN'
p1699
I53
sg895
g1052
sS'block_loop.thisIndex'
p1700
g889
sg38
S'right'
p1701
sg59
g63
sS'trial_loop.thisN'
p1702
I53
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1703
g60
(g99
S'5\x00\x00\x00'
tRp1704
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1705
I0
sg904
g1060
sS'block_loop.thisRepN'
p1706
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1707
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p1708
Nsg70
Vn
sS'block_loop.thisTrialN'
p1709
I0
sg39
F1.383248465404904
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x073\x02I\xf0'
tRp1710
sa(dp1711
S'trial_loop.thisTrialN'
p1712
I54
sg895
g1176
sS'block_loop.thisIndex'
p1713
g889
sg38
S'right'
p1714
sg59
g63
sS'trial_loop.thisN'
p1715
I54
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1716
g60
(g99
S'6\x00\x00\x00'
tRp1717
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1718
I0
sg904
g1184
sS'block_loop.thisRepN'
p1719
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1720
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p1721
Nsg70
Vn
sS'block_loop.thisTrialN'
p1722
I0
sg39
F1.3499462739091541
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x079\x08\x93P'
tRp1723
sa(dp1724
S'trial_loop.thisTrialN'
p1725
I55
sg895
g1146
sS'block_loop.thisIndex'
p1726
g889
sg38
S'right'
p1727
sg59
g63
sS'trial_loop.thisN'
p1728
I55
sg33
g1157
sg64
g65
sS'trial_loop.thisIndex'
p1729
g60
(g99
S'7\x00\x00\x00'
tRp1730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1731
I0
sg904
g1154
sS'block_loop.thisRepN'
p1732
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1733
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p1734
Nsg70
Vn
sS'block_loop.thisTrialN'
p1735
I0
sg39
F0.86653122770076152
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08\x03\x0e_\xb0'
tRp1736
sa(dp1737
S'trial_loop.thisTrialN'
p1738
I56
sg895
g1035
sS'block_loop.thisIndex'
p1739
g889
sg38
S'right'
p1740
sg59
g63
sS'trial_loop.thisN'
p1741
I56
sg33
g1039
sg64
g65
sS'trial_loop.thisIndex'
p1742
g60
(g99
S'8\x00\x00\x00'
tRp1743
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1744
I0
sg904
g1043
sS'block_loop.thisRepN'
p1745
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1746
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p1747
Nsg70
Vn
sS'block_loop.thisTrialN'
p1748
I0
sg39
F1.6331823947184603
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08\t\r\x07\xf0'
tRp1749
sa(dp1750
S'trial_loop.thisTrialN'
p1751
I57
sg895
S'10-bounty_redo.png'
p1752
sS'block_loop.thisIndex'
p1753
g889
sg38
S'left'
p1754
sg59
g63
sS'trial_loop.thisN'
p1755
I57
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1756
g60
(g99
S'9\x00\x00\x00'
tRp1757
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1758
I0
sg904
S'4-corn.png'
p1759
sS'block_loop.thisRepN'
p1760
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1761
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p1762
Nsg70
Vn
sS'block_loop.thisTrialN'
p1763
I0
sg39
F1.8330243382479239
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08\x10\x07\xdf\xa0'
tRp1764
sa(dp1765
S'trial_loop.thisTrialN'
p1766
I58
sg895
g1223
sS'block_loop.thisIndex'
p1767
g889
sg38
S'left'
p1768
sg59
g63
sS'trial_loop.thisN'
p1769
I58
sg33
g1187
sg64
g65
sS'trial_loop.thisIndex'
p1770
g60
(g99
S':\x00\x00\x00'
tRp1771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1772
I0
sg904
g1230
sS'block_loop.thisRepN'
p1773
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1774
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p1775
Nsg70
Vn
sS'block_loop.thisTrialN'
p1776
I0
sg39
F1.349845065313275
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08\x17\x05\xcc`'
tRp1777
sa(dp1778
S'trial_loop.thisTrialN'
p1779
I59
sg895
g1345
sS'block_loop.thisIndex'
p1780
g889
sg38
S'left'
p1781
sg59
g63
sS'trial_loop.thisN'
p1782
I59
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1783
g60
(g99
S';\x00\x00\x00'
tRp1784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1785
I0
sg904
g1352
sS'block_loop.thisRepN'
p1786
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1787
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p1788
Nsg70
Vn
sS'block_loop.thisTrialN'
p1789
I0
sg39
F0.95005398267312557
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08\x1d\x0b\x98\xc0'
tRp1790
sa(dp1791
S'trial_loop.thisTrialN'
p1792
I60
sg895
g933
sS'block_loop.thisIndex'
p1793
g889
sg38
S'right'
p1794
sg59
g63
sS'trial_loop.thisN'
p1795
I60
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1796
g60
(g99
S'<\x00\x00\x00'
tRp1797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1798
I0
sg904
g941
sS'block_loop.thisRepN'
p1799
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1800
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p1801
Nsg70
Vn
sS'block_loop.thisTrialN'
p1802
I0
sg39
F1.1170102579926606
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08#\x0bq\xb0'
tRp1803
sa(dp1804
S'trial_loop.thisTrialN'
p1805
I61
sg895
g1069
sS'block_loop.thisIndex'
p1806
g889
sg38
S'right'
p1807
sg59
g63
sS'trial_loop.thisN'
p1808
I61
sg33
g1080
sg64
g65
sS'trial_loop.thisIndex'
p1809
g60
(g99
S'=\x00\x00\x00'
tRp1810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1811
I0
sg904
g1077
sS'block_loop.thisRepN'
p1812
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1813
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p1814
Nsg70
Vn
sS'block_loop.thisTrialN'
p1815
I0
sg39
F1.2499738425649412
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x08)\r\xaf\xe8'
tRp1816
sa(dp1817
S'trial_loop.thisTrialN'
p1818
I62
sg895
g1018
sS'block_loop.thisIndex'
p1819
g889
sg38
S'left'
p1820
sg59
g63
sS'trial_loop.thisN'
p1821
I62
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p1822
g60
(g99
S'>\x00\x00\x00'
tRp1823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1824
I0
sg904
g1026
sS'block_loop.thisRepN'
p1825
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1826
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p1827
Nsg70
Vn
sS'block_loop.thisTrialN'
p1828
I0
sg39
F1.083295249438379
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x080\x02\xce\xc0'
tRp1829
sa(dp1830
S'trial_loop.thisTrialN'
p1831
I63
sg895
g1752
sS'block_loop.thisIndex'
p1832
g889
sg38
S'left'
p1833
sg59
g63
sS'trial_loop.thisN'
p1834
I63
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p1835
g60
(g99
S'?\x00\x00\x00'
tRp1836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1837
I0
sg904
g1759
sS'block_loop.thisRepN'
p1838
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1839
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p1840
Nsg70
Vn
sS'block_loop.thisTrialN'
p1841
I0
sg39
F1.0832792841392802
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x086\x04\x8f\xf8'
tRp1842
sa(dp1843
S'trial_loop.thisTrialN'
p1844
I64
sg895
g1206
sS'block_loop.thisIndex'
p1845
g889
sg38
S'right'
p1846
sg59
g63
sS'trial_loop.thisN'
p1847
I64
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p1848
g60
(g99
S'@\x00\x00\x00'
tRp1849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1850
I0
sg904
g1214
sS'block_loop.thisRepN'
p1851
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1852
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p1853
Nsg70
Vn
sS'block_loop.thisTrialN'
p1854
I0
sg39
F0.65038671664296999
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x00\x06Q0'
tRp1855
sa(dp1856
S'trial_loop.thisTrialN'
p1857
I65
sg895
g1001
sS'block_loop.thisIndex'
p1858
g889
sg38
S'left'
p1859
sg59
g63
sS'trial_loop.thisN'
p1860
I65
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1861
g60
(g99
S'A\x00\x00\x00'
tRp1862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1863
I0
sg904
g1009
sS'block_loop.thisRepN'
p1864
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1865
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1866
Nsg70
Vn
sS'block_loop.thisTrialN'
p1867
I0
sg39
F1.0165223755102488
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x06\x01g`'
tRp1868
sa(dp1869
S'trial_loop.thisTrialN'
p1870
I66
sg895
g1223
sS'block_loop.thisIndex'
p1871
g889
sg38
S'left'
p1872
sg59
g63
sS'trial_loop.thisN'
p1873
I66
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p1874
g60
(g99
S'B\x00\x00\x00'
tRp1875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1876
I0
sg904
g1230
sS'block_loop.thisRepN'
p1877
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1878
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p1879
Nsg70
Vn
sS'block_loop.thisTrialN'
p1880
I0
sg39
F1.1332880222907988
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x0c\x026h'
tRp1881
sa(dp1882
S'trial_loop.thisTrialN'
p1883
I67
sg895
g1146
sS'block_loop.thisIndex'
p1884
g889
sg38
S'right'
p1885
sg59
g63
sS'trial_loop.thisN'
p1886
I67
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1887
g60
(g99
S'C\x00\x00\x00'
tRp1888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1889
I0
sg904
g1154
sS'block_loop.thisRepN'
p1890
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1891
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p1892
Nsg70
Vn
sS'block_loop.thisTrialN'
p1893
I0
sg39
F0.83324756735964911
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x12\x04\xaf8'
tRp1894
sa(dp1895
S'trial_loop.thisTrialN'
p1896
I68
sg895
g1035
sS'block_loop.thisIndex'
p1897
g889
sg38
S'left'
p1898
sg59
g63
sS'trial_loop.thisN'
p1899
I68
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p1900
g60
(g99
S'D\x00\x00\x00'
tRp1901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1902
I0
sg904
g1043
sS'block_loop.thisRepN'
p1903
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1904
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vn
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.2832193002250278
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x18\x02\xa3\xc8'
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1001
sS'block_loop.thisIndex'
p1910
g889
sg38
S'left'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1009
sS'block_loop.thisRepN'
p1916
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1917
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vn
sS'block_loop.thisTrialN'
p1919
I0
sg39
F0.86655745640746318
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t\x1e\x07}\xf8'
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1476
sS'block_loop.thisIndex'
p1923
g889
sg38
S'left'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1484
sS'block_loop.thisRepN'
p1929
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1930
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vn
sS'block_loop.thisTrialN'
p1932
I0
sg39
F1.0498952704765543
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t$\x06&8'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
g1146
sS'block_loop.thisIndex'
p1936
g889
sg38
S'right'
p1937
sg59
g63
sS'trial_loop.thisN'
p1938
I71
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p1939
g60
(g99
S'G\x00\x00\x00'
tRp1940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1941
I0
sg904
g1154
sS'block_loop.thisRepN'
p1942
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1943
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vn
sS'block_loop.thisTrialN'
p1945
I0
sg39
F0.78318808236144832
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t*\x07nX'
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1118
sS'block_loop.thisIndex'
p1949
g889
sg38
S'left'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1125
sS'block_loop.thisRepN'
p1955
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1956
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vn
sS'block_loop.thisTrialN'
p1958
I0
sg39
F1.8499384338101663
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t0\x04p\xb8'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1388
sS'block_loop.thisIndex'
p1962
g889
sg38
S'right'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1396
sS'block_loop.thisRepN'
p1968
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1969
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vn
sS'block_loop.thisTrialN'
p1971
I0
sg39
F1.2663502496143337
sg34
g753
(S'\x07\xdf\x07\x02\x0f\t7\x02\xd6\x90'
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1101
sS'block_loop.thisIndex'
p1975
g889
sg38
S'left'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1112
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1109
sS'block_loop.thisRepN'
p1981
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1982
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vn
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.84995953081306652
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n\x01\x077\xa8'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1547
sS'block_loop.thisIndex'
p1988
g889
sg38
S'left'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1554
sS'block_loop.thisRepN'
p1994
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1995
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vn
sS'block_loop.thisTrialN'
p1997
I0
sg39
F4.333111434661987
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n\x07\x05\xa1h'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1300
sS'block_loop.thisIndex'
p2001
g889
sg38
S'left'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1307
sS'block_loop.thisRepN'
p2007
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2008
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vn
sS'block_loop.thisTrialN'
p2010
I0
sg39
F0.9332043185022485
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n\x10\x0b\x1f\xa8'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g1685
sS'block_loop.thisIndex'
p2014
g889
sg38
S'right'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g1692
sS'block_loop.thisRepN'
p2020
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2021
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vn
sS'block_loop.thisTrialN'
p2023
I0
sg39
F1.1165632295742398
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n\x16\n\x83h'
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
g1420
sS'block_loop.thisIndex'
p2027
g889
sg38
S'right'
p2028
sg59
g63
sS'trial_loop.thisN'
p2029
I78
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2030
g60
(g99
S'N\x00\x00\x00'
tRp2031
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2032
I0
sg904
g1427
sS'block_loop.thisRepN'
p2033
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2034
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p2035
Nsg70
Vn
sS'block_loop.thisTrialN'
p2036
I0
sg39
F0.8332655283229542
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n\x1c\x0c\xfc8'
tRp2037
sa(dp2038
S'trial_loop.thisTrialN'
p2039
I79
sg895
g1118
sS'block_loop.thisIndex'
p2040
g889
sg38
S'left'
p2041
sg59
g63
sS'trial_loop.thisN'
p2042
I79
sg33
g995
sg64
g65
sS'trial_loop.thisIndex'
p2043
g60
(g99
S'O\x00\x00\x00'
tRp2044
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2045
I0
sg904
g1125
sS'block_loop.thisRepN'
p2046
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2047
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2048
Nsg70
Vn
sS'block_loop.thisTrialN'
p2049
I0
sg39
F1.0166632122673036
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n"\n\xec\xe0'
tRp2050
sa(dp2051
S'trial_loop.thisTrialN'
p2052
I80
sg895
g1448
sS'block_loop.thisIndex'
p2053
g889
sg38
S'left'
p2054
sg59
g63
sS'trial_loop.thisN'
p2055
I80
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2056
g60
(g99
S'P\x00\x00\x00'
tRp2057
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2058
I0
sg904
g1455
sS'block_loop.thisRepN'
p2059
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2060
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p2061
Nsg70
Vn
sS'block_loop.thisTrialN'
p2062
I0
sg39
F0.64955424025538377
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n(\x0b\xbb\xe8'
tRp2063
sa(dp2064
S'trial_loop.thisTrialN'
p2065
I81
sg895
g1562
sS'block_loop.thisIndex'
p2066
g889
sg38
S'left'
p2067
sg59
g63
sS'trial_loop.thisN'
p2068
I81
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2069
g60
(g99
S'Q\x00\x00\x00'
tRp2070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2071
I0
sg904
g1569
sS'block_loop.thisRepN'
p2072
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2073
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2074
Nsg70
Vn
sS'block_loop.thisTrialN'
p2075
I0
sg39
F0.93330324634371209
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n.\x06\xd2\x18'
tRp2076
sa(dp2077
S'trial_loop.thisTrialN'
p2078
I82
sg895
g984
sS'block_loop.thisIndex'
p2079
g889
sg38
S'right'
p2080
sg59
g63
sS'trial_loop.thisN'
p2081
I82
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p2082
g60
(g99
S'R\x00\x00\x00'
tRp2083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2084
I0
sg904
g992
sS'block_loop.thisRepN'
p2085
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2086
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p2087
Nsg70
Vn
sS'block_loop.thisTrialN'
p2088
I0
sg39
F0.66655443440686213
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n4\x065\xd8'
tRp2089
sa(dp2090
S'trial_loop.thisTrialN'
p2091
I83
sg895
g1001
sS'block_loop.thisIndex'
p2092
g889
sg38
S'left'
p2093
sg59
g63
sS'trial_loop.thisN'
p2094
I83
sg33
g1012
sg64
g65
sS'trial_loop.thisIndex'
p2095
g60
(g99
S'S\x00\x00\x00'
tRp2096
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2097
I0
sg904
g1009
sS'block_loop.thisRepN'
p2098
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2099
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2100
Nsg70
Vn
sS'block_loop.thisTrialN'
p2101
I0
sg39
F0.83300495180810685
sg34
g753
(S'\x07\xdf\x07\x02\x0f\n:\x01\xc5 '
tRp2102
sa(dp2103
S'trial_loop.thisTrialN'
p2104
I84
sg895
g1360
sS'block_loop.thisIndex'
p2105
g889
sg38
S'right'
p2106
sg59
g63
sS'trial_loop.thisN'
p2107
I84
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2108
g60
(g99
S'T\x00\x00\x00'
tRp2109
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2110
I0
sg904
g1367
sS'block_loop.thisRepN'
p2111
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2112
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2113
Nsg70
Vn
sS'block_loop.thisTrialN'
p2114
I0
sg39
F0.86672338149583084
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b\x03\x0e\xfb\xf0'
tRp2115
sa(dp2116
S'trial_loop.thisTrialN'
p2117
I85
sg895
g1266
sS'block_loop.thisIndex'
p2118
g889
sg38
S'right'
p2119
sg59
g63
sS'trial_loop.thisN'
p2120
I85
sg33
g1277
sg64
g65
sS'trial_loop.thisIndex'
p2121
g60
(g99
S'U\x00\x00\x00'
tRp2122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2123
I0
sg904
g1274
sS'block_loop.thisRepN'
p2124
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2125
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2126
Nsg70
Vn
sS'block_loop.thisTrialN'
p2127
I0
sg39
F2.0002848095609806
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b\t\ri\x98'
tRp2128
sa(dp2129
S'trial_loop.thisTrialN'
p2130
I86
sg895
g1562
sS'block_loop.thisIndex'
p2131
g889
sg38
S'left'
p2132
sg59
g63
sS'trial_loop.thisN'
p2133
I86
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2134
g60
(g99
S'V\x00\x00\x00'
tRp2135
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2136
I0
sg904
g1569
sS'block_loop.thisRepN'
p2137
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2138
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2139
Nsg70
Vn
sS'block_loop.thisTrialN'
p2140
I0
sg39
F0.78330725192427053
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b\x10\r\xf2P'
tRp2141
sa(dp2142
S'trial_loop.thisTrialN'
p2143
I87
sg895
g1206
sS'block_loop.thisIndex'
p2144
g889
sg38
S'right'
p2145
sg59
g63
sS'trial_loop.thisN'
p2146
I87
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2147
g60
(g99
S'W\x00\x00\x00'
tRp2148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2149
I0
sg904
g1214
sS'block_loop.thisRepN'
p2150
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2151
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p2152
Nsg70
Vn
sS'block_loop.thisTrialN'
p2153
I0
sg39
F0.98334163433901267
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b\x16\x0b/H'
tRp2154
sa(dp2155
S'trial_loop.thisTrialN'
p2156
I88
sg895
g1405
sS'block_loop.thisIndex'
p2157
g889
sg38
S'left'
p2158
sg59
g63
sS'trial_loop.thisN'
p2159
I88
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2160
g60
(g99
S'X\x00\x00\x00'
tRp2161
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2162
I0
sg904
g1412
sS'block_loop.thisRepN'
p2163
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2164
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2165
Nsg70
Vn
sS'block_loop.thisTrialN'
p2166
I0
sg39
F1.416641602096206
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b\x1c\x0bF\xb8'
tRp2167
sa(dp2168
S'trial_loop.thisTrialN'
p2169
I89
sg895
g1206
sS'block_loop.thisIndex'
p2170
g889
sg38
S'right'
p2171
sg59
g63
sS'trial_loop.thisN'
p2172
I89
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2173
g60
(g99
S'Y\x00\x00\x00'
tRp2174
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2175
I0
sg904
g1214
sS'block_loop.thisRepN'
p2176
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2177
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p2178
Nsg70
Vn
sS'block_loop.thisTrialN'
p2179
I0
sg39
F0.64992201235872926
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b#\x03\x05p'
tRp2180
sa(dp2181
S'trial_loop.thisTrialN'
p2182
I90
sg895
g1388
sS'block_loop.thisIndex'
p2183
g889
sg38
S'right'
p2184
sg59
g63
sS'trial_loop.thisN'
p2185
I90
sg33
g1399
sg64
g65
sS'trial_loop.thisIndex'
p2186
g60
(g99
S'Z\x00\x00\x00'
tRp2187
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2188
I0
sg904
g1396
sS'block_loop.thisRepN'
p2189
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2190
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p2191
Nsg70
Vn
sS'block_loop.thisTrialN'
p2192
I0
sg39
F0.94967423659545602
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b(\r]\xe0'
tRp2193
sa(dp2194
S'trial_loop.thisTrialN'
p2195
I91
sg895
g1493
sS'block_loop.thisIndex'
p2196
g889
sg38
S'left'
p2197
sg59
g63
sS'trial_loop.thisN'
p2198
I91
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2199
g60
(g99
S'[\x00\x00\x00'
tRp2200
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2201
I0
sg904
g1500
sS'block_loop.thisRepN'
p2202
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2203
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p2204
Nsg70
Vn
sS'block_loop.thisTrialN'
p2205
I0
sg39
F1.2165353758246056
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b.\r6\xd0'
tRp2206
sa(dp2207
S'trial_loop.thisTrialN'
p2208
I92
sg895
g1315
sS'block_loop.thisIndex'
p2209
g889
sg38
S'right'
p2210
sg59
g63
sS'trial_loop.thisN'
p2211
I92
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p2212
g60
(g99
S'\\\x00\x00\x00'
tRp2213
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2214
I0
sg904
g1323
sS'block_loop.thisRepN'
p2215
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2216
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p2217
Nsg70
Vn
sS'block_loop.thisTrialN'
p2218
I0
sg39
F1.2831337718271243
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b5\x01\x9e\x10'
tRp2219
sa(dp2220
S'trial_loop.thisTrialN'
p2221
I93
sg895
g1562
sS'block_loop.thisIndex'
p2222
g889
sg38
S'left'
p2223
sg59
g63
sS'trial_loop.thisN'
p2224
I93
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2225
g60
(g99
S']\x00\x00\x00'
tRp2226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2227
I0
sg904
g1569
sS'block_loop.thisRepN'
p2228
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2229
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2230
Nsg70
Vn
sS'block_loop.thisTrialN'
p2231
I0
sg39
F0.7165554749990406
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0b;\x06x@'
tRp2232
sa(dp2233
S'trial_loop.thisTrialN'
p2234
I94
sg895
g1052
sS'block_loop.thisIndex'
p2235
g889
sg38
S'right'
p2236
sg59
g63
sS'trial_loop.thisN'
p2237
I94
sg33
g1063
sg64
g65
sS'trial_loop.thisIndex'
p2238
g60
(g99
S'^\x00\x00\x00'
tRp2239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2240
I0
sg904
g1060
sS'block_loop.thisRepN'
p2241
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2242
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p2243
Nsg70
Vn
sS'block_loop.thisTrialN'
p2244
I0
sg39
F1.1999169234186411
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c\x05\x02\xc3\x08'
tRp2245
sa(dp2246
S'trial_loop.thisTrialN'
p2247
I95
sg895
g1476
sS'block_loop.thisIndex'
p2248
g889
sg38
S'left'
p2249
sg59
g63
sS'trial_loop.thisN'
p2250
I95
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2251
g60
(g99
S'_\x00\x00\x00'
tRp2252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2253
I0
sg904
g1484
sS'block_loop.thisRepN'
p2254
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2255
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p2256
Nsg70
Vn
sS'block_loop.thisTrialN'
p2257
I0
sg39
F1.0336682530287362
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c\x0b\x06.\x08'
tRp2258
sa(dp2259
S'trial_loop.thisTrialN'
p2260
I96
sg895
g1052
sS'block_loop.thisIndex'
p2261
g889
sg38
S'right'
p2262
sg59
g63
sS'trial_loop.thisN'
p2263
I96
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2264
g60
(g99
S'`\x00\x00\x00'
tRp2265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2266
I0
sg904
g1060
sS'block_loop.thisRepN'
p2267
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2268
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p2269
Nsg70
Vn
sS'block_loop.thisTrialN'
p2270
I0
sg39
F0.73330250509752659
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c\x11\x07;\x90'
tRp2271
sa(dp2272
S'trial_loop.thisTrialN'
p2273
I97
sg895
g1283
sS'block_loop.thisIndex'
p2274
g889
sg38
S'left'
p2275
sg59
g63
sS'trial_loop.thisN'
p2276
I97
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p2277
g60
(g99
S'a\x00\x00\x00'
tRp2278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2279
I0
sg904
g1291
sS'block_loop.thisRepN'
p2280
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2281
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p2282
Nsg70
Vn
sS'block_loop.thisTrialN'
p2283
I0
sg39
F1.8498509097516944
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c\x17\x03\xc0\xf0'
tRp2284
sa(dp2285
S'trial_loop.thisTrialN'
p2286
I98
sg895
g1685
sS'block_loop.thisIndex'
p2287
g889
sg38
S'left'
p2288
sg59
g63
sS'trial_loop.thisN'
p2289
I98
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p2290
g60
(g99
S'b\x00\x00\x00'
tRp2291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2292
I0
sg904
g1692
sS'block_loop.thisRepN'
p2293
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2294
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p2295
Nsg70
Vn
sS'block_loop.thisTrialN'
p2296
I0
sg39
F1.1165121976337105
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c\x1e\x01\xe8H'
tRp2297
sa(dp2298
S'trial_loop.thisTrialN'
p2299
I99
sg895
g1547
sS'block_loop.thisIndex'
p2300
g889
sg38
S'left'
p2301
sg59
g63
sS'trial_loop.thisN'
p2302
I99
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p2303
g60
(g99
S'c\x00\x00\x00'
tRp2304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2305
I0
sg904
g1554
sS'block_loop.thisRepN'
p2306
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2307
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p2308
Nsg70
Vn
sS'block_loop.thisTrialN'
p2309
I0
sg39
F1.2332202552934177
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c$\x04&\x80'
tRp2310
sa(dp2311
S'trial_loop.thisTrialN'
p2312
I100
sg895
g967
sS'block_loop.thisIndex'
p2313
g889
sg38
S'right'
p2314
sg59
g63
sS'trial_loop.thisN'
p2315
I100
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2316
g60
(g99
S'd\x00\x00\x00'
tRp2317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2318
I0
sg904
g975
sS'block_loop.thisRepN'
p2319
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2320
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2321
Nsg70
Vn
sS'block_loop.thisTrialN'
p2322
I0
sg39
F1.0666474322788417
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c*\x08I\x18'
tRp2323
sa(dp2324
S'trial_loop.thisTrialN'
p2325
I101
sg895
g1101
sS'block_loop.thisIndex'
p2326
g889
sg38
S'left'
p2327
sg59
g63
sS'trial_loop.thisN'
p2328
I101
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2329
g60
(g99
S'e\x00\x00\x00'
tRp2330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2331
I0
sg904
g1109
sS'block_loop.thisRepN'
p2332
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2333
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p2334
Nsg70
Vn
sS'block_loop.thisTrialN'
p2335
I0
sg39
F0.86656315829895902
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c0\t\xcb\xd0'
tRp2336
sa(dp2337
S'trial_loop.thisTrialN'
p2338
I102
sg895
S'23-crunchie_redo.png'
p2339
sS'block_loop.thisIndex'
p2340
g889
sg38
S'left'
p2341
sg59
g63
sS'trial_loop.thisN'
p2342
I102
sg33
g1277
sg64
g65
sS'trial_loop.thisIndex'
p2343
g60
(g99
S'f\x00\x00\x00'
tRp2344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2345
I0
sg904
S'33-ambrosia_rice.png'
p2346
sS'block_loop.thisRepN'
p2347
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2348
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vn
sS'block_loop.thisTrialN'
p2350
I0
sg39
F1.6499148849907215
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0c6\x089x'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g950
sS'block_loop.thisIndex'
p2354
g889
sg38
S'right'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g958
sS'block_loop.thisRepN'
p2360
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2361
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vn
sS'block_loop.thisTrialN'
p2363
I0
sg39
F1.0833046575608023
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r\x01\x03\x8a@'
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1590
sS'block_loop.thisIndex'
p2367
g889
sg38
S'right'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1597
sS'block_loop.thisRepN'
p2373
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2374
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vn
sS'block_loop.thisTrialN'
p2376
I0
sg39
F0.999824666789209
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r\x07\x05Kx'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
g1086
sS'block_loop.thisIndex'
p2380
g889
sg38
S'left'
p2381
sg59
g63
sS'trial_loop.thisN'
p2382
I105
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p2383
g60
(g99
S'i\x00\x00\x00'
tRp2384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2385
I0
sg904
g1093
sS'block_loop.thisRepN'
p2386
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2387
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vn
sS'block_loop.thisTrialN'
p2389
I0
sg39
F1.9669438451928727
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r\r\x05\xdc\x00'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1448
sS'block_loop.thisIndex'
p2393
g889
sg38
S'left'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1455
sS'block_loop.thisRepN'
p2399
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2400
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vn
sS'block_loop.thisTrialN'
p2402
I0
sg39
F0.99964078073753626
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r\x14\x05\xb1\x08'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g1001
sS'block_loop.thisIndex'
p2406
g889
sg38
S'left'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g1009
sS'block_loop.thisRepN'
p2412
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2413
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vn
sS'block_loop.thisTrialN'
p2415
I0
sg39
F0.93314359333817265
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r\x1a\x06A\x90'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g1476
sS'block_loop.thisIndex'
p2419
g889
sg38
S'right'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1487
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g1484
sS'block_loop.thisRepN'
p2425
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2426
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vn
sS'block_loop.thisTrialN'
p2428
I0
sg39
F1.3332357359286107
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r \x05\xa1h'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g933
sS'block_loop.thisIndex'
p2432
g889
sg38
S'right'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g941
sS'block_loop.thisRepN'
p2438
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2439
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vn
sS'block_loop.thisTrialN'
p2441
I0
sg39
F2.3498299552920798
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r&\x0bq\xb0'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
g1223
sS'block_loop.thisIndex'
p2445
g889
sg38
S'left'
p2446
sg59
g63
sS'trial_loop.thisN'
p2447
I110
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2448
g60
(g99
S'n\x00\x00\x00'
tRp2449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2450
I0
sg904
g1230
sS'block_loop.thisRepN'
p2451
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2452
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p2453
Nsg70
Vn
sS'block_loop.thisTrialN'
p2454
I0
sg39
F3.7836071714991704
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r.\x01\xf7\xe8'
tRp2455
sa(dp2456
S'trial_loop.thisTrialN'
p2457
I111
sg895
S'49-yorkie.png'
p2458
sS'block_loop.thisIndex'
p2459
g889
sg38
S'left'
p2460
sg59
g63
sS'trial_loop.thisN'
p2461
I111
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2462
g60
(g99
S'o\x00\x00\x00'
tRp2463
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2464
I0
sg904
S'35-raisins.png'
p2465
sS'block_loop.thisRepN'
p2466
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2467
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2468
Nsg70
Vn
sS'block_loop.thisTrialN'
p2469
I0
sg39
F1.1499401158689579
sg34
g753
(S'\x07\xdf\x07\x02\x0f\r6\x0ec\x98'
tRp2470
sa(dp2471
S'trial_loop.thisTrialN'
p2472
I112
sg895
g1223
sS'block_loop.thisIndex'
p2473
g889
sg38
S'left'
p2474
sg59
g63
sS'trial_loop.thisN'
p2475
I112
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2476
g60
(g99
S'p\x00\x00\x00'
tRp2477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2478
I0
sg904
g1230
sS'block_loop.thisRepN'
p2479
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2480
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p2481
Nsg70
Vn
sS'block_loop.thisTrialN'
p2482
I0
sg39
F1.0998290287352575
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\x01\x01\xd4\xc0'
tRp2483
sa(dp2484
S'trial_loop.thisTrialN'
p2485
I113
sg895
g2339
sS'block_loop.thisIndex'
p2486
g889
sg38
S'right'
p2487
sg59
g63
sS'trial_loop.thisN'
p2488
I113
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p2489
g60
(g99
S'q\x00\x00\x00'
tRp2490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2491
I0
sg904
g2346
sS'block_loop.thisRepN'
p2492
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2493
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2494
Nsg70
Vn
sS'block_loop.thisTrialN'
p2495
I0
sg39
F1.0499485831787752
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\x07\x04\x12\xf8'
tRp2496
sa(dp2497
S'trial_loop.thisTrialN'
p2498
I114
sg895
S'19-caramello_redo.png'
p2499
sS'block_loop.thisIndex'
p2500
g889
sg38
S'left'
p2501
sg59
g63
sS'trial_loop.thisN'
p2502
I114
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2503
g60
(g99
S'r\x00\x00\x00'
tRp2504
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2505
I0
sg904
S'30-spaghetti_hoops.png'
p2506
sS'block_loop.thisRepN'
p2507
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2508
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vn
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.4666292432411865
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\r\x05[\x18'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1300
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1307
sS'block_loop.thisRepN'
p2520
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2521
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vn
sS'block_loop.thisTrialN'
p2523
I0
sg39
F0.95032111636464833
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\x13\x0c\xd1@'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1315
sS'block_loop.thisIndex'
p2527
g889
sg38
S'right'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1323
sS'block_loop.thisRepN'
p2533
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2534
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vn
sS'block_loop.thisTrialN'
p2536
I0
sg39
F0.98327321162287262
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\x19\x0c\xae\x18'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1069
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1080
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1077
sS'block_loop.thisRepN'
p2546
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2547
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vn
sS'block_loop.thisTrialN'
p2549
I0
sg39
F1.1332942943699891
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e\x1f\x0c\xc5\x88'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g2339
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g2346
sS'block_loop.thisRepN'
p2559
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2560
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vn
sS'block_loop.thisTrialN'
p2562
I0
sg39
F1.6498096850627917
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e&\x006\xb0'
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g1388
sS'block_loop.thisIndex'
p2566
g889
sg38
S'right'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g1396
sS'block_loop.thisRepN'
p2572
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2573
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vn
sS'block_loop.thisTrialN'
p2575
I0
sg39
F0.86631313029283774
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e,\n\x8b8'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g2499
sS'block_loop.thisIndex'
p2579
g889
sg38
S'left'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g2506
sS'block_loop.thisRepN'
p2585
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2586
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vn
sS'block_loop.thisTrialN'
p2588
I0
sg39
F1.0169859394191008
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e2\x08\xf8\xe0'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g1266
sS'block_loop.thisIndex'
p2592
g889
sg38
S'right'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g1274
sS'block_loop.thisRepN'
p2598
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2599
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vn
sS'block_loop.thisTrialN'
p2601
I0
sg39
F1.1832271973471506
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0e8\t\xc7\xe8'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1590
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1597
sS'block_loop.thisRepN'
p2611
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2612
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vn
sS'block_loop.thisTrialN'
p2614
I0
sg39
F1.1998770101672562
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f\x02\r2\xe8'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1238
sS'block_loop.thisIndex'
p2618
g889
sg38
S'right'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1029
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1245
sS'block_loop.thisRepN'
p2624
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2625
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vn
sS'block_loop.thisTrialN'
p2627
I0
sg39
F1.4664624628712772
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f\t\x01[\xa8'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g2458
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g2465
sS'block_loop.thisRepN'
p2637
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2638
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vn
sS'block_loop.thisTrialN'
p2640
I0
sg39
F0.98332823489181465
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f\x0f\t\x148'
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g1315
sS'block_loop.thisIndex'
p2644
g889
sg38
S'right'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g1323
sS'block_loop.thisRepN'
p2650
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2651
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vn
sS'block_loop.thisTrialN'
p2653
I0
sg39
F0.86665666934641195
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f\x15\tf@'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g933
sS'block_loop.thisIndex'
p2657
g889
sg38
S'right'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g941
sS'block_loop.thisRepN'
p2663
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2664
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vn
sS'block_loop.thisTrialN'
p2666
I0
sg39
F0.8999842342636839
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f\x1b\x07\xd3\xe8'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g2339
sS'block_loop.thisIndex'
p2670
g889
sg38
S'left'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g2346
sS'block_loop.thisRepN'
p2676
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2677
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vn
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.2332684362845612
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f!\x06\xba\xa8'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1420
sS'block_loop.thisIndex'
p2683
g889
sg38
S'right'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1427
sS'block_loop.thisRepN'
p2689
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2690
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vn
sS'block_loop.thisTrialN'
p2692
I0
sg39
F1.1166989346274931
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x0f'\n\xdd@"
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1493
sS'block_loop.thisIndex'
p2696
g889
sg38
S'left'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1500
sS'block_loop.thisRepN'
p2702
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2703
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vn
sS'block_loop.thisTrialN'
p2705
I0
sg39
F0.71663473131411592
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f-\r\x1bx'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1266
sS'block_loop.thisIndex'
p2709
g889
sg38
S'right'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1277
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1274
sS'block_loop.thisRepN'
p2715
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2716
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vn
sS'block_loop.thisTrialN'
p2718
I0
sg39
F0.91729062007289031
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f3\tbX'
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1238
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1245
sS'block_loop.thisRepN'
p2728
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2729
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vn
sS'block_loop.thisTrialN'
p2731
I0
sg39
F1.2498421288364625
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x0f9\x08\x87\x98'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g1360
sS'block_loop.thisIndex'
p2735
g889
sg38
S'right'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g1367
sS'block_loop.thisRepN'
p2741
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2742
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vn
sS'block_loop.thisTrialN'
p2744
I0
sg39
F0.86656543905701255
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10\x03\x0c\xe8\xb0'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1035
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1043
sS'block_loop.thisRepN'
p2754
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2755
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vn
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.0999544703809079
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10\t\x0bRp'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1300
sS'block_loop.thisIndex'
p2761
g889
sg38
S'left'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1307
sS'block_loop.thisRepN'
p2767
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2768
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vn
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.99995409975963412
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10\x0f\rR('
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1283
sS'block_loop.thisIndex'
p2774
g889
sg38
S'right'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1291
sS'block_loop.thisRepN'
p2780
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2781
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vn
sS'block_loop.thisTrialN'
p2783
I0
sg39
F1.2836862852636841
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10\x15\r\xe2\xb0'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1405
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1412
sS'block_loop.thisRepN'
p2793
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2794
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vn
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.1499714762794611
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10\x1c\x03z\xa0'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g2499
sS'block_loop.thisIndex'
p2800
g889
sg38
S'left'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g2506
sS'block_loop.thisRepN'
p2806
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2807
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vn
sS'block_loop.thisTrialN'
p2809
I0
sg39
F0.84983636992546963
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10"\x061\xf0'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1405
sS'block_loop.thisIndex'
p2813
g889
sg38
S'left'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1412
sS'block_loop.thisRepN'
p2819
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2820
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vn
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.0666120805435639
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10(\x04a\x18'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1176
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1184
sS'block_loop.thisRepN'
p2832
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2833
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vn
sS'block_loop.thisTrialN'
p2835
I0
sg39
F1.049744740503229
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x10.\x05\xe7\xb8'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g896
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g905
sS'block_loop.thisRepN'
p2845
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2846
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vn
sS'block_loop.thisTrialN'
p2848
I0
sg39
F2.0835957392046112
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x104\x07/\xd8'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1283
sS'block_loop.thisIndex'
p2852
g889
sg38
S'right'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1291
sS'block_loop.thisRepN'
p2858
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2859
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vn
sS'block_loop.thisTrialN'
p2861
I0
sg39
F0.76659386299797916
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x10;\t'\xc0"
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g933
sS'block_loop.thisIndex'
p2865
g889
sg38
S'right'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g941
sS'block_loop.thisRepN'
p2871
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2872
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.0166022020166565
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11\x05\x05\xeb\xa0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1069
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1077
sS'block_loop.thisRepN'
p2884
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2885
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.0334008342433663
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11\x0b\x06\xb6\xc0'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g2499
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g2506
sS'block_loop.thisRepN'
p2897
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2898
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F1.066702740641631
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11\x11\x07\xc4H'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1052
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1060
sS'block_loop.thisRepN'
p2910
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2911
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.0332999107376963
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11\x17\tJ\xe8'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1176
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1180
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1184
sS'block_loop.thisRepN'
p2923
I0
sg907
g1180
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2924
I0
sg910
g1187
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.81658036376029486
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11\x1d\nT\x88'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g896
sS'block_loop.thisIndex'
p2930
g889
sg38
S'left'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g905
sS'block_loop.thisRepN'
p2936
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2937
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.5832685930872685
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11#\x08\n\x98'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1345
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1352
sS'block_loop.thisRepN'
p2949
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2950
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.78322599994498887
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11*\x02&\xc8'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g2499
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g2506
sS'block_loop.thisRepN'
p2962
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2963
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.0832918283049366
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11/\x0e\xa6\x00'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1405
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1412
sS'block_loop.thisRepN'
p2975
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2976
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.85000571615091758
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x116\x01$\xf8'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g2458
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g2465
sS'block_loop.thisRepN'
p2988
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2989
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.71656117689417442
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x11;\x0e\x9aH'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1420
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1427
sS'block_loop.thisRepN'
p3001
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3002
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F1.0665604784117022
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12\x05\n\xe1('
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1086
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1093
sS'block_loop.thisRepN'
p3014
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3015
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.93326048214294133
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12\x0b\x0cg\xc8'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1644
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1651
sS'block_loop.thisRepN'
p3027
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3028
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F0.91662178801561822
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12\x11\x0b\xc7\xa0'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1345
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1352
sS'block_loop.thisRepN'
p3040
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3041
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.69993075051024789
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x12\x17\x0b'x"
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1590
sS'block_loop.thisIndex'
p3047
g889
sg38
S'right'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1597
sS'block_loop.thisRepN'
p3053
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3054
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.90033433050120948
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12\x1d\x06\xf5@'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g967
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g975
sS'block_loop.thisRepN'
p3066
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3067
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.76647640399824013
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12#\x05\xdc\x00'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1420
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1427
sS'block_loop.thisRepN'
p3079
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3080
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.6333275079014129
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12)\x02\xdax'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1476
sS'block_loop.thisIndex'
p3086
g889
sg38
S'right'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1484
sS'block_loop.thisRepN'
p3092
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3093
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F3.3998911508606398
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x12.\x0c\xf8P'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1360
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g908
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1367
sS'block_loop.thisRepN'
p3105
I0
sg907
g908
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3106
I0
sg910
g900
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.7664912289219501
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x127\x04l\xd0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1035
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1043
sS'block_loop.thisRepN'
p3118
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3119
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.0503260485020292
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\x01\x01kH'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1283
sS'block_loop.thisIndex'
p3125
g889
sg38
S'right'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1291
sS'block_loop.thisRepN'
p3131
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3132
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0332574316344108
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\x07\x02\xb3h'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g2458
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g2465
sS'block_loop.thisRepN'
p3144
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3145
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.99977449013022124
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\r\x03\xc0\xf0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1388
sS'block_loop.thisIndex'
p3151
g889
sg38
S'right'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1396
sS'block_loop.thisRepN'
p3157
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3158
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.78295801097192452
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\x13\x04\x12\xf8'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1266
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1274
sS'block_loop.thisRepN'
p3170
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3171
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.4498408744220797
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\x19\x01O\xf0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1206
sS'block_loop.thisIndex'
p3177
g889
sg38
S'right'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1214
sS'block_loop.thisRepN'
p3183
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3184
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.61664890051542898
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13\x1f\x08\xca\x00'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1086
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1045
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1093
sS'block_loop.thisRepN'
p3196
I0
sg907
g1045
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3197
I0
sg910
g1039
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.2332690064758935
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13%\x03g\x18'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1448
sS'block_loop.thisIndex'
p3203
g889
sg38
S'left'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1455
sS'block_loop.thisRepN'
p3209
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3210
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.78296371286705835
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x13+\x07\x89\xb0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g2339
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1270
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g2346
sS'block_loop.thisRepN'
p3222
I0
sg907
g1270
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3223
I0
sg910
g1277
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.6999866290607315
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x131\x04\xc6\xa8'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1547
sS'block_loop.thisIndex'
p3229
g889
sg38
S'left'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1554
sS'block_loop.thisRepN'
p3235
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3236
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.4832183309044922
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x137\x00\x94p'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g984
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g992
sS'block_loop.thisRepN'
p3248
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3249
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.0166555147152394
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14\x01\x08\x87\x98'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g2458
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g2465
sS'block_loop.thisRepN'
p3261
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3262
I0
sg910
g944
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F0.71656288746089558
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14\x07\tV\xa0'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1101
sS'block_loop.thisIndex'
p3268
g889
sg38
S'left'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1109
sS'block_loop.thisRepN'
p3274
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3275
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.76638830974843586
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14\r\x05_\x00'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g950
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g958
sS'block_loop.thisRepN'
p3287
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3288
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F1.1333296461089049
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14\x13\x02a`'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1644
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1651
sS'block_loop.thisRepN'
p3300
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3301
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F1.9665264666182338
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14\x19\x04\xda0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g916
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g924
sS'block_loop.thisRepN'
p3313
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3314
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.81637937203413458
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14 \x04\xe9\xd0'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1752
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1759
sS'block_loop.thisRepN'
p3326
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3327
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F1.1166119807603536
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14&\x02\x9f\xe0'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g1493
sS'block_loop.thisIndex'
p3333
g889
sg38
S'left'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1210
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g1500
sS'block_loop.thisRepN'
p3339
I0
sg907
g1210
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3340
I0
sg910
g1217
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.69998263773595681
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x14,\x04\xda0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g916
sS'block_loop.thisIndex'
p3346
g889
sg38
S'right'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g924
sS'block_loop.thisRepN'
p3352
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3353
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.76659158223628765
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x142\x00\xe6x'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1590
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1005
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1597
sS'block_loop.thisRepN'
p3365
I0
sg907
g1005
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3366
I0
sg910
g1012
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.89981004143191967
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x147\r'0"
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1685
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1692
sS'block_loop.thisRepN'
p3378
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3379
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.9666005912295077
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\x01\x0c\x11\xd8'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1345
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1352
sS'block_loop.thisRepN'
p3391
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3392
I0
sg910
g1080
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.98323329837148776
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\x07\x0c)H'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g950
sS'block_loop.thisIndex'
p3398
g889
sg38
S'right'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g958
sS'block_loop.thisRepN'
p3404
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3405
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.96665875053804484
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\r\x0c@\xb8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g967
sS'block_loop.thisIndex'
p3411
g889
sg38
S'right'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g975
sS'block_loop.thisRepN'
p3417
I0
sg907
g971
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3418
I0
sg910
g978
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.0499109506854438
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\x13\x0cX('
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1101
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1105
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1109
sS'block_loop.thisRepN'
p3430
I0
sg907
g1105
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3431
I0
sg910
g1112
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F1.0498855772639217
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\x19\r\xa0H'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1118
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g988
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1125
sS'block_loop.thisRepN'
p3443
I0
sg907
g988
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3444
I0
sg910
g995
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F0.66664709016913548
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15\x1f\x0e\xe8h'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1752
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1759
sS'block_loop.thisRepN'
p3456
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3457
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F1.1836750810434751
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15%\n=\x18'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1644
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1294
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1651
sS'block_loop.thisRepN'
p3469
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3470
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F1.1666235698612581
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x15+\r\xa8\x18'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g916
sS'block_loop.thisIndex'
p3476
g889
sg38
S'right'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g924
sS'block_loop.thisRepN'
p3482
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3483
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F1.7330875437291979
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x152\x01W\xc0'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1685
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1480
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1692
sS'block_loop.thisRepN'
p3495
I0
sg907
g1480
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3496
I0
sg910
g1487
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.99995552523250808
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x158\r\x1bx'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1146
sS'block_loop.thisIndex'
p3502
g889
sg38
S'right'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1150
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1154
sS'block_loop.thisRepN'
p3508
I0
sg907
g1150
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3509
I0
sg910
g1157
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.71656716388315544
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16\x02\r\xac\x00'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1315
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1323
sS'block_loop.thisRepN'
p3521
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3522
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.81667872141770204
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16\x08\t\xb8H'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1644
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1287
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1651
sS'block_loop.thisRepN'
p3534
I0
sg907
g1287
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3535
I0
sg910
g1294
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.2998705385180074
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16\x0e\x07nX'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g916
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g926
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g924
sS'block_loop.thisRepN'
p3547
I0
sg907
g926
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3548
I0
sg910
g920
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.76658502506325021
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16\x14\x0c\x83 '
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1752
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1056
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1759
sS'block_loop.thisRepN'
p3560
I0
sg907
g1056
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3561
I0
sg910
g1063
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F1.416475106816506
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16\x1a\t\x81\x98'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1448
sS'block_loop.thisIndex'
p3567
g889
sg38
S'left'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1392
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1455
sS'block_loop.thisRepN'
p3573
I0
sg907
g1392
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3574
I0
sg910
g1399
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.1496612932969583
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16!\x01\x01\xd0'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1562
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1569
sS'block_loop.thisRepN'
p3586
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3587
I0
sg910
g961
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.90043382853400544
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x16'\x03\xf3\xb8"
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g1547
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1325
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1554
sS'block_loop.thisRepN'
p3599
I0
sg907
g1325
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3600
I0
sg910
g1319
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.84991277529115905
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x16-\x02\xdax'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1018
sS'block_loop.thisIndex'
p3606
g889
sg38
S'right'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1022
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1026
sS'block_loop.thisRepN'
p3612
I0
sg907
g1022
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3613
I0
sg910
g1029
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F0.91655108454506262
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x163\x01\r\x88'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F135.41154696064768
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'40-sardines.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'5-pineapple.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'5-pineapple.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'40-sardines.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.2664950776961632
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a\x1c\x08`\x88'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'48-twix.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'48-twix.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'50-polo.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3664
I1
sg3647
S'50-polo.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.99996322279184824
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a"\x0c\xfc8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'36-fig_rolls.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'36-fig_rolls.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3681
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.94987665379812825
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a(\r\x8c\xc0'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'21-nakd_banana_crunch.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'right'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'1-treacle_cookies.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'1-treacle_cookies.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3698
I1
sg3647
S'21-nakd_banana_crunch.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.79995079266154789
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a.\r+\x18'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'29-beans.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'46-pistachios.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'46-pistachios.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3715
I1
sg3647
S'29-beans.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.81655156920169247
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a4\n\xa6\x90'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
S'4-corn.png'
p3722
sS'block_loop.thisIndex'
p3723
g3627
sg38
S'right'
p3724
sg59
g63
sS'trial_loop.thisN'
p3725
I5
sg33
S'10-bounty_redo.png'
p3726
sg64
g65
sS'trial_loop.thisIndex'
p3727
g60
(g99
S'\x05\x00\x00\x00'
tRp3728
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3729
I0
sg3642
S'10-bounty_redo.png'
p3730
sS'block_loop.thisRepN'
p3731
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3732
I1
sg3647
S'4-corn.png'
p3733
sg55
g11
sS'block_loop.thisTrial'
p3734
Nsg70
Vn
sS'block_loop.thisTrialN'
p3735
I0
sg39
F1.0334547171332815
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1a:\x08\\\xa0'
tRp3736
sa(dp3737
S'trial_loop.thisTrialN'
p3738
I6
sg3633
S'5-pineapple.png'
p3739
sS'block_loop.thisIndex'
p3740
g3627
sg38
S'left'
p3741
sg59
g63
sS'trial_loop.thisN'
p3742
I6
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3743
g60
(g99
S'\x06\x00\x00\x00'
tRp3744
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3745
I0
sg3642
S'40-sardines.png'
p3746
sS'block_loop.thisRepN'
p3747
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3748
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3749
Nsg70
Vn
sS'block_loop.thisTrialN'
p3750
I0
sg39
F0.8666723495516635
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b\x04\tf@'
tRp3751
sa(dp3752
S'trial_loop.thisTrialN'
p3753
I7
sg3633
S'44-crunch.png'
p3754
sS'block_loop.thisIndex'
p3755
g3627
sg38
S'left'
p3756
sg59
g63
sS'trial_loop.thisN'
p3757
I7
sg33
S'44-crunch.png'
p3758
sg64
g65
sS'trial_loop.thisIndex'
p3759
g60
(g99
S'\x07\x00\x00\x00'
tRp3760
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3761
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3762
sS'block_loop.thisRepN'
p3763
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3764
I1
sg3647
S'26-walkers_smoky_bacon.png'
p3765
sg55
g11
sS'block_loop.thisTrial'
p3766
Nsg70
Vn
sS'block_loop.thisTrialN'
p3767
I0
sg39
F1.183244017931429
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b\n\x07\xd3\xe8'
tRp3768
sa(dp3769
S'trial_loop.thisTrialN'
p3770
I8
sg3633
S'45-chewy_nougat_redo.png'
p3771
sS'block_loop.thisIndex'
p3772
g3627
sg38
S'right'
p3773
sg59
g63
sS'trial_loop.thisN'
p3774
I8
sg33
S'45-chewy_nougat_redo.png'
p3775
sg64
g65
sS'trial_loop.thisIndex'
p3776
g60
(g99
S'\x08\x00\x00\x00'
tRp3777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3778
I0
sg3642
S'41-peanuts_redo.png'
p3779
sS'block_loop.thisRepN'
p3780
I1
sg3645
S'41-peanuts_redo.png'
p3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3782
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p3783
Nsg70
Vn
sS'block_loop.thisTrialN'
p3784
I0
sg39
F0.86658254473877605
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b\x10\x0b>\xe8'
tRp3785
sa(dp3786
S'trial_loop.thisTrialN'
p3787
I9
sg3633
S'49-yorkie.png'
p3788
sS'block_loop.thisIndex'
p3789
g3627
sg38
S'left'
p3790
sg59
g63
sS'trial_loop.thisN'
p3791
I9
sg33
S'49-yorkie.png'
p3792
sg64
g65
sS'trial_loop.thisIndex'
p3793
g60
(g99
S'\t\x00\x00\x00'
tRp3794
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3795
I0
sg3642
S'35-raisins.png'
p3796
sS'block_loop.thisRepN'
p3797
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3798
I1
sg3647
S'35-raisins.png'
p3799
sg55
g11
sS'block_loop.thisTrial'
p3800
Nsg70
Vn
sS'block_loop.thisTrialN'
p3801
I0
sg39
F0.96661370558285853
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b\x16\t\xac\x90'
tRp3802
sa(dp3803
S'trial_loop.thisTrialN'
p3804
I10
sg3633
g3739
sS'block_loop.thisIndex'
p3805
g3627
sg38
S'left'
p3806
sg59
g63
sS'trial_loop.thisN'
p3807
I10
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3808
g60
(g99
S'\n\x00\x00\x00'
tRp3809
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3810
I0
sg3642
g3746
sS'block_loop.thisRepN'
p3811
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3812
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3813
Nsg70
Vn
sS'block_loop.thisTrialN'
p3814
I0
sg39
F0.84998547442955896
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b\x1c\t\xc4\x00'
tRp3815
sa(dp3816
S'trial_loop.thisTrialN'
p3817
I11
sg3633
S'16-skips_prawn.png'
p3818
sS'block_loop.thisIndex'
p3819
g3627
sg38
S'right'
p3820
sg59
g63
sS'trial_loop.thisN'
p3821
I11
sg33
S'42-mrkipling_lemon_slices.png'
p3822
sg64
g65
sS'trial_loop.thisIndex'
p3823
g60
(g99
S'\x0b\x00\x00\x00'
tRp3824
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3825
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3826
sS'block_loop.thisRepN'
p3827
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3828
I1
sg3647
S'16-skips_prawn.png'
p3829
sg55
g11
sS'block_loop.thisTrial'
p3830
Nsg70
Vn
sS'block_loop.thisTrialN'
p3831
I0
sg39
F1.2335007884285005
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b"\x07\xf3('
tRp3832
sa(dp3833
S'trial_loop.thisTrialN'
p3834
I12
sg3633
S'22-daim.png'
p3835
sS'block_loop.thisIndex'
p3836
g3627
sg38
S'left'
p3837
sg59
g63
sS'trial_loop.thisN'
p3838
I12
sg33
S'22-daim.png'
p3839
sg64
g65
sS'trial_loop.thisIndex'
p3840
g60
(g99
S'\x0c\x00\x00\x00'
tRp3841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3842
I0
sg3642
S'7-olives.png'
p3843
sS'block_loop.thisRepN'
p3844
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3845
I1
sg3647
S'7-olives.png'
p3846
sg55
g11
sS'block_loop.thisTrial'
p3847
Nsg70
Vn
sS'block_loop.thisTrialN'
p3848
I0
sg39
F0.84998461914437939
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b(\x0c\x15\xc0'
tRp3849
sa(dp3850
S'trial_loop.thisTrialN'
p3851
I13
sg3633
S'50-polo.png'
p3852
sS'block_loop.thisIndex'
p3853
g3627
sg38
S'right'
p3854
sg59
g63
sS'trial_loop.thisN'
p3855
I13
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3856
g60
(g99
S'\r\x00\x00\x00'
tRp3857
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3858
I0
sg3642
S'48-twix.png'
p3859
sS'block_loop.thisRepN'
p3860
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3861
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vn
sS'block_loop.thisTrialN'
p3863
I0
sg39
F0.89998851068594377
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b.\nH\xd0'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
S'18-mms.png'
p3867
sS'block_loop.thisIndex'
p3868
g3627
sg38
S'left'
p3869
sg59
g63
sS'trial_loop.thisN'
p3870
I14
sg33
S'18-mms.png'
p3871
sg64
g65
sS'trial_loop.thisIndex'
p3872
g60
(g99
S'\x0e\x00\x00\x00'
tRp3873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3874
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3875
sS'block_loop.thisRepN'
p3876
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3877
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3878
sg55
g11
sS'block_loop.thisTrial'
p3879
Nsg70
Vn
sS'block_loop.thisTrialN'
p3880
I0
sg39
F1.0666371688748768
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b4\t/\x90'
tRp3881
sa(dp3882
S'trial_loop.thisTrialN'
p3883
I15
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3884
sS'block_loop.thisIndex'
p3885
g3627
sg38
S'right'
p3886
sg59
g63
sS'trial_loop.thisN'
p3887
I15
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3888
g60
(g99
S'\x0f\x00\x00\x00'
tRp3889
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3890
I0
sg3642
S'36-fig_rolls.png'
p3891
sS'block_loop.thisRepN'
p3892
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3893
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3894
Nsg70
Vn
sS'block_loop.thisTrialN'
p3895
I0
sg39
F0.94995904615279869
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1b:\n\xb2H'
tRp3896
sa(dp3897
S'trial_loop.thisTrialN'
p3898
I16
sg3633
g3739
sS'block_loop.thisIndex'
p3899
g3627
sg38
S'left'
p3900
sg59
g63
sS'trial_loop.thisN'
p3901
I16
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
g3746
sS'block_loop.thisRepN'
p3905
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3906
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3907
Nsg70
Vn
sS'block_loop.thisTrialN'
p3908
I0
sg39
F0.86653037241558195
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c\x04\n\x8f '
tRp3909
sa(dp3910
S'trial_loop.thisTrialN'
p3911
I17
sg3633
S'25-kitkat.png'
p3912
sS'block_loop.thisIndex'
p3913
g3627
sg38
S'left'
p3914
sg59
g63
sS'trial_loop.thisN'
p3915
I17
sg33
S'25-kitkat.png'
p3916
sg64
g65
sS'trial_loop.thisIndex'
p3917
g60
(g99
S'\x11\x00\x00\x00'
tRp3918
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3919
I0
sg3642
S'31-hobnobs.png'
p3920
sS'block_loop.thisRepN'
p3921
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3922
I1
sg3647
S'31-hobnobs.png'
p3923
sg55
g11
sS'block_loop.thisTrial'
p3924
Nsg70
Vn
sS'block_loop.thisTrialN'
p3925
I0
sg39
F1.8003148585339659
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c\n\x08\xf8\xe0'
tRp3926
sa(dp3927
S'trial_loop.thisTrialN'
p3928
I18
sg3633
S'19-caramello_redo.png'
p3929
sS'block_loop.thisIndex'
p3930
g3627
sg38
S'left'
p3931
sg59
g63
sS'trial_loop.thisN'
p3932
I18
sg33
S'19-caramello_redo.png'
p3933
sg64
g65
sS'trial_loop.thisIndex'
p3934
g60
(g99
S'\x12\x00\x00\x00'
tRp3935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3936
I0
sg3642
S'30-spaghetti_hoops.png'
p3937
sS'block_loop.thisRepN'
p3938
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3939
I1
sg3647
S'30-spaghetti_hoops.png'
p3940
sg55
g11
sS'block_loop.thisTrial'
p3941
Nsg70
Vn
sS'block_loop.thisTrialN'
p3942
I0
sg39
F0.88325545022598817
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c\x11\x06l\x88'
tRp3943
sa(dp3944
S'trial_loop.thisTrialN'
p3945
I19
sg3633
g3688
sS'block_loop.thisIndex'
p3946
g3627
sg38
S'right'
p3947
sg59
g63
sS'trial_loop.thisN'
p3948
I19
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p3949
g60
(g99
S'\x13\x00\x00\x00'
tRp3950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3951
I0
sg3642
g3696
sS'block_loop.thisRepN'
p3952
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3953
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p3954
Nsg70
Vn
sS'block_loop.thisTrialN'
p3955
I0
sg39
F0.91665115276555298
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c\x17\x05\x18\xb0'
tRp3956
sa(dp3957
S'trial_loop.thisTrialN'
p3958
I20
sg3633
g3818
sS'block_loop.thisIndex'
p3959
g3627
sg38
S'right'
p3960
sg59
g63
sS'trial_loop.thisN'
p3961
I20
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p3962
g60
(g99
S'\x14\x00\x00\x00'
tRp3963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3964
I0
sg3642
g3826
sS'block_loop.thisRepN'
p3965
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3966
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p3967
Nsg70
Vn
sS'block_loop.thisTrialN'
p3968
I0
sg39
F0.79985300519911107
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c\x1d\x04x\x88'
tRp3969
sa(dp3970
S'trial_loop.thisTrialN'
p3971
I21
sg3633
S'31-hobnobs.png'
p3972
sS'block_loop.thisIndex'
p3973
g3627
sg38
S'right'
p3974
sg59
g63
sS'trial_loop.thisN'
p3975
I21
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p3976
g60
(g99
S'\x15\x00\x00\x00'
tRp3977
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3978
I0
sg3642
S'25-kitkat.png'
p3979
sS'block_loop.thisRepN'
p3980
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3981
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p3982
Nsg70
Vn
sS'block_loop.thisTrialN'
p3983
I0
sg39
F0.9666145608680381
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c#\x01\xb5\x80'
tRp3984
sa(dp3985
S'trial_loop.thisTrialN'
p3986
I22
sg3633
g3835
sS'block_loop.thisIndex'
p3987
g3627
sg38
S'right'
p3988
sg59
g63
sS'trial_loop.thisN'
p3989
I22
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p3990
g60
(g99
S'\x16\x00\x00\x00'
tRp3991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3992
I0
sg3642
g3843
sS'block_loop.thisRepN'
p3993
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3994
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p3995
Nsg70
Vn
sS'block_loop.thisTrialN'
p3996
I0
sg39
F0.58338747755988152
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c)\x01\xcc\xf0'
tRp3997
sa(dp3998
S'trial_loop.thisTrialN'
p3999
I23
sg3633
g3852
sS'block_loop.thisIndex'
p4000
g3627
sg38
S'right'
p4001
sg59
g63
sS'trial_loop.thisN'
p4002
I23
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4003
g60
(g99
S'\x17\x00\x00\x00'
tRp4004
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4005
I0
sg3642
g3859
sS'block_loop.thisRepN'
p4006
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4007
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4008
Nsg70
Vn
sS'block_loop.thisTrialN'
p4009
I0
sg39
F0.96675682310160482
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c.\x0b30'
tRp4010
sa(dp4011
S'trial_loop.thisTrialN'
p4012
I24
sg3633
S'41-peanuts_redo.png'
p4013
sS'block_loop.thisIndex'
p4014
g3627
sg38
S'left'
p4015
sg59
g63
sS'trial_loop.thisN'
p4016
I24
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4017
g60
(g99
S'\x18\x00\x00\x00'
tRp4018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4019
I0
sg3642
S'45-chewy_nougat_redo.png'
p4020
sS'block_loop.thisRepN'
p4021
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4022
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4023
Nsg70
Vn
sS'block_loop.thisTrialN'
p4024
I0
sg39
F1.1499529451284616
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c4\x0bJ\xa0'
tRp4025
sa(dp4026
S'trial_loop.thisTrialN'
p4027
I25
sg3633
S'2-steamed_puddings.png'
p4028
sS'block_loop.thisIndex'
p4029
g3627
sg38
S'left'
p4030
sg59
g63
sS'trial_loop.thisN'
p4031
I25
sg33
S'20-fruit_pastilles.png'
p4032
sg64
g65
sS'trial_loop.thisIndex'
p4033
g60
(g99
S'\x19\x00\x00\x00'
tRp4034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4035
I0
sg3642
S'20-fruit_pastilles.png'
p4036
sS'block_loop.thisRepN'
p4037
I1
sg3645
S'2-steamed_puddings.png'
p4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4039
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4040
Nsg70
Vn
sS'block_loop.thisTrialN'
p4041
I0
sg39
F0.73329252678377088
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1c:\r\xfe\x08'
tRp4042
sa(dp4043
S'trial_loop.thisTrialN'
p4044
I26
sg3633
g4013
sS'block_loop.thisIndex'
p4045
g3627
sg38
S'left'
p4046
sg59
g63
sS'trial_loop.thisN'
p4047
I26
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4048
g60
(g99
S'\x1a\x00\x00\x00'
tRp4049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4050
I0
sg3642
g4020
sS'block_loop.thisRepN'
p4051
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4052
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4053
Nsg70
Vn
sS'block_loop.thisTrialN'
p4054
I0
sg39
F0.81658549546773429
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d\x04\n\x83h'
tRp4055
sa(dp4056
S'trial_loop.thisTrialN'
p4057
I27
sg3633
g3972
sS'block_loop.thisIndex'
p4058
g3627
sg38
S'right'
p4059
sg59
g63
sS'trial_loop.thisN'
p4060
I27
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4061
g60
(g99
S'\x1b\x00\x00\x00'
tRp4062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4063
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4064
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4065
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4066
Nsg70
Vn
sS'block_loop.thisTrialN'
p4067
I0
sg39
F1.0666471471849945
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d\n\x089x'
tRp4068
sa(dp4069
S'trial_loop.thisTrialN'
p4070
I28
sg3633
S'3-ellas_strawberries_apples.png'
p4071
sS'block_loop.thisIndex'
p4072
g3627
sg38
S'left'
p4073
sg59
g63
sS'trial_loop.thisN'
p4074
I28
sg33
S'3-ellas_strawberries_apples.png'
p4075
sg64
g65
sS'trial_loop.thisIndex'
p4076
g60
(g99
S'\x1c\x00\x00\x00'
tRp4077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4078
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4079
sS'block_loop.thisRepN'
p4080
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4081
I1
sg3647
S'13-mccoys_steak_crisps.png'
p4082
sg55
g11
sS'block_loop.thisTrial'
p4083
Nsg70
Vn
sS'block_loop.thisTrialN'
p4084
I0
sg39
F0.78325793055046233
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d\x10\t\xc0\x18'
tRp4085
sa(dp4086
S'trial_loop.thisTrialN'
p4087
I29
sg3633
S'46-pistachios.png'
p4088
sS'block_loop.thisIndex'
p4089
g3627
sg38
S'left'
p4090
sg59
g63
sS'trial_loop.thisN'
p4091
I29
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4092
g60
(g99
S'\x1d\x00\x00\x00'
tRp4093
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4094
I0
sg3642
S'29-beans.png'
p4095
sS'block_loop.thisRepN'
p4096
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4097
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4098
Nsg70
Vn
sS'block_loop.thisTrialN'
p4099
I0
sg39
F0.75035088024378638
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d\x16\x06\xfd\x10'
tRp4100
sa(dp4101
S'trial_loop.thisTrialN'
p4102
I30
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4103
sS'block_loop.thisIndex'
p4104
g3627
sg38
S'right'
p4105
sg59
g63
sS'trial_loop.thisN'
p4106
I30
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4107
g60
(g99
S'\x1e\x00\x00\x00'
tRp4108
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4109
I0
sg3642
S'18-mms.png'
p4110
sS'block_loop.thisRepN'
p4111
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4112
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4113
Nsg70
Vn
sS'block_loop.thisTrialN'
p4114
I0
sg39
F0.96662396899046144
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d\x1c\x03\x82p'
tRp4115
sa(dp4116
S'trial_loop.thisTrialN'
p4117
I31
sg3633
g3788
sS'block_loop.thisIndex'
p4118
g3627
sg38
S'left'
p4119
sg59
g63
sS'trial_loop.thisN'
p4120
I31
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4121
g60
(g99
S'\x1f\x00\x00\x00'
tRp4122
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4123
I0
sg3642
g3796
sS'block_loop.thisRepN'
p4124
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4125
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4126
Nsg70
Vn
sS'block_loop.thisTrialN'
p4127
I0
sg39
F0.69987829309320659
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d"\x03\x99\xe0'
tRp4128
sa(dp4129
S'trial_loop.thisTrialN'
p4130
I32
sg3633
S'6-sour_patch_kids.png'
p4131
sS'block_loop.thisIndex'
p4132
g3627
sg38
S'right'
p4133
sg59
g63
sS'trial_loop.thisN'
p4134
I32
sg33
S'38-maltesers.png'
p4135
sg64
g65
sS'trial_loop.thisIndex'
p4136
g60
(g99
S' \x00\x00\x00'
tRp4137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4138
I0
sg3642
S'38-maltesers.png'
p4139
sS'block_loop.thisRepN'
p4140
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4141
I1
sg3647
S'6-sour_patch_kids.png'
p4142
sg55
g11
sS'block_loop.thisTrial'
p4143
Nsg70
Vn
sS'block_loop.thisTrialN'
p4144
I0
sg39
F0.79961466606982867
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x1d'\x0e\xa9\xe8"
tRp4145
sa(dp4146
S'trial_loop.thisTrialN'
p4147
I33
sg3633
S'27-hartleys_raspberries_jelly.png'
p4148
sS'block_loop.thisIndex'
p4149
g3627
sg38
S'right'
p4150
sg59
g63
sS'trial_loop.thisN'
p4151
I33
sg33
S'27-hartleys_raspberries_jelly.png'
p4152
sg64
g65
sS'trial_loop.thisIndex'
p4153
g60
(g99
S'!\x00\x00\x00'
tRp4154
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4155
I0
sg3642
S'51-mars.png'
p4156
sS'block_loop.thisRepN'
p4157
I1
sg3645
S'51-mars.png'
p4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4159
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4160
Nsg70
Vn
sS'block_loop.thisTrialN'
p4161
I0
sg39
F2.2331937414892309
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d-\x0c!x'
tRp4162
sa(dp4163
S'trial_loop.thisTrialN'
p4164
I34
sg3633
S'20-fruit_pastilles.png'
p4165
sS'block_loop.thisIndex'
p4166
g3627
sg38
S'right'
p4167
sg59
g63
sS'trial_loop.thisN'
p4168
I34
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4169
g60
(g99
S'"\x00\x00\x00'
tRp4170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4171
I0
sg3642
S'2-steamed_puddings.png'
p4172
sS'block_loop.thisRepN'
p4173
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4174
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vn
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.83330544157070108
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d5\x00\xfd\xe8'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
g3835
sS'block_loop.thisIndex'
p4180
g3627
sg38
S'left'
p4181
sg59
g63
sS'trial_loop.thisN'
p4182
I35
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p4183
g60
(g99
S'#\x00\x00\x00'
tRp4184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4185
I0
sg3642
g3843
sS'block_loop.thisRepN'
p4186
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4187
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p4188
Nsg70
Vn
sS'block_loop.thisTrialN'
p4189
I0
sg39
F0.86664612084859982
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1d:\x0e4\xb8'
tRp4190
sa(dp4191
S'trial_loop.thisTrialN'
p4192
I36
sg3633
S'26-walkers_smoky_bacon.png'
p4193
sS'block_loop.thisIndex'
p4194
g3627
sg38
S'right'
p4195
sg59
g63
sS'trial_loop.thisN'
p4196
I36
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4197
g60
(g99
S'$\x00\x00\x00'
tRp4198
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4199
I0
sg3642
S'44-crunch.png'
p4200
sS'block_loop.thisRepN'
p4201
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4202
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4203
Nsg70
Vn
sS'block_loop.thisTrialN'
p4204
I0
sg39
F1.1665674062132894
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e\x04\x0c\x9ex'
tRp4205
sa(dp4206
S'trial_loop.thisTrialN'
p4207
I37
sg3633
S'8-liquorice_catherine_wheels.png'
p4208
sS'block_loop.thisIndex'
p4209
g3627
sg38
S'right'
p4210
sg59
g63
sS'trial_loop.thisN'
p4211
I37
sg33
S'17-jacobs_mini_cheddars_redo.png'
p4212
sg64
g65
sS'trial_loop.thisIndex'
p4213
g60
(g99
S'%\x00\x00\x00'
tRp4214
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4215
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4216
sS'block_loop.thisRepN'
p4217
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4218
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p4219
sg55
g11
sS'block_loop.thisTrial'
p4220
Nsg70
Vn
sS'block_loop.thisTrialN'
p4221
I0
sg39
F0.88326970495836576
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e\x0b\x00\x8c\xa0'
tRp4222
sa(dp4223
S'trial_loop.thisTrialN'
p4224
I38
sg3633
S'33-ambrosia_rice.png'
p4225
sS'block_loop.thisIndex'
p4226
g3627
sg38
S'right'
p4227
sg59
g63
sS'trial_loop.thisN'
p4228
I38
sg33
S'23-crunchie_redo.png'
p4229
sg64
g65
sS'trial_loop.thisIndex'
p4230
g60
(g99
S'&\x00\x00\x00'
tRp4231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4232
I0
sg3642
S'23-crunchie_redo.png'
p4233
sS'block_loop.thisRepN'
p4234
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4235
I1
sg3647
S'33-ambrosia_rice.png'
p4236
sg55
g11
sS'block_loop.thisTrial'
p4237
Nsg70
Vn
sS'block_loop.thisTrialN'
p4238
I0
sg39
F1.1999864865138079
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e\x10\x0e{\x08'
tRp4239
sa(dp4240
S'trial_loop.thisTrialN'
p4241
I39
sg3633
g3771
sS'block_loop.thisIndex'
p4242
g3627
sg38
S'right'
p4243
sg59
g63
sS'trial_loop.thisN'
p4244
I39
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4245
g60
(g99
S"'\x00\x00\x00"
tRp4246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4247
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4248
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4249
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4250
Nsg70
Vn
sS'block_loop.thisTrialN'
p4251
I0
sg39
F1.0002939325859188
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e\x17\x02\xe2H'
tRp4252
sa(dp4253
S'trial_loop.thisTrialN'
p4254
I40
sg3633
g3867
sS'block_loop.thisIndex'
p4255
g3627
sg38
S'left'
p4256
sg59
g63
sS'trial_loop.thisN'
p4257
I40
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p4258
g60
(g99
S'(\x00\x00\x00'
tRp4259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4260
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4261
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4262
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4263
Nsg70
Vn
sS'block_loop.thisTrialN'
p4264
I0
sg39
F1.2001250425164471
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e\x1d\x034P'
tRp4265
sa(dp4266
S'trial_loop.thisTrialN'
p4267
I41
sg3633
g3771
sS'block_loop.thisIndex'
p4268
g3627
sg38
S'right'
p4269
sg59
g63
sS'trial_loop.thisN'
p4270
I41
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4271
g60
(g99
S')\x00\x00\x00'
tRp4272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4273
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4274
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4275
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4276
Nsg70
Vn
sS'block_loop.thisTrialN'
p4277
I0
sg39
F0.86652410033639171
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e#\x06\xdd\xd0'
tRp4278
sa(dp4279
S'trial_loop.thisTrialN'
p4280
I42
sg3633
g3929
sS'block_loop.thisIndex'
p4281
g3627
sg38
S'left'
p4282
sg59
g63
sS'trial_loop.thisN'
p4283
I42
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4284
g60
(g99
S'*\x00\x00\x00'
tRp4285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4286
I0
sg3642
g3937
sS'block_loop.thisRepN'
p4287
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4288
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p4289
Nsg70
Vn
sS'block_loop.thisTrialN'
p4290
I0
sg39
F0.86663813819541247
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e)\x05Kx'
tRp4291
sa(dp4292
S'trial_loop.thisTrialN'
p4293
I43
sg3633
g3739
sS'block_loop.thisIndex'
p4294
g3627
sg38
S'left'
p4295
sg59
g63
sS'trial_loop.thisN'
p4296
I43
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4297
g60
(g99
S'+\x00\x00\x00'
tRp4298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4299
I0
sg3642
g3746
sS'block_loop.thisRepN'
p4300
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4301
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4302
Nsg70
Vn
sS'block_loop.thisTrialN'
p4303
I0
sg39
F0.69994728599704104
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e/\x03\xb9 '
tRp4304
sa(dp4305
S'trial_loop.thisTrialN'
p4306
I44
sg3633
g3654
sS'block_loop.thisIndex'
p4307
g3627
sg38
S'left'
p4308
sg59
g63
sS'trial_loop.thisN'
p4309
I44
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4310
g60
(g99
S',\x00\x00\x00'
tRp4311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4312
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4313
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4314
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4315
Nsg70
Vn
sS'block_loop.thisTrialN'
p4316
I0
sg39
F0.7165586110422737
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e4\x0f\x07\xa8'
tRp4317
sa(dp4318
S'trial_loop.thisTrialN'
p4319
I45
sg3633
g3788
sS'block_loop.thisIndex'
p4320
g3627
sg38
S'left'
p4321
sg59
g63
sS'trial_loop.thisN'
p4322
I45
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4323
g60
(g99
S'-\x00\x00\x00'
tRp4324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4325
I0
sg3642
g3796
sS'block_loop.thisRepN'
p4326
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4327
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4328
Nsg70
Vn
sS'block_loop.thisTrialN'
p4329
I0
sg39
F0.7006762730270566
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1e:\x0bN\x88'
tRp4330
sa(dp4331
S'trial_loop.thisTrialN'
p4332
I46
sg3633
g3884
sS'block_loop.thisIndex'
p4333
g3627
sg38
S'right'
p4334
sg59
g63
sS'trial_loop.thisN'
p4335
I46
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4336
g60
(g99
S'.\x00\x00\x00'
tRp4337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4338
I0
sg3642
g3891
sS'block_loop.thisRepN'
p4339
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4340
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4341
Nsg70
Vn
sS'block_loop.thisTrialN'
p4342
I0
sg39
F0.96665761015901808
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f\x04\x07\x1cP'
tRp4343
sa(dp4344
S'trial_loop.thisTrialN'
p4345
I47
sg3633
g3912
sS'block_loop.thisIndex'
p4346
g3627
sg38
S'left'
p4347
sg59
g63
sS'trial_loop.thisN'
p4348
I47
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4349
g60
(g99
S'/\x00\x00\x00'
tRp4350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4351
I0
sg3642
g3920
sS'block_loop.thisRepN'
p4352
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4353
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4354
Nsg70
Vn
sS'block_loop.thisTrialN'
p4355
I0
sg39
F0.76665743910416495
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f\n\x073\xc0'
tRp4356
sa(dp4357
S'trial_loop.thisTrialN'
p4358
I48
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p4359
sS'block_loop.thisIndex'
p4360
g3627
sg38
S'left'
p4361
sg59
g63
sS'trial_loop.thisN'
p4362
I48
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p4363
g60
(g99
S'0\x00\x00\x00'
tRp4364
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4365
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p4366
sS'block_loop.thisRepN'
p4367
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4368
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4369
Nsg70
Vn
sS'block_loop.thisTrialN'
p4370
I0
sg39
F1.2831269295566017
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f\x10\x03\xf7\xa0'
tRp4371
sa(dp4372
S'trial_loop.thisTrialN'
p4373
I49
sg3633
g4028
sS'block_loop.thisIndex'
p4374
g3627
sg38
S'left'
p4375
sg59
g63
sS'trial_loop.thisN'
p4376
I49
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4377
g60
(g99
S'1\x00\x00\x00'
tRp4378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4379
I0
sg3642
g4036
sS'block_loop.thisRepN'
p4380
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4381
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4382
Nsg70
Vn
sS'block_loop.thisTrialN'
p4383
I0
sg39
F0.64979742599098245
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f\x16\x08\xd1\xd0'
tRp4384
sa(dp4385
S'trial_loop.thisTrialN'
p4386
I50
sg3633
S'7-olives.png'
p4387
sS'block_loop.thisIndex'
p4388
g3627
sg38
S'right'
p4389
sg59
g63
sS'trial_loop.thisN'
p4390
I50
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p4391
g60
(g99
S'2\x00\x00\x00'
tRp4392
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4393
I0
sg3642
S'22-daim.png'
p4394
sS'block_loop.thisRepN'
p4395
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4396
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p4397
Nsg70
Vn
sS'block_loop.thisTrialN'
p4398
I0
sg39
F0.68332826339974417
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f\x1c\x04&\x80'
tRp4399
sa(dp4400
S'trial_loop.thisTrialN'
p4401
I51
sg3633
g3788
sS'block_loop.thisIndex'
p4402
g3627
sg38
S'left'
p4403
sg59
g63
sS'trial_loop.thisN'
p4404
I51
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4405
g60
(g99
S'3\x00\x00\x00'
tRp4406
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4407
I0
sg3642
g3796
sS'block_loop.thisRepN'
p4408
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4409
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4410
Nsg70
Vn
sS'block_loop.thisTrialN'
p4411
I0
sg39
F0.75032436644323752
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f!\x0e\xfb\xf0'
tRp4412
sa(dp4413
S'trial_loop.thisTrialN'
p4414
I52
sg3633
S'1-treacle_cookies.png'
p4415
sS'block_loop.thisIndex'
p4416
g3627
sg38
S'left'
p4417
sg59
g63
sS'trial_loop.thisN'
p4418
I52
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4419
g60
(g99
S'4\x00\x00\x00'
tRp4420
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4421
I0
sg3642
S'21-nakd_banana_crunch.png'
p4422
sS'block_loop.thisRepN'
p4423
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4424
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4425
Nsg70
Vn
sS'block_loop.thisTrialN'
p4426
I0
sg39
F0.76666200061663403
sg34
g753
(S"\x07\xdf\x07\x02\x0f\x1f'\x0b\xbb\xe8"
tRp4427
sa(dp4428
S'trial_loop.thisTrialN'
p4429
I53
sg3633
S'51-mars.png'
p4430
sS'block_loop.thisIndex'
p4431
g3627
sg38
S'left'
p4432
sg59
g63
sS'trial_loop.thisN'
p4433
I53
sg33
g4152
sg64
g65
sS'trial_loop.thisIndex'
p4434
g60
(g99
S'5\x00\x00\x00'
tRp4435
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4436
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4437
sS'block_loop.thisRepN'
p4438
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4439
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4440
Nsg70
Vn
sS'block_loop.thisTrialN'
p4441
I0
sg39
F1.1999422968401632
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f-\x08\xba`'
tRp4442
sa(dp4443
S'trial_loop.thisTrialN'
p4444
I54
sg3633
g4131
sS'block_loop.thisIndex'
p4445
g3627
sg38
S'right'
p4446
sg59
g63
sS'trial_loop.thisN'
p4447
I54
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p4448
g60
(g99
S'6\x00\x00\x00'
tRp4449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4450
I0
sg3642
g4139
sS'block_loop.thisRepN'
p4451
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4452
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p4453
Nsg70
Vn
sS'block_loop.thisTrialN'
p4454
I0
sg39
F0.84973373584944056
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f3\x0c)H'
tRp4455
sa(dp4456
S'trial_loop.thisTrialN'
p4457
I55
sg3633
g3754
sS'block_loop.thisIndex'
p4458
g3627
sg38
S'left'
p4459
sg59
g63
sS'trial_loop.thisN'
p4460
I55
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4461
g60
(g99
S'7\x00\x00\x00'
tRp4462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4463
I0
sg3642
g3762
sS'block_loop.thisRepN'
p4464
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4465
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4466
Nsg70
Vn
sS'block_loop.thisTrialN'
p4467
I0
sg39
F0.76654254595632665
sg34
g753
(S'\x07\xdf\x07\x02\x0f\x1f9\nXp'
tRp4468
sa(dp4469
S'trial_loop.thisTrialN'
p4470
I56
sg3633
g3705
sS'block_loop.thisIndex'
p4471
g3627
sg38
S'right'
p4472
sg59
g63
sS'trial_loop.thisN'
p4473
I56
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4474
g60
(g99
S'8\x00\x00\x00'
tRp4475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4476
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4477
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4478
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4479
Nsg70
Vn
sS'block_loop.thisTrialN'
p4480
I0
sg39
F0.64992885462925187
sg34
g753
(S'\x07\xdf\x07\x02\x0f \x03\x07V\xe8'
tRp4481
sa(dp4482
S'trial_loop.thisTrialN'
p4483
I57
sg3633
g3654
sS'block_loop.thisIndex'
p4484
g3627
sg38
S'left'
p4485
sg59
g63
sS'trial_loop.thisN'
p4486
I57
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4487
g60
(g99
S'9\x00\x00\x00'
tRp4488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4489
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4490
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4491
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4492
Nsg70
Vn
sS'block_loop.thisTrialN'
p4493
I0
sg39
F1.2834539331233827
sg34
g753
(S'\x07\xdf\x07\x02\x0f \t\x02q\x00'
tRp4494
sa(dp4495
S'trial_loop.thisTrialN'
p4496
I58
sg3633
S'23-crunchie_redo.png'
p4497
sS'block_loop.thisIndex'
p4498
g3627
sg38
S'left'
p4499
sg59
g63
sS'trial_loop.thisN'
p4500
I58
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p4501
g60
(g99
S':\x00\x00\x00'
tRp4502
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4503
I0
sg3642
S'33-ambrosia_rice.png'
p4504
sS'block_loop.thisRepN'
p4505
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4506
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p4507
Nsg70
Vn
sS'block_loop.thisTrialN'
p4508
I0
sg39
F1.2333385695746983
sg34
g753
(S'\x07\xdf\x07\x02\x0f \x0f\x07K0'
tRp4509
sa(dp4510
S'trial_loop.thisTrialN'
p4511
I59
sg3633
g4165
sS'block_loop.thisIndex'
p4512
g3627
sg38
S'right'
p4513
sg59
g63
sS'trial_loop.thisN'
p4514
I59
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4515
g60
(g99
S';\x00\x00\x00'
tRp4516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4517
I0
sg3642
g4172
sS'block_loop.thisRepN'
p4518
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4519
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4520
Nsg70
Vn
sS'block_loop.thisTrialN'
p4521
I0
sg39
F0.84996836874779547
sg34
g753
(S'\x07\xdf\x07\x02\x0f \x15\x0bm\xc8'
tRp4522
sa(dp4523
S'trial_loop.thisTrialN'
p4524
I60
sg3633
g4193
sS'block_loop.thisIndex'
p4525
g3627
sg38
S'right'
p4526
sg59
g63
sS'trial_loop.thisN'
p4527
I60
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p4528
g60
(g99
S'<\x00\x00\x00'
tRp4529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4530
I0
sg3642
g4200
sS'block_loop.thisRepN'
p4531
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4532
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4533
Nsg70
Vn
sS'block_loop.thisTrialN'
p4534
I0
sg39
F0.73333928230567835
sg34
g753
(S'\x07\xdf\x07\x02\x0f \x1b\t\x9c\xf0'
tRp4535
sa(dp4536
S'trial_loop.thisTrialN'
p4537
I61
sg3633
S'35-raisins.png'
p4538
sS'block_loop.thisIndex'
p4539
g3627
sg38
S'right'
p4540
sg59
g63
sS'trial_loop.thisN'
p4541
I61
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p4542
g60
(g99
S'=\x00\x00\x00'
tRp4543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4544
I0
sg3642
S'49-yorkie.png'
p4545
sS'block_loop.thisRepN'
p4546
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4547
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4548
Nsg70
Vn
sS'block_loop.thisTrialN'
p4549
I0
sg39
F1.0165525955417252
sg34
g753
(S'\x07\xdf\x07\x02\x0f !\x06"P'
tRp4550
sa(dp4551
S'trial_loop.thisTrialN'
p4552
I62
sg3633
g4148
sS'block_loop.thisIndex'
p4553
g3627
sg38
S'left'
p4554
sg59
g63
sS'trial_loop.thisN'
p4555
I62
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p4556
g60
(g99
S'>\x00\x00\x00'
tRp4557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4558
I0
sg3642
g4156
sS'block_loop.thisRepN'
p4559
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4560
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4561
Nsg70
Vn
sS'block_loop.thisTrialN'
p4562
I0
sg39
F0.86655146941848216
sg34
g753
(S"\x07\xdf\x07\x02\x0f '\x06\xf1X"
tRp4563
sa(dp4564
S'trial_loop.thisTrialN'
p4565
I63
sg3633
g3867
sS'block_loop.thisIndex'
p4566
g3627
sg38
S'left'
p4567
sg59
g63
sS'trial_loop.thisN'
p4568
I63
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4569
g60
(g99
S'?\x00\x00\x00'
tRp4570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4571
I0
sg3642
g3875
sS'block_loop.thisRepN'
p4572
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4573
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4574
Nsg70
Vn
sS'block_loop.thisTrialN'
p4575
I0
sg39
F0.78333148496676586
sg34
g753
(S'\x07\xdf\x07\x02\x0f -\x05_\x00'
tRp4576
sa(dp4577
S'trial_loop.thisTrialN'
p4578
I64
sg3633
g3722
sS'block_loop.thisIndex'
p4579
g3627
sg38
S'right'
p4580
sg59
g63
sS'trial_loop.thisN'
p4581
I64
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4582
g60
(g99
S'@\x00\x00\x00'
tRp4583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4584
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4585
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4586
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4587
Nsg70
Vn
sS'block_loop.thisTrialN'
p4588
I0
sg39
F0.83316203896174557
sg34
g753
(S'\x07\xdf\x07\x02\x0f 3\x02\x9b\xf8'
tRp4589
sa(dp4590
S'trial_loop.thisTrialN'
p4591
I65
sg3633
S'42-mrkipling_lemon_slices.png'
p4592
sS'block_loop.thisIndex'
p4593
g3627
sg38
S'left'
p4594
sg59
g63
sS'trial_loop.thisN'
p4595
I65
sg33
g3829
sg64
g65
sS'trial_loop.thisIndex'
p4596
g60
(g99
S'A\x00\x00\x00'
tRp4597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4598
I0
sg3642
S'16-skips_prawn.png'
p4599
sS'block_loop.thisRepN'
p4600
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4601
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4602
Nsg70
Vn
sS'block_loop.thisTrialN'
p4603
I0
sg39
F0.79979826702401624
sg34
g753
(S'\x07\xdf\x07\x02\x0f 9\x00\x8c\xa0'
tRp4604
sa(dp4605
S'trial_loop.thisTrialN'
p4606
I66
sg3633
g4148
sS'block_loop.thisIndex'
p4607
g3627
sg38
S'right'
p4608
sg59
g63
sS'trial_loop.thisN'
p4609
I66
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p4610
g60
(g99
S'B\x00\x00\x00'
tRp4611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4612
I0
sg3642
g4156
sS'block_loop.thisRepN'
p4613
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4614
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p4615
Nsg70
Vn
sS'block_loop.thisTrialN'
p4616
I0
sg39
F1.199907800386427
sg34
g753
(S'\x07\xdf\x07\x02\x0f!\x02\rJX'
tRp4617
sa(dp4618
S'trial_loop.thisTrialN'
p4619
I67
sg3633
S'10-bounty_redo.png'
p4620
sS'block_loop.thisIndex'
p4621
g3627
sg38
S'left'
p4622
sg59
g63
sS'trial_loop.thisN'
p4623
I67
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4624
g60
(g99
S'C\x00\x00\x00'
tRp4625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4626
I0
sg3642
S'4-corn.png'
p4627
sS'block_loop.thisRepN'
p4628
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4629
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4630
Nsg70
Vn
sS'block_loop.thisTrialN'
p4631
I0
sg39
F0.74990698786859866
sg34
g753
(S'\x07\xdf\x07\x02\x0f!\t\x01s\x18'
tRp4632
sa(dp4633
S'trial_loop.thisTrialN'
p4634
I68
sg3633
g4103
sS'block_loop.thisIndex'
p4635
g3627
sg38
S'right'
p4636
sg59
g63
sS'trial_loop.thisN'
p4637
I68
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4638
g60
(g99
S'D\x00\x00\x00'
tRp4639
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4640
I0
sg3642
g4110
sS'block_loop.thisRepN'
p4641
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4642
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4643
Nsg70
Vn
sS'block_loop.thisTrialN'
p4644
I0
sg39
F0.71661734053850523
sg34
g753
(S'\x07\xdf\x07\x02\x0f!\x0e\ry8'
tRp4645
sa(dp4646
S'trial_loop.thisTrialN'
p4647
I69
sg3633
g3835
sS'block_loop.thisIndex'
p4648
g3627
sg38
S'left'
p4649
sg59
g63
sS'trial_loop.thisN'
p4650
I69
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p4651
g60
(g99
S'E\x00\x00\x00'
tRp4652
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4653
I0
sg3642
g3843
sS'block_loop.thisRepN'
p4654
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4655
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p4656
Nsg70
Vn
sS'block_loop.thisTrialN'
p4657
I0
sg39
F0.79992741490059416
sg34
g753
(S'\x07\xdf\x07\x02\x0f!\x14\t\xc0\x18'
tRp4658
sa(dp4659
S'trial_loop.thisTrialN'
p4660
I70
sg3633
S'13-mccoys_steak_crisps.png'
p4661
sS'block_loop.thisIndex'
p4662
g3627
sg38
S'right'
p4663
sg59
g63
sS'trial_loop.thisN'
p4664
I70
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p4665
g60
(g99
S'F\x00\x00\x00'
tRp4666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4667
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4668
sS'block_loop.thisRepN'
p4669
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4670
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p4671
Nsg70
Vn
sS'block_loop.thisTrialN'
p4672
I0
sg39
F0.56664728973191814
sg34
g753
(S'\x07\xdf\x07\x02\x0f!\x1a\x06\xfd\x10'
tRp4673
sa(dp4674
S'trial_loop.thisTrialN'
p4675
I71
sg3633
g4225
sS'block_loop.thisIndex'
p4676
g3627
sg38
S'right'
p4677
sg59
g63
sS'trial_loop.thisN'
p4678
I71
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p4679
g60
(g99
S'G\x00\x00\x00'
tRp4680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4681
I0
sg3642
g4233
sS'block_loop.thisRepN'
p4682
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4683
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p4684
Nsg70
Vn
sS'block_loop.thisTrialN'
p4685
I0
sg39
F1.0832088657589338
sg34
g753
(S'\x07\xdf\x07\x02\x0f! \x00\xe2\x90'
tRp4686
sa(dp4687
S'trial_loop.thisTrialN'
p4688
I72
sg3633
g3852
sS'block_loop.thisIndex'
p4689
g3627
sg38
S'right'
p4690
sg59
g63
sS'trial_loop.thisN'
p4691
I72
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4692
g60
(g99
S'H\x00\x00\x00'
tRp4693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4694
I0
sg3642
g3859
sS'block_loop.thisRepN'
p4695
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4696
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4697
Nsg70
Vn
sS'block_loop.thisTrialN'
p4698
I0
sg39
F0.63330869165292825
sg34
g753
(S'\x07\xdf\x07\x02\x0f!&\x02\xe2H'
tRp4699
sa(dp4700
S'trial_loop.thisTrialN'
p4701
I73
sg3633
g3722
sS'block_loop.thisIndex'
p4702
g3627
sg38
S'right'
p4703
sg59
g63
sS'trial_loop.thisN'
p4704
I73
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4705
g60
(g99
S'I\x00\x00\x00'
tRp4706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4707
I0
sg3642
g3730
sS'block_loop.thisRepN'
p4708
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4709
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4710
Nsg70
Vn
sS'block_loop.thisTrialN'
p4711
I0
sg39
F0.74994233960751444
sg34
g753
(S'\x07\xdf\x07\x02\x0f!+\r\x00 '
tRp4712
sa(dp4713
S'trial_loop.thisTrialN'
p4714
I74
sg3633
g4208
sS'block_loop.thisIndex'
p4715
g3627
sg38
S'right'
p4716
sg59
g63
sS'trial_loop.thisN'
p4717
I74
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p4718
g60
(g99
S'J\x00\x00\x00'
tRp4719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4720
I0
sg3642
g4216
sS'block_loop.thisRepN'
p4721
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4722
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4723
Nsg70
Vn
sS'block_loop.thisTrialN'
p4724
I0
sg39
F0.84999545273967669
sg34
g753
(S'\x07\xdf\x07\x02\x0f!1\t\xc0\x18'
tRp4725
sa(dp4726
S'trial_loop.thisTrialN'
p4727
I75
sg3633
g4620
sS'block_loop.thisIndex'
p4728
g3627
sg38
S'left'
p4729
sg59
g63
sS'trial_loop.thisN'
p4730
I75
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p4731
g60
(g99
S'K\x00\x00\x00'
tRp4732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4733
I0
sg3642
g4627
sS'block_loop.thisRepN'
p4734
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4735
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p4736
Nsg70
Vn
sS'block_loop.thisTrialN'
p4737
I0
sg39
F1.7665833144928911
sg34
g753
(S'\x07\xdf\x07\x02\x0f!7\x07\xf3('
tRp4738
sa(dp4739
S'trial_loop.thisTrialN'
p4740
I76
sg3633
g4028
sS'block_loop.thisIndex'
p4741
g3627
sg38
S'left'
p4742
sg59
g63
sS'trial_loop.thisN'
p4743
I76
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4744
g60
(g99
S'L\x00\x00\x00'
tRp4745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4746
I0
sg3642
g4036
sS'block_loop.thisRepN'
p4747
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4748
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4749
Nsg70
Vn
sS'block_loop.thisTrialN'
p4750
I0
sg39
F0.66652849079036969
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x02\x04\xe9\xd0'
tRp4751
sa(dp4752
S'trial_loop.thisTrialN'
p4753
I77
sg3633
g3771
sS'block_loop.thisIndex'
p4754
g3627
sg38
S'right'
p4755
sg59
g63
sS'trial_loop.thisN'
p4756
I77
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4757
g60
(g99
S'M\x00\x00\x00'
tRp4758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4759
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4760
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4761
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4762
Nsg70
Vn
sS'block_loop.thisTrialN'
p4763
I0
sg39
F1.0164704882845399
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x08\x00>\x80'
tRp4764
sa(dp4765
S'trial_loop.thisTrialN'
p4766
I78
sg3633
g3929
sS'block_loop.thisIndex'
p4767
g3627
sg38
S'left'
p4768
sg59
g63
sS'trial_loop.thisN'
p4769
I78
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p4770
g60
(g99
S'N\x00\x00\x00'
tRp4771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4772
I0
sg3642
g3937
sS'block_loop.thisRepN'
p4773
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4774
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p4775
Nsg70
Vn
sS'block_loop.thisTrialN'
p4776
I0
sg39
F0.91652799187795608
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x0e\x01\r\x88'
tRp4777
sa(dp4778
S'trial_loop.thisTrialN'
p4779
I79
sg3633
g4193
sS'block_loop.thisIndex'
p4780
g3627
sg38
S'right'
p4781
sg59
g63
sS'trial_loop.thisN'
p4782
I79
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p4783
g60
(g99
S'O\x00\x00\x00'
tRp4784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4785
I0
sg3642
g4200
sS'block_loop.thisRepN'
p4786
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4787
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p4788
Nsg70
Vn
sS'block_loop.thisTrialN'
p4789
I0
sg39
F0.91702405657269992
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x14\x002\xc8'
tRp4790
sa(dp4791
S'trial_loop.thisTrialN'
p4792
I80
sg3633
g4088
sS'block_loop.thisIndex'
p4793
g3627
sg38
S'left'
p4794
sg59
g63
sS'trial_loop.thisN'
p4795
I80
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4796
g60
(g99
S'P\x00\x00\x00'
tRp4797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4798
I0
sg3642
g4095
sS'block_loop.thisRepN'
p4799
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4800
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4801
Nsg70
Vn
sS'block_loop.thisTrialN'
p4802
I0
sg39
F0.69994357976611354
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x19\x0e\xd4\xe0'
tRp4803
sa(dp4804
S'trial_loop.thisTrialN'
p4805
I81
sg3633
S'30-spaghetti_hoops.png'
p4806
sS'block_loop.thisIndex'
p4807
g3627
sg38
S'right'
p4808
sg59
g63
sS'trial_loop.thisN'
p4809
I81
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4810
g60
(g99
S'Q\x00\x00\x00'
tRp4811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4812
I0
sg3642
S'19-caramello_redo.png'
p4813
sS'block_loop.thisRepN'
p4814
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4815
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p4816
Nsg70
Vn
sS'block_loop.thisTrialN'
p4817
I0
sg39
F0.63336457020341186
sg34
g753
(S'\x07\xdf\x07\x02\x0f"\x1f\n\xa2\xa8'
tRp4818
sa(dp4819
S'trial_loop.thisTrialN'
p4820
I82
sg3633
g4165
sS'block_loop.thisIndex'
p4821
g3627
sg38
S'right'
p4822
sg59
g63
sS'trial_loop.thisN'
p4823
I82
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p4824
g60
(g99
S'R\x00\x00\x00'
tRp4825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4826
I0
sg3642
g4172
sS'block_loop.thisRepN'
p4827
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4828
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4829
Nsg70
Vn
sS'block_loop.thisTrialN'
p4830
I0
sg39
F0.66666391074977582
sg34
g753
(S'\x07\xdf\x07\x02\x0f"%\x05~@'
tRp4831
sa(dp4832
S'trial_loop.thisTrialN'
p4833
I83
sg3633
g3929
sS'block_loop.thisIndex'
p4834
g3627
sg38
S'left'
p4835
sg59
g63
sS'trial_loop.thisN'
p4836
I83
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p4837
g60
(g99
S'S\x00\x00\x00'
tRp4838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4839
I0
sg3642
g3937
sS'block_loop.thisRepN'
p4840
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4841
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p4842
Nsg70
Vn
sS'block_loop.thisTrialN'
p4843
I0
sg39
F1.0665630442636029
sg34
g753
(S'\x07\xdf\x07\x02\x0f"+\x01\x11p'
tRp4844
sa(dp4845
S'trial_loop.thisTrialN'
p4846
I84
sg3633
g3884
sS'block_loop.thisIndex'
p4847
g3627
sg38
S'right'
p4848
sg59
g63
sS'trial_loop.thisN'
p4849
I84
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4850
g60
(g99
S'T\x00\x00\x00'
tRp4851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4852
I0
sg3642
g3891
sS'block_loop.thisRepN'
p4853
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4854
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4855
Nsg70
Vn
sS'block_loop.thisTrialN'
p4856
I0
sg39
F1.1832904883594892
sg34
g753
(S'\x07\xdf\x07\x02\x0f"1\x02\x94('
tRp4857
sa(dp4858
S'trial_loop.thisTrialN'
p4859
I85
sg3633
g4387
sS'block_loop.thisIndex'
p4860
g3627
sg38
S'right'
p4861
sg59
g63
sS'trial_loop.thisN'
p4862
I85
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p4863
g60
(g99
S'U\x00\x00\x00'
tRp4864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4865
I0
sg3642
g4394
sS'block_loop.thisRepN'
p4866
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4867
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p4868
Nsg70
Vn
sS'block_loop.thisTrialN'
p4869
I0
sg39
F0.78337567464041058
sg34
g753
(S'\x07\xdf\x07\x02\x0f"7\x05\xc4\x90'
tRp4870
sa(dp4871
S'trial_loop.thisTrialN'
p4872
I86
sg3633
g4103
sS'block_loop.thisIndex'
p4873
g3627
sg38
S'right'
p4874
sg59
g63
sS'trial_loop.thisN'
p4875
I86
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p4876
g60
(g99
S'V\x00\x00\x00'
tRp4877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4878
I0
sg3642
g4110
sS'block_loop.thisRepN'
p4879
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4880
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p4881
Nsg70
Vn
sS'block_loop.thisTrialN'
p4882
I0
sg39
F0.88320783941890113
sg34
g753
(S'\x07\xdf\x07\x02\x0f#\x01\x03\x01\x88'
tRp4883
sa(dp4884
S'trial_loop.thisTrialN'
p4885
I87
sg3633
g3972
sS'block_loop.thisIndex'
p4886
g3627
sg38
S'right'
p4887
sg59
g63
sS'trial_loop.thisN'
p4888
I87
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4889
g60
(g99
S'W\x00\x00\x00'
tRp4890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4891
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4892
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4893
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4894
Nsg70
Vn
sS'block_loop.thisTrialN'
p4895
I0
sg39
F0.88315737766606617
sg34
g753
(S'\x07\xdf\x07\x02\x0f#\x07\x01\xa9\xc8'
tRp4896
sa(dp4897
S'trial_loop.thisTrialN'
p4898
I88
sg3633
g4387
sS'block_loop.thisIndex'
p4899
g3627
sg38
S'right'
p4900
sg59
g63
sS'trial_loop.thisN'
p4901
I88
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p4902
g60
(g99
S'X\x00\x00\x00'
tRp4903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4904
I0
sg3642
g4394
sS'block_loop.thisRepN'
p4905
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4906
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p4907
Nsg70
Vn
sS'block_loop.thisTrialN'
p4908
I0
sg39
F0.76663691228895914
sg34
g753
(S'\x07\xdf\x07\x02\x0f#\r\x00\x90\x88'
tRp4909
sa(dp4910
S'trial_loop.thisTrialN'
p4911
I89
sg3633
g4592
sS'block_loop.thisIndex'
p4912
g3627
sg38
S'left'
p4913
sg59
g63
sS'trial_loop.thisN'
p4914
I89
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4915
g60
(g99
S'Y\x00\x00\x00'
tRp4916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4917
I0
sg3642
g4599
sS'block_loop.thisRepN'
p4918
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4919
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4920
Nsg70
Vn
sS'block_loop.thisTrialN'
p4921
I0
sg39
F1.316443090687244
sg34
g753
(S'\x07\xdf\x07\x02\x0f#\x12\x0c\x96\xa8'
tRp4922
sa(dp4923
S'trial_loop.thisTrialN'
p4924
I90
sg3633
g3634
sS'block_loop.thisIndex'
p4925
g3627
sg38
S'right'
p4926
sg59
g63
sS'trial_loop.thisN'
p4927
I90
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4928
g60
(g99
S'Z\x00\x00\x00'
tRp4929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4930
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4931
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4932
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4933
Nsg70
Vn
sS'block_loop.thisTrialN'
p4934
I0
sg39
F5.7500942950573517
sg34
g753
(S'\x07\xdf\x07\x02\x0f#\x19\x02\xa7\xb0'
tRp4935
sa(dp4936
S'trial_loop.thisTrialN'
p4937
I91
sg3633
g3972
sS'block_loop.thisIndex'
p4938
g3627
sg38
S'right'
p4939
sg59
g63
sS'trial_loop.thisN'
p4940
I91
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p4941
g60
(g99
S'[\x00\x00\x00'
tRp4942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4943
I0
sg3642
g3979
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4945
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vn
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.69991592558653792
sg34
g753
(S'\x07\xdf\x07\x02\x0f##\x0e\xc9('
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g3771
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g3779
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4958
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vn
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.69998149735693005
sg34
g753
(S'\x07\xdf\x07\x02\x0f#)\n\x96\xf0'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g3818
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'right'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g3826
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4971
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F1.0331160246823856
sg34
g753
(S'\x07\xdf\x07\x02\x0f#/\x06\xa38'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4359
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4366
sS'block_loop.thisRepN'
p4983
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4984
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F1.2999232810288959
sg34
g753
(S'\x07\xdf\x07\x02\x0f#5\x07\xb0\xc0'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g3929
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'left'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g3937
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4997
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.89989015303217457
sg34
g753
(S'\x07\xdf\x07\x02\x0f#;\x0c\xc5\x88'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g4193
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'right'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5010
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.85014598272027797
sg34
g753
(S'\x07\xdf\x07\x02\x0f$\x05\x0b\xacH'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g4131
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'right'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g4139
sS'block_loop.thisRepN'
p5022
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5023
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.98296644977745018
sg34
g753
(S'\x07\xdf\x07\x02\x0f$\x0b\t\xdbp'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g4592
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g4599
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5036
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F1.3331388037477154
sg34
g753
(S'\x07\xdf\x07\x02\x0f$\x11\n1`'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3705
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'right'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5049
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F1.0666733758953342
sg34
g753
(S'\x07\xdf\x07\x02\x0f$\x18\x00\x80\xe8'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g3867
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3878
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g3875
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5062
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F1.1333162466580688
sg34
g753
(S'\x07\xdf\x07\x02\x0f$\x1e\x02\x07\x88'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g3912
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5075
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F1.033703604764014
sg34
g753
(S'\x07\xdf\x07\x02\x0f$$\x04\x80X'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4806
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5088
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.3498692983557703
sg34
g753
(S'\x07\xdf\x07\x02\x0f$*\x05\x89\xf8'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4013
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4020
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5101
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.0166515233868267
sg34
g753
(S'\x07\xdf\x07\x02\x0f$0\x0bVX'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3654
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5114
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.83334079331325484
sg34
g753
(S'\x07\xdf\x07\x02\x0f$6\x0c%`'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g3818
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'right'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g3826
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5127
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F1.5998482726281509
sg34
g753
(S'\x07\xdf\x07\x02\x0f%\x00\n\x19\xf0'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
S'38-maltesers.png'
p5133
sS'block_loop.thisIndex'
p5134
g3627
sg38
S'left'
p5135
sg59
g63
sS'trial_loop.thisN'
p5136
I106
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5137
g60
(g99
S'j\x00\x00\x00'
tRp5138
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5139
I0
sg3642
S'6-sour_patch_kids.png'
p5140
sS'block_loop.thisRepN'
p5141
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5142
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5143
Nsg70
Vn
sS'block_loop.thisTrialN'
p5144
I0
sg39
F0.8333282491475984
sg34
g753
(S'\x07\xdf\x07\x02\x0f%\x07\x04t\xa0'
tRp5145
sa(dp5146
S'trial_loop.thisTrialN'
p5147
I107
sg3633
g4071
sS'block_loop.thisIndex'
p5148
g3627
sg38
S'left'
p5149
sg59
g63
sS'trial_loop.thisN'
p5150
I107
sg33
g4082
sg64
g65
sS'trial_loop.thisIndex'
p5151
g60
(g99
S'k\x00\x00\x00'
tRp5152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5153
I0
sg3642
g4079
sS'block_loop.thisRepN'
p5154
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5155
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5156
Nsg70
Vn
sS'block_loop.thisTrialN'
p5157
I0
sg39
F1.066638879441598
sg34
g753
(S'\x07\xdf\x07\x02\x0f%\r\x02eH'
tRp5158
sa(dp5159
S'trial_loop.thisTrialN'
p5160
I108
sg3633
g5133
sS'block_loop.thisIndex'
p5161
g3627
sg38
S'left'
p5162
sg59
g63
sS'trial_loop.thisN'
p5163
I108
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5164
g60
(g99
S'l\x00\x00\x00'
tRp5165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5166
I0
sg3642
g5140
sS'block_loop.thisRepN'
p5167
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5168
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5169
Nsg70
Vn
sS'block_loop.thisTrialN'
p5170
I0
sg39
F1.5663476552545035
sg34
g753
(S'\x07\xdf\x07\x02\x0f%\x13\x03\xeb\xe8'
tRp5171
sa(dp5172
S'trial_loop.thisTrialN'
p5173
I109
sg3633
g4497
sS'block_loop.thisIndex'
p5174
g3627
sg38
S'left'
p5175
sg59
g63
sS'trial_loop.thisN'
p5176
I109
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5177
g60
(g99
S'm\x00\x00\x00'
tRp5178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5179
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5180
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5181
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5182
Nsg70
Vn
sS'block_loop.thisTrialN'
p5183
I0
sg39
F0.96665532940096455
sg34
g753
(S'\x07\xdf\x07\x02\x0f%\x19\r\x0f\xc0'
tRp5184
sa(dp5185
S'trial_loop.thisTrialN'
p5186
I110
sg3633
g4013
sS'block_loop.thisIndex'
p5187
g3627
sg38
S'right'
p5188
sg59
g63
sS'trial_loop.thisN'
p5189
I110
sg33
g3775
sg64
g65
sS'trial_loop.thisIndex'
p5190
g60
(g99
S'n\x00\x00\x00'
tRp5191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5192
I0
sg3642
g4020
sS'block_loop.thisRepN'
p5193
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5194
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p5195
Nsg70
Vn
sS'block_loop.thisTrialN'
p5196
I0
sg39
F0.73333272513264092
sg34
g753
(S"\x07\xdf\x07\x02\x0f%\x1f\r'0"
tRp5197
sa(dp5198
S'trial_loop.thisTrialN'
p5199
I111
sg3633
g4359
sS'block_loop.thisIndex'
p5200
g3627
sg38
S'left'
p5201
sg59
g63
sS'trial_loop.thisN'
p5202
I111
sg33
g4219
sg64
g65
sS'trial_loop.thisIndex'
p5203
g60
(g99
S'o\x00\x00\x00'
tRp5204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5205
I0
sg3642
g4366
sS'block_loop.thisRepN'
p5206
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5207
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5208
Nsg70
Vn
sS'block_loop.thisTrialN'
p5209
I0
sg39
F0.84988996772153769
sg34
g753
(S'\x07\xdf\x07\x02\x0f%%\t\xac\x90'
tRp5210
sa(dp5211
S'trial_loop.thisTrialN'
p5212
I112
sg3633
g4661
sS'block_loop.thisIndex'
p5213
g3627
sg38
S'right'
p5214
sg59
g63
sS'trial_loop.thisN'
p5215
I112
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5216
g60
(g99
S'p\x00\x00\x00'
tRp5217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5218
I0
sg3642
g4668
sS'block_loop.thisRepN'
p5219
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5220
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5221
Nsg70
Vn
sS'block_loop.thisTrialN'
p5222
I0
sg39
F1.0332585720134375
sg34
g753
(S'\x07\xdf\x07\x02\x0f%+\x07\xdb\xb8'
tRp5223
sa(dp5224
S'trial_loop.thisTrialN'
p5225
I113
sg3633
g4165
sS'block_loop.thisIndex'
p5226
g3627
sg38
S'right'
p5227
sg59
g63
sS'trial_loop.thisN'
p5228
I113
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p5229
g60
(g99
S'q\x00\x00\x00'
tRp5230
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5231
I0
sg3642
g4172
sS'block_loop.thisRepN'
p5232
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5233
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5234
Nsg70
Vn
sS'block_loop.thisTrialN'
p5235
I0
sg39
F1.2166137768581393
sg34
g753
(S'\x07\xdf\x07\x02\x0f%1\x08\xe5X'
tRp5236
sa(dp5237
S'trial_loop.thisTrialN'
p5238
I114
sg3633
g4497
sS'block_loop.thisIndex'
p5239
g3627
sg38
S'left'
p5240
sg59
g63
sS'trial_loop.thisN'
p5241
I114
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5242
g60
(g99
S'r\x00\x00\x00'
tRp5243
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5244
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5245
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5246
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5247
Nsg70
Vn
sS'block_loop.thisTrialN'
p5248
I0
sg39
F1.6665507281722967
sg34
g753
(S'\x07\xdf\x07\x02\x0f%7\x0c\x8e\xd8'
tRp5249
sa(dp5250
S'trial_loop.thisTrialN'
p5251
I115
sg3633
g3818
sS'block_loop.thisIndex'
p5252
g3627
sg38
S'right'
p5253
sg59
g63
sS'trial_loop.thisN'
p5254
I115
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p5255
g60
(g99
S's\x00\x00\x00'
tRp5256
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5257
I0
sg3642
g3826
sS'block_loop.thisRepN'
p5258
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5259
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p5260
Nsg70
Vn
sS'block_loop.thisTrialN'
p5261
I0
sg39
F1.1998613299583667
sg34
g753
(S'\x07\xdf\x07\x02\x0f&\x02\x08\x1a8'
tRp5262
sa(dp5263
S'trial_loop.thisTrialN'
p5264
I116
sg3633
g4193
sS'block_loop.thisIndex'
p5265
g3627
sg38
S'right'
p5266
sg59
g63
sS'trial_loop.thisN'
p5267
I116
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5268
g60
(g99
S't\x00\x00\x00'
tRp5269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5270
I0
sg3642
g4200
sS'block_loop.thisRepN'
p5271
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5272
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5273
Nsg70
Vn
sS'block_loop.thisTrialN'
p5274
I0
sg39
F0.80000724140336388
sg34
g753
(S'\x07\xdf\x07\x02\x0f&\x08\x0b\x89 '
tRp5275
sa(dp5276
S'trial_loop.thisTrialN'
p5277
I117
sg3633
g4430
sS'block_loop.thisIndex'
p5278
g3627
sg38
S'left'
p5279
sg59
g63
sS'trial_loop.thisN'
p5280
I117
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p5281
g60
(g99
S'u\x00\x00\x00'
tRp5282
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5283
I0
sg3642
g4437
sS'block_loop.thisRepN'
p5284
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5285
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5286
Nsg70
Vn
sS'block_loop.thisTrialN'
p5287
I0
sg39
F1.0665755884292594
sg34
g753
(S'\x07\xdf\x07\x02\x0f&\x0e\t\x00\xb0'
tRp5288
sa(dp5289
S'trial_loop.thisTrialN'
p5290
I118
sg3633
g4497
sS'block_loop.thisIndex'
p5291
g3627
sg38
S'left'
p5292
sg59
g63
sS'trial_loop.thisN'
p5293
I118
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5294
g60
(g99
S'v\x00\x00\x00'
tRp5295
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5296
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5297
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5298
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F1.5165721245284658
sg34
g753
(S'\x07\xdf\x07\x02\x0f&\x14\n\x87P'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4071
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'left'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4079
sS'block_loop.thisRepN'
p5310
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5311
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F1.1832981859115534
sg34
g753
(S'\x07\xdf\x07\x02\x0f&\x1b\x03\xb1P'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g4387
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'right'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g4394
sS'block_loop.thisRepN'
p5323
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5324
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.64998102695244597
sg34
g753
(S'\x07\xdf\x07\x02\x0f&!\x07\x1cP'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3754
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5337
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.70043764880028903
sg34
g753
(S"\x07\xdf\x07\x02\x0f&'\x026h"
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g4415
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'left'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g4422
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5350
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.86656914528794005
sg34
g753
(S'\x07\xdf\x07\x02\x0f&,\r\x84\xf0'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g4103
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'right'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g4110
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5363
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.84998376385919983
sg34
g753
(S'\x07\xdf\x07\x02\x0f&2\x0b\xee\xb0'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g4088
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'left'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5376
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.6333275079014129
sg34
g753
(S'\x07\xdf\x07\x02\x0f&8\n!\xc0'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4806
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5389
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F1.9498529909433273
sg34
g753
(S"\x07\xdf\x07\x02\x0f'\x02\x04\xf9p"
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g5133
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g5140
sS'block_loop.thisRepN'
p5401
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5402
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F0.73308725863535074
sg34
g753
(S"\x07\xdf\x07\x02\x0f'\t\x04\xcex"
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g3654
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'left'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5415
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.8498198344350385
sg34
g753
(S"\x07\xdf\x07\x02\x0f'\x0f\x01\x19@"
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g5133
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g5140
sS'block_loop.thisRepN'
p5427
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5428
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.78304810088593513
sg34
g753
(S"\x07\xdf\x07\x02\x0f'\x14\x0e\xc5@"
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4661
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4668
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5441
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.78332806383332354
sg34
g753
(S"\x07\xdf\x07\x02\x0f'\x1a\x0b\xc7\xa0"
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g4028
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g4032
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g4036
sS'block_loop.thisRepN'
p5453
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5454
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F3.8164406673822668
sg34
g753
(S"\x07\xdf\x07\x02\x0f' \t\x00\xb0"
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g4208
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g4216
sS'block_loop.thisRepN'
p5466
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5467
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.75028074696092517
sg34
g753
(S"\x07\xdf\x07\x02\x0f')\x06\xe1\xb8"
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g3835
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'left'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g3843
sS'block_loop.thisRepN'
p5479
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5480
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F0.75001361326940241
sg34
g753
(S"\x07\xdf\x07\x02\x0f'/\x03g\x18"
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g4538
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5493
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.0666029575149878
sg34
g753
(S"\x07\xdf\x07\x02\x0f'5\x00*\xf8"
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4806
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4813
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5506
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.64985358964258921
sg34
g753
(S"\x07\xdf\x07\x02\x0f';\x01\xad\xb0"
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g3634
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5519
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.0166543743362126
sg34
g753
(S'\x07\xdf\x07\x02\x0f(\x04\x0c\n\x08'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4225
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'right'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4233
sS'block_loop.thisRepN'
p5531
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5532
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F1.5837016518671589
sg34
g753
(S'\x07\xdf\x07\x02\x0f(\n\x0c\xd9\x10'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4103
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'right'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4110
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5545
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.76661210905513144
sg34
g753
(S'\x07\xdf\x07\x02\x0f(\x11\x06\xf5@'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3754
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3765
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5558
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.85000799690533313
sg34
g753
(S'\x07\xdf\x07\x02\x0f(\x17\x03\xf3\xb8'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4131
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'right'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4139
sS'block_loop.thisRepN'
p5570
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5571
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.81635542408184847
sg34
g753
(S'\x07\xdf\x07\x02\x0f(\x1d\x02&\xc8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4661
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4668
sS'block_loop.thisRepN'
p5583
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5584
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.78337852558979648
sg34
g753
(S'\x07\xdf\x07\x02\x0f("\x0f\x1f\x18'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4430
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'left'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4437
sS'block_loop.thisRepN'
p5596
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5597
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.86662445365072927
sg34
g753
(S'\x07\xdf\x07\x02\x0f((\x0cX('
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3884
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'right'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3891
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5610
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.916643740303698
sg34
g753
(S'\x07\xdf\x07\x02\x0f(.\n\xc5\xd0'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g3788
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g3796
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5623
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.84996665818107431
sg34
g753
(S'\x07\xdf\x07\x02\x0f(4\n%\xa8'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3722
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5636
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.96664620637602638
sg34
g753
(S'\x07\xdf\x07\x02\x0f(:\x08X\xb8'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4415
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4422
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5649
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F1.0999165527937294
sg34
g753
(S'\x07\xdf\x07\x02\x0f)\x04\x081\xa8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3972
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3979
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5662
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.69988285460567567
sg34
g753
(S'\x07\xdf\x07\x02\x0f)\n\nk\xf8'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4497
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4504
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5675
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.73331989587313728
sg34
g753
(S'\x07\xdf\x07\x02\x0f)\x10\x06=\xa8'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4538
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5688
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.1166022875440831
sg34
g753
(S'\x07\xdf\x07\x02\x0f)\x16\x02\xc3\x08'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4071
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g4082
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4079
sS'block_loop.thisRepN'
p5700
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5701
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.68325014746369561
sg34
g753
(S'\x07\xdf\x07\x02\x0f)\x1c\x04\xfdX'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3754
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3758
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3762
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3758
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5714
I1
sg3647
g3765
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.3999541567791312
sg34
g753
(S'\x07\xdf\x07\x02\x0f)"\x00\x90\x88'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3722
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'right'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3730
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5727
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.64985358963895123
sg34
g753
(S'\x07\xdf\x07\x02\x0f)(\x07O\x18'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4387
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3839
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4394
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3839
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5740
I1
sg3647
g3846
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.61671390209812671
sg34
g753
(S'\x07\xdf\x07\x02\x0f).\x02i0'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3867
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3871
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3875
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3871
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5753
I1
sg3647
g3878
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.73327456582410377
sg34
g753
(S'\x07\xdf\x07\x02\x0f)3\x0cH\x88'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g3671
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5766
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F1.2836144414141017
sg34
g753
(S'\x07\xdf\x07\x02\x0f)9\x08\xcd\xe8'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g3688
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5779
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F2.0498208607750712
sg34
g753
(S'\x07\xdf\x07\x02\x0f*\x03\r\xa8\x18'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g3912
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'left'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3916
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5792
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.88321069036464905
sg34
g753
(S'\x07\xdf\x07\x02\x0f*\n\x0e\xecP'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4538
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5805
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.66660004954974283
sg34
g753
(S'\x07\xdf\x07\x02\x0f*\x10\r\x94\x90'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4661
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'right'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4668
sS'block_loop.thisRepN'
p5817
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5818
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.59988932625492453
sg34
g753
(S"\x07\xdf\x07\x02\x0f*\x16\t'\xc0"
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g4225
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g4233
sS'block_loop.thisRepN'
p5830
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5831
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.66691450895086746
sg34
g753
(S'\x07\xdf\x07\x02\x0f*\x1c\x03\x86X'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4415
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4422
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5844
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.81661771116341697
sg34
g753
(S'\x07\xdf\x07\x02\x0f*!\x0e\x1dH'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4359
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'left'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4366
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5857
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F1.0332722565544827
sg34
g753
(S"\x07\xdf\x07\x02\x0f*'\x0b\xd3X"
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4538
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'right'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3792
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4545
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3792
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5870
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F1.5831870560177776
sg34
g753
(S'\x07\xdf\x07\x02\x0f*-\x0c\xe0\xe0'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3671
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5883
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F1.7165737210598309
sg34
g753
(S'\x07\xdf\x07\x02\x0f*4\x06\xfd\x10'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g4225
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g4229
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g4233
sS'block_loop.thisRepN'
p5895
I1
sg3645
g4229
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5896
I1
sg3647
g4236
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F3.2831893652837607
sg34
g753
(S'\x07\xdf\x07\x02\x0f*;\x03@\x08'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4088
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5909
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F3.799854430671985
sg34
g753
(S'\x07\xdf\x07\x02\x0f+\x07\x08\x0e\x80'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3884
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3891
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5922
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.86657798322266899
sg34
g753
(S'\x07\xdf\x07\x02\x0f+\x10\x05r\x88'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3634
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5935
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F3.6662958535562211
sg34
g753
(S'\x07\xdf\x07\x02\x0f+\x16\x03\xe00'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4620
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'left'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4627
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5948
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F1.049814588692243
sg34
g753
(S'\x07\xdf\x07\x02\x0f+\x1e\x0e\xa2\x18'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3688
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5961
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.78329898418087396
sg34
g753
(S'\x07\xdf\x07\x02\x0f+%\x00\xa7\xf8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4088
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4095
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5974
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F0.71665098170706187
sg34
g753
(S"\x07\xdf\x07\x02\x0f+*\r'0"
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3671
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5987
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.0998099273965636
sg34
g753
(S'\x07\xdf\x07\x02\x0f+0\t3x'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g3912
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g3920
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3916
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6000
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.86665638425256475
sg34
g753
(S'\x07\xdf\x07\x02\x0f+6\x0bm\xc8'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g4148
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g4156
sS'block_loop.thisRepN'
p6012
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6013
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.88327255590411369
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x00\t\xdbp'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4071
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4079
sS'block_loop.thisRepN'
p6025
I1
sg3645
g4075
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6026
I1
sg3647
g4082
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F0.71649075851382804
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x06\x08\x83\xb0'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4620
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4627
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6039
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.98330998883102438
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x0c\x04\xcex'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4592
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'left'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4599
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6052
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F0.84985147993938881
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x12\x04\xe5\xe8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g3852
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g3859
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6065
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.6999270442793204
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x18\x03\x15\x10'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g4430
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g4437
sS'block_loop.thisRepN'
p6077
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6078
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.88330391631825478
sg34
g753
(S'\x07\xdf\x07\x02\x0f,\x1d\x0ec\x98'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g3705
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'right'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6090
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6091
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.73315995777011267
sg34
g753
(S'\x07\xdf\x07\x02\x0f,#\r\x0b\xd8'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4208
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4216
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6104
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F0.79993140622536885
sg34
g753
(S'\x07\xdf\x07\x02\x0f,)\t\x918'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4131
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'right'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4135
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4139
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6117
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.63316129771919805
sg34
g753
(S'\x07\xdf\x07\x02\x0f,/\x07\x08\xc8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4208
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4216
sS'block_loop.thisRepN'
p6129
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6130
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F0.71656972973505617
sg34
g753
(S'\x07\xdf\x07\x02\x0f,5\x01\xe4`'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3634
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6143
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.73339630123882671
sg34
g753
(S'\x07\xdf\x07\x02\x0f,:\rqh'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g5133
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g4142
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g5140
sS'block_loop.thisRepN'
p6155
I1
sg3645
g4135
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6156
I1
sg3647
g4142
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F0.78303013991899206
sg34
g753
(S'\x07\xdf\x07\x02\x0f-\x04\t\xb8H'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g3688
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6168
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6169
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.56664871520843008
sg34
g753
(S'\x07\xdf\x07\x02\x0f-\n\x06\xf5@'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4028
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'left'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4036
sS'block_loop.thisRepN'
p6181
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6182
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.71659909448135295
sg34
g753
(S'\x07\xdf\x07\x02\x0f-\x10\x00\xda\xc0'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3852
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3859
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6195
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.61692401685650111
sg34
g753
(S'\x07\xdf\x07\x02\x0f-\x15\x0cg\xc8'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4013
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'left'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3781
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4020
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3781
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6208
I1
sg3647
g3775
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F0.94990744402093696
sg34
g753
(S'\x07\xdf\x07\x02\x0f-\x1b\x07\x04\xe0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4620
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g3726
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4627
sS'block_loop.thisRepN'
p6220
I1
sg3645
g3726
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6221
I1
sg3647
g3733
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.2165413628135866
sg34
g753
(S'\x07\xdf\x07\x02\x0f-!\x06\xa38'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3739
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'left'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3746
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6234
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F0.96664820203659474
sg34
g753
(S"\x07\xdf\x07\x02\x0f-'\n\x87P"
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3671
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6247
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.68331372357351938
sg34
g753
(S'\x07\xdf\x07\x02\x0f--\n\x9e\xc0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4806
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'right'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3933
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4813
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3933
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6260
I1
sg3647
g3940
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.0165169587126002
sg34
g753
(S'\x07\xdf\x07\x02\x0f-3\x061\xf0'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3705
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6273
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.79995649455304374
sg34
g753
(S'\x07\xdf\x07\x02\x0f-9\x07\x00\xf8'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4415
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4422
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3692
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6286
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.61665631297728396
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x03\x04x\x88'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4148
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4156
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6299
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F0.78330411588467541
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x08\x0eW\xe0'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4592
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'left'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3822
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4599
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3822
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6312
I1
sg3647
g3829
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F0.6831908477761317
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x0e\x0b\x94\xd8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4165
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g4038
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4172
sS'block_loop.thisRepN'
p6324
I1
sg3645
g4038
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6325
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.63327476538688643
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x14\x07(\x08'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g4430
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'left'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g4158
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g4437
sS'block_loop.thisRepN'
p6337
I1
sg3645
g4158
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6338
I1
sg3647
g4152
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.75037653876279364
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x1a\x02>8'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4359
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'right'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4212
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4366
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4212
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6351
I1
sg3647
g4219
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.63326849330405821
sg34
g753
(S'\x07\xdf\x07\x02\x0f.\x1f\x0e\x05\xd8'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F149.39447606302565
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'21-nakd_banana_crunch.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'right'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'1-treacle_cookies.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'1-treacle_cookies.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'21-nakd_banana_crunch.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.78313819079630775
sg34
g753
(S'\x07\xdf\x07\x02\x0f18\x07\x99P'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'13-mccoys_steak_crisps.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'right'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'13-mccoys_steak_crisps.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
S'3-ellas_strawberries_apples.png'
p6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6403
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.83332340253764414
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x02\x04\x97\xc8'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'18-mms.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'18-mms.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6419
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.88319130392847001
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x08\x02\x8cX'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'1-treacle_cookies.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6430
g60
(g99
S'\x03\x00\x00\x00'
tRp6431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6432
I0
sg6380
S'21-nakd_banana_crunch.png'
p6433
sS'block_loop.thisRepN'
p6434
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6435
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6436
Nsg70
Vn
sS'block_loop.thisTrialN'
p6437
I0
sg39
F0.61659587291069329
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x0e\x01s\x18'
tRp6438
sa(dp6439
S'trial_loop.thisTrialN'
p6440
I4
sg6371
S'33-ambrosia_rice.png'
p6441
sS'block_loop.thisIndex'
p6442
g6365
sg38
S'right'
p6443
sg59
g63
sS'trial_loop.thisN'
p6444
I4
sg33
S'23-crunchie_redo.png'
p6445
sg64
g65
sS'trial_loop.thisIndex'
p6446
g60
(g99
S'\x04\x00\x00\x00'
tRp6447
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6448
I0
sg6380
S'23-crunchie_redo.png'
p6449
sS'block_loop.thisRepN'
p6450
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6451
I2
sg6385
S'33-ambrosia_rice.png'
p6452
sg55
g11
sS'block_loop.thisTrial'
p6453
Nsg70
Vn
sS'block_loop.thisTrialN'
p6454
I0
sg39
F0.88329137215259834
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x13\x0bRp'
tRp6455
sa(dp6456
S'trial_loop.thisTrialN'
p6457
I5
sg6371
g6372
sS'block_loop.thisIndex'
p6458
g6365
sg38
S'right'
p6459
sg59
g63
sS'trial_loop.thisN'
p6460
I5
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6461
g60
(g99
S'\x05\x00\x00\x00'
tRp6462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6463
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6464
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6465
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6466
Nsg70
Vn
sS'block_loop.thisTrialN'
p6467
I0
sg39
F0.68332113603537437
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x19\t\xfa\xb0'
tRp6468
sa(dp6469
S'trial_loop.thisTrialN'
p6470
I6
sg6371
S'41-peanuts_redo.png'
p6471
sS'block_loop.thisIndex'
p6472
g6365
sg38
S'left'
p6473
sg59
g63
sS'trial_loop.thisN'
p6474
I6
sg33
S'41-peanuts_redo.png'
p6475
sg64
g65
sS'trial_loop.thisIndex'
p6476
g60
(g99
S'\x06\x00\x00\x00'
tRp6477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6478
I0
sg6380
S'45-chewy_nougat_redo.png'
p6479
sS'block_loop.thisRepN'
p6480
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6481
I2
sg6385
S'45-chewy_nougat_redo.png'
p6482
sg55
g11
sS'block_loop.thisTrial'
p6483
Nsg70
Vn
sS'block_loop.thisTrialN'
p6484
I0
sg39
F0.86662245799016091
sg34
g753
(S'\x07\xdf\x07\x02\x0f2\x1f\x05\x8d\xe0'
tRp6485
sa(dp6486
S'trial_loop.thisTrialN'
p6487
I7
sg6371
S'46-pistachios.png'
p6488
sS'block_loop.thisIndex'
p6489
g6365
sg38
S'left'
p6490
sg59
g63
sS'trial_loop.thisN'
p6491
I7
sg33
S'46-pistachios.png'
p6492
sg64
g65
sS'trial_loop.thisIndex'
p6493
g60
(g99
S'\x07\x00\x00\x00'
tRp6494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6495
I0
sg6380
S'29-beans.png'
p6496
sS'block_loop.thisRepN'
p6497
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6498
I2
sg6385
S'29-beans.png'
p6499
sg55
g11
sS'block_loop.thisTrial'
p6500
Nsg70
Vn
sS'block_loop.thisTrialN'
p6501
I0
sg39
F0.78322172353000497
sg34
g753
(S'\x07\xdf\x07\x02\x0f2%\x046 '
tRp6502
sa(dp6503
S'trial_loop.thisTrialN'
p6504
I8
sg6371
S'51-mars.png'
p6505
sS'block_loop.thisIndex'
p6506
g6365
sg38
S'left'
p6507
sg59
g63
sS'trial_loop.thisN'
p6508
I8
sg33
S'51-mars.png'
p6509
sg64
g65
sS'trial_loop.thisIndex'
p6510
g60
(g99
S'\x08\x00\x00\x00'
tRp6511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6512
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6513
sS'block_loop.thisRepN'
p6514
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6515
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6516
sg55
g11
sS'block_loop.thisTrial'
p6517
Nsg70
Vn
sS'block_loop.thisTrialN'
p6518
I0
sg39
F0.79990318185446085
sg34
g753
(S'\x07\xdf\x07\x02\x0f2+\x01s\x18'
tRp6519
sa(dp6520
S'trial_loop.thisTrialN'
p6521
I9
sg6371
S'48-twix.png'
p6522
sS'block_loop.thisIndex'
p6523
g6365
sg38
S'left'
p6524
sg59
g63
sS'trial_loop.thisN'
p6525
I9
sg33
S'50-polo.png'
p6526
sg64
g65
sS'trial_loop.thisIndex'
p6527
g60
(g99
S'\t\x00\x00\x00'
tRp6528
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6529
I0
sg6380
S'50-polo.png'
p6530
sS'block_loop.thisRepN'
p6531
I2
sg6383
S'48-twix.png'
p6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6533
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p6534
Nsg70
Vn
sS'block_loop.thisTrialN'
p6535
I0
sg39
F1.199913787379046
sg34
g753
(S'\x07\xdf\x07\x02\x0f20\x0e0\xd0'
tRp6536
sa(dp6537
S'trial_loop.thisTrialN'
p6538
I10
sg6371
S'44-crunch.png'
p6539
sS'block_loop.thisIndex'
p6540
g6365
sg38
S'left'
p6541
sg59
g63
sS'trial_loop.thisN'
p6542
I10
sg33
S'44-crunch.png'
p6543
sg64
g65
sS'trial_loop.thisIndex'
p6544
g60
(g99
S'\n\x00\x00\x00'
tRp6545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6546
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6547
sS'block_loop.thisRepN'
p6548
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6549
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6550
sg55
g11
sS'block_loop.thisTrial'
p6551
Nsg70
Vn
sS'block_loop.thisTrialN'
p6552
I0
sg39
F0.96656438420905033
sg34
g753
(S'\x07\xdf\x07\x02\x0f27\x02Y\x90'
tRp6553
sa(dp6554
S'trial_loop.thisTrialN'
p6555
I11
sg6371
S'22-daim.png'
p6556
sS'block_loop.thisIndex'
p6557
g6365
sg38
S'left'
p6558
sg59
g63
sS'trial_loop.thisN'
p6559
I11
sg33
S'22-daim.png'
p6560
sg64
g65
sS'trial_loop.thisIndex'
p6561
g60
(g99
S'\x0b\x00\x00\x00'
tRp6562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6563
I0
sg6380
S'7-olives.png'
p6564
sS'block_loop.thisRepN'
p6565
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6566
I2
sg6385
S'7-olives.png'
p6567
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.86664669103265624
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x01\x02q\x00'
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
g6441
sS'block_loop.thisIndex'
p6573
g6365
sg38
S'right'
p6574
sg59
g63
sS'trial_loop.thisN'
p6575
I12
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p6576
g60
(g99
S'\x0c\x00\x00\x00'
tRp6577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6578
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6579
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6580
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6581
Nsg70
Vn
sS'block_loop.thisTrialN'
p6582
I0
sg39
F0.86657256642502034
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x07\x00\xde\xa8'
tRp6583
sa(dp6584
S'trial_loop.thisTrialN'
p6585
I13
sg6371
S'5-pineapple.png'
p6586
sS'block_loop.thisIndex'
p6587
g6365
sg38
S'left'
p6588
sg59
g63
sS'trial_loop.thisN'
p6589
I13
sg33
S'5-pineapple.png'
p6590
sg64
g65
sS'trial_loop.thisIndex'
p6591
g60
(g99
S'\r\x00\x00\x00'
tRp6592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6593
I0
sg6380
S'40-sardines.png'
p6594
sS'block_loop.thisRepN'
p6595
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6596
I2
sg6385
S'40-sardines.png'
p6597
sg55
g11
sS'block_loop.thisTrial'
p6598
Nsg70
Vn
sS'block_loop.thisTrialN'
p6599
I0
sg39
F0.86664070404367521
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x0c\x0e\x8e\x90'
tRp6600
sa(dp6601
S'trial_loop.thisTrialN'
p6602
I14
sg6371
S'8-liquorice_catherine_wheels.png'
p6603
sS'block_loop.thisIndex'
p6604
g6365
sg38
S'right'
p6605
sg59
g63
sS'trial_loop.thisN'
p6606
I14
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6607
sg64
g65
sS'trial_loop.thisIndex'
p6608
g60
(g99
S'\x0e\x00\x00\x00'
tRp6609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6610
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p6611
sS'block_loop.thisRepN'
p6612
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6613
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6614
sg55
g11
sS'block_loop.thisTrial'
p6615
Nsg70
Vn
sS'block_loop.thisTrialN'
p6616
I0
sg39
F1.0332314880179183
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x12\x0c\xf8P'
tRp6617
sa(dp6618
S'trial_loop.thisTrialN'
p6619
I15
sg6371
S'40-sardines.png'
p6620
sS'block_loop.thisIndex'
p6621
g6365
sg38
S'right'
p6622
sg59
g63
sS'trial_loop.thisN'
p6623
I15
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p6624
g60
(g99
S'\x0f\x00\x00\x00'
tRp6625
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6626
I0
sg6380
S'5-pineapple.png'
p6627
sS'block_loop.thisRepN'
p6628
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6629
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p6630
Nsg70
Vn
sS'block_loop.thisTrialN'
p6631
I0
sg39
F0.933236249100446
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x18\x0e\x05\xd8'
tRp6632
sa(dp6633
S'trial_loop.thisTrialN'
p6634
I16
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p6635
sS'block_loop.thisIndex'
p6636
g6365
sg38
S'right'
p6637
sg59
g63
sS'trial_loop.thisN'
p6638
I16
sg33
S'36-fig_rolls.png'
p6639
sg64
g65
sS'trial_loop.thisIndex'
p6640
g60
(g99
S'\x10\x00\x00\x00'
tRp6641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6642
I0
sg6380
S'36-fig_rolls.png'
p6643
sS'block_loop.thisRepN'
p6644
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6645
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6646
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg70
Vn
sS'block_loop.thisTrialN'
p6648
I0
sg39
F0.83324671207446954
sg34
g753
(S'\x07\xdf\x07\x02\x0f3\x1e\r\xa40'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I17
sg6371
g6539
sS'block_loop.thisIndex'
p6652
g6365
sg38
S'left'
p6653
sg59
g63
sS'trial_loop.thisN'
p6654
I17
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p6655
g60
(g99
S'\x11\x00\x00\x00'
tRp6656
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6657
I0
sg6380
g6547
sS'block_loop.thisRepN'
p6658
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6659
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p6660
Nsg70
Vn
sS'block_loop.thisTrialN'
p6661
I0
sg39
F1.0503038111164642
sg34
g753
(S'\x07\xdf\x07\x02\x0f3$\x0b\x94\xd8'
tRp6662
sa(dp6663
S'trial_loop.thisTrialN'
p6664
I18
sg6371
g6586
sS'block_loop.thisIndex'
p6665
g6365
sg38
S'left'
p6666
sg59
g63
sS'trial_loop.thisN'
p6667
I18
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p6668
g60
(g99
S'\x12\x00\x00\x00'
tRp6669
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6670
I0
sg6380
g6594
sS'block_loop.thisRepN'
p6671
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6672
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p6673
Nsg70
Vn
sS'block_loop.thisTrialN'
p6674
I0
sg39
F0.69996781281588483
sg34
g753
(S'\x07\xdf\x07\x02\x0f3*\x0c\xdc\xf8'
tRp6675
sa(dp6676
S'trial_loop.thisTrialN'
p6677
I19
sg6371
g6441
sS'block_loop.thisIndex'
p6678
g6365
sg38
S'right'
p6679
sg59
g63
sS'trial_loop.thisN'
p6680
I19
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p6681
g60
(g99
S'\x13\x00\x00\x00'
tRp6682
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6683
I0
sg6380
g6449
sS'block_loop.thisRepN'
p6684
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6685
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p6686
Nsg70
Vn
sS'block_loop.thisTrialN'
p6687
I0
sg39
F0.73325574957561912
sg34
g753
(S'\x07\xdf\x07\x02\x0f30\x08\xae\xa8'
tRp6688
sa(dp6689
S'trial_loop.thisTrialN'
p6690
I20
sg6371
S'2-steamed_puddings.png'
p6691
sS'block_loop.thisIndex'
p6692
g6365
sg38
S'left'
p6693
sg59
g63
sS'trial_loop.thisN'
p6694
I20
sg33
S'2-steamed_puddings.png'
p6695
sg64
g65
sS'trial_loop.thisIndex'
p6696
g60
(g99
S'\x14\x00\x00\x00'
tRp6697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6698
I0
sg6380
S'20-fruit_pastilles.png'
p6699
sS'block_loop.thisRepN'
p6700
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6701
I2
sg6385
S'20-fruit_pastilles.png'
p6702
sg55
g11
sS'block_loop.thisTrial'
p6703
Nsg70
Vn
sS'block_loop.thisTrialN'
p6704
I0
sg39
F0.73319416913000168
sg34
g753
(S'\x07\xdf\x07\x02\x0f36\x054\x08'
tRp6705
sa(dp6706
S'trial_loop.thisTrialN'
p6707
I21
sg6371
S'42-mrkipling_lemon_slices.png'
p6708
sS'block_loop.thisIndex'
p6709
g6365
sg38
S'left'
p6710
sg59
g63
sS'trial_loop.thisN'
p6711
I21
sg33
S'16-skips_prawn.png'
p6712
sg64
g65
sS'trial_loop.thisIndex'
p6713
g60
(g99
S'\x15\x00\x00\x00'
tRp6714
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6715
I0
sg6380
S'16-skips_prawn.png'
p6716
sS'block_loop.thisRepN'
p6717
I2
sg6383
S'42-mrkipling_lemon_slices.png'
p6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6719
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vn
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.83316488991113147
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x00\x01z\xe8'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'right'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6729
g60
(g99
S'\x16\x00\x00\x00'
tRp6730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6731
I0
sg6380
S'18-mms.png'
p6732
sS'block_loop.thisRepN'
p6733
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6734
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6735
Nsg70
Vn
sS'block_loop.thisTrialN'
p6736
I0
sg39
F0.71663330584124196
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x05\x0e\xecP'
tRp6737
sa(dp6738
S'trial_loop.thisTrialN'
p6739
I23
sg6371
S'3-ellas_strawberries_apples.png'
p6740
sS'block_loop.thisIndex'
p6741
g6365
sg38
S'left'
p6742
sg59
g63
sS'trial_loop.thisN'
p6743
I23
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6744
g60
(g99
S'\x17\x00\x00\x00'
tRp6745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6746
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6747
sS'block_loop.thisRepN'
p6748
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6749
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p6750
Nsg70
Vn
sS'block_loop.thisTrialN'
p6751
I0
sg39
F0.66667132321526879
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x0b\n\xf8\x98'
tRp6752
sa(dp6753
S'trial_loop.thisTrialN'
p6754
I24
sg6371
S'19-caramello_redo.png'
p6755
sS'block_loop.thisIndex'
p6756
g6365
sg38
S'left'
p6757
sg59
g63
sS'trial_loop.thisN'
p6758
I24
sg33
S'30-spaghetti_hoops.png'
p6759
sg64
g65
sS'trial_loop.thisIndex'
p6760
g60
(g99
S'\x18\x00\x00\x00'
tRp6761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6762
I0
sg6380
S'30-spaghetti_hoops.png'
p6763
sS'block_loop.thisRepN'
p6764
I2
sg6383
S'19-caramello_redo.png'
p6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6766
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p6767
Nsg70
Vn
sS'block_loop.thisTrialN'
p6768
I0
sg39
F0.74993492714565946
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x11\x06MH'
tRp6769
sa(dp6770
S'trial_loop.thisTrialN'
p6771
I25
sg6371
S'20-fruit_pastilles.png'
p6772
sS'block_loop.thisIndex'
p6773
g6365
sg38
S'right'
p6774
sg59
g63
sS'trial_loop.thisN'
p6775
I25
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p6776
g60
(g99
S'\x19\x00\x00\x00'
tRp6777
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6778
I0
sg6380
S'2-steamed_puddings.png'
p6779
sS'block_loop.thisRepN'
p6780
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6781
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p6782
Nsg70
Vn
sS'block_loop.thisTrialN'
p6783
I0
sg39
F0.78321516635332955
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x17\x03\x11('
tRp6784
sa(dp6785
S'trial_loop.thisTrialN'
p6786
I26
sg6371
S'27-hartleys_raspberries_jelly.png'
p6787
sS'block_loop.thisIndex'
p6788
g6365
sg38
S'right'
p6789
sg59
g63
sS'trial_loop.thisN'
p6790
I26
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p6791
g60
(g99
S'\x1a\x00\x00\x00'
tRp6792
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6793
I0
sg6380
S'51-mars.png'
p6794
sS'block_loop.thisRepN'
p6795
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6796
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p6797
Nsg70
Vn
sS'block_loop.thisTrialN'
p6798
I0
sg39
F0.81662540871911915
sg34
g753
(S'\x07\xdf\x07\x02\x0f4\x1d\x00J8'
tRp6799
sa(dp6800
S'trial_loop.thisTrialN'
p6801
I27
sg6371
g6603
sS'block_loop.thisIndex'
p6802
g6365
sg38
S'right'
p6803
sg59
g63
sS'trial_loop.thisN'
p6804
I27
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6805
g60
(g99
S'\x1b\x00\x00\x00'
tRp6806
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6807
I0
sg6380
g6611
sS'block_loop.thisRepN'
p6808
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6809
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg70
Vn
sS'block_loop.thisTrialN'
p6811
I0
sg39
F0.73329110131089692
sg34
g753
(S'\x07\xdf\x07\x02\x0f4"\rB\x88'
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I28
sg6371
S'6-sour_patch_kids.png'
p6815
sS'block_loop.thisIndex'
p6816
g6365
sg38
S'right'
p6817
sg59
g63
sS'trial_loop.thisN'
p6818
I28
sg33
S'38-maltesers.png'
p6819
sg64
g65
sS'trial_loop.thisIndex'
p6820
g60
(g99
S'\x1c\x00\x00\x00'
tRp6821
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6822
I0
sg6380
S'38-maltesers.png'
p6823
sS'block_loop.thisRepN'
p6824
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6825
I2
sg6385
S'6-sour_patch_kids.png'
p6826
sg55
g11
sS'block_loop.thisTrial'
p6827
Nsg70
Vn
sS'block_loop.thisTrialN'
p6828
I0
sg39
F0.5996521275046689
sg34
g753
(S'\x07\xdf\x07\x02\x0f4(\t\xc7\xe8'
tRp6829
sa(dp6830
S'trial_loop.thisTrialN'
p6831
I29
sg6371
S'25-kitkat.png'
p6832
sS'block_loop.thisIndex'
p6833
g6365
sg38
S'left'
p6834
sg59
g63
sS'trial_loop.thisN'
p6835
I29
sg33
S'25-kitkat.png'
p6836
sg64
g65
sS'trial_loop.thisIndex'
p6837
g60
(g99
S'\x1d\x00\x00\x00'
tRp6838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6839
I0
sg6380
S'31-hobnobs.png'
p6840
sS'block_loop.thisRepN'
p6841
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6842
I2
sg6385
S'31-hobnobs.png'
p6843
sg55
g11
sS'block_loop.thisTrial'
p6844
Nsg70
Vn
sS'block_loop.thisTrialN'
p6845
I0
sg39
F0.799912304883037
sg34
g753
(S'\x07\xdf\x07\x02\x0f4.\x04*h'
tRp6846
sa(dp6847
S'trial_loop.thisTrialN'
p6848
I30
sg6371
g6426
sS'block_loop.thisIndex'
p6849
g6365
sg38
S'left'
p6850
sg59
g63
sS'trial_loop.thisN'
p6851
I30
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6852
g60
(g99
S'\x1e\x00\x00\x00'
tRp6853
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6854
I0
sg6380
g6433
sS'block_loop.thisRepN'
p6855
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6856
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6857
Nsg70
Vn
sS'block_loop.thisTrialN'
p6858
I0
sg39
F0.59987820756214205
sg34
g753
(S'\x07\xdf\x07\x02\x0f44\x01\xa1\xf8'
tRp6859
sa(dp6860
S'trial_loop.thisTrialN'
p6861
I31
sg6371
g6755
sS'block_loop.thisIndex'
p6862
g6365
sg38
S'left'
p6863
sg59
g63
sS'trial_loop.thisN'
p6864
I31
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p6865
g60
(g99
S'\x1f\x00\x00\x00'
tRp6866
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6867
I0
sg6380
g6763
sS'block_loop.thisRepN'
p6868
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6869
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p6870
Nsg70
Vn
sS'block_loop.thisTrialN'
p6871
I0
sg39
F0.85000200991999009
sg34
g753
(S'\x07\xdf\x07\x02\x0f49\x0bF\xb8'
tRp6872
sa(dp6873
S'trial_loop.thisTrialN'
p6874
I32
sg6371
g6603
sS'block_loop.thisIndex'
p6875
g6365
sg38
S'right'
p6876
sg59
g63
sS'trial_loop.thisN'
p6877
I32
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p6878
g60
(g99
S' \x00\x00\x00'
tRp6879
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6880
I0
sg6380
g6611
sS'block_loop.thisRepN'
p6881
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6882
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p6883
Nsg70
Vn
sS'block_loop.thisTrialN'
p6884
I0
sg39
F0.75005495199366123
sg34
g753
(S'\x07\xdf\x07\x02\x0f5\x03\tu\xe0'
tRp6885
sa(dp6886
S'trial_loop.thisTrialN'
p6887
I33
sg6371
g6426
sS'block_loop.thisIndex'
p6888
g6365
sg38
S'left'
p6889
sg59
g63
sS'trial_loop.thisN'
p6890
I33
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6891
g60
(g99
S'!\x00\x00\x00'
tRp6892
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6893
I0
sg6380
g6433
sS'block_loop.thisRepN'
p6894
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6895
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6896
Nsg70
Vn
sS'block_loop.thisTrialN'
p6897
I0
sg39
F0.53319627883320209
sg34
g753
(S'\x07\xdf\x07\x02\x0f5\t\x069\xc0'
tRp6898
sa(dp6899
S'trial_loop.thisTrialN'
p6900
I34
sg6371
S'29-beans.png'
p6901
sS'block_loop.thisIndex'
p6902
g6365
sg38
S'right'
p6903
sg59
g63
sS'trial_loop.thisN'
p6904
I34
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p6905
g60
(g99
S'"\x00\x00\x00'
tRp6906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6907
I0
sg6380
S'46-pistachios.png'
p6908
sS'block_loop.thisRepN'
p6909
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6910
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p6911
Nsg70
Vn
sS'block_loop.thisTrialN'
p6912
I0
sg39
F0.58335497677035164
sg34
g753
(S'\x07\xdf\x07\x02\x0f5\x0e\x0e\xe8h'
tRp6913
sa(dp6914
S'trial_loop.thisTrialN'
p6915
I35
sg6371
S'35-raisins.png'
p6916
sS'block_loop.thisIndex'
p6917
g6365
sg38
S'right'
p6918
sg59
g63
sS'trial_loop.thisN'
p6919
I35
sg33
S'49-yorkie.png'
p6920
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'#\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
S'49-yorkie.png'
p6924
sS'block_loop.thisRepN'
p6925
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6926
I2
sg6385
S'35-raisins.png'
p6927
sg55
g11
sS'block_loop.thisTrial'
p6928
Nsg70
Vn
sS'block_loop.thisTrialN'
p6929
I0
sg39
F0.84994755683874246
sg34
g753
(S'\x07\xdf\x07\x02\x0f5\x14\t\x0ch'
tRp6930
sa(dp6931
S'trial_loop.thisTrialN'
p6932
I36
sg6371
S'10-bounty_redo.png'
p6933
sS'block_loop.thisIndex'
p6934
g6365
sg38
S'left'
p6935
sg59
g63
sS'trial_loop.thisN'
p6936
I36
sg33
S'10-bounty_redo.png'
p6937
sg64
g65
sS'trial_loop.thisIndex'
p6938
g60
(g99
S'$\x00\x00\x00'
tRp6939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6940
I0
sg6380
S'4-corn.png'
p6941
sS'block_loop.thisRepN'
p6942
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6943
I2
sg6385
S'4-corn.png'
p6944
sg55
g11
sS'block_loop.thisTrial'
p6945
Nsg70
Vn
sS'block_loop.thisTrialN'
p6946
I0
sg39
F0.61665916392666986
sg34
g753
(S'\x07\xdf\x07\x02\x0f5\x1a\x07;\x90'
tRp6947
sa(dp6948
S'trial_loop.thisTrialN'
p6949
I37
sg6371
S'16-skips_prawn.png'
p6950
sS'block_loop.thisIndex'
p6951
g6365
sg38
S'right'
p6952
sg59
g63
sS'trial_loop.thisN'
p6953
I37
sg33
g6712
sg64
g65
sS'trial_loop.thisIndex'
p6954
g60
(g99
S'%\x00\x00\x00'
tRp6955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6956
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p6957
sS'block_loop.thisRepN'
p6958
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6959
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p6960
Nsg70
Vn
sS'block_loop.thisTrialN'
p6961
I0
sg39
F0.78322542976093246
sg34
g753
(S'\x07\xdf\x07\x02\x0f5 \x01\xdc\x90'
tRp6962
sa(dp6963
S'trial_loop.thisTrialN'
p6964
I38
sg6371
g6901
sS'block_loop.thisIndex'
p6965
g6365
sg38
S'right'
p6966
sg59
g63
sS'trial_loop.thisN'
p6967
I38
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p6968
g60
(g99
S'&\x00\x00\x00'
tRp6969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6970
I0
sg6380
g6908
sS'block_loop.thisRepN'
p6971
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6972
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p6973
Nsg70
Vn
sS'block_loop.thisTrialN'
p6974
I0
sg39
F0.54989997454322292
sg34
g753
(S'\x07\xdf\x07\x02\x0f5%\x0eW\xe0'
tRp6975
sa(dp6976
S'trial_loop.thisTrialN'
p6977
I39
sg6371
S'7-olives.png'
p6978
sS'block_loop.thisIndex'
p6979
g6365
sg38
S'right'
p6980
sg59
g63
sS'trial_loop.thisN'
p6981
I39
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p6982
g60
(g99
S"'\x00\x00\x00"
tRp6983
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6984
I0
sg6380
S'22-daim.png'
p6985
sS'block_loop.thisRepN'
p6986
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6987
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p6988
Nsg70
Vn
sS'block_loop.thisTrialN'
p6989
I0
sg39
F0.6666613448978751
sg34
g753
(S'\x07\xdf\x07\x02\x0f5+\x08\x02\xc8'
tRp6990
sa(dp6991
S'trial_loop.thisTrialN'
p6992
I40
sg6371
S'23-crunchie_redo.png'
p6993
sS'block_loop.thisIndex'
p6994
g6365
sg38
S'left'
p6995
sg59
g63
sS'trial_loop.thisN'
p6996
I40
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p6997
g60
(g99
S'(\x00\x00\x00'
tRp6998
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6999
I0
sg6380
S'33-ambrosia_rice.png'
p7000
sS'block_loop.thisRepN'
p7001
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7002
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7003
Nsg70
Vn
sS'block_loop.thisTrialN'
p7004
I0
sg39
F0.5832309605939372
sg34
g753
(S'\x07\xdf\x07\x02\x0f51\x03Wx'
tRp7005
sa(dp7006
S'trial_loop.thisTrialN'
p7007
I41
sg6371
S'4-corn.png'
p7008
sS'block_loop.thisIndex'
p7009
g6365
sg38
S'right'
p7010
sg59
g63
sS'trial_loop.thisN'
p7011
I41
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p7012
g60
(g99
S')\x00\x00\x00'
tRp7013
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7014
I0
sg6380
S'10-bounty_redo.png'
p7015
sS'block_loop.thisRepN'
p7016
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7017
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7018
Nsg70
Vn
sS'block_loop.thisTrialN'
p7019
I0
sg39
F0.81627417210620479
sg34
g753
(S'\x07\xdf\x07\x02\x0f56\x0c\xbd\xb8'
tRp7020
sa(dp7021
S'trial_loop.thisTrialN'
p7022
I42
sg6371
g6708
sS'block_loop.thisIndex'
p7023
g6365
sg38
S'left'
p7024
sg59
g63
sS'trial_loop.thisN'
p7025
I42
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7026
g60
(g99
S'*\x00\x00\x00'
tRp7027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7028
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7029
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7030
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7031
Nsg70
Vn
sS'block_loop.thisTrialN'
p7032
I0
sg39
F0.76639714768680278
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x00\ns\xc8'
tRp7033
sa(dp7034
S'trial_loop.thisTrialN'
p7035
I43
sg6371
S'31-hobnobs.png'
p7036
sS'block_loop.thisIndex'
p7037
g6365
sg38
S'right'
p7038
sg59
g63
sS'trial_loop.thisN'
p7039
I43
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p7040
g60
(g99
S'+\x00\x00\x00'
tRp7041
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7042
I0
sg6380
S'25-kitkat.png'
p7043
sS'block_loop.thisRepN'
p7044
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7045
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p7046
Nsg70
Vn
sS'block_loop.thisTrialN'
p7047
I0
sg39
F0.73333586117223604
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x06\x07r@'
tRp7048
sa(dp7049
S'trial_loop.thisTrialN'
p7050
I44
sg6371
g6556
sS'block_loop.thisIndex'
p7051
g6365
sg38
S'right'
p7052
sg59
g63
sS'trial_loop.thisN'
p7053
I44
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7054
g60
(g99
S',\x00\x00\x00'
tRp7055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7056
I0
sg6380
g6564
sS'block_loop.thisRepN'
p7057
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7058
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7059
Nsg70
Vn
sS'block_loop.thisTrialN'
p7060
I0
sg39
F0.63312423540992313
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x0c\x03\xf7\xa0'
tRp7061
sa(dp7062
S'trial_loop.thisTrialN'
p7063
I45
sg6371
g6620
sS'block_loop.thisIndex'
p7064
g6365
sg38
S'right'
p7065
sg59
g63
sS'trial_loop.thisN'
p7066
I45
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7067
g60
(g99
S'-\x00\x00\x00'
tRp7068
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7069
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7070
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7071
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p7072
Nsg70
Vn
sS'block_loop.thisTrialN'
p7073
I0
sg39
F0.74992722958995728
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x11\x0e\x15x'
tRp7074
sa(dp7075
S'trial_loop.thisTrialN'
p7076
I46
sg6371
g6950
sS'block_loop.thisIndex'
p7077
g6365
sg38
S'right'
p7078
sg59
g63
sS'trial_loop.thisN'
p7079
I46
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7080
g60
(g99
S'.\x00\x00\x00'
tRp7081
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7082
I0
sg6380
g6957
sS'block_loop.thisRepN'
p7083
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7084
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7085
Nsg70
Vn
sS'block_loop.thisTrialN'
p7086
I0
sg39
F0.86652638109080726
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x17\n\x9a\xd8'
tRp7087
sa(dp7088
S'trial_loop.thisTrialN'
p7089
I47
sg6371
g6691
sS'block_loop.thisIndex'
p7090
g6365
sg38
S'left'
p7091
sg59
g63
sS'trial_loop.thisN'
p7092
I47
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7093
g60
(g99
S'/\x00\x00\x00'
tRp7094
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7095
I0
sg6380
g6699
sS'block_loop.thisRepN'
p7096
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7097
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg70
Vn
sS'block_loop.thisTrialN'
p7099
I0
sg39
F0.73334042268470512
sg34
g753
(S'\x07\xdf\x07\x02\x0f6\x1d\tG\x00'
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I48
sg6371
g6471
sS'block_loop.thisIndex'
p7103
g6365
sg38
S'left'
p7104
sg59
g63
sS'trial_loop.thisN'
p7105
I48
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p7106
g60
(g99
S'0\x00\x00\x00'
tRp7107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7108
I0
sg6380
g6479
sS'block_loop.thisRepN'
p7109
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7110
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg70
Vn
sS'block_loop.thisTrialN'
p7112
I0
sg39
F0.84967557653726544
sg34
g753
(S'\x07\xdf\x07\x02\x0f6#\x05\x8d\xe0'
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I49
sg6371
g6916
sS'block_loop.thisIndex'
p7116
g6365
sg38
S'right'
p7117
sg59
g63
sS'trial_loop.thisN'
p7118
I49
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7119
g60
(g99
S'1\x00\x00\x00'
tRp7120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7121
I0
sg6380
g6924
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7123
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vn
sS'block_loop.thisTrialN'
p7125
I0
sg39
F0.74999565230609733
sg34
g753
(S'\x07\xdf\x07\x02\x0f6)\x03\xfb\x88'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
S'36-fig_rolls.png'
p7129
sS'block_loop.thisIndex'
p7130
g6365
sg38
S'left'
p7131
sg59
g63
sS'trial_loop.thisN'
p7132
I50
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p7133
g60
(g99
S'2\x00\x00\x00'
tRp7134
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7135
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p7136
sS'block_loop.thisRepN'
p7137
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7138
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p7139
Nsg70
Vn
sS'block_loop.thisTrialN'
p7140
I0
sg39
F0.74996543227462098
sg34
g753
(S'\x07\xdf\x07\x02\x0f6/\x00\x80\xe8'
tRp7141
sa(dp7142
S'trial_loop.thisTrialN'
p7143
I51
sg6371
S'50-polo.png'
p7144
sS'block_loop.thisIndex'
p7145
g6365
sg38
S'right'
p7146
sg59
g63
sS'trial_loop.thisN'
p7147
I51
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7148
g60
(g99
S'3\x00\x00\x00'
tRp7149
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7150
I0
sg6380
S'48-twix.png'
p7151
sS'block_loop.thisRepN'
p7152
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7153
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7154
Nsg70
Vn
sS'block_loop.thisTrialN'
p7155
I0
sg39
F0.86651811334377271
sg34
g753
(S'\x07\xdf\x07\x02\x0f64\x0c\x83 '
tRp7156
sa(dp7157
S'trial_loop.thisTrialN'
p7158
I52
sg6371
S'38-maltesers.png'
p7159
sS'block_loop.thisIndex'
p7160
g6365
sg38
S'left'
p7161
sg59
g63
sS'trial_loop.thisN'
p7162
I52
sg33
g6819
sg64
g65
sS'trial_loop.thisIndex'
p7163
g60
(g99
S'4\x00\x00\x00'
tRp7164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7165
I0
sg6380
S'6-sour_patch_kids.png'
p7166
sS'block_loop.thisRepN'
p7167
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7168
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p7169
Nsg70
Vn
sS'block_loop.thisTrialN'
p7170
I0
sg39
F0.68304687497584382
sg34
g753
(S'\x07\xdf\x07\x02\x0f6:\n\xf0\xc8'
tRp7171
sa(dp7172
S'trial_loop.thisTrialN'
p7173
I53
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p7174
sS'block_loop.thisIndex'
p7175
g6365
sg38
S'right'
p7176
sg59
g63
sS'trial_loop.thisN'
p7177
I53
sg33
g6614
sg64
g65
sS'trial_loop.thisIndex'
p7178
g60
(g99
S'5\x00\x00\x00'
tRp7179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7180
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p7181
sS'block_loop.thisRepN'
p7182
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7183
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p7184
Nsg70
Vn
sS'block_loop.thisTrialN'
p7185
I0
sg39
F0.83369174482504604
sg34
g753
(S'\x07\xdf\x07\x02\x0f7\x04\x06\xbe\x90'
tRp7186
sa(dp7187
S'trial_loop.thisTrialN'
p7188
I54
sg6371
g7144
sS'block_loop.thisIndex'
p7189
g6365
sg38
S'right'
p7190
sg59
g63
sS'trial_loop.thisN'
p7191
I54
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p7192
g60
(g99
S'6\x00\x00\x00'
tRp7193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7194
I0
sg6380
g7151
sS'block_loop.thisRepN'
p7195
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7196
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7197
Nsg70
Vn
sS'block_loop.thisTrialN'
p7198
I0
sg39
F0.93326561385038076
sg34
g753
(S'\x07\xdf\x07\x02\x0f7\n\x04\xb3 '
tRp7199
sa(dp7200
S'trial_loop.thisTrialN'
p7201
I55
sg6371
g7174
sS'block_loop.thisIndex'
p7202
g6365
sg38
S'left'
p7203
sg59
g63
sS'trial_loop.thisN'
p7204
I55
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7205
g60
(g99
S'7\x00\x00\x00'
tRp7206
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7207
I0
sg6380
g7181
sS'block_loop.thisRepN'
p7208
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7209
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p7210
Nsg70
Vn
sS'block_loop.thisTrialN'
p7211
I0
sg39
F0.89986734545891522
sg34
g753
(S'\x07\xdf\x07\x02\x0f7\x10\x04\x12\xf8'
tRp7212
sa(dp7213
S'trial_loop.thisTrialN'
p7214
I56
sg6371
S'30-spaghetti_hoops.png'
p7215
sS'block_loop.thisIndex'
p7216
g6365
sg38
S'right'
p7217
sg59
g63
sS'trial_loop.thisN'
p7218
I56
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p7219
g60
(g99
S'8\x00\x00\x00'
tRp7220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7221
I0
sg6380
S'19-caramello_redo.png'
p7222
sS'block_loop.thisRepN'
p7223
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7224
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p7225
Nsg70
Vn
sS'block_loop.thisTrialN'
p7226
I0
sg39
F0.79992171300909831
sg34
g753
(S'\x07\xdf\x07\x02\x0f7\x16\x02\xf9\xb8'
tRp7227
sa(dp7228
S'trial_loop.thisTrialN'
p7229
I57
sg6371
g7174
sS'block_loop.thisIndex'
p7230
g6365
sg38
S'left'
p7231
sg59
g63
sS'trial_loop.thisN'
p7232
I57
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7233
g60
(g99
S'9\x00\x00\x00'
tRp7234
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7235
I0
sg6380
g7181
sS'block_loop.thisRepN'
p7236
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7237
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p7238
Nsg70
Vn
sS'block_loop.thisTrialN'
p7239
I0
sg39
F1.2332017241351423
sg34
g753
(S'\x07\xdf\x07\x02\x0f7\x1c\x00u0'
tRp7240
sa(dp7241
S'trial_loop.thisTrialN'
p7242
I58
sg6371
g6916
sS'block_loop.thisIndex'
p7243
g6365
sg38
S'right'
p7244
sg59
g63
sS'trial_loop.thisN'
p7245
I58
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7246
g60
(g99
S':\x00\x00\x00'
tRp7247
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7248
I0
sg6380
g6924
sS'block_loop.thisRepN'
p7249
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7250
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7251
Nsg70
Vn
sS'block_loop.thisTrialN'
p7252
I0
sg39
F0.98329202787135728
sg34
g753
(S'\x07\xdf\x07\x02\x0f7"\x04\x97\xc8'
tRp7253
sa(dp7254
S'trial_loop.thisTrialN'
p7255
I59
sg6371
g6488
sS'block_loop.thisIndex'
p7256
g6365
sg38
S'left'
p7257
sg59
g63
sS'trial_loop.thisN'
p7258
I59
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p7259
g60
(g99
S';\x00\x00\x00'
tRp7260
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7261
I0
sg6380
g6496
sS'block_loop.thisRepN'
p7262
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7263
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p7264
Nsg70
Vn
sS'block_loop.thisTrialN'
p7265
I0
sg39
F0.76666342608950799
sg34
g753
(S'\x07\xdf\x07\x02\x0f7(\x04\xed\xb8'
tRp7266
sa(dp7267
S'trial_loop.thisTrialN'
p7268
I60
sg6371
g6691
sS'block_loop.thisIndex'
p7269
g6365
sg38
S'left'
p7270
sg59
g63
sS'trial_loop.thisN'
p7271
I60
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7272
g60
(g99
S'<\x00\x00\x00'
tRp7273
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7274
I0
sg6380
g6699
sS'block_loop.thisRepN'
p7275
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7276
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7277
Nsg70
Vn
sS'block_loop.thisTrialN'
p7278
I0
sg39
F0.68344942862677271
sg34
g753
(S'\x07\xdf\x07\x02\x0f7.\x01\xec0'
tRp7279
sa(dp7280
S'trial_loop.thisTrialN'
p7281
I61
sg6371
g6620
sS'block_loop.thisIndex'
p7282
g6365
sg38
S'right'
p7283
sg59
g63
sS'trial_loop.thisN'
p7284
I61
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7285
g60
(g99
S'=\x00\x00\x00'
tRp7286
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7287
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7288
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7289
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p7290
Nsg70
Vn
sS'block_loop.thisTrialN'
p7291
I0
sg39
F0.96649710186829907
sg34
g753
(S'\x07\xdf\x07\x02\x0f73\x0c\xbd\xb8'
tRp7292
sa(dp7293
S'trial_loop.thisTrialN'
p7294
I62
sg6371
g7008
sS'block_loop.thisIndex'
p7295
g6365
sg38
S'right'
p7296
sg59
g63
sS'trial_loop.thisN'
p7297
I62
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p7298
g60
(g99
S'>\x00\x00\x00'
tRp7299
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7300
I0
sg6380
g7015
sS'block_loop.thisRepN'
p7301
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7302
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7303
Nsg70
Vn
sS'block_loop.thisTrialN'
p7304
I0
sg39
F0.99991105046501616
sg34
g753
(S'\x07\xdf\x07\x02\x0f79\x0c\xd5('
tRp7305
sa(dp7306
S'trial_loop.thisTrialN'
p7307
I63
sg6371
S'45-chewy_nougat_redo.png'
p7308
sS'block_loop.thisIndex'
p7309
g6365
sg38
S'right'
p7310
sg59
g63
sS'trial_loop.thisN'
p7311
I63
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p7312
g60
(g99
S'?\x00\x00\x00'
tRp7313
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7314
I0
sg6380
S'41-peanuts_redo.png'
p7315
sS'block_loop.thisRepN'
p7316
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7317
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7318
Nsg70
Vn
sS'block_loop.thisTrialN'
p7319
I0
sg39
F0.88311746441104333
sg34
g753
(S'\x07\xdf\x07\x02\x0f8\x03\r+\x18'
tRp7320
sa(dp7321
S'trial_loop.thisTrialN'
p7322
I64
sg6371
g6392
sS'block_loop.thisIndex'
p7323
g6365
sg38
S'right'
p7324
sg59
g63
sS'trial_loop.thisN'
p7325
I64
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7326
g60
(g99
S'@\x00\x00\x00'
tRp7327
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7328
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7329
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7330
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p7331
Nsg70
Vn
sS'block_loop.thisTrialN'
p7332
I0
sg39
F0.80033595553686609
sg34
g753
(S'\x07\xdf\x07\x02\x0f8\t\x0c\x11\xd8'
tRp7333
sa(dp7334
S'trial_loop.thisTrialN'
p7335
I65
sg6371
g6993
sS'block_loop.thisIndex'
p7336
g6365
sg38
S'left'
p7337
sg59
g63
sS'trial_loop.thisN'
p7338
I65
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7339
g60
(g99
S'A\x00\x00\x00'
tRp7340
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7341
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7342
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7343
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7344
Nsg70
Vn
sS'block_loop.thisTrialN'
p7345
I0
sg39
F0.70000573040306335
sg34
g753
(S'\x07\xdf\x07\x02\x0f8\x0f\t\x89h'
tRp7346
sa(dp7347
S'trial_loop.thisTrialN'
p7348
I66
sg6371
g6505
sS'block_loop.thisIndex'
p7349
g6365
sg38
S'left'
p7350
sg59
g63
sS'trial_loop.thisN'
p7351
I66
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7352
g60
(g99
S'B\x00\x00\x00'
tRp7353
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7354
I0
sg6380
g6513
sS'block_loop.thisRepN'
p7355
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7356
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p7357
Nsg70
Vn
sS'block_loop.thisTrialN'
p7358
I0
sg39
F0.79993910378107103
sg34
g753
(S'\x07\xdf\x07\x02\x0f8\x15\x05[\x18'
tRp7359
sa(dp7360
S'trial_loop.thisTrialN'
p7361
I67
sg6371
g6691
sS'block_loop.thisIndex'
p7362
g6365
sg38
S'left'
p7363
sg59
g63
sS'trial_loop.thisN'
p7364
I67
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7365
g60
(g99
S'C\x00\x00\x00'
tRp7366
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7367
I0
sg6380
g6699
sS'block_loop.thisRepN'
p7368
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7369
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7370
Nsg70
Vn
sS'block_loop.thisTrialN'
p7371
I0
sg39
F0.7332637322251685
sg34
g753
(S'\x07\xdf\x07\x02\x0f8\x1b\x02\xd2\xa8'
tRp7372
sa(dp7373
S'trial_loop.thisTrialN'
p7374
I68
sg6371
g7174
sS'block_loop.thisIndex'
p7375
g6365
sg38
S'left'
p7376
sg59
g63
sS'trial_loop.thisN'
p7377
I68
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p7378
g60
(g99
S'D\x00\x00\x00'
tRp7379
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7380
I0
sg6380
g7181
sS'block_loop.thisRepN'
p7381
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7382
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p7383
Nsg70
Vn
sS'block_loop.thisTrialN'
p7384
I0
sg39
F1.0499428812872793
sg34
g753
(S'\x07\xdf\x07\x02\x0f8 \x0e\x9aH'
tRp7385
sa(dp7386
S'trial_loop.thisTrialN'
p7387
I69
sg6371
g6933
sS'block_loop.thisIndex'
p7388
g6365
sg38
S'left'
p7389
sg59
g63
sS'trial_loop.thisN'
p7390
I69
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7391
g60
(g99
S'E\x00\x00\x00'
tRp7392
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7393
I0
sg6380
g6941
sS'block_loop.thisRepN'
p7394
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7395
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7396
Nsg70
Vn
sS'block_loop.thisTrialN'
p7397
I0
sg39
F0.78331694514417904
sg34
g753
(S"\x07\xdf\x07\x02\x0f8'\x00\xa0("
tRp7398
sa(dp7399
S'trial_loop.thisTrialN'
p7400
I70
sg6371
g6441
sS'block_loop.thisIndex'
p7401
g6365
sg38
S'right'
p7402
sg59
g63
sS'trial_loop.thisN'
p7403
I70
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p7404
g60
(g99
S'F\x00\x00\x00'
tRp7405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7406
I0
sg6380
g6449
sS'block_loop.thisRepN'
p7407
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7408
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7409
Nsg70
Vn
sS'block_loop.thisTrialN'
p7410
I0
sg39
F0.88362635836892878
sg34
g753
(S'\x07\xdf\x07\x02\x0f8,\x0c\xe0\xe0'
tRp7411
sa(dp7412
S'trial_loop.thisTrialN'
p7413
I71
sg6371
g6787
sS'block_loop.thisIndex'
p7414
g6365
sg38
S'right'
p7415
sg59
g63
sS'trial_loop.thisN'
p7416
I71
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7417
g60
(g99
S'G\x00\x00\x00'
tRp7418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7419
I0
sg6380
g6794
sS'block_loop.thisRepN'
p7420
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7421
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p7422
Nsg70
Vn
sS'block_loop.thisTrialN'
p7423
I0
sg39
F1.9164792406882043
sg34
g753
(S'\x07\xdf\x07\x02\x0f82\x0b\xc7\xa0'
tRp7424
sa(dp7425
S'trial_loop.thisTrialN'
p7426
I72
sg6371
g6772
sS'block_loop.thisIndex'
p7427
g6365
sg38
S'right'
p7428
sg59
g63
sS'trial_loop.thisN'
p7429
I72
sg33
g6702
sg64
g65
sS'trial_loop.thisIndex'
p7430
g60
(g99
S'H\x00\x00\x00'
tRp7431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7432
I0
sg6380
g6779
sS'block_loop.thisRepN'
p7433
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7434
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7435
Nsg70
Vn
sS'block_loop.thisTrialN'
p7436
I0
sg39
F0.78325023299112218
sg34
g753
(S'\x07\xdf\x07\x02\x0f89\n\xe5\x10'
tRp7437
sa(dp7438
S'trial_loop.thisTrialN'
p7439
I73
sg6371
g6978
sS'block_loop.thisIndex'
p7440
g6365
sg38
S'right'
p7441
sg59
g63
sS'trial_loop.thisN'
p7442
I73
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p7443
g60
(g99
S'I\x00\x00\x00'
tRp7444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7445
I0
sg6380
g6985
sS'block_loop.thisRepN'
p7446
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7447
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vn
sS'block_loop.thisTrialN'
p7449
I0
sg39
F0.6833202807501948
sg34
g753
(S'\x07\xdf\x07\x02\x0f9\x03\x08"\x08'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g6620
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'right'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g6627
sS'block_loop.thisRepN'
p7459
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7460
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vn
sS'block_loop.thisTrialN'
p7462
I0
sg39
F1.0332098208273237
sg34
g753
(S'\x07\xdf\x07\x02\x0f9\t\x03\xef\xd0'
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
S'49-yorkie.png'
p7466
sS'block_loop.thisIndex'
p7467
g6365
sg38
S'left'
p7468
sg59
g63
sS'trial_loop.thisN'
p7469
I75
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7470
g60
(g99
S'K\x00\x00\x00'
tRp7471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7472
I0
sg6380
S'35-raisins.png'
p7473
sS'block_loop.thisRepN'
p7474
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7475
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7476
Nsg70
Vn
sS'block_loop.thisTrialN'
p7477
I0
sg39
F1.1499945689465676
sg34
g753
(S'\x07\xdf\x07\x02\x0f9\x0f\x04\xbe\xd8'
tRp7478
sa(dp7479
S'trial_loop.thisTrialN'
p7480
I76
sg6371
g6586
sS'block_loop.thisIndex'
p7481
g6365
sg38
S'left'
p7482
sg59
g63
sS'trial_loop.thisN'
p7483
I76
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7484
g60
(g99
S'L\x00\x00\x00'
tRp7485
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7486
I0
sg6380
g6594
sS'block_loop.thisRepN'
p7487
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7488
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p7489
Nsg70
Vn
sS'block_loop.thisTrialN'
p7490
I0
sg39
F0.86652894694634597
sg34
g753
(S'\x07\xdf\x07\x02\x0f9\x15\x07\xb0\xc0'
tRp7491
sa(dp7492
S'trial_loop.thisTrialN'
p7493
I77
sg6371
g6635
sS'block_loop.thisIndex'
p7494
g6365
sg38
S'right'
p7495
sg59
g63
sS'trial_loop.thisN'
p7496
I77
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p7497
g60
(g99
S'M\x00\x00\x00'
tRp7498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7499
I0
sg6380
g6643
sS'block_loop.thisRepN'
p7500
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7501
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p7502
Nsg70
Vn
sS'block_loop.thisTrialN'
p7503
I0
sg39
F0.94998185372605803
sg34
g753
(S'\x07\xdf\x07\x02\x0f9\x1b\x06\x1eh'
tRp7504
sa(dp7505
S'trial_loop.thisTrialN'
p7506
I78
sg6371
g6950
sS'block_loop.thisIndex'
p7507
g6365
sg38
S'right'
p7508
sg59
g63
sS'trial_loop.thisN'
p7509
I78
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7510
g60
(g99
S'N\x00\x00\x00'
tRp7511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7512
I0
sg6380
g6957
sS'block_loop.thisRepN'
p7513
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7514
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7515
Nsg70
Vn
sS'block_loop.thisTrialN'
p7516
I0
sg39
F0.79980624967356562
sg34
g753
(S'\x07\xdf\x07\x02\x0f9!\x05\xfb@'
tRp7517
sa(dp7518
S'trial_loop.thisTrialN'
p7519
I79
sg6371
g6409
sS'block_loop.thisIndex'
p7520
g6365
sg38
S'left'
p7521
sg59
g63
sS'trial_loop.thisN'
p7522
I79
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7523
g60
(g99
S'O\x00\x00\x00'
tRp7524
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7525
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7526
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7527
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7528
Nsg70
Vn
sS'block_loop.thisTrialN'
p7529
I0
sg39
F1.4332634756392508
sg34
g753
(S"\x07\xdf\x07\x02\x0f9'\x034P"
tRp7530
sa(dp7531
S'trial_loop.thisTrialN'
p7532
I80
sg6371
g6586
sS'block_loop.thisIndex'
p7533
g6365
sg38
S'left'
p7534
sg59
g63
sS'trial_loop.thisN'
p7535
I80
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p7536
g60
(g99
S'P\x00\x00\x00'
tRp7537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7538
I0
sg6380
g6594
sS'block_loop.thisRepN'
p7539
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7540
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p7541
Nsg70
Vn
sS'block_loop.thisTrialN'
p7542
I0
sg39
F0.66660318559297593
sg34
g753
(S'\x07\xdf\x07\x02\x0f9-\no\xe0'
tRp7543
sa(dp7544
S'trial_loop.thisTrialN'
p7545
I81
sg6371
g6916
sS'block_loop.thisIndex'
p7546
g6365
sg38
S'right'
p7547
sg59
g63
sS'trial_loop.thisN'
p7548
I81
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7549
g60
(g99
S'Q\x00\x00\x00'
tRp7550
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7551
I0
sg6380
g6924
sS'block_loop.thisRepN'
p7552
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7553
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7554
Nsg70
Vn
sS'block_loop.thisTrialN'
p7555
I0
sg39
F0.84996352213784121
sg34
g753
(S'\x07\xdf\x07\x02\x0f93\x05\xc4\x90'
tRp7556
sa(dp7557
S'trial_loop.thisTrialN'
p7558
I82
sg6371
g6708
sS'block_loop.thisIndex'
p7559
g6365
sg38
S'left'
p7560
sg59
g63
sS'trial_loop.thisN'
p7561
I82
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7562
g60
(g99
S'R\x00\x00\x00'
tRp7563
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7564
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7566
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vn
sS'block_loop.thisTrialN'
p7568
I0
sg39
F0.81633347179376869
sg34
g753
(S'\x07\xdf\x07\x02\x0f99\x03\xf7\xa0'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6772
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'right'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6702
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6779
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7579
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vn
sS'block_loop.thisTrialN'
p7581
I0
sg39
F0.86666550728114089
sg34
g753
(S'\x07\xdf\x07\x02\x0f:\x03\x01\xad\xb0'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g6708
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'left'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7592
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vn
sS'block_loop.thisTrialN'
p7594
I0
sg39
F0.81655242448687204
sg34
g753
(S'\x07\xdf\x07\x02\x0f:\t\x00U\xf0'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6901
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'right'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g6908
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7605
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vn
sS'block_loop.thisTrialN'
p7607
I0
sg39
F0.76662094698622241
sg34
g753
(S'\x07\xdf\x07\x02\x0f:\x0e\rN@'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6740
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'left'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6747
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7618
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vn
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.63367532337360899
sg34
g753
(S'\x07\xdf\x07\x02\x0f:\x14\n\x12 '
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g6522
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'left'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7631
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vn
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.8166063073767873
sg34
g753
(S'\x07\xdf\x07\x02\x0f:\x1a\x05(P'
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6471
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6479
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7644
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vn
sS'block_loop.thisTrialN'
p7646
I0
sg39
F0.74999565230609733
sg34
g753
(S'\x07\xdf\x07\x02\x0f: \x02\xde`'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g6409
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'left'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7657
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vn
sS'block_loop.thisTrialN'
p7659
I0
sg39
F0.74988189954092377
sg34
g753
(S'\x07\xdf\x07\x02\x0f:%\x0e\xa6\x00'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g6708
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'left'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g6716
sS'block_loop.thisRepN'
p7669
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7670
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vn
sS'block_loop.thisTrialN'
p7672
I0
sg39
F0.78320832408280694
sg34
g753
(S'\x07\xdf\x07\x02\x0f:+\x0bi\xe0'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g7144
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g7151
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7683
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vn
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.74993749299756018
sg34
g753
(S'\x07\xdf\x07\x02\x0f:1\x08\xa2\xf0'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6505
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g6513
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7696
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vn
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.88331104368262459
sg34
g753
(S'\x07\xdf\x07\x02\x0f:7\x05f\xd0'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g6471
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'left'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g6479
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7709
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.8666398487657716
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\x01\x04\x12\xf8'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6740
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'left'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6747
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7722
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F0.81662341305491282
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\x07\x02|\xb8'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g7159
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'left'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6819
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g7166
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7735
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.88297719784168294
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\r\x002\xc8'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g6772
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'right'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6702
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g6779
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7748
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.89999250201071845
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\x12\x0e!0'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6725
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'right'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6732
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7761
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.96652133491443237
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\x18\rB\x88'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g7466
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'left'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g7473
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7774
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vn
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.81698804911502521
sg34
g753
(S'\x07\xdf\x07\x02\x0f;\x1e\r\x1f`'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g6392
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7787
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vn
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.94999610845843563
sg34
g753
(S'\x07\xdf\x07\x02\x0f;$\n\xd5p'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6539
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6550
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6547
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7800
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vn
sS'block_loop.thisTrialN'
p7802
I0
sg39
F0.98325924198434222
sg34
g753
(S'\x07\xdf\x07\x02\x0f;*\n\xae`'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6978
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'right'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6985
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7813
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vn
sS'block_loop.thisTrialN'
p7815
I0
sg39
F1.1999574068613583
sg34
g753
(S'\x07\xdf\x07\x02\x0f;0\x0b\x04P'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6901
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'right'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6908
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7826
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vn
sS'block_loop.thisTrialN'
p7828
I0
sg39
F1.049983934914053
sg34
g753
(S'\x07\xdf\x07\x02\x0f;6\x0eoP'
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g7036
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'right'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g7043
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7839
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vn
sS'block_loop.thisTrialN'
p7841
I0
sg39
F1.2169111305811384
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\x01\x00u0'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6522
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7852
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vn
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.81665790950864903
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\x07\x04]0'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7215
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7222
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7865
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vn
sS'block_loop.thisTrialN'
p7867
I0
sg39
F0.78329356738322531
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\r\x02\x13@'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g6392
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7878
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vn
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.99986686079864739
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\x12\x0e\x92x'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6815
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'right'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6819
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6823
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7891
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vn
sS'block_loop.thisTrialN'
p7893
I0
sg39
F0.88302110242148046
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\x18\x0e\xe4\x80'
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g7308
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'right'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g7315
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7904
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vn
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.83319596522778738
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00\x1e\r\xcb@'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6832
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'left'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6840
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7917
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vn
sS'block_loop.thisTrialN'
p7919
I0
sg39
F0.90032634784802212
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00$\x0b\xbf\xd0'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6372
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'right'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7930
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vn
sS'block_loop.thisTrialN'
p7932
I0
sg39
F0.93319148923910689
sg34
g753
(S'\x07\xdf\x07\x02\x10\x00*\n\xa6\x90'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g7308
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'right'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6482
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g7315
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7943
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vn
sS'block_loop.thisTrialN'
p7945
I0
sg39
F0.93331864145875443
sg34
g753
(S'\x07\xdf\x07\x02\x10\x000\nD\xe8'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
g6522
sS'block_loop.thisIndex'
p7949
g6365
sg38
S'left'
p7950
sg59
g63
sS'trial_loop.thisN'
p7951
I112
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p7952
g60
(g99
S'p\x00\x00\x00'
tRp7953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7954
I0
sg6380
g6530
sS'block_loop.thisRepN'
p7955
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7956
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p7957
Nsg70
Vn
sS'block_loop.thisTrialN'
p7958
I0
sg39
F1.3499291682310286
sg34
g753
(S'\x07\xdf\x07\x02\x10\x006\t\xa4\xc0'
tRp7959
sa(dp7960
S'trial_loop.thisTrialN'
p7961
I113
sg6371
g6832
sS'block_loop.thisIndex'
p7962
g6365
sg38
S'left'
p7963
sg59
g63
sS'trial_loop.thisN'
p7964
I113
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p7965
g60
(g99
S'q\x00\x00\x00'
tRp7966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7967
I0
sg6380
g6840
sS'block_loop.thisRepN'
p7968
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7969
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p7970
Nsg70
Vn
sS'block_loop.thisTrialN'
p7971
I0
sg39
F2.1665109574714734
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x01\x00.\xe0'
tRp7972
sa(dp7973
S'trial_loop.thisTrialN'
p7974
I114
sg6371
g6993
sS'block_loop.thisIndex'
p7975
g6365
sg38
S'left'
p7976
sg59
g63
sS'trial_loop.thisN'
p7977
I114
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p7978
g60
(g99
S'r\x00\x00\x00'
tRp7979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7980
I0
sg6380
g7000
sS'block_loop.thisRepN'
p7981
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7982
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p7983
Nsg70
Vn
sS'block_loop.thisTrialN'
p7984
I0
sg39
F0.91699212597086444
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x08\x03[`'
tRp7985
sa(dp7986
S'trial_loop.thisTrialN'
p7987
I115
sg6371
g6772
sS'block_loop.thisIndex'
p7988
g6365
sg38
S'right'
p7989
sg59
g63
sS'trial_loop.thisN'
p7990
I115
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p7991
g60
(g99
S's\x00\x00\x00'
tRp7992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7993
I0
sg6380
g6779
sS'block_loop.thisRepN'
p7994
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7995
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p7996
Nsg70
Vn
sS'block_loop.thisTrialN'
p7997
I0
sg39
F0.79993995906625059
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x0e\x02|\xb8'
tRp7998
sa(dp7999
S'trial_loop.thisTrialN'
p8000
I116
sg6371
S'26-walkers_smoky_bacon.png'
p8001
sS'block_loop.thisIndex'
p8002
g6365
sg38
S'right'
p8003
sg59
g63
sS'trial_loop.thisN'
p8004
I116
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8005
g60
(g99
S't\x00\x00\x00'
tRp8006
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8007
I0
sg6380
S'44-crunch.png'
p8008
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8010
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.86661419024312636
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x13\x0f:p'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6725
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6732
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8023
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.94987807927100221
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x19\r\xa40'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6740
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6747
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8036
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F1.1832839311791759
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01\x1f\r\x81\x08'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7215
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7222
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8049
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.1003772657568334
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01&\x01o0'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g6635
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'right'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g6643
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8062
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F1.1332449729961809
sg34
g753
(S'\x07\xdf\x07\x02\x10\x01,\x03k\x00'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6441
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6449
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8075
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.86664098914116039
sg34
g753
(S'\x07\xdf\x07\x02\x10\x012\x06"P'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6488
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6496
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8088
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F1.2332387864407792
sg34
g753
(S'\x07\xdf\x07\x02\x10\x018\x04\x8f\xf8'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6691
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6695
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6699
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6695
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8101
I2
sg6385
g6702
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.68328835014835931
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02\x02\x08\xb2\x90'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6832
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6840
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8114
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.89990811399547965
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02\x08\x04E\xc0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6505
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6513
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8127
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.71655347933847224
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02\x0e\x03,\x80'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6620
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6627
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8140
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F1.0166441109286097
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02\x13\x0e\xb5\xa0'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6635
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6643
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8153
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F1.0166067635291256
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02\x1a\x00Bh'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g6933
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'left'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g6941
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8166
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F1.2999378208551207
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02 \x01\x11p'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6993
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'left'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6445
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8179
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.76657818278908962
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02&\x06&8'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6372
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'right'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8192
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.95006795230801799
sg34
g753
(S'\x07\xdf\x07\x02\x10\x02,\x02\xea\x18'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6832
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6840
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8205
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.59988191379306954
sg34
g753
(S'\x07\xdf\x07\x02\x10\x022\x02\xc3\x08'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6471
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6479
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8218
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.80036589047813322
sg34
g753
(S'\x07\xdf\x07\x02\x10\x027\x0cg\xc8'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g6725
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g6732
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8231
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.94989889118369319
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03\x01\t\xdfX'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g7129
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8244
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.0166081889983616
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03\x07\t\xbc0'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g7008
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'right'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g7015
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8257
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F1.4164902168340632
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03\r\nL\xb8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g6586
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6590
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g6594
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6590
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8270
I2
sg6385
g6597
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.94998727052370668
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03\x14\x02\x07\x88'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6556
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8283
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F1.3498057222459465
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03\x1a\x01\xa5\xe0'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6725
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6732
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8296
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.88330477159979637
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03 \x07\xb0\xc0'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g6755
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'left'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8309
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.68336846174497623
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03&\x06\\\xe8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g7036
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'right'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8322
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.74994091413464048
sg34
g753
(S'\x07\xdf\x07\x02\x10\x03,\x01\xec0'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6488
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'left'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6499
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6496
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8335
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.69997151904317434
sg34
g753
(S'\x07\xdf\x07\x02\x10\x031\r\xf2P'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g7466
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g7473
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8348
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.84993444248539163
sg34
g753
(S'\x07\xdf\x07\x02\x10\x037\t\xfe\x98'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6539
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8361
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.71664128849079134
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\x01\x08-\xc0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6815
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'right'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6819
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6823
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8374
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.86642032588133588
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\x07\x04:\x08'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6603
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8387
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F1.0665120123194356
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\r\x02\xa3\xc8'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6978
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6567
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6985
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8400
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.94993281744245905
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\x13\x04*h'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7144
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6532
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7151
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8413
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.68371257099352079
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\x19\x04\x03X'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7008
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7015
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8426
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.81654216108290711
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04\x1e\x0e\xd8\xc8'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6755
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8439
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.74994376507675042
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04$\x0c\x8e\xd8'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6787
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6794
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8452
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.98320051248811069
sg34
g753
(S'\x07\xdf\x07\x02\x10\x04*\tR\xb8'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g7129
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8465
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.73324263521863031
sg34
g753
(S'\x07\xdf\x07\x02\x10\x040\t\xa4\xc0'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6522
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6530
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8478
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F1.1832229209248908
sg34
g753
(S'\x07\xdf\x07\x02\x10\x046\x05\xef\x88'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g7466
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g7473
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8491
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.75000762628405937
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x00\tZ\x88'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6933
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6941
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8504
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.7333267381436599
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x06\x06\x1eh'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7308
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7315
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8517
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F1.0666605466321926
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x0c\x02eH'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g7159
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6826
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g7166
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8530
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.64964632582996273
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x12\x03\xeb\xe8'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g6488
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'left'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6492
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g6496
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8543
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.63324397516407771
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x17\x0e\x82\xd8'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6635
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6643
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8556
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.83334079330961686
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05\x1d\t^p'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g7215
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g7222
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8569
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.69999518190161325
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05#\x07O\x18'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6787
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6794
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8582
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.81663510193538968
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05)\x03[`'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6815
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'right'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6826
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6823
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8595
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.86637870206322987
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05/\x01\x11p'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6950
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'right'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6957
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8608
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.94985156547045335
sg34
g753
(S'\x07\xdf\x07\x02\x10\x054\x0e\xc1X'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g7144
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'right'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6526
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g7151
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6532
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8621
I2
sg6385
g6526
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.71662532319169259
sg34
g753
(S'\x07\xdf\x07\x02\x10\x05:\x0e_\xb0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6556
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6564
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8634
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.73317962930377689
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06\x04\n\xa6\x90'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6755
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6759
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6763
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8647
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.68362704259561724
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06\n\x07+\xf0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6993
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6452
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g7000
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6445
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8660
I2
sg6385
g6452
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.74996315151656745
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06\x10\x02\xbf '
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g8001
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g8008
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8673
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F1.2332145533982839
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06\x15\x0e\xc1X'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7036
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6836
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7043
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8686
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.64994966653830488
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06\x1c\x03g\x18'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g8001
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g8008
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8699
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.84992588964450988
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06!\r\xfe\x08'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7466
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7473
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8712
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F1.0333010511167231
sg34
g753
(S"\x07\xdf\x07\x02\x10\x06'\x0c-0"
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6978
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6985
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8725
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.61663892220531125
sg34
g753
(S'\x07\xdf\x07\x02\x10\x06-\r:\xb8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6426
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'left'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6433
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8738
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.0498898536825436
sg34
g753
(S'\x07\xdf\x07\x02\x10\x063\x07\xd7\xd0'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6950
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6718
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6957
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6718
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8751
I2
sg6385
g6712
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F1.0497364727598324
sg34
g753
(S'\x07\xdf\x07\x02\x10\x069\t\x1f\xf0'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6901
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6499
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6908
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6492
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8764
I2
sg6385
g6499
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.6333520260413934
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07\x03\nh\x10'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6409
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8777
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.88327369628314045
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07\t\x05C\xa8'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6916
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6920
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6924
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8790
I2
sg6385
g6927
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.68325356860077591
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07\x0f\x03\xeb\xe8'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g6815
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6826
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g6823
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8803
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.83347393251460744
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07\x14\x0e\xfb\xf0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6603
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'left'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6611
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8816
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.64995650881246547
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07\x1a\x0c\xf0\x80'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6372
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8829
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.78340361391747138
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07 \x08\x06\xb0'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g7129
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8842
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.93325278459087713
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07&\x05C\xa8'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7159
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6819
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7166
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8855
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.71642832278303104
sg34
g753
(S'\x07\xdf\x07\x02\x10\x07,\x04\xa3\x80'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g7129
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g7136
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6639
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8868
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.73325204334469163
sg34
g753
(S'\x07\xdf\x07\x02\x10\x072\x00\xeeH'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6539
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6547
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8881
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.96670693153282627
sg34
g753
(S'\x07\xdf\x07\x02\x10\x077\x0c\xb5\xe8'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7308
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6475
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7315
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6475
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8894
I2
sg6385
g6482
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.98335588907502824
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\x01\x0c\x8e\xd8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7008
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'right'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7015
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8907
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.94980366956951912
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\x07\x0c\xe4\xc8'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g8001
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g8008
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8920
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.94995762067992473
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\r\x0c\xbd\xb8'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7215
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6765
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7222
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6765
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8933
I2
sg6385
g6759
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.0666365986835444
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\x13\x0c\\\x10'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g8001
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6543
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g8008
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6543
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8946
I2
sg6385
g6550
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F1.0170241421001265
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\x19\r\xde\xc8'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6740
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6747
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8959
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.70005077535824967
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08\x1f\x0e\xad\xd0'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6426
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6433
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8972
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.71662332752748625
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08%\n\x7f\x80'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7174
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'left'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6607
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7181
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6607
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8985
I2
sg6385
g6614
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F2.0499554254529357
sg34
g753
(S'\x07\xdf\x07\x02\x10\x08+\x06\xc6`'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6392
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6402
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6402
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8998
I2
sg6385
g6396
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.79992199810294551
sg34
g753
(S'\x07\xdf\x07\x02\x10\x082\x08\x06\xb0'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7159
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6826
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7166
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6819
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9011
I2
sg6385
g6826
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.16633505406935
sg34
g753
(S'\x07\xdf\x07\x02\x10\x088\x05\x82('
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6505
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6509
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6513
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9024
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.75000791137790657
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x02\x08t\x10'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7036
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6843
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7043
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6836
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9037
I2
sg6385
g6843
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.94987209228202119
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x08\x057\xf0'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6933
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6937
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6941
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9050
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.71670030308087007
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x0e\x05\x10\xe0'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6409
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6417
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9063
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.7832282807030424
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x14\x01\x1d('
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g6787
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6516
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g6794
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6509
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9076
I2
sg6385
g6516
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.75001931516453624
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x19\r\x9c`'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6556
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6560
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6564
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6560
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9089
I2
sg6385
g6567
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F1.1666335481713759
sg34
g753
(S'\x07\xdf\x07\x02\x10\t\x1f\n\\X'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I21
sg56
g57
sg58
Vy
sg42
I579
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I21
sg55
g11
sg56
g57
sg45
F1.1200000000000001
sg42
I579
sg49
F0.01
sg58
Vy
sg59
g63
sg44
I01
sg48
I25
sg47
g400
sg51
F29.669999999999998
sg46
F1.5200000000000002
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I209396048
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\x00\x00 @33\xb3?\xaeGa>{\x14\xee?=\n\xd7?)\\\x0f>)\\\x0f>\n\xd7#>\xaeGa?\xa4p=?\xaeGa?\x8f\xc2\xf5>\x00\x00\x80?\x1f\x85k?\x14\xaeG?\xaeG\x01@)\\\x0f?\n\xd7\xa3>\x00\x00\x80?\x14\xaeG?fff?\\\x8f\x82?\n\xd7#>{\x14\xee?\x1f\x85\xab?\xcd\xccL>R\xb8\x1e?\\\x8f\xc2?\xcd\xcc\xcc?\x00\x00\x00\x00R\xb8\x9e?\xb8\x1e\xc5?\x00\x00\x00\x00\\\x8f\x82?q=\n?\xf6(\x9c?\x85\xeb\xd1?R\xb8\x1e?\x85\xebQ?=\n\xd7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\xc5 \xd8A\x91\xed\xcc?o\x12]A\xdd$\xaa@\xf8S\xf3?\xaa\xf1\xb6@\x87\x16!@;\xdf\x15A\x87\x16\xa9@\x0e-"@\xdb\xf9.@u\x93\x08@!\xb0Z@+\x87\xc6?\xfc\xa9y@\xbaI\xcc@\xdd$\xe2@B`E@\x0e-B@\x0e-\xca@T\xe3\x8d@\xbaI4@!\xb0J@\xdd$\nAu\x93x@\x87\x16q@B`E@!\xb0\n@!\xb0\xc2@u\x93\x18@/\xdd|@T\xe3\x1d@\xee|7@\x1dZ\xe4?\xdd$\x92@D\x8b\xd8@\xcb\xa1\x89@\xb6\xf3\xbd?ff6AD\x8b\x90@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00@\x00\x00\xd0A\x00\x00\x00\x00\x00\x00\xc8A\x00\x00\x00B\x00\x00\xf8A\x00\x00\xe8A\x00\x00PA\x00\x00\x80@\x00\x00\xb8A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\x18B\x00\x00\x98A\x00\x00\x1cB\x00\x00\x14B\x00\x00\xc0@\x00\x00 A\x00\x00\xe0@\x00\x00\x00A\x00\x00@A\x00\x00\x80A\x00\x00\xc0A\x00\x00`A\x00\x00pA\x00\x00\x88A\x00\x00\xa0@\x00\x00\x90A\x00\x00\x10A\x00\x00\xf0A\x00\x00\xa0A\x00\x000A\x00\x00\x08B\x00\x00\x04B\x00\x00@@\x00\x00\xa8A\x00\x00\xb0A\x00\x00\x10B\x00\x00\x80?\x00\x00\x0cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0?33\xb3?ff\xe6?\x9a\x99\xd9?\x00\x00\xc0?\x9a\x99\x99?\x9a\x99\xd9?\x9a\x99\xd9?33\xb3?\x9a\x99\xd9?ff\xa6?33\xb3?\xcd\xcc\xcc?ff\xe6?\x00\x00\xc0?33\xb3?\x00\x00\xc0?\x00\x00\x00@\x9a\x99\x99?\x00\x00\x00@33\xb3?\x00\x00\x00@\xcd\xcc\xcc?\x9a\x99\x99?\xcd\xcc\xcc?\x9a\x99\xd9?33\xb3?ff\xa6?\xcd\xcc\xcc?33\xb3?\xcd\xcc\xcc?\x9a\x99\xd9?33\xb3?\x9a\x99\x99?\x9a\x99\x99?\x9a\x99\xd9?ff\xa6?\x00\x00\x80?\xcd\xcc\xcc?\x00\x00\xc0?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x02\x00\x00\x00&\x00\x00\x00\x00\x00\x00\x00"\x00\x00\x00\x08\x00\x00\x00\x1a\x00\x00\x00\x10\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x1c\x00\x00\x00\x11\x00\x00\x00\x1f\x00\x00\x00\x14\x00\x00\x00\x07\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x15\x00\x00\x00\x19\x00\x00\x00\x1b\x00\x00\x00\r\x00\x00\x00\x1e\x00\x00\x00#\x00\x00\x00$\x00\x00\x00\t\x00\x00\x00\x16\x00\x00\x00\x03\x00\x00\x00\x01\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x06\x00\x00\x00\x1d\x00\x00\x00\x05\x00\x00\x00\x04\x00\x00\x00!\x00\x00\x00 \x00\x00\x00\'\x00\x00\x00%\x00\x00\x00\x0f\x00\x00\x00\x0c\x00\x00\x00\x0e\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g117
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g285
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g103
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g278
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g327
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g320
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g306
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g194
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g131
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g264
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g292
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g299
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g369
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g236
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g376
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g362
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g145
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g173
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g152
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g159
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g187
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g215
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g271
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g201
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g208
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g222
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g138
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g229
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g166
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g313
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g243
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g180
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g341
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g334
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g124
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g250
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g257
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g355
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g110
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g348
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I209396048
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'ffF@\x00\x00\xc0@33\xa3@333@\x00\x00\xb0@ff\xb6@\x9a\x99\x89@\xcd\xccl@\xcd\xcc\x9c@\xcd\xcc,@\x00\x00\xb0@ffF@\xcd\xcc\xbc@\xcd\xcc\xac@\xcd\xcc\x8c@33\xb3@\x9a\x99\x89@ff\x86@33\xa3@\x9a\x99\x19@\x00\x00\xb0@\xcd\xccl@\x9a\x99\x89@\x00\x00\xa0@\xcd\xcc\x8c@33\x13@\xcd\xcc\xac@\x00\x00\x90@fff@\x00\x00 @\x00\x00\x80@\x9a\x99\xa9@\xcd\xcc\xac@\x9a\x99y@\x00\x00\xa0@33\xb3@ff\x86@ff\xa6@33\xb3@\xcd\xcc\xbc@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'\x13\xbb\x1fAs\xde\x9d?f\xdeM@\xa7 &Ax\xcc\\@0\xdd\x1d@\xe4\xcbL@\x06#r@Fu\xc7@\xe5V5@\xeeV\x05@\xf0VU@F\x96\x19@EE\xe4?\xaaCT@n{\xd7?\n\x00\xa0?\x07\x9f\xd9?\xbaE\x04@\xc8\xee\x86@\xce\xe1\xbd?\xd0\xfe\x0bB\xf1\x01\x00@\xb5\xc0\x9b?\xa1W\x05@-7\xd3?\xdd\xfc\x8e?\xaa\xab\xaa?\x08g\xe6?\xcb\x00\xe0?f\x89\xa8?\x8dD\x04@\xe2yw?\xfb\x98I@X\x86\x88?\xcfH\xa4?\x11\xab\xaa?\xee\xae\x8a?f\xd6\x9d?\x14$\xa2?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'33s@ffF@\x00\x00@@\x9a\x99\x89@\x00\x00@@\xcd\xccL@\x00\x00\x80@\x9a\x999@\x00\x00@@\x00\x00\x80@fff@\x9a\x999@\x9a\x999@ffF@\xcd\xccl@333@fff@ff\x86@33s@33s@33S@\xcd\xccl@33s@\xcd\xcc,@\x00\x00\x80@33s@33S@\x9a\x99Y@fff@\x00\x00@@\x00\x00\x80@\x9a\x99Y@333@\x9a\x99y@\x9a\x99Y@33s@ff\x86@\x00\x00\x80@\xcd\xcc,@fff@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xc0\xf5\xfd\x0c\x806\xa7\x0c\x803\xa7\x0c\xe0e\xa5\x0c\xe0i\xa5\x0c\x00h\xa5\x0c\xa0j\xa5\x0c`k\xa5\x0c\x80`\xa5\x0c`\xf5\xb2\x04\x00k\xa5\x0c\xe05\xa7\x0c`6\xa7\x0c\x00=\xa7\x0c\xa05\xa7\x0c@<\xa7\x0c`=\xa7\x0c`j\xa5\x0c\xe07\xa7\x0c@4\xa7\x0c\x00<\xa7\x0c\x807\xa7\x0c\xa0\xf0\xb2\x04@\xf7\xfd\x0c\xa0\xf7\xfd\x0c\xc0\xf6\xfd\x0c`\xf5\xfd\x0c\xe0\xfb\xfd\x0c \xf9\xfd\x0c \xf4\xfd\x0c\x80\xf5\xfd\x0c@\xfb\xfd\x0c\xa0\xf9\xfd\x0c\xe0\xf8\xfd\x0c\xc06\xa7\x0c\xe0\xf4\xfd\x0c@\xf8\xfd\x0c\xa0\xf6\xfd\x0c \xf8\xfd\x0c \x89\xfe\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'T\xe3\xdd@\xc5 \xa0?u\x93\xc8?33\xd3@+\x87\xc6?\xf8S\xf3?\xdd$\xc2@\x96C3@\x0e-B@\x91\xed\xac?\xf8S\xd3?\x1dZ\xe4?\xb6\xf3\xbd?\xc9vv@\x0e-B@^\xba\xb9?B`\xd5?\x91\xed\xec?\xb6\xf3\x9d?B`\x05@B`\xb5?T\xe3-@u\x93(@^\xba\xd9?u\x93\xa8?\x1dZ\x84?T\xe3]@m\xe7{?\x83\xc0*?\x91\xed\xac?\x1dZ\x84?\x1dZ\xe4?\xb6\xf3\x9d?\xa8\xc6;@\x1dZ\xa4?\xc5 \x80?u\x938@\xf0\xa7f?\xf8S\xb3?B`\x95?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I209396048
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'P6\x14\r\x806\x14\r\xa8\x94/\r\xd0\x94/\r\xf8\x94/\r \x95/\rH\x95/\r\xa0\x1a/\r\xb06\x14\rH\x95/\r\xa8\x94/\r\xd0\x94/\r\xf8\x94/\r \x95/\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xc8\xec\xe2\x040\xee\xe2\x04\x00\xeb\xe2\x04\xa8\xe2\xe2\x04\xe0\xe9\xe2\x048\xec\xe2\x04\x10\xe7\xe2\x04\x18x\xf7\x04pz\xf7\x04\xb0v\xf7\x04\x98p\xf7\x04Xt\xf7\x04\x98v\xf7\x04hs\xf7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g789
sg83
g790
sg84
g794
sg85
g795
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g800
sg83
g801
sg84
g805
sg85
g806
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g811
sg83
g812
sg84
g816
sg85
g817
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g744
sg83
g822
sg84
g749
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g756
sg83
g831
sg84
g761
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g811
sg83
g840
sg84
g816
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g778
sg83
g858
sg84
g783
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g789
sg83
g867
sg84
g794
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g800
sg83
g876
sg84
g805
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I209396048
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I209396048
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xc0\xb51\r\xe0\xa61\rX\xb41\rP\xa61\r\x80\xb41\r\x00?1\r8?1\rp?1\r \xc01\r\xa8\xb41\r\xd0\xb41\r\xa0\xd1\xfc\x0c\x80\xa61\r\x00?1\r0\xb41\r`\xd1\xfc\x0c\xa0\xd1\xfc\x0c\xf8\xb41\rP\xa61\r \xb51\r\xf8\xb41\r\xa8?1\r\x00?1\r\xb0\xa61\rH\xb51\r`\xd1\xfc\x0c\x80\xd1\xfc\x0cp?1\r\xd0\xb41\r0\xb41\r\xd0\xb41\rp\xb51\r\x80\xb41\r\x80\xa61\r`\xd1\xfc\x0cp\xb51\rp?1\r\x80\xd0\xfc\x0c \xb51\rp?1\r\x80\xb41\r0\xb41\r\xc0\xd0\xfc\x0cP\xa61\r0\xb41\r8?1\r\xf8\xb41\r \xb51\r\x00?1\rX\xc01\r\x00?1\rp?1\r\x80\xd0\xfc\x0c\xa8\xb41\r\xf8\xb41\r8\xb61\r \xc01\r\xa8\xb41\r`\xb61\r\xd0\xb41\r\xe8\xb51\r\xa0\xa71\rp?1\r\xa8\xb41\r \xb51\r8?1\r\xf8\xb41\r`\xd1\xfc\x0c\xa0\xd1\xfc\x0c8?1\r\x90\xc01\r`\xd1\xfc\x0c\x00?1\rp\xb51\r\xd0\xa71\r\xc0\xd0\xfc\x0c`\xd1\xfc\x0c\x80\xd0\xfc\x0c\x80\xa61\rp\xa71\rp\xb51\rP\xa61\r\x00?1\r\x10\xb61\r0\xb41\r\x00\xa81\rP\xa61\r \xb51\r@\xa71\r \xb51\r0\xa81\r \xb51\r\xc0\xd0\xfc\x0cP\xa61\r\xa0\xd0\xfc\x0c\x90\xc01\r\xa8\xb41\rH\xb51\r\x80\xd0\xfc\x0c\xc0\xd0\xfc\x0c\x80\xb41\r\x80\xa61\r\x00\xa81\rP\xa61\r8?1\r\xa0\xd1\xfc\x0cp\xb51\r8?1\r\x90\xc01\rX\xb41\r\xf8\xb41\rX\xb41\r\xf8\xb41\r\xb0\xa61\r \xa61\r`\xd1\xfc\x0c\xc0\xd0\xfc\x0c\xa0\xa71\r\xb0\xa61\rp\xb51\r \xa61\r\xb0\xa61\r8?1\r\xa8?1\rX\xb41\r\xc0\xd0\xfc\x0cX\xb41\r\xb0\xa61\r\x80\xa61\r \xb51\r\x00\xa81\rp?1\r0\xb41\r\xa0\xd1\xfc\x0c`\xd1\xfc\x0cH\xb51\r\x80\xb41\r \xa61\r\x80\xb41\r\xf8\xb41\r0\xb41\rH\xb51\rX\xb41\r\xd0\xb41\r \xa61\r\xa8\xb41\r\xf8\xb41\r0\xb41\r\xd0\xb41\r \xa61\r@\xa71\rX\xb41\r\x80\xa61\r\xa0\xd1\xfc\x0cH\xb51\r\xd0\xb41\r8?1\r\x80\xb41\r\x80\xa61\r\x80\xd0\xfc\x0c0\xb41\r\xa0\xd1\xfc\x0cH\xb51\rX\xb41\rp\xb51\r\xb0\xa61\r \xb51\r\xa0\xd1\xfc\x0cp\xb51\r\xb0\xa61\r\xc0\xd0\xfc\x0c\x00?1\r\xe8\xb51\r\x80\xa61\rP\xa61\rH\xb51\r\xe0\xa61\r\xa8\xb41\r \xb51\r\xe0\xa61\r8?1\r\x80\xd0\xfc\x0c\xd0\xb41\rP\xa61\r\x80\xb41\r\x80\xa61\r\x00?1\r\xa8\xb41\rX\xc01\r \xa61\r\x80\xd0\xfc\x0c`\xd1\xfc\x0c\xc0\xd0\xfc\x0cH\xb51\r \xa61\r\xa8\xb41\rp\xb51\rP\xa61\r\xc0\xd0\xfc\x0cp?1\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xa0\xbf\xa7\x0c\x80\xb5\xfb\x0c`&{\x0c`\xb0\xfb\x0c\xa0\x8b\x14\r\x80\x85\x14\r\xe0\x87\x14\r \x89\x14\r\x00\x8b\x14\r\xa0\x81\x14\r`\x8c\x14\r\xa0\x8a\x14\r\xc0\x8a\x14\r\x00\x86\x14\r\xc0\x87\x14\r`\x8b\x14\r`\x88\x14\r\x00\x8c\x14\r@\x8b\x14\r \x8b\x14\r\x80\x86\x14\r\x80\x81\x14\r\x80\x8a\x14\r`\x8a\x14\r@\x8c\x14\r\xe0\x8c\x14\r\xa0\x8c\x14\r\x80/\xfd\x0c\x00/\xfd\x0c`-\xfd\x0c\xa0/\xfd\x0c@\xbb\xfb\x0c\x00\x8c\xfe\x0c@\x8c\xfe\x0c\xc0\x8b\xfe\x0c@\x8e\xfe\x0c@\xb0\xfb\x0c\x80\x8c\xfe\x0c\x80\x8d\xfe\x0c\xc0\x8c\xfe\x0c\xa0\x86\xfe\x0c\xc0\x8a\xfe\x0c\x00\x8b\xfe\x0c@\x8f\xfe\x0c\x80\x8b\xfe\x0c\x00\x86\xfe\x0c\xc0\x85\xfe\x0c@\x8d\xfe\x0c\x00\x8a\xfe\x0c`\x87\xfe\x0c\xc0\x8e\xfe\x0c\x80\x8a\xfe\x0c\x00\x88\xfe\x0c \x87\xfe\x0c\x80\x86\xfe\x0c\x00\x89\xfe\x0c\xc0\x8d\xfe\x0c\x80\x8e\xfe\x0c\x00\x8d\xfe\x0c@\x88\xfe\x0c\xc0\x87\xfe\x0c@\x8a\xfe\x0c`\x85\xfe\x0c\x00\x8e\xfe\x0c@\x80\xfe\x0c \x80\xfe\x0c@\x86\xfe\x0c\x00\x81\xfe\x0c`\x80\xfe\x0c\xe0\x86\xfe\x0c\xe0\x80\xfe\x0c\xa0\x80\xfe\x0c \x81\xfe\x0c\x80\x89\xfe\x0c\x00\x8f\xfe\x0c\xc0\x80\xfe\x0c@\x89\xfe\x0c\x80\x88\xfe\x0c\xc0/\xfd\x0c\x00\xbc\xfb\x0c@\x8b\xfe\x0c\x00\xf2\xfd\x0c\xc0\xfe\xfd\x0c@\xfe\xfd\x0c \xfe\xfd\x0c\x80\xf2\xfd\x0c\x00\xff\xfd\x0c`\xfe\xfd\x0c`\xff\xfd\x0c \xff\xfd\x0c \xf2\xfd\x0c\xc0\xff\xfd\x0c\xa0\xff\xfd\x0c`\xf0\xfd\x0c@\xf1\xfd\x0c \xf1\xfd\x0c\xe0\xfe\xfd\x0c\x00\xf3\xfd\x0c\x00\xf1\xfd\x0c`\xf1\xfd\x0c@\xf2\xfd\x0c\xa0\xf1\xfd\x0c\xa0\xf2\xfd\x0c`\xf2\xfd\x0c\x80\x80\xfe\x0c\xa0\xf3\xfd\x0c\xc0\xf1\xfd\x0c \xf3\xfd\x0c\x80\xf3\xfd\x0c\x80\xfe\xfd\x0c\xc0\xf3\xfd\x0c\xe0\xf3\xfd\x0c\x80\xff\xfd\x0c\xa0\xfe\xfd\x0c\xe0\xf2\xfd\x0c@\xf3\xfd\x0c`\xf3\xfd\x0c\x00\xf4\xfd\x0c\xc0\xf7\xfd\x0c\x80\xfb\xfd\x0c\xc0\xf2\xfd\x0c\xe0\xff\xfd\x0c\xe0\xf1\xfd\x0c\x80\xfc\xfd\x0c\xc0\x89\xfe\x0c\xc0\x88\xfe\x0c\xa0\x13\xb2\x04 \x1b\xb2\x04 \x12\xb2\x04\x804\xb1\x04\xc0\x10\xb2\x04\xe0\x89\x14\r\x80\x8b\x14\r\xc0\x8b\x14\r`\x8d\x14\r@\x8d\x14\r\x80\x8c\x14\r\x80\x8d\x14\r \x8c\x14\r`\x89\x14\r\xc0\x8d\x14\r\xe0\x8d\x14\r \x8e\x14\r\x00\x8e\x14\r`\x8e\x14\r@\x8e\x14\r\x00\x8d\x14\r\x80\x8e\x14\r\xa0\x8e\x14\r\xc0\x8e\x14\r\xe0\x8e\x14\r\xa0\x8d\x14\r@\x8a\x14\r\xe0\x8a\x14\r\xc0\x8f\x14\r\x00\x8a\x14\r \x8d\x14\r\xa0\x89\x14\r\x80\x8f\x14\r\xa0\x8f\x14\r \x8f\x14\r\x00\x8f\x14\r\xe0\x8f\x14\r\xc0\x8c\x14\r`\x8f\x14\r@\x8f\x14\r@\xff\xfd\x0c\xa0\xe1\xfe\x0c \x92\xb7\x1b\xa0\x90\xb7\x1b`\x91\xb7\x1b\x00\x91\xb7\x1b@\x90\xb7\x1b@\x88\x14\r\xa0\x91\xb7\x1b\x00\x92\xb7\x1b \x93\xb7\x1b\x80\x91\xb7\x1b \x91\xb7\x1b\x80\x92\xb7\x1b`\x90\xb7\x1b\x00\x93\xb7\x1b@\x92\xb7\x1b\xc0\x92\xb7\x1b\xc0\x90\xb7\x1b\xc0\x91\xb7\x1b`\x92\xb7\x1b\xe0\x91\xb7\x1b\xa0\x92\xb7\x1b\x80\x90\xb7\x1b\xe0\x90\xb7\x1b\xe0\x93\xb7\x1b \x90\xb7\x1b@\xed\xbd\x04@\xe8\xbd\x04\xe0\xe8\xbd\x04\x00\xe8\xbd\x04\xc0\xed\xbd\x04\xa0\xe8\xbd\x04\xc0\xe8\xbd\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\xd8\x86\x88@OT\x15@}\x0e\x11@\x8b\xb4{?\xadj\x16@\x033\xf3?\x1d\x1c\xe2?5\xcb\x0c@\x99\x95\x99?\x7fp\x86?\x8a\r\xb1?\x86r\xb7?\x1b\xca\xac?\x06\xa8j?x\xaa\xca?\xa6\x1f\xa2?\xedb\xc6?\xd3\x81\xc8?\xfaA\x84?In\xc6?\xcbu\xb7?\xa7\x1c\xc2?\xfb\xcb\x8c?\xa1\xca\x1c@\xd0`\x95?\xc7\xc9\x8c?;(\x93?\xebc\xc6?\xa5T\xb5?6.\x82?\xa9mw?9\xbf\xcc?\xad\x95\xd9?\xed\xb8\x1b@\x85\x0c\xb1?\xbc9\x84?\xda\xf4\xdf?\xb0E\xa4?\xec\x89\x88?\xbf\x98\x99?\ndf?c\xe6n?)\xad\xdb?s\xb7\x9b?\xd8C\x84?\x00q\x97?\xcfd\x06@\xe2\x0b\x91?\n\xec\x0e@r}7?\xd1\xc9L?6\xda\xbd?\xc6\xcc\x8c?I\x0e\xb1?\n\xcb\xac?\xfe\xd4]?\x1f\x0c\xd1?\x8b\xa0\xea?\xb9\xc7\xac?\xbd6s?1\xfa\x8e?%\xff\x9f?k\xa9\x8a?\xe5\xa8\x8a?\xbe\x7f&?h\x1d\x82?\x95\x0f\x91?\xb6OU?\x88@\xa4?\xb6\xd6]?\xf8b\x86?\x04\x7fH?\xc8\xca\xec?\xc4\x17\xa2?\xf3\x96Y?\xd9\xa8\x8a@z\xe6n?\x8b\xeb\x8e?\xe4PU?\x05"\x82?0I&?\xf6\xecn?P\xa3*?\xd0?U?\x95\xe1]?\xab\x04\x00@\xd3\x86H?G\xbc{?\x83T\xb5?Ja&?\xda\x1ds?n\xb7\x9b?\xba=\xa4?.p7?\xe1\x96\x99?>O\x84?\xb7\xb9;?\xea\xc7\xec?\xdf\xe9\x8e?)\xda\x9d?\xe7\x87\x88?\x15\xd7]?i0\xd3?\xba\xa9\x8a?\x82\xf4\x7f?\xd1\xc4\xfb?u\xe8\x7f?\x80\xe2n?x\xa7\xaa?\x9dc\x16@\x9f&r@=1\x93?3\xc7\x8c?\xb7d\x86?\x82\xba\xbb??Hs?\xcb\xb7{?\xca\x0f\x91?\xf7,\xd3?\xb3\xc6]?\x98,\x82?\xfds\x97?\x92\x95\x99?\x0b\xb5\xbb?f\xbb{?6\xdd]?^ef?\xbd\xdb\x9d?\xfe\xef\x8e?`u7?\x8f\xd3j?\xd4\xfa\x9f?<\xd7]?O\xcb\x8c?\xfe\xfc\x7f?\xd5O\xa4?D2\x93?\xe0\x8eY?\xbf\x86\x88?\t^\x86?\xa2Y\x05@\x7f?D?\x05 \x82?{F\x84?\xb7\x89\x88?,C\x84?i\x0bQ?\x8c\xa8\xca?\x80\x81H?N\xa9\x8a?\xfa\x99Y?\x8ep7?\x0e\x85\x88?)\xean?\xba\xa7j?\xa9.3?P|f?\xcc7D?\xc0!"?\xd1\x97Y@\xc58D?\x15q\x86?\xc8A\x84?9\xf1\x7f?\xf0oH?c\x94\xb9?\xb4\xdc\x1d?\xc2\xdb\x9d?OpH?S23?\x19\xda\xbd?\xc5!\x82?\xaap7?\x062D?\xf2\x10\x91?$\xb7\xfb?=\xfeP?$\xed\x8e?\x1023?Y?D?\xf3Yf?#sw?-\xb5{?\xf3vw?{c\x86?\xa7b\x86?b\xa9*?\xaa\x82\x97?\xecS\x95?\xd0\xd5\xdd?\x16\xfd\x7f?\xf2p7?\xdb\x11Q?(b\xa6?\xeb>D?\x0eO\xb5?\x1a(\x93?\xd5\x82f?\xe2\x93Y?\x18\xa3j?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'@t\xf7\x04\x80v\xf7\x04\x989\xe6\x04\x809\xe6\x04H5\xe6\x04\xa82\xe6\x0402\xe6\x04\x884\xe6\x04\xc86\xe6\x04\xe00\xe6\x04H>\xe6\x04\x10=\xe6\x04\xa8;\xe6\x04x8\xe6\x04\x002\xe6\x04`5\xe6\x048<\xe6\x04\xe09\xe6\x04\xe87\xe6\x04\xa04\xe6\x04\xf08\xe6\x04\xa0:\xe6\x040>\xe6\x04\xb0<\xe6\x04\xa0=\xe6\x04\x887\xe6\x04\x18;\xe6\x04\xb8:\xe6\x04p4\xe6\x04@7\xe6\x04X1\xe6\x04\xe0<\xe6\x04X:\xe6\x04`2\xe6\x04\xd0=\xe6\x04@:\xe6\x04\x188\xe6\x04\xd04\xe6\x04\x00;\xe6\x04H;\xe6\x04\x10:\xe6\x04\x80?\xe6\x04\x18>\xe6\x04\xd85\xe6\x04\x908\xe6\x04\xf89\xe6\x04\xa07\xe6\x04\xf0>\xe6\x04\xf80\xe6\x04\x806\xe6\x04`>\xe6\x04\x98?\xe6\x04X=\xe6\x04\xf86\xe6\x04H2\xe6\x04p=\xe6\x04 0\xe6\x04(4\xe6\x04\xe8:\xe6\x04X4\xe6\x04\xb03\xe6\x04\x086\xe6\x04P?\xe6\x04\xc02\xe6\x04@=\xe6\x04\xf0;\xe6\x04\x88:\xe6\x04\x005\xe6\x04 <\xe6\x04x;\xe6\x048?\xe6\x04 3\xe6\x04\xb06\xe6\x04\xd88\xe6\x04\x089\xe6\x04\x104\xe6\x04 9\xe6\x04\x00>\xe6\x04\xe0?\xe6\x04x>\xe6\x04\x986\xe6\x04P9\xe6\x04p1\xe6\x04\xd8>\xe6\x04\xc05\xe6\x04\xa8>\xe6\x04P0\xe6\x040;\xe6\x04p:\xe6\x04\xb0?\xe6\x04\xd0:\xe6\x04h?\xe6\x04`8\xe6\x04\xc0>\xe6\x04\xa88\xe6\x04h0\xe6\x04\xc8?\xe6\x04`;\xe6\x04\x008\xe6\x04\x88=\xe6\x04\xd07\xe6\x04h9\xe6\x04 ?\xe6\x04\xb81\xe6\x04\xa85\xe6\x04\xc0;\xe6\x04P6\xe6\x04\xe84\xe6\x04\xe06\xe6\x0480\xe6\x0489\xe6\x04\x803\xe6\x04\xb00\xe6\x04\xc8<\xe6\x04(1\xe6\x04(=\xe6\x04\xe8=\xe6\x04\x90;\xe6\x04\xc89\xe6\x04p7\xe6\x04(7\xe6\x04\xb8Z\xef\x04\x00R\xef\x04\xa0Q\xef\x04\x18X\xef\x04\xf0[\xef\x04\xf8V\xef\x04\xd8X\xef\x04\x00[\xef\x04\xd0Z\xef\x04HR\xef\x04\xc8S\xef\x04\xe8Z\xef\x04\xb8Q\xef\x04\xa0Z\xef\x04\xd0W\xef\x040X\xef\x04\x98V\xef\x04\xc8\\\xef\x04xR\xef\x04\xe0P\xef\x04\x80V\xef\x04H^\xef\x04\xd0]\xef\x04P_\xef\x040U\xef\x04@]\xef\x04\x90X\xef\x04@Z\xef\x048S\xef\x048V\xef\x04 V\xef\x04 P\xef\x04\xf8Y\xef\x04\x90R\xef\x04@W\xef\x04X]\xef\x04\x10Z\xef\x04\xc83\xe6\x04\xa01\xe6\x04\xe81\xe6\x04\x980\xe6\x04\xf05\xe6\x04\xb8=\xe6\x04P3\xe6\x04\x185\xe6\x04\xf02\xe6\x04\xb87\xe6\x04\x90>\xe6\x04\xd82\xe6\x04@4\xe6\x04\x083\xe6\x04\x182\xe6\x0483\xe6\x04\x902\xe6\x04\x107\xe6\x04H8\xe6\x04\x983\xe6\x04\xc08\xe6\x04x2\xe6\x0405\xe6\x04\xc80\xe6\x04\xb84\xe6\x04\x881\xe6\x04\xf8<\xe6\x04h<\xe6\x04(:\xe6\x04\xd01\xe6\x04 6\xe6\x04h6\xe6\x04X7\xe6\x04\x101\xe6\x04h3\xe6\x04x^\xef\x04@1\xe6\x04\x08<\xe6\x0486\xe6\x04\xf83\xe6\x04\x905\xe6\x04\x08?\xe6\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1022
sg895
g1018
sg910
g1029
sg904
g1026
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1045
sg895
g1035
sg910
g1039
sg904
g1043
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1056
sg895
g1052
sg910
g1063
sg904
g1060
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1073
sg895
g1069
sg910
g1080
sg904
g1077
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1045
sg895
g1086
sg910
g1039
sg904
g1093
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1105
sg895
g1101
sg910
g1112
sg904
g1109
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g988
sg895
g1118
sg910
g995
sg904
g1125
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1150
sg895
g1146
sg910
g1157
sg904
g1154
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1045
sg895
g1086
sg910
g1039
sg904
g1093
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1180
sg895
g1176
sg910
g1187
sg904
g1184
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1210
sg895
g1206
sg910
g1217
sg904
g1214
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1180
sg895
g1223
sg910
g1187
sg904
g1230
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1022
sg895
g1238
sg910
g1029
sg904
g1245
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1270
sg895
g1266
sg910
g1277
sg904
g1274
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1287
sg895
g1283
sg910
g1294
sg904
g1291
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1150
sg895
g1300
sg910
g1157
sg904
g1307
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1325
sg895
g1315
sg910
g1319
sg904
g1323
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1022
sg895
g1238
sg910
g1029
sg904
g1245
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1073
sg895
g1345
sg910
g1080
sg904
g1352
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g908
sg895
g1360
sg910
g900
sg904
g1367
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1073
sg895
g1069
sg910
g1080
sg904
g1077
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g1392
sg895
g1388
sg910
g1399
sg904
g1396
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g971
sg895
g1405
sg910
g978
sg904
g1412
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1105
sg895
g1420
sg910
g1112
sg904
g1427
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1150
sg895
g1300
sg910
g1157
sg904
g1307
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1392
sg895
g1448
sg910
g1399
sg904
g1455
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1022
sg895
g1238
sg910
g1029
sg904
g1245
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1480
sg895
g1476
sg910
g1487
sg904
g1484
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1210
sg895
g1493
sg910
g1217
sg904
g1500
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1022
sg895
g1018
sg910
g1029
sg904
g1026
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g1325
sg895
g1547
sg910
g1319
sg904
g1554
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g954
sg895
g1562
sg910
g961
sg904
g1569
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g908
sg895
g1360
sg910
g900
sg904
g1367
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1005
sg895
g1590
sg910
g1012
sg904
g1597
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1180
sg895
g1176
sg910
g1187
sg904
g1184
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1210
sg895
g1493
sg910
g1217
sg904
g1500
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g988
sg895
g1118
sg910
g995
sg904
g1125
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1287
sg895
g1644
sg910
g1294
sg904
g1651
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1022
sg895
g1018
sg910
g1029
sg904
g1026
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1480
sg895
g1685
sg910
g1487
sg904
g1692
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1056
sg895
g1052
sg910
g1063
sg904
g1060
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1180
sg895
g1176
sg910
g1187
sg904
g1184
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1150
sg895
g1146
sg910
g1157
sg904
g1154
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1045
sg895
g1035
sg910
g1039
sg904
g1043
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1056
sg895
g1752
sg910
g1063
sg904
g1759
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1180
sg895
g1223
sg910
g1187
sg904
g1230
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1073
sg895
g1345
sg910
g1080
sg904
g1352
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1073
sg895
g1069
sg910
g1080
sg904
g1077
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g1022
sg895
g1018
sg910
g1029
sg904
g1026
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1056
sg895
g1752
sg910
g1063
sg904
g1759
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1210
sg895
g1206
sg910
g1217
sg904
g1214
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1180
sg895
g1223
sg910
g1187
sg904
g1230
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1150
sg895
g1146
sg910
g1157
sg904
g1154
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1045
sg895
g1035
sg910
g1039
sg904
g1043
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1480
sg895
g1476
sg910
g1487
sg904
g1484
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1150
sg895
g1146
sg910
g1157
sg904
g1154
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g988
sg895
g1118
sg910
g995
sg904
g1125
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1392
sg895
g1388
sg910
g1399
sg904
g1396
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1105
sg895
g1101
sg910
g1112
sg904
g1109
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1325
sg895
g1547
sg910
g1319
sg904
g1554
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1150
sg895
g1300
sg910
g1157
sg904
g1307
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1480
sg895
g1685
sg910
g1487
sg904
g1692
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1105
sg895
g1420
sg910
g1112
sg904
g1427
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g988
sg895
g1118
sg910
g995
sg904
g1125
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1392
sg895
g1448
sg910
g1399
sg904
g1455
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g954
sg895
g1562
sg910
g961
sg904
g1569
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g908
sg895
g1360
sg910
g900
sg904
g1367
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1270
sg895
g1266
sg910
g1277
sg904
g1274
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g954
sg895
g1562
sg910
g961
sg904
g1569
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1210
sg895
g1206
sg910
g1217
sg904
g1214
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g971
sg895
g1405
sg910
g978
sg904
g1412
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1210
sg895
g1206
sg910
g1217
sg904
g1214
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1392
sg895
g1388
sg910
g1399
sg904
g1396
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1210
sg895
g1493
sg910
g1217
sg904
g1500
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g1325
sg895
g1315
sg910
g1319
sg904
g1323
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g954
sg895
g1562
sg910
g961
sg904
g1569
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1056
sg895
g1052
sg910
g1063
sg904
g1060
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g1480
sg895
g1476
sg910
g1487
sg904
g1484
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1056
sg895
g1052
sg910
g1063
sg904
g1060
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1287
sg895
g1283
sg910
g1294
sg904
g1291
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1480
sg895
g1685
sg910
g1487
sg904
g1692
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1325
sg895
g1547
sg910
g1319
sg904
g1554
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1105
sg895
g1101
sg910
g1112
sg904
g1109
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1270
sg895
g2339
sg910
g1277
sg904
g2346
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1005
sg895
g1590
sg910
g1012
sg904
g1597
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1045
sg895
g1086
sg910
g1039
sg904
g1093
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1392
sg895
g1448
sg910
g1399
sg904
g1455
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1005
sg895
g1001
sg910
g1012
sg904
g1009
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1480
sg895
g1476
sg910
g1487
sg904
g1484
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1180
sg895
g1223
sg910
g1187
sg904
g1230
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g937
sg895
g2458
sg910
g944
sg904
g2465
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1180
sg895
g1223
sg910
g1187
sg904
g1230
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1270
sg895
g2339
sg910
g1277
sg904
g2346
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g926
sg895
g2499
sg910
g920
sg904
g2506
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1150
sg895
g1300
sg910
g1157
sg904
g1307
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1325
sg895
g1315
sg910
g1319
sg904
g1323
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1073
sg895
g1069
sg910
g1080
sg904
g1077
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1270
sg895
g2339
sg910
g1277
sg904
g2346
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1392
sg895
g1388
sg910
g1399
sg904
g1396
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g926
sg895
g2499
sg910
g920
sg904
g2506
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1270
sg895
g1266
sg910
g1277
sg904
g1274
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1005
sg895
g1590
sg910
g1012
sg904
g1597
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1022
sg895
g1238
sg910
g1029
sg904
g1245
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g937
sg895
g2458
sg910
g944
sg904
g2465
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1325
sg895
g1315
sg910
g1319
sg904
g1323
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1270
sg895
g2339
sg910
g1277
sg904
g2346
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1105
sg895
g1420
sg910
g1112
sg904
g1427
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1210
sg895
g1493
sg910
g1217
sg904
g1500
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1270
sg895
g1266
sg910
g1277
sg904
g1274
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1022
sg895
g1238
sg910
g1029
sg904
g1245
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g908
sg895
g1360
sg910
g900
sg904
g1367
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1045
sg895
g1035
sg910
g1039
sg904
g1043
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1150
sg895
g1300
sg910
g1157
sg904
g1307
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1287
sg895
g1283
sg910
g1294
sg904
g1291
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g971
sg895
g1405
sg910
g978
sg904
g1412
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g926
sg895
g2499
sg910
g920
sg904
g2506
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g971
sg895
g1405
sg910
g978
sg904
g1412
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g1180
sg895
g1176
sg910
g1187
sg904
g1184
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1287
sg895
g1283
sg910
g1294
sg904
g1291
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g937
sg895
g933
sg910
g944
sg904
g941
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1073
sg895
g1069
sg910
g1080
sg904
g1077
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g926
sg895
g2499
sg910
g920
sg904
g2506
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1056
sg895
g1052
sg910
g1063
sg904
g1060
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1180
sg895
g1176
sg910
g1187
sg904
g1184
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g908
sg895
g896
sg910
g900
sg904
g905
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1073
sg895
g1345
sg910
g1080
sg904
g1352
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g926
sg895
g2499
sg910
g920
sg904
g2506
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g971
sg895
g1405
sg910
g978
sg904
g1412
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g937
sg895
g2458
sg910
g944
sg904
g2465
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1105
sg895
g1420
sg910
g1112
sg904
g1427
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1045
sg895
g1086
sg910
g1039
sg904
g1093
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1287
sg895
g1644
sg910
g1294
sg904
g1651
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1073
sg895
g1345
sg910
g1080
sg904
g1352
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1005
sg895
g1590
sg910
g1012
sg904
g1597
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1105
sg895
g1420
sg910
g1112
sg904
g1427
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1480
sg895
g1476
sg910
g1487
sg904
g1484
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g908
sg895
g1360
sg910
g900
sg904
g1367
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1045
sg895
g1035
sg910
g1039
sg904
g1043
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1287
sg895
g1283
sg910
g1294
sg904
g1291
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g937
sg895
g2458
sg910
g944
sg904
g2465
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1392
sg895
g1388
sg910
g1399
sg904
g1396
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1270
sg895
g1266
sg910
g1277
sg904
g1274
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1210
sg895
g1206
sg910
g1217
sg904
g1214
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1045
sg895
g1086
sg910
g1039
sg904
g1093
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1392
sg895
g1448
sg910
g1399
sg904
g1455
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1270
sg895
g2339
sg910
g1277
sg904
g2346
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1325
sg895
g1547
sg910
g1319
sg904
g1554
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g988
sg895
g984
sg910
g995
sg904
g992
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g937
sg895
g2458
sg910
g944
sg904
g2465
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1105
sg895
g1101
sg910
g1112
sg904
g1109
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1287
sg895
g1644
sg910
g1294
sg904
g1651
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1056
sg895
g1752
sg910
g1063
sg904
g1759
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1210
sg895
g1493
sg910
g1217
sg904
g1500
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1005
sg895
g1590
sg910
g1012
sg904
g1597
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1480
sg895
g1685
sg910
g1487
sg904
g1692
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1073
sg895
g1345
sg910
g1080
sg904
g1352
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g954
sg895
g950
sg910
g961
sg904
g958
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g971
sg895
g967
sg910
g978
sg904
g975
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1105
sg895
g1101
sg910
g1112
sg904
g1109
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g988
sg895
g1118
sg910
g995
sg904
g1125
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1056
sg895
g1752
sg910
g1063
sg904
g1759
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1287
sg895
g1644
sg910
g1294
sg904
g1651
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1480
sg895
g1685
sg910
g1487
sg904
g1692
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1150
sg895
g1146
sg910
g1157
sg904
g1154
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1325
sg895
g1315
sg910
g1319
sg904
g1323
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1287
sg895
g1644
sg910
g1294
sg904
g1651
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g926
sg895
g916
sg910
g920
sg904
g924
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1056
sg895
g1752
sg910
g1063
sg904
g1759
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1392
sg895
g1448
sg910
g1399
sg904
g1455
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g954
sg895
g1562
sg910
g961
sg904
g1569
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1325
sg895
g1547
sg910
g1319
sg904
g1554
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1022
sg895
g1018
sg910
g1029
sg904
g1026
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I209396048
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\xf8D\xa6\x0c`\xf7\xfd\x0c\xd0D\xa6\x0c\xe0#\xbf\x1b\xa8D\xa6\x0c\xe8E\xa6\x0c\xf8D\xa6\x0c\x08D\xa6\x0c\x00%\xbf\x1b\x98J\xa6\x0c\xf8D\xa6\x0cH\x8b\xa6\x0c`\xfa\xfd\x0c`\xf7\xfd\x0c`\xfc\xfd\x0c\xd0D\xa6\x0c\xb0K\xa6\x0c\xf8N\xa6\x0c\x10$\xbf\x1b\xe0#\xbf\x1bH\x8b\xa6\x0c\xf8N\xa6\x0c`\xfa\xfd\x0c`\xf7\xfd\x0c\xe0C\xa6\x0c`%\xbf\x1b\xe0C\xa6\x0c\xf8N\xa6\x0c\x80\x8b\xa6\x0c\xa8D\xa6\x0c`\xfc\xfd\x0c\x98J\xa6\x0c\x10K\xa6\x0c`\x8c\xa6\x0c@$\xbf\x1b`\xfa\xfd\x0c\x08D\xa6\x0c\xb8\x8b\xa6\x0cp$\xbf\x1b\xe0C\xa6\x0c(\x8c\xa6\x0c\xe0C\xa6\x0c0%\xbf\x1b\xf8D\xa6\x0c`\xf7\xfd\x0c\x98J\xa6\x0c\xd0D\xa6\x0c\xf8N\xa6\x0c\xb8\x8b\xa6\x0c@$\xbf\x1b`\xfa\xfd\x0c\x98J\xa6\x0c\xe0#\xbf\x1b`\x8c\xa6\x0c\x10K\xa6\x0c\x08D\xa6\x0c\xa8D\xa6\x0c`\xf7\xfd\x0cp$\xbf\x1b@$\xbf\x1b\x08D\xa6\x0c\x98J\xa6\x0c@\xfc\xfd\x0c`\xfc\xfd\x0c\xe8E\xa6\x0cXN\xa6\x0c@\xfc\xfd\x0c\xe8E\xa6\x0c`\xfc\xfd\x0c`\xfa\xfd\x0c\x80\x8b\xa6\x0cp$\xbf\x1b`\xf7\xfd\x0c\xe8E\xa6\x0c\xb8\x8b\xa6\x0c\xe8E\xa6\x0c@$\xbf\x1b\xe0C\xa6\x0c\x10$\xbf\x1b\xd0$\xbf\x1b\xa0L\xa6\x0c0%\xbf\x1b@$\xbf\x1b\x10$\xbf\x1b\xd0D\xa6\x0c`\xfa\xfd\x0c`\xfc\xfd\x0c\xf8N\xa6\x0cHO\xa6\x0cH\x8b\xa6\x0c\xf8D\xa6\x0c\xf8N\xa6\x0c\xe0C\xa6\x0cH\x8b\xa6\x0c\xb8\x8b\xa6\x0c\x10$\xbf\x1b\x08D\xa6\x0c\x10K\xa6\x0cH\x8b\xa6\x0c\xa8D\xa6\x0c(\x8c\xa6\x0c\xf8N\xa6\x0c\x10$\xbf\x1b\xe0C\xa6\x0c`\xf7\xfd\x0cH\x8b\xa6\x0c\x10K\xa6\x0c\x90%\xbf\x1b\x10K\xa6\x0cp$\xbf\x1b\x00%\xbf\x1b\x98\x8c\xa6\x0c\x80\x8b\xa6\x0c@$\xbf\x1bp$\xbf\x1bH\x8b\xa6\x0c\x08D\xa6\x0c@\xfc\xfd\x0cp$\xbf\x1b\x80\x8b\xa6\x0c`\xfa\xfd\x0c\xd0$\xbf\x1b\xe0#\xbf\x1b`\xfc\xfd\x0c\xa8D\xa6\x0c0%\xbf\x1b\xc0%\xbf\x1b`\xf7\xfd\x0c\x10K\xa6\x0c\x80\x8b\xa6\x0c`%\xbf\x1b\xb8\x8b\xa6\x0c`\xfa\xfd\x0c\x98J\xa6\x0c\x10$\xbf\x1b\xb0K\xa6\x0cp$\xbf\x1b`\xfc\xfd\x0c\xd0$\xbf\x1b\xc0%\xbf\x1b\x80\x8b\xa6\x0c@\xfc\xfd\x0c\xf0\x8b\xa6\x0c\x98J\xa6\x0c\xe8E\xa6\x0c\xe0#\xbf\x1b\xf8N\xa6\x0cp$\xbf\x1b\x98J\xa6\x0c\x90%\xbf\x1b\x08D\xa6\x0c\xe8E\xa6\x0c`\xfa\xfd\x0c`\xfc\xfd\x0c\xf0\x8b\xa6\x0c\xa0$\xbf\x1b\xf8N\xa6\x0c(G\xa6\x0c\x80\x8b\xa6\x0cp$\xbf\x1b\xe0#\xbf\x1b\xb8\x8b\xa6\x0c\x98J\xa6\x0c\xd0D\xa6\x0cp$\xbf\x1b\xa8D\xa6\x0c\xd0D\xa6\x0c\xb0K\xa6\x0c\xe8E\xa6\x0c\xa0$\xbf\x1b\xa0L\xa6\x0c\xf0\x8b\xa6\x0c\xc0O\xa6\x0c@\xfc\xfd\x0c\x80\x8b\xa6\x0c\xe8E\xa6\x0cH\x8b\xa6\x0c`\xf7\xfd\x0c@\xfc\xfd\x0c\xa8D\xa6\x0c\xb8\x8b\xa6\x0c\x10K\xa6\x0c\xb8\x8b\xa6\x0c\xf8D\xa6\x0c\xc0%\xbf\x1b\xa0$\xbf\x1b@$\xbf\x1b`\xf7\xfd\x0c\xe0C\xa6\x0c\xe8E\xa6\x0c\xb0K\xa6\x0c\xd0D\xa6\x0c\x10$\xbf\x1b\xa8D\xa6\x0c\xe0#\xbf\x1b@\xfc\xfd\x0cH\x8b\xa6\x0c@$\xbf\x1b@\xfc\xfd\x0c\xb8\x8b\xa6\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' \x97\xb7\x1b\xe0\x95\xb7\x1b@\x97\xb7\x1b\xe0\x96\xb7\x1b\x00\x98\xb7\x1b\xc0\x96\xb7\x1b`\x95\xb7\x1b\x00\x97\xb7\x1b\xe0\x97\xb7\x1b \x96\xb7\x1b\x00\x96\xb7\x1b\x80\x96\xb7\x1b\xc0\x98\xb7\x1b`\x98\xb7\x1b`\x99\xb7\x1b\xa0\x96\xb7\x1b \x98\xb7\x1b@\x99\xb7\x1b\xe0\x98\xb7\x1b\x80\x98\xb7\x1b\xa0\x98\xb7\x1b\xa0\x99\xb7\x1b\x80\x97\xb7\x1b\xc0\x99\xb7\x1b\xa0\x95\xb7\x1b \x9a\xb7\x1b@\x96\xb7\x1b\xe0\x99\xb7\x1b`\x96\xb7\x1b\xa0\x97\xb7\x1b\xc0\x9a\xb7\x1b\xe0\x9a\xb7\x1b`\x9b\xb7\x1b@\x98\xb7\x1b\x00\x9a\xb7\x1b\xa0\x9a\xb7\x1b\x80\x95\xb7\x1b\xc0\x97\xb7\x1b \x9c\xb7\x1b\xc0\x95\xb7\x1b@\x9a\xb7\x1b \x99\xb7\x1b\xe0\x9b\xb7\x1b@\x9b\xb7\x1b\xa0\x9b\xb7\x1b\x00\x9d\xb7\x1b\x00\x9c\xb7\x1b\x80\x9c\xb7\x1b@\x9d\xb7\x1b \x9d\xb7\x1b@\x9c\xb7\x1b\xc0\x9d\xb7\x1b`\x97\xb7\x1b`\x9d\xb7\x1b\xa0\x9d\xb7\x1b@\x9e\xb7\x1b\x80\x99\xb7\x1b \x9e\xb7\x1b\x00\x99\xb7\x1b\xe0\x9c\xb7\x1b\x80\x9e\xb7\x1b\x00\x9e\xb7\x1b\xc0\x9e\xb7\x1b\xc0\x9b\xb7\x1b\x80\x9a\xb7\x1b`\x9e\xb7\x1b\x80\x9f\xb7\x1b`\x9c\xb7\x1b\xa0\x9f\xb7\x1b\xa0\x9c\xb7\x1b\xc0\x9c\xb7\x1b\x00\x9f\xb7\x1b\xc0\x9f\xb7\x1b\xa0\x9e\xb7\x1b\x80\x9b\xb7\x1b\xe0\x9f\xb7\x1b \x9b\xb7\x1b@\x9f\xb7\x1b\xe0\x9e\xb7\x1b`\x9f\xb7\x1b\xa0\xe9\xbd\x04\x00\xe9\xbd\x04\xe0\x9d\xb7\x1b`\xed\xbd\x04 \xe2\xdd\x1b\xa0\xe0\xdd\x1b`\xe1\xdd\x1b\x00\xe1\xdd\x1b@\xe0\xdd\x1b\xc0\xe1\xdd\x1b \xe1\xdd\x1b\xa0\xe1\xdd\x1b@\xe2\xdd\x1b\xa0\xe2\xdd\x1b`\xe2\xdd\x1b\x80\xe2\xdd\x1b\xc0\xe2\xdd\x1b\xe0\xe2\xdd\x1b@\xe3\xdd\x1b`\xe3\xdd\x1b\x80\xe0\xdd\x1b \xe0\xdd\x1b\x80\xe3\xdd\x1b\xa0\xe3\xdd\x1b\xc0\xe3\xdd\x1b \xe4\xdd\x1b@\xe4\xdd\x1b`\xe4\xdd\x1b\x80\xe4\xdd\x1b\xa0\xe4\xdd\x1b \xe3\xdd\x1b\xe0\xe4\xdd\x1b\xc0\xe4\xdd\x1b\xe0\xe0\xdd\x1b\x00\xe5\xdd\x1b`\xe5\xdd\x1b\x80\xe5\xdd\x1b\xe0\xe3\xdd\x1b\xc0\xe5\xdd\x1b\xa0\xe5\xdd\x1b\x00\xe6\xdd\x1b \xe6\xdd\x1b@\xe1\xdd\x1b\x00\xe3\xdd\x1b\x80\xe6\xdd\x1b`\xe6\xdd\x1b \xe5\xdd\x1b\xa0\xe6\xdd\x1b\xc0\xe6\xdd\x1b\xe0\xe6\xdd\x1b\x00\xe7\xdd\x1b`\xe7\xdd\x1b@\xe7\xdd\x1b@\xe6\xdd\x1b\x80\xe7\xdd\x1b\xe0\xe7\xdd\x1b\xc0\xe7\xdd\x1b \xe8\xdd\x1b\x00\xe8\xdd\x1b\xc0\xe0\xdd\x1b\x80\xe8\xdd\x1b`\xe8\xdd\x1b\xc0\xe8\xdd\x1b\xa0\xe8\xdd\x1b\x80\xe1\xdd\x1b\x00\xe9\xdd\x1b@\xe9\xdd\x1b\x00\xe4\xdd\x1b\xa0\xe7\xdd\x1b\xa0\xe9\xdd\x1b\xe0\xe8\xdd\x1b\xe0\xe5\xdd\x1b@\xe8\xdd\x1b \xea\xdd\x1b\x00\xea\xdd\x1b@\xe5\xdd\x1b@\xea\xdd\x1b\xa0\xea\xdd\x1b\x80\xea\xdd\x1b\xe0\xea\xdd\x1b\x00\xeb\xdd\x1b \xeb\xdd\x1b@\xeb\xdd\x1b\x00\xe2\xdd\x1b\x80\xeb\xdd\x1b\xa0\xeb\xdd\x1b`\xea\xdd\x1b\xe0\xe1\xdd\x1b\xc0\xeb\xdd\x1b \xec\xdd\x1b@\xec\xdd\x1b \xe7\xdd\x1b`\xe9\xdd\x1b`\xec\xdd\x1b\x80\xec\xdd\x1b\xe0\xec\xdd\x1b\xc0\xec\xdd\x1b \xed\xdd\x1b@\xed\xdd\x1b\x00\xec\xdd\x1b\xc0\xea\xdd\x1b`\xed\xdd\x1b\x00\xee\xdd\x1b\x80\xed\xdd\x1b\xc0\xed\xdd\x1b \xee\xdd\x1b@\xee\xdd\x1b\xc0\xe9\xdd\x1b\x80\xee\xdd\x1b`\xee\xdd\x1b\xe0\xeb\xdd\x1b\xe0\xee\xdd\x1b\xc0\xee\xdd\x1b\xa0\xec\xdd\x1b \xe9\xdd\x1b\xa0\xee\xdd\x1b\x00\xef\xdd\x1b\x80\xef\xdd\x1b\xa0\xed\xdd\x1b\xe0\xe9\xdd\x1b'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'\x83\x1c\xa2?\x97\xfd\x7f?\x1e+s?\x93\xc9L?\x86\tQ??H\x84?=\xde]?\x8at\x97?[\xd8]?\xffsw?\xa6\x98Y?[\xe3\x9d?\x98\x98Y?\xa6ef?\x91\x87\x88?\x840s?\xef\xd4]?\xb8p\xe6?\x07\x1db?\xa6\xa9j?+\xc3L?\rtw?\xe2X\x15?`}w?\xa81\x93?\x0f\xb9;?\xbf\x0bQ?\xe5\x87\x88?\x97\x83H?\xff\x16@?\xabtw?9+3?\x8c\xb3L?\xa5\xec\x0e@\x81SU?\x85\xdc]?\x15R\x95?\xf7\x1db?(\x99\x99?\xa2\t\x80?\xb3\x9d\x99?\x86\xd4]?\xff\xdb]?\xbf/3?cp7?\x85_3?\xe0vw?\xa9CD?\x81=\xa4? Y&?\x9a\xee.?B\x15@?\xf6CD?\xb6\x97\x99?&\x88Y?"<D?\xbda&?8H\xa4?\n\xde\x9d?\x87\x97Y? \xbc;?e\x1e\x82?Q\xd6]?j\x88H?\x1bJU?\x94\xbfL?\x94\x96\x99?\xe8\xf9??<t7?\x0b\xc8L?\xcc\x0f\x11?\x97\xa6\x8a?\x85 "?9\xfc??M\x99Y?g\x1f\xe2?\x9c\xa1*?\xb4\x1b\x82?\x94\xa1j?\x17\xc2j?\x81/3?.$"?|\xaa*?#\x85\x88?\x10v\x97?O\x8bH?\xe9\x19b?\x9a\x16b?QBD?5\x81\xa8?\xc6\x00\xb8@\xb1-3?\xfd13?%=\x84?\xe3c\xa6?3_f?+\xa3Y?\xb0\xa3{?K\xa4\xaa?\xc1\x88\x88?\x82\x10\x91?fP\x84?\x84\xc8\xac?\xa3!\x82?\xd2UU?\xd4\xc7\xcc?\x00UU?\x9f\x87\x88?\x14~\xc8?\xb9vw?\xb2\xbb;?d\x92Y?\xd1A\x84?\x00\xba\x9b?\x89Q\xd5?\x0e\x95\x99?F\xcdL?\x8d\x85\x88?\t\x1f\xc2?Qv\x97?(e&?\xe2O3?z\xd7]?\x89\x98Y?\xc0!"?\xc8\x94\xf9?\x9b\xab;?\xcb\x8dY?\xd7uH?0\x88H?\x90@t@f\x12@?\xe4\x00@?r\x86\x88?\xce\\&?\xbb!\x82?\xbc\xb6\xca?\xb1@D? \x9aY?\xab\xfcP?\x7f\x8bH?\x1a\xdb]?*\xa9j?j\x97Y? vw?\x11\xca\x8c?\x86+3?\xda\xba;?\xd3\xec\x8e?{\xe9.?\xb31\xb3?\xce\\&?\xf6\xe0\x1d?\xe2\xb7;?zM\xa4?D0\x03@\x19\x1ab?M\xa6*?Y\x92\x19?\xe9\xba*?\xdc\rQ?DB\x84?\xe0\xa5\xca?\xb0\xb8\xdb?\xc6\x1fR@\xd10s@\x0e\xd8]?\x97\xa4j@S`\x86?H\x86H?pv7?\x92\xc6\x8c?1\xdd]?&\x1eb?\xf0k7?4\xba{?\xde\x8fY?k.3?5 b?_\xb0;?N\xc8L?\xdc\x16"?\x1dq7?\xdc\xbf;?\xaatH?\xe4\x0f\x11?\ns7?\xbb\xee\x1d?"-s?\xa1\xb7\x9b?Bvw?\xa6\xed.?:\x1d\x82?\xf3\xc9L?0\xdd\x1d?\x9e\x86H?\x98\xe5.?L\x1e"?\xad\x18@?\xe2\x1d"?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'8Y\xef\x04`^\xef\x04\xb8q\xf7\x04\x90{\xf7\x04\xb8w\xf7\x04Ps\xf7\x04`{\xf7\x04\xe0s\xf7\x04\xa8{\xf7\x040{\xf7\x04\xe0\x7f\xf7\x04\x98\x7f\xf7\x04\xc8s\xf7\x04\x90x\xf7\x04 \x7f\xf7\x04\x90~\xf7\x04\x00{\xf7\x04\x80|\xf7\x04\x80y\xf7\x04\xc0x\xf7\x04 p\xf7\x04`x\xf7\x04`r\xf7\x048p\xf7\x04\xd8x\xf7\x04\x10q\xf7\x04hv\xf7\x04 |\xf7\x04\x80p\xf7\x04\x10z\xf7\x04\xe8t\xf7\x04\xf8|\xf7\x04\xc8|\xf7\x04\xa0z\xf7\x048v\xf7\x04\xf8p\xf7\x04\x08y\xf7\x04\xd8{\xf7\x04\xc8p\xf7\x04\x00r\xf7\x04\xa8x\xf7\x04\xc0r\xf7\x04\xc8v\xf7\x04Py\xf7\x04\x00u\xf7\x048\x7f\xf7\x048s\xf7\x048y\xf7\x04\xf8v\xf7\x04\xa8~\xf7\x04`~\xf7\x04(z\xf7\x04(w\xf7\x04\xa0t\xf7\x04\xb0p\xf7\x04@}\xf7\x04pw\xf7\x04\x90u\xf7\x04\xe8q\xf7\x04\x88}\xf7\x04P\x7f\xf7\x04\xc8\x7f\xf7\x04(q\xf7\x04\x98s\xf7\x04xx\xf7\x040u\xf7\x04xu\xf7\x04@z\xf7\x04\xd8r\xf7\x04\xd8~\xf7\x04\xd8u\xf7\x04\x08s\xf7\x04\xf8s\xf7\x04\xe0v\xf7\x040r\xf7\x04\xf0x\xf7\x04(t\xf7\x04\xa8\xf2a\x03@\xcd\xee\x04\xa0\xc1\xee\x04\x08\xcf\xee\x048\xc6\xee\x04h\xc0\xee\x04P\xc0\xee\x04x\xce\xee\x04\xd8\xc2\xee\x04\xe8\xc7\xee\x04\x88\xc7\xee\x040\xce\xee\x04\x10\xcd\xee\x04\x80\xcc\xee\x04 \xc9\xee\x04\xc8\xc6\xee\x04\xe0\xcf\xee\x04\x98\xc6\xee\x04\xd8\xc5\xee\x04X\xcd\xee\x048\xc9\xee\x04@\xc4\xee\x04\xd0\xca\xee\x04\xd0\xc4\xee\x04\xc0\xc2\xee\x04\x08\xc9\xee\x04`\xce\xee\x04\xa8\xc5\xee\x04\xe8\xcd\xee\x04x\xc8\xee\x048\xc0\xee\x040\xc8\xee\x04P\xc9\xee\x04\x98\xcf\xee\x04\x88\xcd\xee\x04p\xca\xee\x04H\xcb\xee\x04\x90\xc5\xee\x04\xc8\xc9\xee\x040\xc2\xee\x04@\xc7\xee\x04\xe0\xc0\xee\x04\xe0\xc6\xee\x04\x10\xc7\xee\x04 \x0c\xe7\x04\x00\x0e\xe7\x04\xa8\x0e\xe7\x04\xe8\r\xe7\x04\xf0\x05\xe7\x04\xe8\x07\xe7\x04\x80\t\xe7\x04\x88\x01\xe7\x04\x80\x0c\xe7\x04p\r\xe7\x04\xe0\x00\xe7\x04P\x00\xe7\x04`\x0e\xe7\x04\x10\x07\xe7\x04P\t\xe7\x04(\n\xe7\x04\xe8\n\xe7\x04H\x0e\xe7\x04`\x05\xe7\x04\xb0\x0c\xe7\x04(\x07\xe7\x04\xf0\x0b\xe7\x04\xe0\t\xe7\x04\x80\x0f\xe7\x04X\x07\xe7\x04x\x02\xe7\x04P\x03\xe7\x04\xf8\x03\xe7\x04\x18\x02\xe7\x04\xd8\x08\xe7\x04p\x04\xe7\x04\xa0\n\xe7\x048\x03\xe7\x04\x88\r\xe7\x04\x08\x0c\xe7\x04\xb0|\xf7\x04\x88w\xf7\x04H~\xf7\x04\xc0u\xf7\x04\xc0~\xf7\x04\x80s\xf7\x04\xa0w\xf7\x04Xw\xf7\x04\x88t\xf7\x04Hx\xf7\x04xr\xf7\x04\xb8t\xf7\x04\x88z\xf7\x04\x18{\xf7\x04Hu\xf7\x04P|\xf7\x04H{\xf7\x04\xc0{\xf7\x04Hr\xf7\x04\xf0{\xf7\x04\xb8}\xf7\x04\x90r\xf7\x04\xb0s\xf7\x04\xf0u\xf7\x04@w\xf7\x04\x80\x7f\xf7\x04\xf0~\xf7\x04`u\xf7\x04Xq\xf7\x04\xe8z\xf7\x04\xd0q\xf7\x04\x18~\xf7\x048|\xf7\x04\xb0\x7f\xf7\x04h\x7f\xf7\x04\xf8y\xf7\x04\x08|\xf7\x04\xa0q\xf7\x04Pv\xf7\x04x~\xf7\x04\xe0|\xf7\x04h|\xf7\x04\x00x\xf7\x040~\xf7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3638
sg3633
g3739
sg3647
g3648
sg3642
g3746
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3781
sg3633
g3771
sg3647
g3775
sg3642
g3779
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3638
sg3633
g3739
sg3647
g3648
sg3642
g3746
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3839
sg3633
g3835
sg3647
g3846
sg3642
g3843
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3658
sg3633
g3852
sg3647
g3665
sg3642
g3859
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3675
sg3633
g3884
sg3647
g3682
sg3642
g3891
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3638
sg3633
g3739
sg3647
g3648
sg3642
g3746
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3933
sg3633
g3929
sg3647
g3940
sg3642
g3937
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3916
sg3633
g3972
sg3647
g3923
sg3642
g3979
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3839
sg3633
g3835
sg3647
g3846
sg3642
g3843
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3658
sg3633
g3852
sg3647
g3665
sg3642
g3859
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3781
sg3633
g4013
sg3647
g3775
sg3642
g4020
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4038
sg3633
g4028
sg3647
g4032
sg3642
g4036
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3781
sg3633
g4013
sg3647
g3775
sg3642
g4020
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3916
sg3633
g3972
sg3647
g3923
sg3642
g3979
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4075
sg3633
g4071
sg3647
g4082
sg3642
g4079
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3709
sg3633
g4088
sg3647
g3716
sg3642
g4095
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3871
sg3633
g4103
sg3647
g3878
sg3642
g4110
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g4158
sg3633
g4148
sg3647
g4152
sg3642
g4156
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4038
sg3633
g4165
sg3647
g4032
sg3642
g4172
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3839
sg3633
g3835
sg3647
g3846
sg3642
g3843
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3758
sg3633
g4193
sg3647
g3765
sg3642
g4200
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g4212
sg3633
g4208
sg3647
g4219
sg3642
g4216
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4229
sg3633
g4225
sg3647
g4236
sg3642
g4233
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3781
sg3633
g3771
sg3647
g3775
sg3642
g3779
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3781
sg3633
g3771
sg3647
g3775
sg3642
g3779
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3933
sg3633
g3929
sg3647
g3940
sg3642
g3937
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3638
sg3633
g3739
sg3647
g3648
sg3642
g3746
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3675
sg3633
g3884
sg3647
g3682
sg3642
g3891
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g4212
sg3633
g4359
sg3647
g4219
sg3642
g4366
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g4038
sg3633
g4028
sg3647
g4032
sg3642
g4036
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3839
sg3633
g4387
sg3647
g3846
sg3642
g4394
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3692
sg3633
g4415
sg3647
g3699
sg3642
g4422
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4158
sg3633
g4430
sg3647
g4152
sg3642
g4437
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g4229
sg3633
g4497
sg3647
g4236
sg3642
g4504
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4038
sg3633
g4165
sg3647
g4032
sg3642
g4172
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3758
sg3633
g4193
sg3647
g3765
sg3642
g4200
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3792
sg3633
g4538
sg3647
g3799
sg3642
g4545
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4158
sg3633
g4148
sg3647
g4152
sg3642
g4156
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g3822
sg3633
g4592
sg3647
g3829
sg3642
g4599
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g4158
sg3633
g4148
sg3647
g4152
sg3642
g4156
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3726
sg3633
g4620
sg3647
g3733
sg3642
g4627
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3871
sg3633
g4103
sg3647
g3878
sg3642
g4110
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3839
sg3633
g3835
sg3647
g3846
sg3642
g3843
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4075
sg3633
g4661
sg3647
g4082
sg3642
g4668
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g4229
sg3633
g4225
sg3647
g4236
sg3642
g4233
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3658
sg3633
g3852
sg3647
g3665
sg3642
g3859
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g4212
sg3633
g4208
sg3647
g4219
sg3642
g4216
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3726
sg3633
g4620
sg3647
g3733
sg3642
g4627
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g4038
sg3633
g4028
sg3647
g4032
sg3642
g4036
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3781
sg3633
g3771
sg3647
g3775
sg3642
g3779
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3933
sg3633
g3929
sg3647
g3940
sg3642
g3937
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3758
sg3633
g4193
sg3647
g3765
sg3642
g4200
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3709
sg3633
g4088
sg3647
g3716
sg3642
g4095
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3933
sg3633
g4806
sg3647
g3940
sg3642
g4813
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g4038
sg3633
g4165
sg3647
g4032
sg3642
g4172
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g3933
sg3633
g3929
sg3647
g3940
sg3642
g3937
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3675
sg3633
g3884
sg3647
g3682
sg3642
g3891
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g3839
sg3633
g4387
sg3647
g3846
sg3642
g4394
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g3871
sg3633
g4103
sg3647
g3878
sg3642
g4110
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3916
sg3633
g3972
sg3647
g3923
sg3642
g3979
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3839
sg3633
g4387
sg3647
g3846
sg3642
g4394
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g3822
sg3633
g4592
sg3647
g3829
sg3642
g4599
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3916
sg3633
g3972
sg3647
g3923
sg3642
g3979
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3781
sg3633
g3771
sg3647
g3775
sg3642
g3779
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4212
sg3633
g4359
sg3647
g4219
sg3642
g4366
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3933
sg3633
g3929
sg3647
g3940
sg3642
g3937
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3758
sg3633
g4193
sg3647
g3765
sg3642
g4200
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3822
sg3633
g4592
sg3647
g3829
sg3642
g4599
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3933
sg3633
g4806
sg3647
g3940
sg3642
g4813
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3781
sg3633
g4013
sg3647
g3775
sg3642
g4020
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4135
sg3633
g5133
sg3647
g4142
sg3642
g5140
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4075
sg3633
g4071
sg3647
g4082
sg3642
g4079
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4135
sg3633
g5133
sg3647
g4142
sg3642
g5140
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4229
sg3633
g4497
sg3647
g4236
sg3642
g4504
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3781
sg3633
g4013
sg3647
g3775
sg3642
g4020
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g4212
sg3633
g4359
sg3647
g4219
sg3642
g4366
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4075
sg3633
g4661
sg3647
g4082
sg3642
g4668
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4038
sg3633
g4165
sg3647
g4032
sg3642
g4172
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4229
sg3633
g4497
sg3647
g4236
sg3642
g4504
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3822
sg3633
g3818
sg3647
g3829
sg3642
g3826
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3758
sg3633
g4193
sg3647
g3765
sg3642
g4200
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4158
sg3633
g4430
sg3647
g4152
sg3642
g4437
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g4229
sg3633
g4497
sg3647
g4236
sg3642
g4504
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4075
sg3633
g4071
sg3647
g4082
sg3642
g4079
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3839
sg3633
g4387
sg3647
g3846
sg3642
g4394
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3692
sg3633
g4415
sg3647
g3699
sg3642
g4422
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3871
sg3633
g4103
sg3647
g3878
sg3642
g4110
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3709
sg3633
g4088
sg3647
g3716
sg3642
g4095
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3933
sg3633
g4806
sg3647
g3940
sg3642
g4813
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g4135
sg3633
g5133
sg3647
g4142
sg3642
g5140
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g4135
sg3633
g5133
sg3647
g4142
sg3642
g5140
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4075
sg3633
g4661
sg3647
g4082
sg3642
g4668
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g4038
sg3633
g4028
sg3647
g4032
sg3642
g4036
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4212
sg3633
g4208
sg3647
g4219
sg3642
g4216
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3839
sg3633
g3835
sg3647
g3846
sg3642
g3843
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3792
sg3633
g4538
sg3647
g3799
sg3642
g4545
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3933
sg3633
g4806
sg3647
g3940
sg3642
g4813
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g4229
sg3633
g4225
sg3647
g4236
sg3642
g4233
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3871
sg3633
g4103
sg3647
g3878
sg3642
g4110
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g4075
sg3633
g4661
sg3647
g4082
sg3642
g4668
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g4158
sg3633
g4430
sg3647
g4152
sg3642
g4437
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3675
sg3633
g3884
sg3647
g3682
sg3642
g3891
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3792
sg3633
g3788
sg3647
g3799
sg3642
g3796
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3692
sg3633
g4415
sg3647
g3699
sg3642
g4422
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3916
sg3633
g3972
sg3647
g3923
sg3642
g3979
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4229
sg3633
g4497
sg3647
g4236
sg3642
g4504
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3792
sg3633
g4538
sg3647
g3799
sg3642
g4545
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g4075
sg3633
g4071
sg3647
g4082
sg3642
g4079
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3758
sg3633
g3754
sg3647
g3765
sg3642
g3762
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3726
sg3633
g3722
sg3647
g3733
sg3642
g3730
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3839
sg3633
g4387
sg3647
g3846
sg3642
g4394
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3871
sg3633
g3867
sg3647
g3878
sg3642
g3875
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3792
sg3633
g4538
sg3647
g3799
sg3642
g4545
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g4075
sg3633
g4661
sg3647
g4082
sg3642
g4668
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g4229
sg3633
g4225
sg3647
g4236
sg3642
g4233
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3692
sg3633
g4415
sg3647
g3699
sg3642
g4422
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4212
sg3633
g4359
sg3647
g4219
sg3642
g4366
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3792
sg3633
g4538
sg3647
g3799
sg3642
g4545
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g4229
sg3633
g4225
sg3647
g4236
sg3642
g4233
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3709
sg3633
g4088
sg3647
g3716
sg3642
g4095
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3675
sg3633
g3884
sg3647
g3682
sg3642
g3891
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3726
sg3633
g4620
sg3647
g3733
sg3642
g4627
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3709
sg3633
g4088
sg3647
g3716
sg3642
g4095
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3916
sg3633
g3912
sg3647
g3923
sg3642
g3920
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g4158
sg3633
g4148
sg3647
g4152
sg3642
g4156
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g4075
sg3633
g4071
sg3647
g4082
sg3642
g4079
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3726
sg3633
g4620
sg3647
g3733
sg3642
g4627
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3822
sg3633
g4592
sg3647
g3829
sg3642
g4599
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3658
sg3633
g3852
sg3647
g3665
sg3642
g3859
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g4158
sg3633
g4430
sg3647
g4152
sg3642
g4437
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4212
sg3633
g4208
sg3647
g4219
sg3642
g4216
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4135
sg3633
g4131
sg3647
g4142
sg3642
g4139
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g4212
sg3633
g4208
sg3647
g4219
sg3642
g4216
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g4135
sg3633
g5133
sg3647
g4142
sg3642
g5140
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g4038
sg3633
g4028
sg3647
g4032
sg3642
g4036
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3658
sg3633
g3852
sg3647
g3665
sg3642
g3859
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3781
sg3633
g4013
sg3647
g3775
sg3642
g4020
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g3726
sg3633
g4620
sg3647
g3733
sg3642
g4627
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3638
sg3633
g3739
sg3647
g3648
sg3642
g3746
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3933
sg3633
g4806
sg3647
g3940
sg3642
g4813
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3692
sg3633
g4415
sg3647
g3699
sg3642
g4422
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4158
sg3633
g4148
sg3647
g4152
sg3642
g4156
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3822
sg3633
g4592
sg3647
g3829
sg3642
g4599
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g4038
sg3633
g4165
sg3647
g4032
sg3642
g4172
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g4158
sg3633
g4430
sg3647
g4152
sg3642
g4437
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4212
sg3633
g4359
sg3647
g4219
sg3642
g4366
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I209396048
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'`\x9b\x03\x1cP\x9c\x03\x1c \x81\x04\x1c`\x9b\x03\x1c\x90\x9b\x03\x1c`\x9b\x03\x1c\x98u\x04\x1c\xc0u\x04\x1c@\x81\x04\x1c\xa0\x81\x04\x1c\xe8u\x04\x1c\x80\x81\x04\x1c\x90\x9b\x03\x1c\x10v\x04\x1c\xc8\x90\x04\x1c\x10v\x04\x1c8v\x04\x1c\xe8u\x04\x1c\x10v\x04\x1c\x80\x9c\x03\x1c\xc0\x9b\x03\x1c\xa0w\x04\x1c \x81\x04\x1cP\x9c\x03\x1c@\x9d\x03\x1c\xc0\x9b\x03\x1cp\x91\x04\x1c\xc8\x90\x04\x1c`v\x04\x1c\x88v\x04\x1c`\x9b\x03\x1c\xf0\x9b\x03\x1c\xc8\x90\x04\x1c`\x9b\x03\x1c\xc0u\x04\x1c\xb0v\x04\x1c\xd8v\x04\x1c\xa0w\x04\x1c\xc0u\x04\x1c\x80\x81\x04\x1c\x80\x9c\x03\x1c\xd8v\x04\x1c\x00\x91\x04\x1c\x88v\x04\x1c\x80\x81\x04\x1c\x10v\x04\x1c\x00\x91\x04\x1c\xc0\x9b\x03\x1c\x98u\x04\x1c\xb0v\x04\x1c8v\x04\x1c`\x81\x04\x1c`v\x04\x1c\xa8\x91\x04\x1c\xa0\x81\x04\x1c\xc8\x90\x04\x1c\xf0\x9b\x03\x1c\xc8\x90\x04\x1c\xb0v\x04\x1c\xc0u\x04\x1c\xc0\x9b\x03\x1c\x10v\x04\x1c\xd8v\x04\x1c\x98u\x04\x1cP\x9c\x03\x1c\x90\x9b\x03\x1c@\x81\x04\x1c\xc0\x9b\x03\x1c\xc8\x90\x04\x1c\xc0\x81\x04\x1c\x90\x9b\x03\x1c@\x81\x04\x1c\x10\x9d\x03\x1c\x80\x81\x04\x1c\x10v\x04\x1c\xb0v\x04\x1c\x10v\x04\x1c8v\x04\x1c\x00\x91\x04\x1c8\x91\x04\x1c\x10v\x04\x1c\xb0v\x04\x1c\x00\x91\x04\x1c\x10\x9d\x03\x1c\x00\x91\x04\x1c\xc0u\x04\x1c\x90\x90\x04\x1c`\x81\x04\x1c\x98u\x04\x1c \x81\x04\x1c\x00\x91\x04\x1c`\x81\x04\x1c@\x81\x04\x1c\x98u\x04\x1c\x90\x90\x04\x1c`v\x04\x1c\x10\x9d\x03\x1c \x81\x04\x1c\xb0v\x04\x1c\x90\x90\x04\x1c\xe0\x9c\x03\x1cPw\x04\x1c\xc0u\x04\x1c\xc8w\x04\x1c`\x81\x04\x1c\xf0\x9b\x03\x1c\x90\x90\x04\x1c`v\x04\x1c\x98u\x04\x1c\x88v\x04\x1c`\x9b\x03\x1c\xb0\x9c\x03\x1c`\x81\x04\x1c\x88v\x04\x1c\x80\x9c\x03\x1c\xc0\x9b\x03\x1c\xe8u\x04\x1c8\x91\x04\x1c\x90\x90\x04\x1c@\x9d\x03\x1c\xe0\x91\x04\x1c\x90\x9b\x03\x1c\xc0u\x04\x1c\xc0\x9b\x03\x1c\x88v\x04\x1c@\x81\x04\x1c\x10v\x04\x1c8v\x04\x1c\xc0\x81\x04\x1c\x90\x9b\x03\x1c \x9c\x03\x1c\x88v\x04\x1c\x98u\x04\x1c8\x91\x04\x1c8v\x04\x1c\xd8v\x04\x1c\x10v\x04\x1c\x80\x81\x04\x1c \x81\x04\x1c\xf0\x9b\x03\x1c\x88v\x04\x1c(w\x04\x1c\xb0v\x04\x1c\xe8u\x04\x1c`v\x04\x1c\xc8\x90\x04\x1cPw\x04\x1c`\x81\x04\x1c\xd8v\x04\x1c\xf0\x9b\x03\x1c@\x81\x04\x1c\xe0\x91\x04\x1c\xa0\x81\x04\x1c\xb0v\x04\x1c\xd8v\x04\x1c\x98u\x04\x1cp\x9d\x03\x1c\xc0u\x04\x1c8v\x04\x1c\xf0\x9b\x03\x1c@\x81\x04\x1cp\x9d\x03\x1c\x00\x91\x04\x1c\xa0\x81\x04\x1c\x80\x81\x04\x1c@\x9d\x03\x1c\x80\x9c\x03\x1c\xe8u\x04\x1c\x88v\x04\x1c\xe8u\x04\x1c\xb0v\x04\x1c\x80\x81\x04\x1c \x9c\x03\x1c\x00\x91\x04\x1c(w\x04\x1c8\x91\x04\x1c\xb0v\x04\x1cp\x9d\x03\x1c\xc8\x90\x04\x1c`\x9b\x03\x1c8v\x04\x1c`v\x04\x1c8v\x04\x1c\xe8u\x04\x1c\x98u\x04\x1c\xd8v\x04\x1c\xe8u\x04\x1c\xf0\x9b\x03\x1c\xe8u\x04\x1c\x90\x90\x04\x1c`\x9b\x03\x1c\xc8\x90\x04\x1c\x90\x90\x04\x1cp\x9d\x03\x1c@\x81\x04\x1c\xc8w\x04\x1c\xd8v\x04\x1c \x81\x04\x1cp\x91\x04\x1c\x80\x81\x04\x1c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@\x84\x04\x1c\x80\x83\x04\x1c\xe0\x82\x04\x1c`\x84\x04\x1c\xe0\x83\x04\x1c@\x83\x04\x1c\xa0\x83\x04\x1c\x00\x84\x04\x1c \x83\x04\x1c`\x82\x04\x1c \x84\x04\x1c\x80\x82\x04\x1c\xa0\x84\x04\x1c\xc0\x82\x04\x1c\x00\x85\x04\x1c`\x83\x04\x1c\xe0\x81\x04\x1c\xa0\x85\x04\x1c\xc0\x85\x04\x1c`\x85\x04\x1c\xe0\x85\x04\x1c\x80\x85\x04\x1c@\x85\x04\x1c\x00\x86\x04\x1c \x86\x04\x1c\x80\x86\x04\x1c`\x86\x04\x1c\xc0\x83\x04\x1c\xa0\x86\x04\x1c\xc0\x86\x04\x1c\xe0\x86\x04\x1c\x00\x87\x04\x1c \x87\x04\x1c\x80\x87\x04\x1c`\x87\x04\x1c\xc0\x87\x04\x1c\xa0\x87\x04\x1c\x00\x83\x04\x1c \x88\x04\x1c\x00\x88\x04\x1c`\x88\x04\x1c`\xe9\xbd\x04@\x87\x04\x1c@\x88\x04\x1c\xe0\x88\x04\x1c\xa0\x82\x04\x1c\xa0\x89\x04\x1c\xe0\x87\x04\x1c\xa0\x88\x04\x1c@\x89\x04\x1c`\x89\x04\x1c\xc0\x88\x04\x1c\x00\x8a\x04\x1c`\x8a\x04\x1c@\x86\x04\x1c\x80\x88\x04\x1c\xe0\x84\x04\x1c\xc0\x89\x04\x1c@\x82\x04\x1c \x8a\x04\x1c\x80\x8a\x04\x1c\xe0\x8a\x04\x1c\xe0\x89\x04\x1c@\x8b\x04\x1c \x82\x04\x1c\x80\x89\x04\x1c\x00\x89\x04\x1c\xc0\x8a\x04\x1c\x80\x84\x04\x1c\x00\x8b\x04\x1c@\x8a\x04\x1c`\x8c\x04\x1c \x89\x04\x1c\xa0\x8c\x04\x1c \x8b\x04\x1c\xe0\x8c\x04\x1c\xc0\x84\x04\x1c\xc0\x8b\x04\x1c@\x8c\x04\x1c\x80\x8b\x04\x1c \x85\x04\x1c\xe0\x8d\x04\x1c\xa0\x8b\x04\x1c\x00\x8d\x04\x1c\xa0\x8d\x04\x1c\xc0\x8d\x04\x1c\x00\x8c\x04\x1c\x80\x8d\x04\x1c\xe0\x8e\x04\x1c\x80\x8e\x04\x1c\xc0\x8e\x04\x1c`\x8d\x04\x1c \x8e\x04\x1c@\x8e\x04\x1c \x8c\x04\x1c\xc0\x8c\x04\x1c\x00\x8f\x04\x1c\xa0\x8e\x04\x1c\xc0\x8f\x04\x1c@\x8d\x04\x1c\xa0\x8f\x04\x1c`\x8e\x04\x1c`\x8b\x04\x1c@\x8f\x04\x1c \x8d\x04\x1c\xe0\x8f\x04\x1c\xa0\x8a\x04\x1c\x00\x8e\x04\x1c`\x8f\x04\x1c`\xef\xdd\x1b\x80\x8c\x04\x1c\xa0\xef\xdd\x1b\x80\xf0.\x1c@\xf2.\x1c@\xf0.\x1c\x80\xf1.\x1c \xf1.\x1c \xf0.\x1c\xe0\xf1.\x1c`\xf2.\x1c\xc0\xf2.\x1c\xe0\xf0.\x1c\xa0\xf0.\x1c\x80\xf2.\x1c\xa0\xf2.\x1c \xf3.\x1c\x00\xf3.\x1c`\xf3.\x1c@\xf3.\x1c\xc0\xf1.\x1c\xc0\xf3.\x1c\xa0\xf3.\x1c\x00\xf1.\x1c\xe0\xf3.\x1c\x00\xf4.\x1c`\xf4.\x1c\x80\xf4.\x1c\xa0\xf4.\x1c\xc0\xf4.\x1c\xe0\xf2.\x1c\x00\xf5.\x1c \xf5.\x1c\xa0\xf1.\x1c\x80\xf3.\x1c@\xf5.\x1c`\xf5.\x1c\x80\xf5.\x1c\xa0\xf5.\x1c\x00\xf6.\x1c\xe0\xf5.\x1c\xe0\xf4.\x1c`\xf6.\x1c@\xf6.\x1c@\xf1.\x1c\xc0\xf6.\x1c\xa0\xf6.\x1c\xc0\xf0.\x1c \xf7.\x1c\x00\xf7.\x1c`\xf7.\x1c@\xf7.\x1c\xa0\xf7.\x1c\x80\xf7.\x1c\x80\xf6.\x1c\xc0\xf7.\x1c \xf8.\x1c\x00\xf8.\x1c\xc0\xf5.\x1c\x80\xf8.\x1c`\xf8.\x1c\x00\xf2.\x1c\xa0\xf8.\x1c\x00\xf9.\x1c\xe0\xf8.\x1c\xe0\xf7.\x1c \xf9.\x1c\x80\xf9.\x1c`\xf9.\x1c\xe0\xf6.\x1c\xe0\xf9.\x1c\x00\xfa.\x1c \xfa.\x1c \xf2.\x1c`\xf0.\x1c\x80\xfa.\x1c\xa0\xfa.\x1c\xc0\xfa.\x1c@\xf8.\x1c\x00\xfb.\x1c\xe0\xfa.\x1c@\xfb.\x1c`\xfb.\x1c\xc0\xf8.\x1c\xa0\xfb.\x1c\x80\xfb.\x1c@\xf9.\x1c\xc0\xfb.\x1c\xe0\xfb.\x1c@\xfc.\x1c \xfc.\x1c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xbf{H?\xafTU?\xd3\x18b?:\xd9\x1d?b\x1fb?"\xee.?\xf8\xda]?8\x81H?t\xc6L?\xc6\x96\x99?\xc3pw?\x8f\xdc]?\xb3\xd7]?*\xdc]?\xee@\x84?\x92\xe8n?\xa8OU?[p\x86?\x1713?\xa6\xb6;?\x9d\xb2;?KJU?Hu7?\xf9\xaa*?\xbc\xfb??\xca\x80H?]\x0eQ?\xf7\xb8;?\xcd\x82\x19?\x0e\xc7L?\x9e\x91\x19?\xbb\x99Y?\x9a\x03@?\x8d\x7f\x08?\xc0V\x15?*\x96Y?`\xdd\x1d?v\x81H??\xc6\x0c?Q\xaa*?\xa0N\x15?X\xf7P?\x9a2D?\xe6\xbb;?n\x14"?;\xfb??\xac\xd4]?3\xbc;?W\x84Y?\xb7\xff??\xbc\xfd??"\xd4]?)\xdc.?\xd2lU?\x7f\xean?\xb5]f?\xab\xc7L?\x8e\xd9\x9d?\x07\xb9{?\x0eDD?\x8b\xf6.?[lw?,\xfa\x7f?\xfc\x13b?\xd1\xe2L?\x9333?\xcf\xc8L?,\xb7;?\x87d\x86?v\x87H?V5b?1O\xf5?\x16\x83H?\x14\xee.?8@\x84?\x063\x93?\xd7\xd4]?\x032s?\x1a\xc0L?-u\xb7?\x82\xa6*?6\x97Y?;\xfbP?\xca\xdd]?\x94\tQ?EAD?\x8c8"?\x1c\rQ?\xb7\xff??C\xf8??W\x80H?\xe7\xfb??\xac b?\x1c\xdc]?;\x0eQ?\xcb\nb?\xe9ef?\xf1mw?!&Q?\xf22s?\xe1\xb6{?4\x98\x99?\xe0e\x86?\xbe\xc3\x9b?~\x10Q?\xed\x85H?F\xf7\x7f?\xac\rb?ULU?\xca{f?\xa3\xe5n?\xf8\xedn?{\xca\xac?\x1e\xa8\n@\xff\xbfj?\xdd\xc8L?m\xda]?6+s?\xd9u\x97?*\xd9\x8c?,\x0e\x91?/\xdc]?\xc5\xda\x9d?\xfc\xeb.?a`f?\x0cp7?e!\x82?, \x82?]d\xa6?x>D?\xa77s?\xdc\x91\x19?\xc7\xe4L?\x93,s?8 \x82?\x8dO\xb5?^2s?o\xc6\xac?C b?<\xf1.?!\xfc??U13?N\x95Y?\xceu7?\xb9\xcd]?w\x83\x88?\xcc.s?\xc9\x07/?\xe8\x08Q?Q\xfc??\x07\xb3{?\xca\xb5;?\xd9s\x97?\x80\x00@?M\xbb;?U\x88\x88?9O&?G\x1c"?\xd2UU?\xe223?\xff\x0eQ?\xff\xca]?y)s?\xc2t7?\xa9\xb1;?/\x02/?\x96\xfd??\xf9\xd9\x9d?\x1ac&?\xbe\x94Y?5C\x84?\x0c\xdc\x1d?\xcab\x86?\xc4]\x86?\\#"?:\x1eb?\xb5\xe9.?\x8c^U?\x8dc&?$\x8dH?\xa8\xe9n?\xd9g7?h\xb6;?\x1bzw?6\xbd{?U&s?l0s?\x8c\x87\x88?\xd9-\x82?\x8763?\xa0t7?x2\x03@\xb0\xc7L?xJ\x95?\x85\x00@?\xd1*s?\xacy7?\xa6\x81H?D\x01@?@T\x95?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'\xc0\xeb\xe2\x04\xb0_k\x02\xc8\xef\xab\x0c\x80\xe0\xab\x0c\xe0\xec\xab\x0c@\xe7\xab\x0cX\xe1\xab\x0c\xe8\xe1\xab\x0c\x98\xe0\xab\x0cx\xee\xab\x0cx\xe8\xab\x0c\xf0\xee\xab\x0c\x00\xee\xab\x0c8\xef\xab\x0c\xe0\xef\xab\x0c\x98\xef\xab\x0c\x10\xed\xab\x0c\xd8\xeb\xab\x0c\xf0\xeb\xab\x0c\x98\xec\xab\x0c\xe0\xe9\xab\x0cH\xee\xab\x0c\x08\xe6\xab\x0ch\xe9\xab\x0c\x08\xe9\xab\x0c\x90\xe8\xab\x0ch\xe3\xab\x0c\xe0\xe3\xab\x0c\xa8\xe5\xab\x0c8\xec\xab\x0cP\xe9\xab\x0c\xb8\xea\xab\x0c\xa0\xed\xab\x0c\xf0\xe2\xab\x0c@\xed\xab\x0c\xd8\xee\xab\x0c\xb0\xe3\xab\x0cp\xed\xab\x0c\xe0\xe6\xab\x0cpd\xe7\x04\x90n\xe7\x04Xg\xe7\x04\xe0f\xe7\x048c\xe7\x04\xc8`\xe7\x04\xb8a\xe7\x04\xe8d\xe7\x04\xf8i\xe7\x04@j\xe7\x04\x80`\xe7\x04\x88g\xe7\x048l\xe7\x04Hk\xe7\x04\xb0i\xe7\x04\x10d\xe7\x04\x18n\xe7\x04xb\xe7\x04\xd0j\xe7\x04\xd8h\xe7\x04@d\xe7\x040n\xe7\x04\x98c\xe7\x04\xd8b\xe7\x04\x18h\xe7\x04@a\xe7\x04hf\xe7\x04\xa8h\xe7\x04He\xe7\x04\x90h\xe7\x04\xc0h\xe7\x048f\xe7\x04\xa0d\xe7\x04\xf8c\xe7\x04\x08i\xe7\x04\x18e\xe7\x04\xc8c\xe7\x04\xa8b\xe7\x04\x08l\xe7\x04\xe0c\xe7\x04\x88d\xe7\x04\xd0a\xe7\x04hi\xe7\x04\xc8i\xe7\x04h`\xe7\x04`k\xe7\x04\xf0k\xe7\x04Pc\xe7\x04\xe0i\xe7\x04Hh\xe7\x04\xc0e\xe7\x04\xb8d\xe7\x04\xb0`\xe7\x04\xa0g\xe7\x04\x98`\xe7\x04@g\xe7\x04pj\xe7\x04\xc8f\xe7\x040h\xe7\x04xk\xe7\x04\x00e\xe7\x04\xf0e\xe7\x04\xc0k\xe7\x04\x80f\xe7\x04\xe8a\xe7\x040e\xe7\x04\x00k\xe7\x04\x98i\xe7\x04 `\xe7\x04\x90k\xe7\x04@m\xe7\x04\x00n\xe7\x04xe\xe7\x04(m\xe7\x048i\xe7\x04\x08f\xe7\x04\xc0n\xe7\x04\xc8l\xe7\x04\xe0o\xe7\x04\x88j\xe7\x04\x80i\xe7\x04\x90b\xe7\x04\x18k\xe7\x04\x88m\xe7\x04\x88a\xe7\x04\xa0j\xe7\x04\xb0c\xe7\x04Pl\xe7\x048`\xe7\x048o\xe7\x04\xe8m\xe7\x04Hb\xe7\x04\x00h\xe7\x04\x80l\xe7\x04Pf\xe7\x04`n\xe7\x04 c\xe7\x04\x08o\xe7\x04`b\xe7\x04Xm\xe7\x04\xc0b\xe7\x04hl\xe7\x04\xa0a\xe7\x04\xc8o\xe7\x04\xf8l\xe7\x04\xe0l\xe7\x04 l\xe7\x04`h\xe7\x04\x10a\xe7\x04\xa0m\xe7\x04Xd\xe7\x04Xj\xe7\x04(g\xe7\x04\xd8n\xe7\x04\xb8j\xe7\x04\x10j\xe7\x04\xf0b\xe7\x04\x08c\xe7\x04\x80c\xe7\x04pg\xe7\x04\x80o\xe7\x04\x98l\xe7\x04 o\xe7\x04\x10g\xe7\x04\xd8k\xe7\x04Xa\xe7\x04Pi\xe7\x04\x90e\xe7\x04`e\xe7\x04 i\xe7\x04\x98f\xe7\x04pm\xe7\x04\xd0d\xe7\x04\xf8`\xe7\x04\xa8k\xe7\x04hc\xe7\x04\xe0`\xe7\x04xn\xe7\x04\xb8g\xe7\x04\xb0f\xe7\x04\xe8j\xe7\x04\xf0n\xe7\x04\xf8f\xe7\x04Hn\xe7\x04\xf0h\xe7\x04(j\xe7\x04ho\xe7\x04\xe8g\xe7\x04\xd0m\xe7\x04\xb8m\xe7\x04 f\xe7\x04\x98o\xe7\x04\x10m\xe7\x04xh\xe7\x04\xb0o\xe7\x04\xa8n\xe7\x04\xb0l\xe7\x040k\xe7\x04\xa8e\xe7\x04\xd0g\xe7\x04\x00b\xe7\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6402
sg6371
g6392
sg6385
g6396
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6475
sg6371
g6471
sg6385
g6482
sg6380
g6479
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6590
sg6371
g6586
sg6385
g6597
sg6380
g6594
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6607
sg6371
g6603
sg6385
g6614
sg6380
g6611
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6590
sg6371
g6620
sg6385
g6597
sg6380
g6627
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6590
sg6371
g6586
sg6385
g6597
sg6380
g6594
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6718
sg6371
g6708
sg6385
g6712
sg6380
g6716
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6402
sg6371
g6740
sg6385
g6396
sg6380
g6747
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6765
sg6371
g6755
sg6385
g6759
sg6380
g6763
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6695
sg6371
g6772
sg6385
g6702
sg6380
g6779
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6509
sg6371
g6787
sg6385
g6516
sg6380
g6794
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6607
sg6371
g6603
sg6385
g6614
sg6380
g6611
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6819
sg6371
g6815
sg6385
g6826
sg6380
g6823
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6836
sg6371
g6832
sg6385
g6843
sg6380
g6840
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6765
sg6371
g6755
sg6385
g6759
sg6380
g6763
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6607
sg6371
g6603
sg6385
g6614
sg6380
g6611
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6492
sg6371
g6901
sg6385
g6499
sg6380
g6908
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6937
sg6371
g6933
sg6385
g6944
sg6380
g6941
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6718
sg6371
g6950
sg6385
g6712
sg6380
g6957
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6492
sg6371
g6901
sg6385
g6499
sg6380
g6908
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6560
sg6371
g6978
sg6385
g6567
sg6380
g6985
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6445
sg6371
g6993
sg6385
g6452
sg6380
g7000
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6937
sg6371
g7008
sg6385
g6944
sg6380
g7015
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6718
sg6371
g6708
sg6385
g6712
sg6380
g6716
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6836
sg6371
g7036
sg6385
g6843
sg6380
g7043
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6590
sg6371
g6620
sg6385
g6597
sg6380
g6627
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6718
sg6371
g6950
sg6385
g6712
sg6380
g6957
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6475
sg6371
g6471
sg6385
g6482
sg6380
g6479
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6639
sg6371
g7129
sg6385
g6646
sg6380
g7136
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6532
sg6371
g7144
sg6385
g6526
sg6380
g7151
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6819
sg6371
g7159
sg6385
g6826
sg6380
g7166
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6607
sg6371
g7174
sg6385
g6614
sg6380
g7181
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6532
sg6371
g7144
sg6385
g6526
sg6380
g7151
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6607
sg6371
g7174
sg6385
g6614
sg6380
g7181
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6765
sg6371
g7215
sg6385
g6759
sg6380
g7222
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6607
sg6371
g7174
sg6385
g6614
sg6380
g7181
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6590
sg6371
g6620
sg6385
g6597
sg6380
g6627
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6937
sg6371
g7008
sg6385
g6944
sg6380
g7015
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6475
sg6371
g7308
sg6385
g6482
sg6380
g7315
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6402
sg6371
g6392
sg6385
g6396
sg6380
g6400
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6445
sg6371
g6993
sg6385
g6452
sg6380
g7000
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6607
sg6371
g7174
sg6385
g6614
sg6380
g7181
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6937
sg6371
g6933
sg6385
g6944
sg6380
g6941
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6509
sg6371
g6787
sg6385
g6516
sg6380
g6794
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6695
sg6371
g6772
sg6385
g6702
sg6380
g6779
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6560
sg6371
g6978
sg6385
g6567
sg6380
g6985
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6590
sg6371
g6620
sg6385
g6597
sg6380
g6627
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6920
sg6371
g7466
sg6385
g6927
sg6380
g7473
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6590
sg6371
g6586
sg6385
g6597
sg6380
g6594
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6718
sg6371
g6950
sg6385
g6712
sg6380
g6957
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6590
sg6371
g6586
sg6385
g6597
sg6380
g6594
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6718
sg6371
g6708
sg6385
g6712
sg6380
g6716
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6695
sg6371
g6772
sg6385
g6702
sg6380
g6779
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6718
sg6371
g6708
sg6385
g6712
sg6380
g6716
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6492
sg6371
g6901
sg6385
g6499
sg6380
g6908
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6402
sg6371
g6740
sg6385
g6396
sg6380
g6747
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6475
sg6371
g6471
sg6385
g6482
sg6380
g6479
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6718
sg6371
g6708
sg6385
g6712
sg6380
g6716
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6532
sg6371
g7144
sg6385
g6526
sg6380
g7151
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6475
sg6371
g6471
sg6385
g6482
sg6380
g6479
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6402
sg6371
g6740
sg6385
g6396
sg6380
g6747
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6819
sg6371
g7159
sg6385
g6826
sg6380
g7166
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6695
sg6371
g6772
sg6385
g6702
sg6380
g6779
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6920
sg6371
g7466
sg6385
g6927
sg6380
g7473
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6402
sg6371
g6392
sg6385
g6396
sg6380
g6400
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6560
sg6371
g6978
sg6385
g6567
sg6380
g6985
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6492
sg6371
g6901
sg6385
g6499
sg6380
g6908
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6836
sg6371
g7036
sg6385
g6843
sg6380
g7043
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6765
sg6371
g7215
sg6385
g6759
sg6380
g7222
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6402
sg6371
g6392
sg6385
g6396
sg6380
g6400
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6819
sg6371
g6815
sg6385
g6826
sg6380
g6823
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6475
sg6371
g7308
sg6385
g6482
sg6380
g7315
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6836
sg6371
g6832
sg6385
g6843
sg6380
g6840
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6475
sg6371
g7308
sg6385
g6482
sg6380
g7315
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6836
sg6371
g6832
sg6385
g6843
sg6380
g6840
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6445
sg6371
g6993
sg6385
g6452
sg6380
g7000
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6695
sg6371
g6772
sg6385
g6702
sg6380
g6779
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6543
sg6371
g8001
sg6385
g6550
sg6380
g8008
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6402
sg6371
g6740
sg6385
g6396
sg6380
g6747
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6765
sg6371
g7215
sg6385
g6759
sg6380
g7222
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6445
sg6371
g6441
sg6385
g6452
sg6380
g6449
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6695
sg6371
g6691
sg6385
g6702
sg6380
g6699
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6836
sg6371
g6832
sg6385
g6843
sg6380
g6840
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6590
sg6371
g6620
sg6385
g6597
sg6380
g6627
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6937
sg6371
g6933
sg6385
g6944
sg6380
g6941
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6445
sg6371
g6993
sg6385
g6452
sg6380
g7000
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6836
sg6371
g6832
sg6385
g6843
sg6380
g6840
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6475
sg6371
g6471
sg6385
g6482
sg6380
g6479
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6639
sg6371
g7129
sg6385
g6646
sg6380
g7136
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6937
sg6371
g7008
sg6385
g6944
sg6380
g7015
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6590
sg6371
g6586
sg6385
g6597
sg6380
g6594
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6765
sg6371
g6755
sg6385
g6759
sg6380
g6763
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6836
sg6371
g7036
sg6385
g6843
sg6380
g7043
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6920
sg6371
g7466
sg6385
g6927
sg6380
g7473
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6819
sg6371
g6815
sg6385
g6826
sg6380
g6823
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6607
sg6371
g6603
sg6385
g6614
sg6380
g6611
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6560
sg6371
g6978
sg6385
g6567
sg6380
g6985
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6532
sg6371
g7144
sg6385
g6526
sg6380
g7151
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6937
sg6371
g7008
sg6385
g6944
sg6380
g7015
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6765
sg6371
g6755
sg6385
g6759
sg6380
g6763
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6509
sg6371
g6787
sg6385
g6516
sg6380
g6794
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6639
sg6371
g7129
sg6385
g6646
sg6380
g7136
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6532
sg6371
g6522
sg6385
g6526
sg6380
g6530
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6920
sg6371
g7466
sg6385
g6927
sg6380
g7473
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6937
sg6371
g6933
sg6385
g6944
sg6380
g6941
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6475
sg6371
g7308
sg6385
g6482
sg6380
g7315
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6819
sg6371
g7159
sg6385
g6826
sg6380
g7166
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6492
sg6371
g6488
sg6385
g6499
sg6380
g6496
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6765
sg6371
g7215
sg6385
g6759
sg6380
g7222
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6509
sg6371
g6787
sg6385
g6516
sg6380
g6794
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6819
sg6371
g6815
sg6385
g6826
sg6380
g6823
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6718
sg6371
g6950
sg6385
g6712
sg6380
g6957
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6532
sg6371
g7144
sg6385
g6526
sg6380
g7151
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6765
sg6371
g6755
sg6385
g6759
sg6380
g6763
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6445
sg6371
g6993
sg6385
g6452
sg6380
g7000
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6543
sg6371
g8001
sg6385
g6550
sg6380
g8008
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6836
sg6371
g7036
sg6385
g6843
sg6380
g7043
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6543
sg6371
g8001
sg6385
g6550
sg6380
g8008
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6920
sg6371
g7466
sg6385
g6927
sg6380
g7473
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6560
sg6371
g6978
sg6385
g6567
sg6380
g6985
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6718
sg6371
g6950
sg6385
g6712
sg6380
g6957
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6492
sg6371
g6901
sg6385
g6499
sg6380
g6908
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6920
sg6371
g6916
sg6385
g6927
sg6380
g6924
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6819
sg6371
g6815
sg6385
g6826
sg6380
g6823
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6607
sg6371
g6603
sg6385
g6614
sg6380
g6611
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6639
sg6371
g7129
sg6385
g6646
sg6380
g7136
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6819
sg6371
g7159
sg6385
g6826
sg6380
g7166
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6639
sg6371
g7129
sg6385
g6646
sg6380
g7136
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6543
sg6371
g6539
sg6385
g6550
sg6380
g6547
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6475
sg6371
g7308
sg6385
g6482
sg6380
g7315
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6937
sg6371
g7008
sg6385
g6944
sg6380
g7015
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6543
sg6371
g8001
sg6385
g6550
sg6380
g8008
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6765
sg6371
g7215
sg6385
g6759
sg6380
g7222
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6543
sg6371
g8001
sg6385
g6550
sg6380
g8008
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6402
sg6371
g6740
sg6385
g6396
sg6380
g6747
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6376
sg6371
g6426
sg6385
g6386
sg6380
g6433
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6607
sg6371
g7174
sg6385
g6614
sg6380
g7181
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6402
sg6371
g6392
sg6385
g6396
sg6380
g6400
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6819
sg6371
g7159
sg6385
g6826
sg6380
g7166
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6509
sg6371
g6505
sg6385
g6516
sg6380
g6513
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6836
sg6371
g7036
sg6385
g6843
sg6380
g7043
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6937
sg6371
g6933
sg6385
g6944
sg6380
g6941
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6509
sg6371
g6787
sg6385
g6516
sg6380
g6794
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6560
sg6371
g6556
sg6385
g6567
sg6380
g6564
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.