ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E7_infer_design1_2015_Jul_03_1025
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vn
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xd1\x92^\xbb?\xfcM@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_03_1025
p67
sVparticipant
p68
VE7
p69
sVglasses
p70
Vy
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F3.0668381430149338
sg14
S'space'
p89
sg59
g63
sg58
Vn
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp90
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F17.533033050156007
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P4\x00'
tbsg70
Vy
sa(dp96
g64
g65
sg20
F6.617
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F2
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS' \x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p103
sg21
F2
sg70
Vy
sa(dp104
g64
g65
sg20
F9.8339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F2.0200000000000005
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x00\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p110
sg21
F1.3999999999999999
sg70
Vy
sa(dp111
g64
g65
sg20
F8.5999999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F1.0199999999999994
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S'\n\x00\x00\x00'
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p117
sg21
F1.8
sg70
Vy
sa(dp118
g64
g65
sg20
F3.3839999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F1.4999999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'!\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V44-crunch.png
p124
sg21
F1.7
sg70
Vy
sa(dp125
g64
g65
sg20
F13.6
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0.97999999999999976
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x19\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p131
sg21
F1.3
sg70
Vy
sa(dp132
g64
g65
sg20
F14.317
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F2.2800000000000011
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x05\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p138
sg21
F1.1000000000000001
sg70
Vy
sa(dp139
g64
g65
sg20
F2.734
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F1.5799999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x0b\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p145
sg21
F1.8999999999999999
sg70
Vy
sa(dp146
g64
g65
sg20
F6.101
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.13999999999999896
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x16\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p152
sg21
F1.3999999999999999
sg70
Vy
sa(dp153
g64
g65
sg20
F6.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'$\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V48-twix.png
p159
sg21
F1.8
sg70
Vy
sa(dp160
g64
g65
sg20
F5.6840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F1.1599999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'\t\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p166
sg21
F1.3
sg70
Vy
sa(dp167
g64
g65
sg20
F8.5839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F1.1999999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'"\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p173
sg21
F1.7
sg70
Vy
sa(dp174
g64
g65
sg20
F4.3339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0.81999999999999895
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\r\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p180
sg21
F2
sg70
Vy
sa(dp181
g64
g65
sg20
F2.5339999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0.83999999999999919
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x12\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p187
sg21
F1.7
sg70
Vy
sa(dp188
g64
g65
sg20
F6.4169999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F1.2399999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'\x1f\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p194
sg21
F2
sg70
Vy
sa(dp195
g64
g65
sg20
F5.8339999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1e\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p201
sg21
F1.6000000000000001
sg70
Vy
sa(dp202
g64
g65
sg20
F4.6669999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.99999999999999956
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x0e\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p208
sg21
F1.5
sg70
Vy
sa(dp209
g64
g65
sg20
F13.050000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F1.5
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x06\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V7-olives.png
p215
sg21
F1.3999999999999999
sg70
Vy
sa(dp216
g64
g65
sg20
F6.2839999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.41999999999999926
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x02\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p222
sg21
F1.2
sg70
Vy
sa(dp223
g64
g65
sg20
F2.5009999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0.75999999999999934
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S'\x13\x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p229
sg21
F1.3999999999999999
sg70
Vy
sa(dp230
g64
g65
sg20
F3.9340000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0.7999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x07\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p236
sg21
F1.2
sg70
Vy
sa(dp237
g64
g65
sg20
F4.4329999999999998
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F1.2999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x17\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p243
sg21
F1.7
sg70
Vy
sa(dp244
g64
g65
sg20
F4.7530000000000001
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0.81999999999999962
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x04\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p250
sg21
F1.2
sg70
Vy
sa(dp251
g64
g65
sg20
F5.0839999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.67999999999999905
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'\x15\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V29-beans.png
p257
sg21
F1.7
sg70
Vy
sa(dp258
g64
g65
sg20
F8.7840000000000007
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x0f\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p264
sg21
F1.5
sg70
Vy
sa(dp265
g64
g65
sg20
F3.234
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.61999999999999944
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\x1a\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V35-raisins.png
p271
sg21
F1.2
sg70
Vy
sa(dp272
g64
g65
sg20
F7.3840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F1.9800000000000004
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x0c\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V18-mms.png
p278
sg21
F1.2
sg70
Vy
sa(dp279
g64
g65
sg20
F4.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F1.4199999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x01\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p285
sg21
F1.8999999999999999
sg70
Vy
sa(dp286
g64
g65
sg20
F9.0670000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.71999999999999931
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x1d\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V40-sardines.png
p292
sg21
F1.3999999999999999
sg70
Vy
sa(dp293
g64
g65
sg20
F2.5169999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0.77999999999999936
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x08\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p299
sg21
F1.6000000000000001
sg70
Vy
sa(dp300
g64
g65
sg20
F6.7169999999999996
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.77999999999999958
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'\x03\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V4-corn.png
p306
sg21
F1.3
sg70
Vy
sa(dp307
g64
g65
sg20
F6.8840000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x14\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p313
sg21
F1.6000000000000001
sg70
Vy
sa(dp314
g64
g65
sg20
F8.4339999999999993
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.73999999999999955
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'#\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p320
sg21
F1.2
sg70
Vy
sa(dp321
g64
g65
sg20
F3.601
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.83999999999999964
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\x10\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V22-daim.png
p327
sg21
F1.3
sg70
Vy
sa(dp328
g64
g65
sg20
F2.3170000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F1.3999999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\x1b\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p334
sg21
F1.5
sg70
Vy
sa(dp335
g64
g65
sg20
F2.8010000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F1.4399999999999999
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x1c\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p341
sg21
F1.6000000000000001
sg70
Vy
sa(dp342
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.35999999999999899
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'&\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V50-polo.png
p348
sg21
F1.5
sg70
Vy
sa(dp349
g64
g65
sg20
F4.5010000000000003
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'%\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p355
sg21
F1.3999999999999999
sg70
Vy
sa(dp356
g64
g65
sg20
F11.1
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.67999999999999927
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x18\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p362
sg21
F1.3999999999999999
sg70
Vy
sa(dp363
g64
g65
sg20
F3.2669999999999999
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.81999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S"'\x00\x00\x00"
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V51-mars.png
p369
sg21
F1.8
sg70
Vy
sa(dp370
g64
g65
sg20
F1.867
sg56
g57
sg58
Vn
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.85999999999999965
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x11\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p376
sg21
F1.3
sg70
Vy
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F5.5334393133952062
sg58
Vn
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vy
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p381
sg26
F4.0000000000000009
sg28
F3
sg59
g63
sg58
Vn
sg81
S'18-mms.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'right'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F3.0170978378812379
sg27
F4.7009999999999996
sg70
Vy
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p390
sg26
F3.7000000000000002
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'41-peanuts_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F4.0667985145305465
sg27
F5.5170000000000003
sg70
Vy
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p399
sg26
F5.9999999999999973
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'8-liquorice_catherine_wheels.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'left'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.3000312466322157
sg27
F1.7509999999999999
sg70
Vy
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p408
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'19-caramello_redo.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.6666585889180396
sg27
F2.6669999999999998
sg70
Vy
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'25-kitkat.png'
p417
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'31-hobnobs.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F1.8001832033386336
sg27
F2.4340000000000002
sg70
Vy
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p426
sg26
F5.6999999999999975
sg28
F4.2999999999999998
sg59
g63
sg58
Vn
sg81
S'51-mars.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F1.5500664561130861
sg27
F1.0169999999999999
sg70
Vy
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'31-hobnobs.png'
p435
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'25-kitkat.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'left'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F1.333347683216175
sg27
F1.3169999999999999
sg70
Vy
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'18-mms.png'
p444
sg26
F4.9000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'43-mrporky_pork_crackles_redo.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'left'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F1.2834006827503117
sg27
F3.0840000000000001
sg70
Vy
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p453
sg26
F3.7999999999999998
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'right'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F5.0003800343142757
sg27
F0.61699999999999999
sg70
Vy
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p462
sg26
F5.8999999999999977
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'30-spaghetti_hoops.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'left'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F2.2334559630605781
sg27
F0.90100000000000002
sg70
Vy
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p471
sg26
F5.4999999999999991
sg28
F4
sg59
g63
sg58
Vn
sg81
S'23-crunchie_redo.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'right'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F2.4001681502164729
sg27
F1.034
sg70
Vy
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p480
sg26
F4.5000000000000018
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'2-steamed_puddings.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'left'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F3.6000969900027258
sg27
F2.5840000000000001
sg70
Vy
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p489
sg26
F3.3999999999999999
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'38-maltesers.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F10.916689521943681
sg27
F2.7010000000000001
sg70
Vy
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p498
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'17-jacobs_mini_cheddars_redo.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'right'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F1.0668498319922719
sg27
F1.117
sg70
Vy
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p507
sg26
F5.5999999999999988
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'20-fruit_pastilles.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'right'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F1.1000422513768626
sg27
F1.234
sg70
Vy
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'38-maltesers.png'
p516
sg26
F4.3000000000000007
sg28
F3.2000000000000002
sg59
g63
sg58
Vn
sg81
S'6-sour_patch_kids.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.1330829991521796
sg27
F3.101
sg70
Vy
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p525
sg26
F5.1000000000000005
sg28
F3.5
sg59
g63
sg58
Vn
sg81
S'1-treacle_cookies.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'right'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F3.6167446597054322
sg27
F6.8499999999999996
sg70
Vy
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'5-pineapple.png'
p534
sg26
F4.1000000000000014
sg28
F3.1000000000000001
sg59
g63
sg58
Vn
sg81
S'40-sardines.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F5.1499710056341428
sg27
F2.7010000000000001
sg70
Vy
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'4-corn.png'
p543
sg26
F4.8000000000000007
sg28
F3.8999999999999999
sg59
g63
sg58
Vn
sg81
S'10-bounty_redo.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F5.750076548547213
sg27
F1.5509999999999999
sg70
Vy
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p552
sg26
F3.9000000000000008
sg28
F3
sg59
g63
sg58
Vn
sg81
S'45-chewy_nougat_redo.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'left'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.2668131685168191
sg27
F1.101
sg70
Vy
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'29-beans.png'
p561
sg26
F5.0000000000000018
sg28
F3
sg59
g63
sg58
Vn
sg81
S'46-pistachios.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'right'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F2.8501373312296892
sg27
F2.0840000000000001
sg70
Vy
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'22-daim.png'
p570
sg26
F4.4000000000000012
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'7-olives.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F7.4498562825973522
sg27
F3.0339999999999998
sg70
Vy
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p579
sg26
F4.6000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'21-nakd_banana_crunch.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'left'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.1500856146320757
sg27
F1.284
sg70
Vy
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p588
sg26
F5.9999999999999973
sg28
F4.0999999999999996
sg59
g63
sg58
Vn
sg81
S'36-fig_rolls.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.8668796531395628
sg27
F0.90100000000000002
sg70
Vy
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'48-twix.png'
p597
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'50-polo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'left'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F1.6168196402189778
sg27
F0.86699999999999999
sg70
Vy
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'44-crunch.png'
p606
sg26
F4.2000000000000011
sg28
F3.6000000000000001
sg59
g63
sg58
Vn
sg81
S'26-walkers_smoky_bacon.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'left'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F3.333406983394184
sg27
F1.1679999999999999
sg70
Vy
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p615
sg26
F4.3000000000000007
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'42-mrkipling_lemon_slices.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'left'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F5.1498002325250809
sg27
F1.5669999999999999
sg70
Vy
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'7-olives.png'
p624
sg26
F4.3000000000000007
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'22-daim.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'left'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F2.4000854720835605
sg27
F1.7010000000000001
sg70
Vy
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'51-mars.png'
p633
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'27-hartleys_raspberries_jelly.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.1334847008390625
sg27
F1.234
sg70
Vy
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p642
sg26
F5.4999999999999991
sg28
F4.2000000000000002
sg59
g63
sg58
Vn
sg81
S'33-ambrosia_rice.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.833503061086617
sg27
F0.81699999999999995
sg70
Vy
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p651
sg26
F5.2000000000000011
sg28
F2.7999999999999998
sg59
g63
sg58
Vn
sg81
S'4-corn.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.0002300732870708
sg27
F1.4510000000000001
sg70
Vy
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p660
sg26
F4.1000000000000014
sg28
F3
sg59
g63
sg58
Vn
sg81
S'44-crunch.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'right'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F0.98344299114660316
sg27
F3.0339999999999998
sg70
Vy
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'50-polo.png'
p669
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vn
sg81
S'48-twix.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'right'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F0.95016618304714484
sg27
F1.0669999999999999
sg70
Vy
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'46-pistachios.png'
p678
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vn
sg81
S'29-beans.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F1.2667370476152655
sg27
F0.73399999999999999
sg70
Vy
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'35-raisins.png'
p687
sg26
F4.4000000000000004
sg28
F3.7000000000000002
sg59
g63
sg58
Vn
sg81
S'49-yorkie.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F2.3002214063379824
sg27
F1.3680000000000001
sg70
Vy
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'40-sardines.png'
p696
sg26
F4.9000000000000012
sg28
F3.2999999999999998
sg59
g63
sg58
Vn
sg81
S'5-pineapple.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'left'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F1.4667742242652366
sg27
F2.4009999999999998
sg70
Vy
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p705
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vn
sg81
S'3-ellas_strawberries_apples.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F2.4001430616796142
sg27
F1.0840000000000001
sg70
Vy
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'49-yorkie.png'
p714
sg26
F4.7000000000000011
sg28
F3
sg59
g63
sg58
Vn
sg81
S'35-raisins.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'right'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F2.7667507322717029
sg27
F1.3340000000000001
sg70
Vy
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p723
sg26
F5.5999999999999988
sg28
F3.7999999999999998
sg59
g63
sg58
Vn
sg81
S'16-skips_prawn.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'right'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F2.3166629509023551
sg27
F1.101
sg70
Vy
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p732
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vn
sg81
S'13-mccoys_steak_crisps.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F0.83343264212510348
sg27
F1.284
sg70
Vy
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vn
sg59
g63
sg30
F402.32116548798058
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp741
g64
g65
sg56
g57
sg58
Vn
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F38.782437625050534
sg66
g67
sg68
g69
sg70
Vy
sa(dp743
g64
g65
sg82
S'15-walnut_whip.png'
p744
sg83
S'15-walnut_whip.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'28-maple_pecan.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x03\n+\x0f\n90'
tRp754
sa(dp755
g64
g65
sg82
S'11-snickers.png'
p756
sg83
S'54-frubes_yogurt.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'54-frubes_yogurt.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x03\n+\x19\x05\xef\x88'
tRp765
sa(dp766
g64
g65
sg82
S'12-topic.png'
p767
sg83
S'12-topic.png'
p768
sg56
g57
sS'practice_loop.thisN'
p769
I2
sS'practice_loop.thisTrialN'
p770
I2
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p771
I0
sg84
S'39-mackerel.png'
p772
sg33
g767
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p773
sS'practice_loop.thisIndex'
p774
g60
(g99
S'\x02\x00\x00\x00'
tRp775
sg34
g753
(S'\x07\xdf\x07\x03\n+!\x0e\x8e\x90'
tRp776
sa(dp777
g64
g65
sg82
S'32-hovis_crackers.png'
p778
sg83
S'32-hovis_crackers.png'
p779
sg56
g57
sS'practice_loop.thisN'
p780
I3
sS'practice_loop.thisTrialN'
p781
I3
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p782
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p784
sS'practice_loop.thisIndex'
p785
g60
(g99
S'\x03\x00\x00\x00'
tRp786
sg34
g753
(S'\x07\xdf\x07\x03\n+)\x02\xee\x00'
tRp787
sa(dp788
g64
g65
sg82
g756
sg83
S'11-snickers.png'
p789
sg56
g57
sS'practice_loop.thisN'
p790
I4
sS'practice_loop.thisTrialN'
p791
I4
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p792
I0
sg84
g761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x03\n+1\x04*h'
tRp796
sa(dp797
g64
g65
sg82
S'52-aero_mousse.png'
p798
sg83
S'14-discos_salt_vinegar.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'14-discos_salt_vinegar.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S'\x07\xdf\x07\x03\n+8\x01_\x90'
tRp807
sa(dp808
g64
g65
sg82
g744
sg83
S'28-maple_pecan.png'
p809
sg56
g57
sS'practice_loop.thisN'
p810
I6
sS'practice_loop.thisTrialN'
p811
I6
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p812
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p813
sS'practice_loop.thisIndex'
p814
g60
(g99
S'\x06\x00\x00\x00'
tRp815
sg34
g753
(S'\x07\xdf\x07\x03\n,\x03\x04M\x90'
tRp816
sa(dp817
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p818
sg83
S'37-nakd_cashew_cookie.png'
p819
sg56
g57
sS'practice_loop.thisN'
p820
I7
sS'practice_loop.thisTrialN'
p821
I7
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p822
I0
sg84
S'9-yu_mango_pieces.png'
p823
sg33
g818
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p824
sS'practice_loop.thisIndex'
p825
g60
(g99
S'\x07\x00\x00\x00'
tRp826
sg34
g753
(S'\x07\xdf\x07\x03\n,\n\x01\xfb\xd0'
tRp827
sa(dp828
g64
g65
sg82
g798
sg83
S'52-aero_mousse.png'
p829
sg56
g57
sS'practice_loop.thisN'
p830
I8
sS'practice_loop.thisTrialN'
p831
I8
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p832
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p833
sS'practice_loop.thisIndex'
p834
g60
(g99
S'\x08\x00\x00\x00'
tRp835
sg34
g753
(S'\x07\xdf\x07\x03\n,\x13\x03\xe8\x00'
tRp836
sa(dp837
g64
g65
sg82
S'53-cheestrings.png'
p838
sg83
S'53-cheestrings.png'
p839
sg56
g57
sS'practice_loop.thisN'
p840
I9
sS'practice_loop.thisTrialN'
p841
I9
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p842
I0
sg84
S'47-picnic.png'
p843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x03\n,\x1a\x04t\xa0'
tRp847
sa(dp848
g64
g65
sg82
g767
sg83
S'39-mackerel.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g772
sg33
g772
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x03\n,#\x04x\x88'
tRp856
sa(dp857
g64
g65
sg82
g838
sg83
S'47-picnic.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g843
sg33
g838
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x03\n,)\n\xbe\x00'
tRp865
sa(dp866
g64
g65
sg82
g778
sg83
S'24-food_doctor_apple_walnut_bar.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g783
sg33
g778
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x03\n,0\x07\xb8\x90'
tRp874
sa(dp875
g64
g65
sg82
g818
sg83
S'9-yu_mango_pieces.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vy
sg58
Vn
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g823
sg33
g823
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x03\n,7\x08\xbeH'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vn
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F167.36170428711785
sg66
g67
sg68
g69
sg70
Vy
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vy
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'43-mrporky_pork_crackles_redo.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'right'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'18-mms.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'18-mms.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'43-mrporky_pork_crackles_redo.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vy
sS'block_loop.thisTrialN'
p912
I0
sg39
F2.9665276153514242
sg34
g753
(S'\x07\xdf\x07\x03\n;$\x02\xf5\xd0'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'50-polo.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'50-polo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'48-twix.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p926
I0
sg909
S'48-twix.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vy
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.266491293992658
sg34
g753
(S'\x07\xdf\x07\x03\n;,\x02\xc6\xf0'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'6-sour_patch_kids.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'right'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'38-maltesers.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'38-maltesers.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p943
I0
sg909
S'6-sour_patch_kids.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vy
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.449569475005319
sg34
g753
(S'\x07\xdf\x07\x03\n;2\x07b\xa0'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'8-liquorice_catherine_wheels.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'right'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'17-jacobs_mini_cheddars_redo.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p960
I0
sg909
S'8-liquorice_catherine_wheels.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vy
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.4499312631105568
sg34
g753
(S'\x07\xdf\x07\x03\n;8\x0e\x9e0'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'19-caramello_redo.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'19-caramello_redo.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'30-spaghetti_hoops.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p977
I0
sg909
S'30-spaghetti_hoops.png'
p978
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vy
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.5666727867492227
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00\x03\x06\xd6\x00'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
g896
sS'block_loop.thisIndex'
p984
g889
sg38
S'right'
p985
sg59
g63
sS'trial_loop.thisN'
p986
I5
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p987
g60
(g99
S'\x05\x00\x00\x00'
tRp988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p989
I0
sg904
g905
sS'block_loop.thisRepN'
p990
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p991
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vy
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.7666090390575846
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00\n\x00\xb3\xb0'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'21-nakd_banana_crunch.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'1-treacle_cookies.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'1-treacle_cookies.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1007
I0
sg909
S'21-nakd_banana_crunch.png'
p1008
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vy
sS'block_loop.thisTrialN'
p1010
I0
sg39
F1.3999432086757224
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00\x10\x0c\xf0\x80'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'48-twix.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'right'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1018
g60
(g99
S'\x07\x00\x00\x00'
tRp1019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1020
I0
sg904
S'50-polo.png'
p1021
sS'block_loop.thisRepN'
p1022
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1023
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1024
Nsg70
Vy
sS'block_loop.thisTrialN'
p1025
I0
sg39
F1.399702871896352
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00\x17\x0428'
tRp1026
sa(dp1027
S'trial_loop.thisTrialN'
p1028
I8
sg895
S'1-treacle_cookies.png'
p1029
sS'block_loop.thisIndex'
p1030
g889
sg38
S'left'
p1031
sg59
g63
sS'trial_loop.thisN'
p1032
I8
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1033
g60
(g99
S'\x08\x00\x00\x00'
tRp1034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1035
I0
sg904
S'21-nakd_banana_crunch.png'
p1036
sS'block_loop.thisRepN'
p1037
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1038
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1039
Nsg70
Vy
sS'block_loop.thisTrialN'
p1040
I0
sg39
F1.3999665866303985
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00\x1d\n\xf4\xb0'
tRp1041
sa(dp1042
S'trial_loop.thisTrialN'
p1043
I9
sg895
S'44-crunch.png'
p1044
sS'block_loop.thisIndex'
p1045
g889
sg38
S'left'
p1046
sg59
g63
sS'trial_loop.thisN'
p1047
I9
sg33
S'44-crunch.png'
p1048
sg64
g65
sS'trial_loop.thisIndex'
p1049
g60
(g99
S'\t\x00\x00\x00'
tRp1050
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1051
I0
sg904
S'26-walkers_smoky_bacon.png'
p1052
sS'block_loop.thisRepN'
p1053
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1054
I0
sg909
S'26-walkers_smoky_bacon.png'
p1055
sg55
g11
sS'block_loop.thisTrial'
p1056
Nsg70
Vy
sS'block_loop.thisTrialN'
p1057
I0
sg39
F2.0836403352968773
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00$\x026h'
tRp1058
sa(dp1059
S'trial_loop.thisTrialN'
p1060
I10
sg895
S'41-peanuts_redo.png'
p1061
sS'block_loop.thisIndex'
p1062
g889
sg38
S'right'
p1063
sg59
g63
sS'trial_loop.thisN'
p1064
I10
sg33
S'41-peanuts_redo.png'
p1065
sg64
g65
sS'trial_loop.thisIndex'
p1066
g60
(g99
S'\n\x00\x00\x00'
tRp1067
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1068
I0
sg904
S'45-chewy_nougat_redo.png'
p1069
sS'block_loop.thisRepN'
p1070
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1071
I0
sg909
S'45-chewy_nougat_redo.png'
p1072
sg55
g11
sS'block_loop.thisTrial'
p1073
Nsg70
Vy
sS'block_loop.thisTrialN'
p1074
I0
sg39
F2.0498877002878544
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x00+\x03\xf3\xb8'
tRp1075
sa(dp1076
S'trial_loop.thisTrialN'
p1077
I11
sg895
S'26-walkers_smoky_bacon.png'
p1078
sS'block_loop.thisIndex'
p1079
g889
sg38
S'right'
p1080
sg59
g63
sS'trial_loop.thisN'
p1081
I11
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1082
g60
(g99
S'\x0b\x00\x00\x00'
tRp1083
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1084
I0
sg904
S'44-crunch.png'
p1085
sS'block_loop.thisRepN'
p1086
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1087
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1088
Nsg70
Vy
sS'block_loop.thisTrialN'
p1089
I0
sg39
F1.0831876012448447
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x002\x054\x08'
tRp1090
sa(dp1091
S'trial_loop.thisTrialN'
p1092
I12
sg895
S'25-kitkat.png'
p1093
sS'block_loop.thisIndex'
p1094
g889
sg38
S'right'
p1095
sg59
g63
sS'trial_loop.thisN'
p1096
I12
sg33
S'31-hobnobs.png'
p1097
sg64
g65
sS'trial_loop.thisIndex'
p1098
g60
(g99
S'\x0c\x00\x00\x00'
tRp1099
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1100
I0
sg904
S'31-hobnobs.png'
p1101
sS'block_loop.thisRepN'
p1102
I0
sg907
S'25-kitkat.png'
p1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1104
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1105
Nsg70
Vy
sS'block_loop.thisTrialN'
p1106
I0
sg39
F1.2499114773786459
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x008\x06\xf9('
tRp1107
sa(dp1108
S'trial_loop.thisTrialN'
p1109
I13
sg895
S'46-pistachios.png'
p1110
sS'block_loop.thisIndex'
p1111
g889
sg38
S'left'
p1112
sg59
g63
sS'trial_loop.thisN'
p1113
I13
sg33
S'29-beans.png'
p1114
sg64
g65
sS'trial_loop.thisIndex'
p1115
g60
(g99
S'\r\x00\x00\x00'
tRp1116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1117
I0
sg904
S'29-beans.png'
p1118
sS'block_loop.thisRepN'
p1119
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1120
I0
sg909
S'46-pistachios.png'
p1121
sg55
g11
sS'block_loop.thisTrial'
p1122
Nsg70
Vy
sS'block_loop.thisTrialN'
p1123
I0
sg39
F1.2165642503173331
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01\x02\x0bVX'
tRp1124
sa(dp1125
S'trial_loop.thisTrialN'
p1126
I14
sg895
g967
sS'block_loop.thisIndex'
p1127
g889
sg38
S'left'
p1128
sg59
g63
sS'trial_loop.thisN'
p1129
I14
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1130
g60
(g99
S'\x0e\x00\x00\x00'
tRp1131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1132
I0
sg904
g975
sS'block_loop.thisRepN'
p1133
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1134
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1135
Nsg70
Vy
sS'block_loop.thisTrialN'
p1136
I0
sg39
F1.5996912969576442
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01\x08\x0f>X'
tRp1137
sa(dp1138
S'trial_loop.thisTrialN'
p1139
I15
sg895
S'2-steamed_puddings.png'
p1140
sS'block_loop.thisIndex'
p1141
g889
sg38
S'right'
p1142
sg59
g63
sS'trial_loop.thisN'
p1143
I15
sg33
S'20-fruit_pastilles.png'
p1144
sg64
g65
sS'trial_loop.thisIndex'
p1145
g60
(g99
S'\x0f\x00\x00\x00'
tRp1146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1147
I0
sg904
S'20-fruit_pastilles.png'
p1148
sS'block_loop.thisRepN'
p1149
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1150
I0
sg909
S'2-steamed_puddings.png'
p1151
sg55
g11
sS'block_loop.thisTrial'
p1152
Nsg70
Vy
sS'block_loop.thisTrialN'
p1153
I0
sg39
F2.3665152991611649
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01\x0f\t\x99\x08'
tRp1154
sa(dp1155
S'trial_loop.thisTrialN'
p1156
I16
sg895
S'35-raisins.png'
p1157
sS'block_loop.thisIndex'
p1158
g889
sg38
S'right'
p1159
sg59
g63
sS'trial_loop.thisN'
p1160
I16
sg33
S'35-raisins.png'
p1161
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
S'49-yorkie.png'
p1165
sS'block_loop.thisRepN'
p1166
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1167
I0
sg909
S'49-yorkie.png'
p1168
sg55
g11
sS'block_loop.thisTrial'
p1169
Nsg70
Vy
sS'block_loop.thisTrialN'
p1170
I0
sg39
F1.3664785216465134
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01\x17\x00Y\xd8'
tRp1171
sa(dp1172
S'trial_loop.thisTrialN'
p1173
I17
sg895
S'31-hobnobs.png'
p1174
sS'block_loop.thisIndex'
p1175
g889
sg38
S'left'
p1176
sg59
g63
sS'trial_loop.thisN'
p1177
I17
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p1178
g60
(g99
S'\x11\x00\x00\x00'
tRp1179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1180
I0
sg904
S'25-kitkat.png'
p1181
sS'block_loop.thisRepN'
p1182
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1183
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1184
Nsg70
Vy
sS'block_loop.thisTrialN'
p1185
I0
sg39
F1.5331912789965827
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01\x1d\x06\xa38'
tRp1186
sa(dp1187
S'trial_loop.thisTrialN'
p1188
I18
sg895
g1029
sS'block_loop.thisIndex'
p1189
g889
sg38
S'left'
p1190
sg59
g63
sS'trial_loop.thisN'
p1191
I18
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1192
g60
(g99
S'\x12\x00\x00\x00'
tRp1193
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1194
I0
sg904
g1036
sS'block_loop.thisRepN'
p1195
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1196
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1197
Nsg70
Vy
sS'block_loop.thisTrialN'
p1198
I0
sg39
F1.7498498964241662
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01$\x00\x0b\xb8'
tRp1199
sa(dp1200
S'trial_loop.thisTrialN'
p1201
I19
sg895
S'7-olives.png'
p1202
sS'block_loop.thisIndex'
p1203
g889
sg38
S'right'
p1204
sg59
g63
sS'trial_loop.thisN'
p1205
I19
sg33
S'7-olives.png'
p1206
sg64
g65
sS'trial_loop.thisIndex'
p1207
g60
(g99
S'\x13\x00\x00\x00'
tRp1208
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1209
I0
sg904
S'22-daim.png'
p1210
sS'block_loop.thisRepN'
p1211
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1212
I0
sg909
S'22-daim.png'
p1213
sg55
g11
sS'block_loop.thisTrial'
p1214
Nsg70
Vy
sS'block_loop.thisTrialN'
p1215
I0
sg39
F1.5499566937642157
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x01*\x0b\xcb\x88'
tRp1216
sa(dp1217
S'trial_loop.thisTrialN'
p1218
I20
sg895
g1078
sS'block_loop.thisIndex'
p1219
g889
sg38
S'right'
p1220
sg59
g63
sS'trial_loop.thisN'
p1221
I20
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1222
g60
(g99
S'\x14\x00\x00\x00'
tRp1223
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1224
I0
sg904
g1085
sS'block_loop.thisRepN'
p1225
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1226
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1227
Nsg70
Vy
sS'block_loop.thisTrialN'
p1228
I0
sg39
F1.1499219689485471
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x011\x05n\xa0'
tRp1229
sa(dp1230
S'trial_loop.thisTrialN'
p1231
I21
sg895
S'20-fruit_pastilles.png'
p1232
sS'block_loop.thisIndex'
p1233
g889
sg38
S'left'
p1234
sg59
g63
sS'trial_loop.thisN'
p1235
I21
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p1236
g60
(g99
S'\x15\x00\x00\x00'
tRp1237
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1238
I0
sg904
S'2-steamed_puddings.png'
p1239
sS'block_loop.thisRepN'
p1240
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1241
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p1242
Nsg70
Vy
sS'block_loop.thisTrialN'
p1243
I0
sg39
F2.7831190069045988
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x017\x08`\x88'
tRp1244
sa(dp1245
S'trial_loop.thisTrialN'
p1246
I22
sg895
S'33-ambrosia_rice.png'
p1247
sS'block_loop.thisIndex'
p1248
g889
sg38
S'right'
p1249
sg59
g63
sS'trial_loop.thisN'
p1250
I22
sg33
S'33-ambrosia_rice.png'
p1251
sg64
g65
sS'trial_loop.thisIndex'
p1252
g60
(g99
S'\x16\x00\x00\x00'
tRp1253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1254
I0
sg904
S'23-crunchie_redo.png'
p1255
sS'block_loop.thisRepN'
p1256
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1257
I0
sg909
S'23-crunchie_redo.png'
p1258
sg55
g11
sS'block_loop.thisTrial'
p1259
Nsg70
Vy
sS'block_loop.thisTrialN'
p1260
I0
sg39
F1.4166624377276094
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02\x03\x05\x91\xc8'
tRp1261
sa(dp1262
S'trial_loop.thisTrialN'
p1263
I23
sg895
S'45-chewy_nougat_redo.png'
p1264
sS'block_loop.thisIndex'
p1265
g889
sg38
S'right'
p1266
sg59
g63
sS'trial_loop.thisN'
p1267
I23
sg33
g1072
sg64
g65
sS'trial_loop.thisIndex'
p1268
g60
(g99
S'\x17\x00\x00\x00'
tRp1269
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1270
I0
sg904
S'41-peanuts_redo.png'
p1271
sS'block_loop.thisRepN'
p1272
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1273
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1274
Nsg70
Vy
sS'block_loop.thisTrialN'
p1275
I0
sg39
F1.7664545164780066
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02\t\x0cT@'
tRp1276
sa(dp1277
S'trial_loop.thisTrialN'
p1278
I24
sg895
S'13-mccoys_steak_crisps.png'
p1279
sS'block_loop.thisIndex'
p1280
g889
sg38
S'left'
p1281
sg59
g63
sS'trial_loop.thisN'
p1282
I24
sg33
S'3-ellas_strawberries_apples.png'
p1283
sg64
g65
sS'trial_loop.thisIndex'
p1284
g60
(g99
S'\x18\x00\x00\x00'
tRp1285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1286
I0
sg904
S'3-ellas_strawberries_apples.png'
p1287
sS'block_loop.thisRepN'
p1288
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1289
I0
sg909
S'13-mccoys_steak_crisps.png'
p1290
sg55
g11
sS'block_loop.thisTrial'
p1291
Nsg70
Vy
sS'block_loop.thisTrialN'
p1292
I0
sg39
F1.3003764991112803
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02\x10\tJ\xe8'
tRp1293
sa(dp1294
S'trial_loop.thisTrialN'
p1295
I25
sg895
g896
sS'block_loop.thisIndex'
p1296
g889
sg38
S'right'
p1297
sg59
g63
sS'trial_loop.thisN'
p1298
I25
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1299
g60
(g99
S'\x19\x00\x00\x00'
tRp1300
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1301
I0
sg904
g905
sS'block_loop.thisRepN'
p1302
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1303
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1304
Nsg70
Vy
sS'block_loop.thisTrialN'
p1305
I0
sg39
F2.2164978227142456
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02\x16\x0ec\x98'
tRp1306
sa(dp1307
S'trial_loop.thisTrialN'
p1308
I26
sg895
S'49-yorkie.png'
p1309
sS'block_loop.thisIndex'
p1310
g889
sg38
S'right'
p1311
sg59
g63
sS'trial_loop.thisN'
p1312
I26
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1313
g60
(g99
S'\x1a\x00\x00\x00'
tRp1314
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1315
I0
sg904
S'35-raisins.png'
p1316
sS'block_loop.thisRepN'
p1317
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1318
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1319
Nsg70
Vy
sS'block_loop.thisTrialN'
p1320
I0
sg39
F1.4331647079552567
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02\x1e\x03\x01\x88'
tRp1321
sa(dp1322
S'trial_loop.thisTrialN'
p1323
I27
sg895
g967
sS'block_loop.thisIndex'
p1324
g889
sg38
S'left'
p1325
sg59
g63
sS'trial_loop.thisN'
p1326
I27
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1327
g60
(g99
S'\x1b\x00\x00\x00'
tRp1328
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1329
I0
sg904
g975
sS'block_loop.thisRepN'
p1330
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1331
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1332
Nsg70
Vy
sS'block_loop.thisTrialN'
p1333
I0
sg39
F2.7331777083791167
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02$\n\x02\x80'
tRp1334
sa(dp1335
S'trial_loop.thisTrialN'
p1336
I28
sg895
S'16-skips_prawn.png'
p1337
sS'block_loop.thisIndex'
p1338
g889
sg38
S'right'
p1339
sg59
g63
sS'trial_loop.thisN'
p1340
I28
sg33
S'42-mrkipling_lemon_slices.png'
p1341
sg64
g65
sS'trial_loop.thisIndex'
p1342
g60
(g99
S'\x1c\x00\x00\x00'
tRp1343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1344
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1345
sS'block_loop.thisRepN'
p1346
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1347
I0
sg909
S'16-skips_prawn.png'
p1348
sg55
g11
sS'block_loop.thisTrial'
p1349
Nsg70
Vy
sS'block_loop.thisTrialN'
p1350
I0
sg39
F2.8998360122000122
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02,\x06x@'
tRp1351
sa(dp1352
S'trial_loop.thisTrialN'
p1353
I29
sg895
g1279
sS'block_loop.thisIndex'
p1354
g889
sg38
S'right'
p1355
sg59
g63
sS'trial_loop.thisN'
p1356
I29
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p1357
g60
(g99
S'\x1d\x00\x00\x00'
tRp1358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1359
I0
sg904
g1287
sS'block_loop.thisRepN'
p1360
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1361
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1362
Nsg70
Vy
sS'block_loop.thisTrialN'
p1363
I0
sg39
F1.5834547371432564
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x024\x05\x91\xc8'
tRp1364
sa(dp1365
S'trial_loop.thisTrialN'
p1366
I30
sg895
g1337
sS'block_loop.thisIndex'
p1367
g889
sg38
S'right'
p1368
sg59
g63
sS'trial_loop.thisN'
p1369
I30
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p1370
g60
(g99
S'\x1e\x00\x00\x00'
tRp1371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1372
I0
sg904
g1345
sS'block_loop.thisRepN'
p1373
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1374
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p1375
Nsg70
Vy
sS'block_loop.thisTrialN'
p1376
I0
sg39
F0.94977103859127965
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x02:\x0e\xf08'
tRp1377
sa(dp1378
S'trial_loop.thisTrialN'
p1379
I31
sg895
g967
sS'block_loop.thisIndex'
p1380
g889
sg38
S'right'
p1381
sg59
g63
sS'trial_loop.thisN'
p1382
I31
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1383
g60
(g99
S'\x1f\x00\x00\x00'
tRp1384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1385
I0
sg904
g975
sS'block_loop.thisRepN'
p1386
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1387
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1388
Nsg70
Vy
sS'block_loop.thisTrialN'
p1389
I0
sg39
F1.0498848493180049
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03\x04\x0e\xcd\x10'
tRp1390
sa(dp1391
S'trial_loop.thisTrialN'
p1392
I32
sg895
S'22-daim.png'
p1393
sS'block_loop.thisIndex'
p1394
g889
sg38
S'right'
p1395
sg59
g63
sS'trial_loop.thisN'
p1396
I32
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p1397
g60
(g99
S' \x00\x00\x00'
tRp1398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1399
I0
sg904
S'7-olives.png'
p1400
sS'block_loop.thisRepN'
p1401
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1402
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1403
Nsg70
Vy
sS'block_loop.thisTrialN'
p1404
I0
sg39
F1.1665331462336326
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03\x0b\x00\x94p'
tRp1405
sa(dp1406
S'trial_loop.thisTrialN'
p1407
I33
sg895
g1044
sS'block_loop.thisIndex'
p1408
g889
sg38
S'left'
p1409
sg59
g63
sS'trial_loop.thisN'
p1410
I33
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1411
g60
(g99
S'!\x00\x00\x00'
tRp1412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1413
I0
sg904
g1052
sS'block_loop.thisRepN'
p1414
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1415
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1416
Nsg70
Vy
sS'block_loop.thisTrialN'
p1417
I0
sg39
F0.99992387909833269
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03\x11\x03\xc4\xd8'
tRp1418
sa(dp1419
S'trial_loop.thisTrialN'
p1420
I34
sg895
g1279
sS'block_loop.thisIndex'
p1421
g889
sg38
S'right'
p1422
sg59
g63
sS'trial_loop.thisN'
p1423
I34
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1424
g60
(g99
S'"\x00\x00\x00'
tRp1425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1426
I0
sg904
g1287
sS'block_loop.thisRepN'
p1427
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1428
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1429
Nsg70
Vy
sS'block_loop.thisTrialN'
p1430
I0
sg39
F0.95002363454204897
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03\x17\x04U`'
tRp1431
sa(dp1432
S'trial_loop.thisTrialN'
p1433
I35
sg895
S'36-fig_rolls.png'
p1434
sS'block_loop.thisIndex'
p1435
g889
sg38
S'left'
p1436
sg59
g63
sS'trial_loop.thisN'
p1437
I35
sg33
S'36-fig_rolls.png'
p1438
sg64
g65
sS'trial_loop.thisIndex'
p1439
g60
(g99
S'#\x00\x00\x00'
tRp1440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1441
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1442
sS'block_loop.thisRepN'
p1443
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1444
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1445
sg55
g11
sS'block_loop.thisTrial'
p1446
Nsg70
Vy
sS'block_loop.thisTrialN'
p1447
I0
sg39
F1.8832981048462898
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03\x1d\x03\xf3\xb8'
tRp1448
sa(dp1449
S'trial_loop.thisTrialN'
p1450
I36
sg895
g1140
sS'block_loop.thisIndex'
p1451
g889
sg38
S'right'
p1452
sg59
g63
sS'trial_loop.thisN'
p1453
I36
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p1454
g60
(g99
S'$\x00\x00\x00'
tRp1455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1456
I0
sg904
g1148
sS'block_loop.thisRepN'
p1457
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1458
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p1459
Nsg70
Vy
sS'block_loop.thisTrialN'
p1460
I0
sg39
F3.0498429400568057
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03$\x02\xd2\xa8'
tRp1461
sa(dp1462
S'trial_loop.thisTrialN'
p1463
I37
sg895
g1393
sS'block_loop.thisIndex'
p1464
g889
sg38
S'right'
p1465
sg59
g63
sS'trial_loop.thisN'
p1466
I37
sg33
g1213
sg64
g65
sS'trial_loop.thisIndex'
p1467
g60
(g99
S'%\x00\x00\x00'
tRp1468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1469
I0
sg904
g1400
sS'block_loop.thisRepN'
p1470
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1471
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1472
Nsg70
Vy
sS'block_loop.thisTrialN'
p1473
I0
sg39
F1.1331602604418549
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03,\x04\x0f\x10'
tRp1474
sa(dp1475
S'trial_loop.thisTrialN'
p1476
I38
sg895
S'10-bounty_redo.png'
p1477
sS'block_loop.thisIndex'
p1478
g889
sg38
S'right'
p1479
sg59
g63
sS'trial_loop.thisN'
p1480
I38
sg33
S'10-bounty_redo.png'
p1481
sg64
g65
sS'trial_loop.thisIndex'
p1482
g60
(g99
S'&\x00\x00\x00'
tRp1483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1484
I0
sg904
S'4-corn.png'
p1485
sS'block_loop.thisRepN'
p1486
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1487
I0
sg909
S'4-corn.png'
p1488
sg55
g11
sS'block_loop.thisTrial'
p1489
Nsg70
Vy
sS'block_loop.thisTrialN'
p1490
I0
sg39
F2.9831624556886709
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x032\x06\x87\xe0'
tRp1491
sa(dp1492
S'trial_loop.thisTrialN'
p1493
I39
sg895
g916
sS'block_loop.thisIndex'
p1494
g889
sg38
S'left'
p1495
sg59
g63
sS'trial_loop.thisN'
p1496
I39
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1497
g60
(g99
S"'\x00\x00\x00"
tRp1498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1499
I0
sg904
g924
sS'block_loop.thisRepN'
p1500
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1501
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1502
Nsg70
Vy
sS'block_loop.thisTrialN'
p1503
I0
sg39
F2.3835735085581291
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x03:\x06\xce0'
tRp1504
sa(dp1505
S'trial_loop.thisTrialN'
p1506
I40
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1507
sS'block_loop.thisIndex'
p1508
g889
sg38
S'left'
p1509
sg59
g63
sS'trial_loop.thisN'
p1510
I40
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1511
g60
(g99
S'(\x00\x00\x00'
tRp1512
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1513
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1514
sS'block_loop.thisRepN'
p1515
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1516
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1517
Nsg70
Vy
sS'block_loop.thisTrialN'
p1518
I0
sg39
F2.2165616844440592
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04\x05\r\x0f\xc0'
tRp1519
sa(dp1520
S'trial_loop.thisTrialN'
p1521
I41
sg895
S'42-mrkipling_lemon_slices.png'
p1522
sS'block_loop.thisIndex'
p1523
g889
sg38
S'left'
p1524
sg59
g63
sS'trial_loop.thisN'
p1525
I41
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p1526
g60
(g99
S')\x00\x00\x00'
tRp1527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1528
I0
sg904
S'16-skips_prawn.png'
p1529
sS'block_loop.thisRepN'
p1530
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1531
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p1532
Nsg70
Vy
sS'block_loop.thisTrialN'
p1533
I0
sg39
F1.0331430976020783
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04\r\x01\xad\xb0'
tRp1534
sa(dp1535
S'trial_loop.thisTrialN'
p1536
I42
sg895
S'38-maltesers.png'
p1537
sS'block_loop.thisIndex'
p1538
g889
sg38
S'left'
p1539
sg59
g63
sS'trial_loop.thisN'
p1540
I42
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1541
g60
(g99
S'*\x00\x00\x00'
tRp1542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1543
I0
sg904
S'6-sour_patch_kids.png'
p1544
sS'block_loop.thisRepN'
p1545
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1546
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1547
Nsg70
Vy
sS'block_loop.thisTrialN'
p1548
I0
sg39
F1.566335516986328
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04\x13\x02\xbb8'
tRp1549
sa(dp1550
S'trial_loop.thisTrialN'
p1551
I43
sg895
g1264
sS'block_loop.thisIndex'
p1552
g889
sg38
S'right'
p1553
sg59
g63
sS'trial_loop.thisN'
p1554
I43
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1555
g60
(g99
S'+\x00\x00\x00'
tRp1556
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1557
I0
sg904
g1271
sS'block_loop.thisRepN'
p1558
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1559
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1560
Nsg70
Vy
sS'block_loop.thisTrialN'
p1561
I0
sg39
F1.0999099663645211
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04\x19\x0b\xdf\x10'
tRp1562
sa(dp1563
S'trial_loop.thisTrialN'
p1564
I44
sg895
g1434
sS'block_loop.thisIndex'
p1565
g889
sg38
S'left'
p1566
sg59
g63
sS'trial_loop.thisN'
p1567
I44
sg33
g1445
sg64
g65
sS'trial_loop.thisIndex'
p1568
g60
(g99
S',\x00\x00\x00'
tRp1569
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1570
I0
sg904
g1442
sS'block_loop.thisRepN'
p1571
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1572
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p1573
Nsg70
Vy
sS'block_loop.thisTrialN'
p1574
I0
sg39
F1.5167662700587243
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04\x1f\r\xde\xc8'
tRp1575
sa(dp1576
S'trial_loop.thisTrialN'
p1577
I45
sg895
S'29-beans.png'
p1578
sS'block_loop.thisIndex'
p1579
g889
sg38
S'right'
p1580
sg59
g63
sS'trial_loop.thisN'
p1581
I45
sg33
g1121
sg64
g65
sS'trial_loop.thisIndex'
p1582
g60
(g99
S'-\x00\x00\x00'
tRp1583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1584
I0
sg904
S'46-pistachios.png'
p1585
sS'block_loop.thisRepN'
p1586
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1587
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1588
Nsg70
Vy
sS'block_loop.thisTrialN'
p1589
I0
sg39
F1.066363456493491
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04&\x07\x08\xc8'
tRp1590
sa(dp1591
S'trial_loop.thisTrialN'
p1592
I46
sg895
S'40-sardines.png'
p1593
sS'block_loop.thisIndex'
p1594
g889
sg38
S'right'
p1595
sg59
g63
sS'trial_loop.thisN'
p1596
I46
sg33
S'5-pineapple.png'
p1597
sg64
g65
sS'trial_loop.thisIndex'
p1598
g60
(g99
S'.\x00\x00\x00'
tRp1599
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1600
I0
sg904
S'5-pineapple.png'
p1601
sS'block_loop.thisRepN'
p1602
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1603
I0
sg909
S'40-sardines.png'
p1604
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg70
Vy
sS'block_loop.thisTrialN'
p1606
I0
sg39
F1.7998236960088434
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x04,\x08\x8b\x80'
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I47
sg895
g1578
sS'block_loop.thisIndex'
p1610
g889
sg38
S'right'
p1611
sg59
g63
sS'trial_loop.thisN'
p1612
I47
sg33
g1121
sg64
g65
sS'trial_loop.thisIndex'
p1613
g60
(g99
S'/\x00\x00\x00'
tRp1614
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1615
I0
sg904
g1585
sS'block_loop.thisRepN'
p1616
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1617
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1618
Nsg70
Vy
sS'block_loop.thisTrialN'
p1619
I0
sg39
F1.3832000314746438
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x043\x05\xff('
tRp1620
sa(dp1621
S'trial_loop.thisTrialN'
p1622
I48
sg895
g1593
sS'block_loop.thisIndex'
p1623
g889
sg38
S'right'
p1624
sg59
g63
sS'trial_loop.thisN'
p1625
I48
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p1626
g60
(g99
S'0\x00\x00\x00'
tRp1627
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1628
I0
sg904
g1601
sS'block_loop.thisRepN'
p1629
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1630
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p1631
Nsg70
Vy
sS'block_loop.thisTrialN'
p1632
I0
sg39
F1.3166104930523943
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x049\x0cH\x88'
tRp1633
sa(dp1634
S'trial_loop.thisTrialN'
p1635
I49
sg895
g1157
sS'block_loop.thisIndex'
p1636
g889
sg38
S'left'
p1637
sg59
g63
sS'trial_loop.thisN'
p1638
I49
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1639
g60
(g99
S'1\x00\x00\x00'
tRp1640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1641
I0
sg904
g1165
sS'block_loop.thisRepN'
p1642
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1643
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1644
Nsg70
Vy
sS'block_loop.thisTrialN'
p1645
I0
sg39
F1.0837318514368235
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05\x04\x02Y\x90'
tRp1646
sa(dp1647
S'trial_loop.thisTrialN'
p1648
I50
sg895
g1522
sS'block_loop.thisIndex'
p1649
g889
sg38
S'left'
p1650
sg59
g63
sS'trial_loop.thisN'
p1651
I50
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p1652
g60
(g99
S'2\x00\x00\x00'
tRp1653
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1654
I0
sg904
g1529
sS'block_loop.thisRepN'
p1655
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1656
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p1657
Nsg70
Vy
sS'block_loop.thisTrialN'
p1658
I0
sg39
F1.5164694840709672
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05\n\x04YH'
tRp1659
sa(dp1660
S'trial_loop.thisTrialN'
p1661
I51
sg895
g950
sS'block_loop.thisIndex'
p1662
g889
sg38
S'right'
p1663
sg59
g63
sS'trial_loop.thisN'
p1664
I51
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1665
g60
(g99
S'3\x00\x00\x00'
tRp1666
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1667
I0
sg904
g958
sS'block_loop.thisRepN'
p1668
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1669
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1670
Nsg70
Vy
sS'block_loop.thisTrialN'
p1671
I0
sg39
F0.88323908976508392
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05\x10\x0c\x87\x08'
tRp1672
sa(dp1673
S'trial_loop.thisTrialN'
p1674
I52
sg895
S'18-mms.png'
p1675
sS'block_loop.thisIndex'
p1676
g889
sg38
S'left'
p1677
sg59
g63
sS'trial_loop.thisN'
p1678
I52
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1679
g60
(g99
S'4\x00\x00\x00'
tRp1680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1681
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1682
sS'block_loop.thisRepN'
p1683
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1684
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1685
Nsg70
Vy
sS'block_loop.thisTrialN'
p1686
I0
sg39
F1.1166323314837427
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05\x16\x0bm\xc8'
tRp1687
sa(dp1688
S'trial_loop.thisTrialN'
p1689
I53
sg895
g1110
sS'block_loop.thisIndex'
p1690
g889
sg38
S'left'
p1691
sg59
g63
sS'trial_loop.thisN'
p1692
I53
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p1693
g60
(g99
S'5\x00\x00\x00'
tRp1694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1695
I0
sg904
g1118
sS'block_loop.thisRepN'
p1696
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1697
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p1698
Nsg70
Vy
sS'block_loop.thisTrialN'
p1699
I0
sg39
F0.98324342323940073
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05\x1c\r\xa8\x18'
tRp1700
sa(dp1701
S'trial_loop.thisTrialN'
p1702
I54
sg895
g933
sS'block_loop.thisIndex'
p1703
g889
sg38
S'right'
p1704
sg59
g63
sS'trial_loop.thisN'
p1705
I54
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1706
g60
(g99
S'6\x00\x00\x00'
tRp1707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1708
I0
sg904
g941
sS'block_loop.thisRepN'
p1709
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1710
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1711
Nsg70
Vy
sS'block_loop.thisTrialN'
p1712
I0
sg39
F0.96680986139153902
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05"\r\xfe\x08'
tRp1713
sa(dp1714
S'trial_loop.thisTrialN'
p1715
I55
sg895
g1593
sS'block_loop.thisIndex'
p1716
g889
sg38
S'right'
p1717
sg59
g63
sS'trial_loop.thisN'
p1718
I55
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p1719
g60
(g99
S'7\x00\x00\x00'
tRp1720
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1721
I0
sg904
g1601
sS'block_loop.thisRepN'
p1722
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1723
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p1724
Nsg70
Vy
sS'block_loop.thisTrialN'
p1725
I0
sg39
F0.94990503418603112
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05(\r\xd6\xf8'
tRp1726
sa(dp1727
S'trial_loop.thisTrialN'
p1728
I56
sg895
g1078
sS'block_loop.thisIndex'
p1729
g889
sg38
S'right'
p1730
sg59
g63
sS'trial_loop.thisN'
p1731
I56
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1732
g60
(g99
S'8\x00\x00\x00'
tRp1733
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1734
I0
sg904
g1085
sS'block_loop.thisRepN'
p1735
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1736
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1737
Nsg70
Vy
sS'block_loop.thisTrialN'
p1738
I0
sg39
F1.1332295390152467
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05.\r\xb3\xd0'
tRp1739
sa(dp1740
S'trial_loop.thisTrialN'
p1741
I57
sg895
g1264
sS'block_loop.thisIndex'
p1742
g889
sg38
S'right'
p1743
sg59
g63
sS'trial_loop.thisN'
p1744
I57
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1745
g60
(g99
S'9\x00\x00\x00'
tRp1746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1747
I0
sg904
g1271
sS'block_loop.thisRepN'
p1748
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1749
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1750
Nsg70
Vy
sS'block_loop.thisTrialN'
p1751
I0
sg39
F1.3665594891972432
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x055\x00\xea`'
tRp1752
sa(dp1753
S'trial_loop.thisTrialN'
p1754
I58
sg895
g1279
sS'block_loop.thisIndex'
p1755
g889
sg38
S'right'
p1756
sg59
g63
sS'trial_loop.thisN'
p1757
I58
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p1758
g60
(g99
S':\x00\x00\x00'
tRp1759
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1760
I0
sg904
g1287
sS'block_loop.thisRepN'
p1761
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1762
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p1763
Nsg70
Vy
sS'block_loop.thisTrialN'
p1764
I0
sg39
F0.99996892442595708
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x05;\x06\xf5@'
tRp1765
sa(dp1766
S'trial_loop.thisTrialN'
p1767
I59
sg895
S'30-spaghetti_hoops.png'
p1768
sS'block_loop.thisIndex'
p1769
g889
sg38
S'right'
p1770
sg59
g63
sS'trial_loop.thisN'
p1771
I59
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p1772
g60
(g99
S';\x00\x00\x00'
tRp1773
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1774
I0
sg904
S'19-caramello_redo.png'
p1775
sS'block_loop.thisRepN'
p1776
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1777
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p1778
Nsg70
Vy
sS'block_loop.thisTrialN'
p1779
I0
sg39
F1.4836864639928535
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06\x05\x07\x85\xc8'
tRp1780
sa(dp1781
S'trial_loop.thisTrialN'
p1782
I60
sg895
g1174
sS'block_loop.thisIndex'
p1783
g889
sg38
S'left'
p1784
sg59
g63
sS'trial_loop.thisN'
p1785
I60
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p1786
g60
(g99
S'<\x00\x00\x00'
tRp1787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1788
I0
sg904
g1181
sS'block_loop.thisRepN'
p1789
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1790
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p1791
Nsg70
Vy
sS'block_loop.thisTrialN'
p1792
I0
sg39
F1.5666094952130152
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06\x0c\x006\xb0'
tRp1793
sa(dp1794
S'trial_loop.thisTrialN'
p1795
I61
sg895
S'51-mars.png'
p1796
sS'block_loop.thisIndex'
p1797
g889
sg38
S'left'
p1798
sg59
g63
sS'trial_loop.thisN'
p1799
I61
sg33
S'51-mars.png'
p1800
sg64
g65
sS'trial_loop.thisIndex'
p1801
g60
(g99
S'=\x00\x00\x00'
tRp1802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1803
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1804
sS'block_loop.thisRepN'
p1805
I0
sg907
S'27-hartleys_raspberries_jelly.png'
p1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1807
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p1808
Nsg70
Vy
sS'block_loop.thisTrialN'
p1809
I0
sg39
F2.0833170352875641
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06\x12\tZ\x88'
tRp1810
sa(dp1811
S'trial_loop.thisTrialN'
p1812
I62
sg895
g933
sS'block_loop.thisIndex'
p1813
g889
sg38
S'right'
p1814
sg59
g63
sS'trial_loop.thisN'
p1815
I62
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1816
g60
(g99
S'>\x00\x00\x00'
tRp1817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1818
I0
sg904
g941
sS'block_loop.thisRepN'
p1819
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1820
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1821
Nsg70
Vy
sS'block_loop.thisTrialN'
p1822
I0
sg39
F1.0330339054467004
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06\x19\x0b\x13\xf0'
tRp1823
sa(dp1824
S'trial_loop.thisTrialN'
p1825
I63
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1826
sS'block_loop.thisIndex'
p1827
g889
sg38
S'right'
p1828
sg59
g63
sS'trial_loop.thisN'
p1829
I63
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p1830
g60
(g99
S'?\x00\x00\x00'
tRp1831
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1832
I0
sg904
S'36-fig_rolls.png'
p1833
sS'block_loop.thisRepN'
p1834
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1835
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p1836
Nsg70
Vy
sS'block_loop.thisTrialN'
p1837
I0
sg39
F2.299921484283459
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06\x1f\x0c!x'
tRp1838
sa(dp1839
S'trial_loop.thisTrialN'
p1840
I64
sg895
g1393
sS'block_loop.thisIndex'
p1841
g889
sg38
S'right'
p1842
sg59
g63
sS'trial_loop.thisN'
p1843
I64
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p1844
g60
(g99
S'@\x00\x00\x00'
tRp1845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1846
I0
sg904
g1400
sS'block_loop.thisRepN'
p1847
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1848
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1849
Nsg70
Vy
sS'block_loop.thisTrialN'
p1850
I0
sg39
F1.0171163691866241
sg34
g753
(S"\x07\xdf\x07\x03\x0b\x06'\x01\xf0\x18"
tRp1851
sa(dp1852
S'trial_loop.thisTrialN'
p1853
I65
sg895
g1044
sS'block_loop.thisIndex'
p1854
g889
sg38
S'left'
p1855
sg59
g63
sS'trial_loop.thisN'
p1856
I65
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1857
g60
(g99
S'A\x00\x00\x00'
tRp1858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1859
I0
sg904
g1052
sS'block_loop.thisRepN'
p1860
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1861
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1862
Nsg70
Vy
sS'block_loop.thisTrialN'
p1863
I0
sg39
F0.78328179729714975
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x06-\x02\xbf '
tRp1864
sa(dp1865
S'trial_loop.thisTrialN'
p1866
I66
sg895
g1434
sS'block_loop.thisIndex'
p1867
g889
sg38
S'left'
p1868
sg59
g63
sS'trial_loop.thisN'
p1869
I66
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p1870
g60
(g99
S'B\x00\x00\x00'
tRp1871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1872
I0
sg904
g1442
sS'block_loop.thisRepN'
p1873
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1874
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p1875
Nsg70
Vy
sS'block_loop.thisTrialN'
p1876
I0
sg39
F1.0165781060322843
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x062\x0f:p'
tRp1877
sa(dp1878
S'trial_loop.thisTrialN'
p1879
I67
sg895
S'4-corn.png'
p1880
sS'block_loop.thisIndex'
p1881
g889
sg38
S'left'
p1882
sg59
g63
sS'trial_loop.thisN'
p1883
I67
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p1884
g60
(g99
S'C\x00\x00\x00'
tRp1885
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1886
I0
sg904
S'10-bounty_redo.png'
p1887
sS'block_loop.thisRepN'
p1888
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1889
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vy
sS'block_loop.thisTrialN'
p1891
I0
sg39
F1.8998796320424844
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x069\x00\x8c\xa0'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
g1393
sS'block_loop.thisIndex'
p1895
g889
sg38
S'right'
p1896
sg59
g63
sS'trial_loop.thisN'
p1897
I68
sg33
g1213
sg64
g65
sS'trial_loop.thisIndex'
p1898
g60
(g99
S'D\x00\x00\x00'
tRp1899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1900
I0
sg904
g1400
sS'block_loop.thisRepN'
p1901
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1902
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p1903
Nsg70
Vy
sS'block_loop.thisTrialN'
p1904
I0
sg39
F1.2332170517661325
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07\x03\x0e\xecP'
tRp1905
sa(dp1906
S'trial_loop.thisTrialN'
p1907
I69
sg895
g1061
sS'block_loop.thisIndex'
p1908
g889
sg38
S'left'
p1909
sg59
g63
sS'trial_loop.thisN'
p1910
I69
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p1911
g60
(g99
S'E\x00\x00\x00'
tRp1912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1913
I0
sg904
g1069
sS'block_loop.thisRepN'
p1914
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1915
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p1916
Nsg70
Vy
sS'block_loop.thisTrialN'
p1917
I0
sg39
F0.80030123350070426
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07\n\x03\xcc\xa8'
tRp1918
sa(dp1919
S'trial_loop.thisTrialN'
p1920
I70
sg895
g1309
sS'block_loop.thisIndex'
p1921
g889
sg38
S'right'
p1922
sg59
g63
sS'trial_loop.thisN'
p1923
I70
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p1924
g60
(g99
S'F\x00\x00\x00'
tRp1925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1926
I0
sg904
g1316
sS'block_loop.thisRepN'
p1927
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1928
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1929
Nsg70
Vy
sS'block_loop.thisTrialN'
p1930
I0
sg39
F1.6331805023296511
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07\x10\x01D8'
tRp1931
sa(dp1932
S'trial_loop.thisTrialN'
p1933
I71
sg895
S'23-crunchie_redo.png'
p1934
sS'block_loop.thisIndex'
p1935
g889
sg38
S'right'
p1936
sg59
g63
sS'trial_loop.thisN'
p1937
I71
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p1938
g60
(g99
S'G\x00\x00\x00'
tRp1939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1940
I0
sg904
S'33-ambrosia_rice.png'
p1941
sS'block_loop.thisRepN'
p1942
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1943
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vy
sS'block_loop.thisTrialN'
p1945
I0
sg39
F2.4332394033717719
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07\x16\x0bZ@'
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1309
sS'block_loop.thisIndex'
p1949
g889
sg38
S'right'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g1168
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1316
sS'block_loop.thisRepN'
p1955
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1956
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vy
sS'block_loop.thisTrialN'
p1958
I0
sg39
F1.199879232906369
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07\x1e\x03O\xa8'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1044
sS'block_loop.thisIndex'
p1962
g889
sg38
S'left'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1052
sS'block_loop.thisRepN'
p1968
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1969
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vy
sS'block_loop.thisTrialN'
p1971
I0
sg39
F0.84989214780125621
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07$\x06\xba\xa8'
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1522
sS'block_loop.thisIndex'
p1975
g889
sg38
S'left'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1341
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1529
sS'block_loop.thisRepN'
p1981
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1982
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vy
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.80026189011323368
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07*\x04\xe9\xd0'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1934
sS'block_loop.thisIndex'
p1988
g889
sg38
S'right'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1941
sS'block_loop.thisRepN'
p1994
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p1995
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vy
sS'block_loop.thisTrialN'
p1997
I0
sg39
F0.89996031449618386
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x070\x02eH'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1110
sS'block_loop.thisIndex'
p2001
g889
sg38
S'left'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1118
sS'block_loop.thisRepN'
p2007
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2008
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vy
sS'block_loop.thisTrialN'
p2010
I0
sg39
F0.81666580187220461
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x076\x01L\x08'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g1140
sS'block_loop.thisIndex'
p2014
g889
sg38
S'right'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g1148
sS'block_loop.thisRepN'
p2020
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2021
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vy
sS'block_loop.thisTrialN'
p2023
I0
sg39
F2.1332560530372575
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x07;\x0e~\xf0'
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
S'5-pineapple.png'
p2027
sS'block_loop.thisIndex'
p2028
g889
sg38
S'left'
p2029
sg59
g63
sS'trial_loop.thisN'
p2030
I78
sg33
g1604
sg64
g65
sS'trial_loop.thisIndex'
p2031
g60
(g99
S'N\x00\x00\x00'
tRp2032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2033
I0
sg904
S'40-sardines.png'
p2034
sS'block_loop.thisRepN'
p2035
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2036
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vy
sS'block_loop.thisTrialN'
p2038
I0
sg39
F2.3331478302120559
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08\x07\x01\xb1\x98'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1202
sS'block_loop.thisIndex'
p2042
g889
sg38
S'left'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1210
sS'block_loop.thisRepN'
p2048
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2049
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vy
sS'block_loop.thisTrialN'
p2051
I0
sg39
F0.86707694027018078
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08\x0e\x07;\x90'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g1537
sS'block_loop.thisIndex'
p2055
g889
sg38
S'left'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g1544
sS'block_loop.thisRepN'
p2061
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2062
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vy
sS'block_loop.thisTrialN'
p2064
I0
sg39
F2.0161407672189853
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08\x14\x05\xa98'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
S'3-ellas_strawberries_apples.png'
p2068
sS'block_loop.thisIndex'
p2069
g889
sg38
S'left'
p2070
sg59
g63
sS'trial_loop.thisN'
p2071
I81
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2072
g60
(g99
S'Q\x00\x00\x00'
tRp2073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2074
I0
sg904
S'13-mccoys_steak_crisps.png'
p2075
sS'block_loop.thisRepN'
p2076
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2077
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2078
Nsg70
Vy
sS'block_loop.thisTrialN'
p2079
I0
sg39
F1.0665253915949506
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08\x1b\x06pp'
tRp2080
sa(dp2081
S'trial_loop.thisTrialN'
p2082
I82
sg895
g1796
sS'block_loop.thisIndex'
p2083
g889
sg38
S'left'
p2084
sg59
g63
sS'trial_loop.thisN'
p2085
I82
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2086
g60
(g99
S'R\x00\x00\x00'
tRp2087
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2088
I0
sg904
g1804
sS'block_loop.thisRepN'
p2089
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2090
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p2091
Nsg70
Vy
sS'block_loop.thisTrialN'
p2092
I0
sg39
F1.8332419122252759
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08!\x07\xf7\x10'
tRp2093
sa(dp2094
S'trial_loop.thisTrialN'
p2095
I83
sg895
g1477
sS'block_loop.thisIndex'
p2096
g889
sg38
S'left'
p2097
sg59
g63
sS'trial_loop.thisN'
p2098
I83
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p2099
g60
(g99
S'S\x00\x00\x00'
tRp2100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2101
I0
sg904
g1485
sS'block_loop.thisRepN'
p2102
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2103
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2104
Nsg70
Vy
sS'block_loop.thisTrialN'
p2105
I0
sg39
F1.3166489811487736
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08(\x05\xe3\xd0'
tRp2106
sa(dp2107
S'trial_loop.thisTrialN'
p2108
I84
sg895
g1202
sS'block_loop.thisIndex'
p2109
g889
sg38
S'left'
p2110
sg59
g63
sS'trial_loop.thisN'
p2111
I84
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2112
g60
(g99
S'T\x00\x00\x00'
tRp2113
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2114
I0
sg904
g1210
sS'block_loop.thisRepN'
p2115
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2116
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2117
Nsg70
Vy
sS'block_loop.thisTrialN'
p2118
I0
sg39
F0.86711599856062094
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08.\x0b7\x18'
tRp2119
sa(dp2120
S'trial_loop.thisTrialN'
p2121
I85
sg895
g1093
sS'block_loop.thisIndex'
p2122
g889
sg38
S'right'
p2123
sg59
g63
sS'trial_loop.thisN'
p2124
I85
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2125
g60
(g99
S'U\x00\x00\x00'
tRp2126
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2127
I0
sg904
g1101
sS'block_loop.thisRepN'
p2128
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2129
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2130
Nsg70
Vy
sS'block_loop.thisTrialN'
p2131
I0
sg39
F1.1666226666943658
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x084\t\xdfX'
tRp2132
sa(dp2133
S'trial_loop.thisTrialN'
p2134
I86
sg895
g2068
sS'block_loop.thisIndex'
p2135
g889
sg38
S'left'
p2136
sg59
g63
sS'trial_loop.thisN'
p2137
I86
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2138
g60
(g99
S'V\x00\x00\x00'
tRp2139
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2140
I0
sg904
g2075
sS'block_loop.thisRepN'
p2141
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2142
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2143
Nsg70
Vy
sS'block_loop.thisTrialN'
p2144
I0
sg39
F1.2165474295939021
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x08:\x0c\xd5('
tRp2145
sa(dp2146
S'trial_loop.thisTrialN'
p2147
I87
sg895
g1477
sS'block_loop.thisIndex'
p2148
g889
sg38
S'left'
p2149
sg59
g63
sS'trial_loop.thisN'
p2150
I87
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p2151
g60
(g99
S'W\x00\x00\x00'
tRp2152
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2153
I0
sg904
g1485
sS'block_loop.thisRepN'
p2154
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2155
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2156
Nsg70
Vy
sS'block_loop.thisTrialN'
p2157
I0
sg39
F1.2166437923833655
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t\x05\x01w\x00'
tRp2158
sa(dp2159
S'trial_loop.thisTrialN'
p2160
I88
sg895
g1061
sS'block_loop.thisIndex'
p2161
g889
sg38
S'left'
p2162
sg59
g63
sS'trial_loop.thisN'
p2163
I88
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2164
g60
(g99
S'X\x00\x00\x00'
tRp2165
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2166
I0
sg904
g1069
sS'block_loop.thisRepN'
p2167
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2168
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2169
Nsg70
Vy
sS'block_loop.thisTrialN'
p2170
I0
sg39
F2.2665611427601107
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t\x0b\x05 \x80'
tRp2171
sa(dp2172
S'trial_loop.thisTrialN'
p2173
I89
sg895
g1796
sS'block_loop.thisIndex'
p2174
g889
sg38
S'left'
p2175
sg59
g63
sS'trial_loop.thisN'
p2176
I89
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p2177
g60
(g99
S'Y\x00\x00\x00'
tRp2178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2179
I0
sg904
g1804
sS'block_loop.thisRepN'
p2180
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2181
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p2182
Nsg70
Vy
sS'block_loop.thisTrialN'
p2183
I0
sg39
F2.0501719420067275
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t\x12\t\xb8H'
tRp2184
sa(dp2185
S'trial_loop.thisTrialN'
p2186
I90
sg895
g1264
sS'block_loop.thisIndex'
p2187
g889
sg38
S'right'
p2188
sg59
g63
sS'trial_loop.thisN'
p2189
I90
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2190
g60
(g99
S'Z\x00\x00\x00'
tRp2191
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2192
I0
sg904
g1271
sS'block_loop.thisRepN'
p2193
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2194
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2195
Nsg70
Vy
sS'block_loop.thisTrialN'
p2196
I0
sg39
F0.88319461463152038
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t\x19\n\xf8\x98'
tRp2197
sa(dp2198
S'trial_loop.thisTrialN'
p2199
I91
sg895
g1202
sS'block_loop.thisIndex'
p2200
g889
sg38
S'left'
p2201
sg59
g63
sS'trial_loop.thisN'
p2202
I91
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2203
g60
(g99
S'[\x00\x00\x00'
tRp2204
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2205
I0
sg904
g1210
sS'block_loop.thisRepN'
p2206
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2207
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2208
Nsg70
Vy
sS'block_loop.thisTrialN'
p2209
I0
sg39
F0.78323960293982964
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t\x1f\t\xdfX'
tRp2210
sa(dp2211
S'trial_loop.thisTrialN'
p2212
I92
sg895
g1768
sS'block_loop.thisIndex'
p2213
g889
sg38
S'left'
p2214
sg59
g63
sS'trial_loop.thisN'
p2215
I92
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2216
g60
(g99
S'\\\x00\x00\x00'
tRp2217
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2218
I0
sg904
g1775
sS'block_loop.thisRepN'
p2219
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2220
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2221
Nsg70
Vy
sS'block_loop.thisTrialN'
p2222
I0
sg39
F2.0165615704054289
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t%\x06\xe1\xb8'
tRp2223
sa(dp2224
S'trial_loop.thisTrialN'
p2225
I93
sg895
S'27-hartleys_raspberries_jelly.png'
p2226
sS'block_loop.thisIndex'
p2227
g889
sg38
S'left'
p2228
sg59
g63
sS'trial_loop.thisN'
p2229
I93
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p2230
g60
(g99
S']\x00\x00\x00'
tRp2231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2232
I0
sg904
S'51-mars.png'
p2233
sS'block_loop.thisRepN'
p2234
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2235
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p2236
Nsg70
Vy
sS'block_loop.thisTrialN'
p2237
I0
sg39
F2.2331754276024185
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t,\x07\xa8\xf0'
tRp2238
sa(dp2239
S'trial_loop.thisTrialN'
p2240
I94
sg895
g997
sS'block_loop.thisIndex'
p2241
g889
sg38
S'right'
p2242
sg59
g63
sS'trial_loop.thisN'
p2243
I94
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2244
g60
(g99
S'^\x00\x00\x00'
tRp2245
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2246
I0
sg904
g1005
sS'block_loop.thisRepN'
p2247
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2248
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2249
Nsg70
Vy
sS'block_loop.thisTrialN'
p2250
I0
sg39
F1.5835864519617644
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t3\x0b\xc3\xb8'
tRp2251
sa(dp2252
S'trial_loop.thisTrialN'
p2253
I95
sg895
g950
sS'block_loop.thisIndex'
p2254
g889
sg38
S'right'
p2255
sg59
g63
sS'trial_loop.thisN'
p2256
I95
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2257
g60
(g99
S'_\x00\x00\x00'
tRp2258
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2259
I0
sg904
g958
sS'block_loop.thisRepN'
p2260
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2261
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2262
Nsg70
Vy
sS'block_loop.thisTrialN'
p2263
I0
sg39
F1.4331994897902405
sg34
g753
(S'\x07\xdf\x07\x03\x0b\t:\x05\xe3\xd0'
tRp2264
sa(dp2265
S'trial_loop.thisTrialN'
p2266
I96
sg895
g1014
sS'block_loop.thisIndex'
p2267
g889
sg38
S'right'
p2268
sg59
g63
sS'trial_loop.thisN'
p2269
I96
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2270
g60
(g99
S'`\x00\x00\x00'
tRp2271
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2272
I0
sg904
g1021
sS'block_loop.thisRepN'
p2273
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2274
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2275
Nsg70
Vy
sS'block_loop.thisTrialN'
p2276
I0
sg39
F1.0832089835207626
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n\x04\r\x1f`'
tRp2277
sa(dp2278
S'trial_loop.thisTrialN'
p2279
I97
sg895
g1157
sS'block_loop.thisIndex'
p2280
g889
sg38
S'left'
p2281
sg59
g63
sS'trial_loop.thisN'
p2282
I97
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2283
g60
(g99
S'a\x00\x00\x00'
tRp2284
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2285
I0
sg904
g1165
sS'block_loop.thisRepN'
p2286
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2287
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2288
Nsg70
Vy
sS'block_loop.thisTrialN'
p2289
I0
sg39
F0.83332031390318662
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n\n\x0e\xe0\x98'
tRp2290
sa(dp2291
S'trial_loop.thisTrialN'
p2292
I98
sg895
g1044
sS'block_loop.thisIndex'
p2293
g889
sg38
S'left'
p2294
sg59
g63
sS'trial_loop.thisN'
p2295
I98
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p2296
g60
(g99
S'b\x00\x00\x00'
tRp2297
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2298
I0
sg904
g1052
sS'block_loop.thisRepN'
p2299
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2300
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p2301
Nsg70
Vy
sS'block_loop.thisTrialN'
p2302
I0
sg39
F0.80002468940074323
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n\x10\x0c\xd5('
tRp2303
sa(dp2304
S'trial_loop.thisTrialN'
p2305
I99
sg895
g1522
sS'block_loop.thisIndex'
p2306
g889
sg38
S'left'
p2307
sg59
g63
sS'trial_loop.thisN'
p2308
I99
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p2309
g60
(g99
S'c\x00\x00\x00'
tRp2310
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2311
I0
sg904
g1529
sS'block_loop.thisRepN'
p2312
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2313
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p2314
Nsg70
Vy
sS'block_loop.thisTrialN'
p2315
I0
sg39
F0.83318859908467857
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n\x16\nL\xb8'
tRp2316
sa(dp2317
S'trial_loop.thisTrialN'
p2318
I100
sg895
g1796
sS'block_loop.thisIndex'
p2319
g889
sg38
S'right'
p2320
sg59
g63
sS'trial_loop.thisN'
p2321
I100
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p2322
g60
(g99
S'd\x00\x00\x00'
tRp2323
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2324
I0
sg904
g1804
sS'block_loop.thisRepN'
p2325
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2326
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p2327
Nsg70
Vy
sS'block_loop.thisTrialN'
p2328
I0
sg39
F0.98323030877736528
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n\x1c\x08AH'
tRp2329
sa(dp2330
S'trial_loop.thisTrialN'
p2331
I101
sg895
g1675
sS'block_loop.thisIndex'
p2332
g889
sg38
S'left'
p2333
sg59
g63
sS'trial_loop.thisN'
p2334
I101
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2335
g60
(g99
S'e\x00\x00\x00'
tRp2336
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2337
I0
sg904
g1682
sS'block_loop.thisRepN'
p2338
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2339
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2340
Nsg70
Vy
sS'block_loop.thisTrialN'
p2341
I0
sg39
F2.1833156668217271
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n"\x08\x93P'
tRp2342
sa(dp2343
S'trial_loop.thisTrialN'
p2344
I102
sg895
g1934
sS'block_loop.thisIndex'
p2345
g889
sg38
S'right'
p2346
sg59
g63
sS'trial_loop.thisN'
p2347
I102
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p2348
g60
(g99
S'f\x00\x00\x00'
tRp2349
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2350
I0
sg904
g1941
sS'block_loop.thisRepN'
p2351
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2352
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2353
Nsg70
Vy
sS'block_loop.thisTrialN'
p2354
I0
sg39
F0.81655233326227972
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n)\x0b\xbf\xd0'
tRp2355
sa(dp2356
S'trial_loop.thisTrialN'
p2357
I103
sg895
g997
sS'block_loop.thisIndex'
p2358
g889
sg38
S'right'
p2359
sg59
g63
sS'trial_loop.thisN'
p2360
I103
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2361
g60
(g99
S'g\x00\x00\x00'
tRp2362
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2363
I0
sg904
g1005
sS'block_loop.thisRepN'
p2364
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2365
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2366
Nsg70
Vy
sS'block_loop.thisTrialN'
p2367
I0
sg39
F1.1165470874771017
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n/\tu\xe0'
tRp2368
sa(dp2369
S'trial_loop.thisTrialN'
p2370
I104
sg895
g967
sS'block_loop.thisIndex'
p2371
g889
sg38
S'left'
p2372
sg59
g63
sS'trial_loop.thisN'
p2373
I104
sg33
g978
sg64
g65
sS'trial_loop.thisIndex'
p2374
g60
(g99
S'h\x00\x00\x00'
tRp2375
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2376
I0
sg904
g975
sS'block_loop.thisRepN'
p2377
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2378
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2379
Nsg70
Vy
sS'block_loop.thisTrialN'
p2380
I0
sg39
F1.9498930601116626
sg34
g753
(S'\x07\xdf\x07\x03\x0b\n5\x0b\xee\xb0'
tRp2381
sa(dp2382
S'trial_loop.thisTrialN'
p2383
I105
sg895
g1157
sS'block_loop.thisIndex'
p2384
g889
sg38
S'left'
p2385
sg59
g63
sS'trial_loop.thisN'
p2386
I105
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2387
g60
(g99
S'i\x00\x00\x00'
tRp2388
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2389
I0
sg904
g1165
sS'block_loop.thisRepN'
p2390
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2391
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2392
Nsg70
Vy
sS'block_loop.thisTrialN'
p2393
I0
sg39
F1.0832029964835783
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b\x00\x0b\x858'
tRp2394
sa(dp2395
S'trial_loop.thisTrialN'
p2396
I106
sg895
g1880
sS'block_loop.thisIndex'
p2397
g889
sg38
S'right'
p2398
sg59
g63
sS'trial_loop.thisN'
p2399
I106
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2400
g60
(g99
S'j\x00\x00\x00'
tRp2401
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2402
I0
sg904
g1887
sS'block_loop.thisRepN'
p2403
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2404
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2405
Nsg70
Vy
sS'block_loop.thisTrialN'
p2406
I0
sg39
F1.1666041353887522
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b\x06\rFp'
tRp2407
sa(dp2408
S'trial_loop.thisTrialN'
p2409
I107
sg895
g1232
sS'block_loop.thisIndex'
p2410
g889
sg38
S'left'
p2411
sg59
g63
sS'trial_loop.thisN'
p2412
I107
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2413
g60
(g99
S'k\x00\x00\x00'
tRp2414
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2415
I0
sg904
g1239
sS'block_loop.thisRepN'
p2416
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2417
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2418
Nsg70
Vy
sS'block_loop.thisTrialN'
p2419
I0
sg39
F1.6665570943823695
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b\r\x014\x98'
tRp2420
sa(dp2421
S'trial_loop.thisTrialN'
p2422
I108
sg895
g933
sS'block_loop.thisIndex'
p2423
g889
sg38
S'right'
p2424
sg59
g63
sS'trial_loop.thisN'
p2425
I108
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2426
g60
(g99
S'l\x00\x00\x00'
tRp2427
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2428
I0
sg904
g941
sS'block_loop.thisRepN'
p2429
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2430
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2431
Nsg70
Vy
sS'block_loop.thisTrialN'
p2432
I0
sg39
F0.96637879471290944
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b\x13\x0b\xc3\xb8'
tRp2433
sa(dp2434
S'trial_loop.thisTrialN'
p2435
I109
sg895
g1247
sS'block_loop.thisIndex'
p2436
g889
sg38
S'left'
p2437
sg59
g63
sS'trial_loop.thisN'
p2438
I109
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p2439
g60
(g99
S'm\x00\x00\x00'
tRp2440
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2441
I0
sg904
g1255
sS'block_loop.thisRepN'
p2442
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2443
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2444
Nsg70
Vy
sS'block_loop.thisTrialN'
p2445
I0
sg39
F1.7833063156399476
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b\x19\x0b\xdb('
tRp2446
sa(dp2447
S'trial_loop.thisTrialN'
p2448
I110
sg895
g1232
sS'block_loop.thisIndex'
p2449
g889
sg38
S'left'
p2450
sg59
g63
sS'trial_loop.thisN'
p2451
I110
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2452
g60
(g99
S'n\x00\x00\x00'
tRp2453
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2454
I0
sg904
g1239
sS'block_loop.thisRepN'
p2455
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2456
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2457
Nsg70
Vy
sS'block_loop.thisTrialN'
p2458
I0
sg39
F1.0333127303224501
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b \t\x10P'
tRp2459
sa(dp2460
S'trial_loop.thisTrialN'
p2461
I111
sg895
g1279
sS'block_loop.thisIndex'
p2462
g889
sg38
S'right'
p2463
sg59
g63
sS'trial_loop.thisN'
p2464
I111
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p2465
g60
(g99
S'o\x00\x00\x00'
tRp2466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2467
I0
sg904
g1287
sS'block_loop.thisRepN'
p2468
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2469
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2470
Nsg70
Vy
sS'block_loop.thisTrialN'
p2471
I0
sg39
F1.4832012288820806
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b&\n\x1d\xd8'
tRp2472
sa(dp2473
S'trial_loop.thisTrialN'
p2474
I112
sg895
g1537
sS'block_loop.thisIndex'
p2475
g889
sg38
S'left'
p2476
sg59
g63
sS'trial_loop.thisN'
p2477
I112
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2478
g60
(g99
S'p\x00\x00\x00'
tRp2479
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2480
I0
sg904
g1544
sS'block_loop.thisRepN'
p2481
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2482
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2483
Nsg70
Vy
sS'block_loop.thisTrialN'
p2484
I0
sg39
F1.3329035020747142
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b-\x02\x90@'
tRp2485
sa(dp2486
S'trial_loop.thisTrialN'
p2487
I113
sg895
g1826
sS'block_loop.thisIndex'
p2488
g889
sg38
S'right'
p2489
sg59
g63
sS'trial_loop.thisN'
p2490
I113
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p2491
g60
(g99
S'q\x00\x00\x00'
tRp2492
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2493
I0
sg904
g1833
sS'block_loop.thisRepN'
p2494
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2495
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p2496
Nsg70
Vy
sS'block_loop.thisTrialN'
p2497
I0
sg39
F2.3332034241293513
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b3\x08"\x08'
tRp2498
sa(dp2499
S'trial_loop.thisTrialN'
p2500
I114
sg895
g1934
sS'block_loop.thisIndex'
p2501
g889
sg38
S'right'
p2502
sg59
g63
sS'trial_loop.thisN'
p2503
I114
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p2504
g60
(g99
S'r\x00\x00\x00'
tRp2505
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2506
I0
sg904
g1941
sS'block_loop.thisRepN'
p2507
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2508
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2509
Nsg70
Vy
sS'block_loop.thisTrialN'
p2510
I0
sg39
F1.4833175484623098
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0b:\r\xea\x80'
tRp2511
sa(dp2512
S'trial_loop.thisTrialN'
p2513
I115
sg895
g1537
sS'block_loop.thisIndex'
p2514
g889
sg38
S'left'
p2515
sg59
g63
sS'trial_loop.thisN'
p2516
I115
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2517
g60
(g99
S's\x00\x00\x00'
tRp2518
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2519
I0
sg904
g1544
sS'block_loop.thisRepN'
p2520
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2521
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2522
Nsg70
Vy
sS'block_loop.thisTrialN'
p2523
I0
sg39
F0.91626472739881137
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c\x05\x06\\\xe8'
tRp2524
sa(dp2525
S'trial_loop.thisTrialN'
p2526
I116
sg895
g1014
sS'block_loop.thisIndex'
p2527
g889
sg38
S'right'
p2528
sg59
g63
sS'trial_loop.thisN'
p2529
I116
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2530
g60
(g99
S't\x00\x00\x00'
tRp2531
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2532
I0
sg904
g1021
sS'block_loop.thisRepN'
p2533
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2534
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2535
Nsg70
Vy
sS'block_loop.thisTrialN'
p2536
I0
sg39
F1.0165051211979517
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c\x0b\x05\xbc\xc0'
tRp2537
sa(dp2538
S'trial_loop.thisTrialN'
p2539
I117
sg895
g1578
sS'block_loop.thisIndex'
p2540
g889
sg38
S'right'
p2541
sg59
g63
sS'trial_loop.thisN'
p2542
I117
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p2543
g60
(g99
S'u\x00\x00\x00'
tRp2544
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2545
I0
sg904
g1585
sS'block_loop.thisRepN'
p2546
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2547
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p2548
Nsg70
Vy
sS'block_loop.thisTrialN'
p2549
I0
sg39
F0.74995025057205567
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c\x11\x06\x8b\xc8'
tRp2550
sa(dp2551
S'trial_loop.thisTrialN'
p2552
I118
sg895
g1157
sS'block_loop.thisIndex'
p2553
g889
sg38
S'left'
p2554
sg59
g63
sS'trial_loop.thisN'
p2555
I118
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2556
g60
(g99
S'v\x00\x00\x00'
tRp2557
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2558
I0
sg904
g1165
sS'block_loop.thisRepN'
p2559
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2560
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2561
Nsg70
Vy
sS'block_loop.thisTrialN'
p2562
I0
sg39
F0.99988225493461869
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c\x17\x03\x11('
tRp2563
sa(dp2564
S'trial_loop.thisTrialN'
p2565
I119
sg895
g2027
sS'block_loop.thisIndex'
p2566
g889
sg38
S'left'
p2567
sg59
g63
sS'trial_loop.thisN'
p2568
I119
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2569
g60
(g99
S'w\x00\x00\x00'
tRp2570
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2571
I0
sg904
g2034
sS'block_loop.thisRepN'
p2572
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2573
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p2574
Nsg70
Vy
sS'block_loop.thisTrialN'
p2575
I0
sg39
F1.0498797175714571
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c\x1d\x03\xa1\xb0'
tRp2576
sa(dp2577
S'trial_loop.thisTrialN'
p2578
I120
sg895
g1174
sS'block_loop.thisIndex'
p2579
g889
sg38
S'right'
p2580
sg59
g63
sS'trial_loop.thisN'
p2581
I120
sg33
g1097
sg64
g65
sS'trial_loop.thisIndex'
p2582
g60
(g99
S'x\x00\x00\x00'
tRp2583
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2584
I0
sg904
g1181
sS'block_loop.thisRepN'
p2585
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2586
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2587
Nsg70
Vy
sS'block_loop.thisTrialN'
p2588
I0
sg39
F2.2998601884264644
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c#\x04\xe9\xd0'
tRp2589
sa(dp2590
S'trial_loop.thisTrialN'
p2591
I121
sg895
g916
sS'block_loop.thisIndex'
p2592
g889
sg38
S'left'
p2593
sg59
g63
sS'trial_loop.thisN'
p2594
I121
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2595
g60
(g99
S'y\x00\x00\x00'
tRp2596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2597
I0
sg904
g924
sS'block_loop.thisRepN'
p2598
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2599
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2600
Nsg70
Vy
sS'block_loop.thisTrialN'
p2601
I0
sg39
F0.99987712318852573
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c*\t\xfa\xb0'
tRp2602
sa(dp2603
S'trial_loop.thisTrialN'
p2604
I122
sg895
g1934
sS'block_loop.thisIndex'
p2605
g889
sg38
S'right'
p2606
sg59
g63
sS'trial_loop.thisN'
p2607
I122
sg33
g1251
sg64
g65
sS'trial_loop.thisIndex'
p2608
g60
(g99
S'z\x00\x00\x00'
tRp2609
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2610
I0
sg904
g1941
sS'block_loop.thisRepN'
p2611
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2612
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2613
Nsg70
Vy
sS'block_loop.thisTrialN'
p2614
I0
sg39
F0.71655284643702544
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c0\n\x8b8'
tRp2615
sa(dp2616
S'trial_loop.thisTrialN'
p2617
I123
sg895
g1029
sS'block_loop.thisIndex'
p2618
g889
sg38
S'left'
p2619
sg59
g63
sS'trial_loop.thisN'
p2620
I123
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2621
g60
(g99
S'{\x00\x00\x00'
tRp2622
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2623
I0
sg904
g1036
sS'block_loop.thisRepN'
p2624
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2625
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2626
Nsg70
Vy
sS'block_loop.thisTrialN'
p2627
I0
sg39
F2.9332818828261225
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0c6\x06\x97\x80'
tRp2628
sa(dp2629
S'trial_loop.thisTrialN'
p2630
I124
sg895
g2068
sS'block_loop.thisIndex'
p2631
g889
sg38
S'left'
p2632
sg59
g63
sS'trial_loop.thisN'
p2633
I124
sg33
g1290
sg64
g65
sS'trial_loop.thisIndex'
p2634
g60
(g99
S'|\x00\x00\x00'
tRp2635
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2636
I0
sg904
g2075
sS'block_loop.thisRepN'
p2637
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2638
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p2639
Nsg70
Vy
sS'block_loop.thisTrialN'
p2640
I0
sg39
F1.7666954234518926
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r\x02\x06* '
tRp2641
sa(dp2642
S'trial_loop.thisTrialN'
p2643
I125
sg895
g2027
sS'block_loop.thisIndex'
p2644
g889
sg38
S'left'
p2645
sg59
g63
sS'trial_loop.thisN'
p2646
I125
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2647
g60
(g99
S'}\x00\x00\x00'
tRp2648
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2649
I0
sg904
g2034
sS'block_loop.thisRepN'
p2650
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2651
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p2652
Nsg70
Vy
sS'block_loop.thisTrialN'
p2653
I0
sg39
F1.7499473996017514
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r\t\x03 \xc8'
tRp2654
sa(dp2655
S'trial_loop.thisTrialN'
p2656
I126
sg895
g1768
sS'block_loop.thisIndex'
p2657
g889
sg38
S'left'
p2658
sg59
g63
sS'trial_loop.thisN'
p2659
I126
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2660
g60
(g99
S'~\x00\x00\x00'
tRp2661
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2662
I0
sg904
g1775
sS'block_loop.thisRepN'
p2663
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2664
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2665
Nsg70
Vy
sS'block_loop.thisTrialN'
p2666
I0
sg39
F1.9665062330759611
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r\x0f\x0f\x1f\x18'
tRp2667
sa(dp2668
S'trial_loop.thisTrialN'
p2669
I127
sg895
g1826
sS'block_loop.thisIndex'
p2670
g889
sg38
S'right'
p2671
sg59
g63
sS'trial_loop.thisN'
p2672
I127
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p2673
g60
(g99
S'\x7f\x00\x00\x00'
tRp2674
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2675
I0
sg904
g1833
sS'block_loop.thisRepN'
p2676
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2677
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p2678
Nsg70
Vy
sS'block_loop.thisTrialN'
p2679
I0
sg39
F1.599944178005444
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r\x16\x0f2\xa0'
tRp2680
sa(dp2681
S'trial_loop.thisTrialN'
p2682
I128
sg895
g1477
sS'block_loop.thisIndex'
p2683
g889
sg38
S'left'
p2684
sg59
g63
sS'trial_loop.thisN'
p2685
I128
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2686
g60
(g99
S'\x80\x00\x00\x00'
tRp2687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2688
I0
sg904
g1485
sS'block_loop.thisRepN'
p2689
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2690
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2691
Nsg70
Vy
sS'block_loop.thisTrialN'
p2692
I0
sg39
F2.1499538998132266
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r\x1d\t\x8dP'
tRp2693
sa(dp2694
S'trial_loop.thisTrialN'
p2695
I129
sg895
g1593
sS'block_loop.thisIndex'
p2696
g889
sg38
S'right'
p2697
sg59
g63
sS'trial_loop.thisN'
p2698
I129
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p2699
g60
(g99
S'\x81\x00\x00\x00'
tRp2700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2701
I0
sg904
g1601
sS'block_loop.thisRepN'
p2702
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2703
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p2704
Nsg70
Vy
sS'block_loop.thisTrialN'
p2705
I0
sg39
F1.1166505776918711
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r$\x0c<\xd0'
tRp2706
sa(dp2707
S'trial_loop.thisTrialN'
p2708
I130
sg895
g1434
sS'block_loop.thisIndex'
p2709
g889
sg38
S'left'
p2710
sg59
g63
sS'trial_loop.thisN'
p2711
I130
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p2712
g60
(g99
S'\x82\x00\x00\x00'
tRp2713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2714
I0
sg904
g1442
sS'block_loop.thisRepN'
p2715
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2716
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p2717
Nsg70
Vy
sS'block_loop.thisTrialN'
p2718
I0
sg39
F1.1832127468014733
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r*\x0ew '
tRp2719
sa(dp2720
S'trial_loop.thisTrialN'
p2721
I131
sg895
g1880
sS'block_loop.thisIndex'
p2722
g889
sg38
S'right'
p2723
sg59
g63
sS'trial_loop.thisN'
p2724
I131
sg33
g1488
sg64
g65
sS'trial_loop.thisIndex'
p2725
g60
(g99
S'\x83\x00\x00\x00'
tRp2726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2727
I0
sg904
g1887
sS'block_loop.thisRepN'
p2728
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2729
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2730
Nsg70
Vy
sS'block_loop.thisTrialN'
p2731
I0
sg39
F2.2997712381593374
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r1\x02\xa3\xc8'
tRp2732
sa(dp2733
S'trial_loop.thisTrialN'
p2734
I132
sg895
g2226
sS'block_loop.thisIndex'
p2735
g889
sg38
S'left'
p2736
sg59
g63
sS'trial_loop.thisN'
p2737
I132
sg33
g1800
sg64
g65
sS'trial_loop.thisIndex'
p2738
g60
(g99
S'\x84\x00\x00\x00'
tRp2739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2740
I0
sg904
g2233
sS'block_loop.thisRepN'
p2741
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2742
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p2743
Nsg70
Vy
sS'block_loop.thisTrialN'
p2744
I0
sg39
F1.1832275718456913
sg34
g753
(S'\x07\xdf\x07\x03\x0b\r8\x07\xb4\xa8'
tRp2745
sa(dp2746
S'trial_loop.thisTrialN'
p2747
I133
sg895
g1309
sS'block_loop.thisIndex'
p2748
g889
sg38
S'right'
p2749
sg59
g63
sS'trial_loop.thisN'
p2750
I133
sg33
g1161
sg64
g65
sS'trial_loop.thisIndex'
p2751
g60
(g99
S'\x85\x00\x00\x00'
tRp2752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2753
I0
sg904
g1316
sS'block_loop.thisRepN'
p2754
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2755
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p2756
Nsg70
Vy
sS'block_loop.thisTrialN'
p2757
I0
sg39
F1.2498524622969853
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e\x02\x0b\x1f\xa8'
tRp2758
sa(dp2759
S'trial_loop.thisTrialN'
p2760
I134
sg895
g1140
sS'block_loop.thisIndex'
p2761
g889
sg38
S'right'
p2762
sg59
g63
sS'trial_loop.thisN'
p2763
I134
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2764
g60
(g99
S'\x86\x00\x00\x00'
tRp2765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2766
I0
sg904
g1148
sS'block_loop.thisRepN'
p2767
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2768
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2769
Nsg70
Vy
sS'block_loop.thisTrialN'
p2770
I0
sg39
F0.96700999949234756
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e\t\x00\x00\x00'
tRp2771
sa(dp2772
S'trial_loop.thisTrialN'
p2773
I135
sg895
g1202
sS'block_loop.thisIndex'
p2774
g889
sg38
S'left'
p2775
sg59
g63
sS'trial_loop.thisN'
p2776
I135
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p2777
g60
(g99
S'\x87\x00\x00\x00'
tRp2778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2779
I0
sg904
g1210
sS'block_loop.thisRepN'
p2780
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2781
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p2782
Nsg70
Vy
sS'block_loop.thisTrialN'
p2783
I0
sg39
F3.0665550416838414
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e\x0f\x00\x17p'
tRp2784
sa(dp2785
S'trial_loop.thisTrialN'
p2786
I136
sg895
g1880
sS'block_loop.thisIndex'
p2787
g889
sg38
S'left'
p2788
sg59
g63
sS'trial_loop.thisN'
p2789
I136
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p2790
g60
(g99
S'\x88\x00\x00\x00'
tRp2791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2792
I0
sg904
g1887
sS'block_loop.thisRepN'
p2793
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2794
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p2795
Nsg70
Vy
sS'block_loop.thisTrialN'
p2796
I0
sg39
F1.6332865584172396
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e\x17\x01\x92X'
tRp2797
sa(dp2798
S'trial_loop.thisTrialN'
p2799
I137
sg895
g1768
sS'block_loop.thisIndex'
p2800
g889
sg38
S'right'
p2801
sg59
g63
sS'trial_loop.thisN'
p2802
I137
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p2803
g60
(g99
S'\x89\x00\x00\x00'
tRp2804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2805
I0
sg904
g1775
sS'block_loop.thisRepN'
p2806
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2807
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p2808
Nsg70
Vy
sS'block_loop.thisTrialN'
p2809
I0
sg39
F2.1664222434969815
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e\x1d\x0b\xe6\xe0'
tRp2810
sa(dp2811
S'trial_loop.thisTrialN'
p2812
I138
sg895
g1337
sS'block_loop.thisIndex'
p2813
g889
sg38
S'right'
p2814
sg59
g63
sS'trial_loop.thisN'
p2815
I138
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p2816
g60
(g99
S'\x8a\x00\x00\x00'
tRp2817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2818
I0
sg904
g1345
sS'block_loop.thisRepN'
p2819
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2820
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p2821
Nsg70
Vy
sS'block_loop.thisTrialN'
p2822
I0
sg39
F1.1330658933316045
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e$\x0e\xd0\xf8'
tRp2823
sa(dp2824
S'trial_loop.thisTrialN'
p2825
I139
sg895
g1014
sS'block_loop.thisIndex'
p2826
g889
sg38
S'right'
p2827
sg59
g63
sS'trial_loop.thisN'
p2828
I139
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2829
g60
(g99
S'\x8b\x00\x00\x00'
tRp2830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2831
I0
sg904
g1021
sS'block_loop.thisRepN'
p2832
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2833
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2834
Nsg70
Vy
sS'block_loop.thisTrialN'
p2835
I0
sg39
F0.84965494708922051
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e+\x02\x07\x88'
tRp2836
sa(dp2837
S'trial_loop.thisTrialN'
p2838
I140
sg895
g1061
sS'block_loop.thisIndex'
p2839
g889
sg38
S'left'
p2840
sg59
g63
sS'trial_loop.thisN'
p2841
I140
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p2842
g60
(g99
S'\x8c\x00\x00\x00'
tRp2843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2844
I0
sg904
g1069
sS'block_loop.thisRepN'
p2845
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2846
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p2847
Nsg70
Vy
sS'block_loop.thisTrialN'
p2848
I0
sg39
F0.98318412306116443
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e1\x006\xb0'
tRp2849
sa(dp2850
S'trial_loop.thisTrialN'
p2851
I141
sg895
g1537
sS'block_loop.thisIndex'
p2852
g889
sg38
S'left'
p2853
sg59
g63
sS'trial_loop.thisN'
p2854
I141
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p2855
g60
(g99
S'\x8d\x00\x00\x00'
tRp2856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2857
I0
sg904
g1544
sS'block_loop.thisRepN'
p2858
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2859
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2860
Nsg70
Vy
sS'block_loop.thisTrialN'
p2861
I0
sg39
F1.016448101795504
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0e7\x00\x8c\xa0'
tRp2862
sa(dp2863
S'trial_loop.thisTrialN'
p2864
I142
sg895
g1337
sS'block_loop.thisIndex'
p2865
g889
sg38
S'left'
p2866
sg59
g63
sS'trial_loop.thisN'
p2867
I142
sg33
g1341
sg64
g65
sS'trial_loop.thisIndex'
p2868
g60
(g99
S'\x8e\x00\x00\x00'
tRp2869
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2870
I0
sg904
g1345
sS'block_loop.thisRepN'
p2871
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2872
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vy
sS'block_loop.thisTrialN'
p2874
I0
sg39
F1.1497876882567653
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f\x01\x01[\xa8'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g916
sS'block_loop.thisIndex'
p2878
g889
sg38
S'left'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g924
sS'block_loop.thisRepN'
p2884
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2885
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vy
sS'block_loop.thisTrialN'
p2887
I0
sg39
F0.83326956663540841
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f\x07\x04\x0f\x10'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1093
sS'block_loop.thisIndex'
p2891
g889
sg38
S'left'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1101
sS'block_loop.thisRepN'
p2897
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2898
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vy
sS'block_loop.thisTrialN'
p2900
I0
sg39
F2.1166428800729591
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f\r\x02\x03\xa0'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1140
sS'block_loop.thisIndex'
p2904
g889
sg38
S'right'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1148
sS'block_loop.thisRepN'
p2910
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2911
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vy
sS'block_loop.thisTrialN'
p2913
I0
sg39
F1.0166627798444097
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f\x14\x04t\xa0'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1174
sS'block_loop.thisIndex'
p2917
g889
sg38
S'right'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1181
sS'block_loop.thisRepN'
p2923
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2924
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vy
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.89991697975074203
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f\x1a\x05C\xa8'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g1593
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1604
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1601
sS'block_loop.thisRepN'
p2936
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2937
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vy
sS'block_loop.thisTrialN'
p2939
I0
sg39
F1.0833218819370813
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f \x04*h'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1522
sS'block_loop.thisIndex'
p2943
g889
sg38
S'right'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g1341
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1529
sS'block_loop.thisRepN'
p2949
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2950
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vy
sS'block_loop.thisTrialN'
p2952
I0
sg39
F2.6331651070909174
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f&\x05\xef\x88'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1507
sS'block_loop.thisIndex'
p2956
g889
sg38
S'left'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1514
sS'block_loop.thisRepN'
p2962
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2963
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vy
sS'block_loop.thisTrialN'
p2965
I0
sg39
F0.96702453943998989
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f.\x00\xbb\x80'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g1247
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g1255
sS'block_loop.thisRepN'
p2975
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2976
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vy
sS'block_loop.thisTrialN'
p2978
I0
sg39
F2.233201086333338
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f4\x00\xd2\xf0'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1029
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1036
sS'block_loop.thisRepN'
p2988
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p2989
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vy
sS'block_loop.thisTrialN'
p2991
I0
sg39
F1.316595953104752
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x0f;\x04\xf1\xa0'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g1174
sS'block_loop.thisIndex'
p2995
g889
sg38
S'right'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g1181
sS'block_loop.thisRepN'
p3001
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3002
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vy
sS'block_loop.thisTrialN'
p3004
I0
sg39
F2.0331288427514664
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10\x05\nD\xe8'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g1061
sS'block_loop.thisIndex'
p3008
g889
sg38
S'left'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g1069
sS'block_loop.thisRepN'
p3014
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3015
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vy
sS'block_loop.thisTrialN'
p3017
I0
sg39
F0.98311969113774467
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10\x0c\x0bJ\xa0'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1675
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1682
sS'block_loop.thisRepN'
p3027
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3028
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vy
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.6336802773880663
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10\x12\x0b\x9c\xa8'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1337
sS'block_loop.thisIndex'
p3034
g889
sg38
S'right'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1348
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1345
sS'block_loop.thisRepN'
p3040
I0
sg907
g1341
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3041
I0
sg909
g1348
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vy
sS'block_loop.thisTrialN'
p3043
I0
sg39
F3.2997495707863891
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10\x19\x06tX'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g1029
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g1036
sS'block_loop.thisRepN'
p3053
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3054
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vy
sS'block_loop.thisTrialN'
p3056
I0
sg39
F1.0498643223327235
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10!\x0b}h'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1768
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1775
sS'block_loop.thisRepN'
p3066
I0
sg907
g971
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3067
I0
sg909
g978
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vy
sS'block_loop.thisTrialN'
p3069
I0
sg39
F1.5666123461828647
sg34
g753
(S"\x07\xdf\x07\x03\x0b\x10'\x0c\xc5\x88"
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g950
sS'block_loop.thisIndex'
p3073
g889
sg38
S'right'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g958
sS'block_loop.thisRepN'
p3079
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3080
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vy
sS'block_loop.thisTrialN'
p3082
I0
sg39
F1.5999712622210609
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10.\x06\xa7 '
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g2226
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g2233
sS'block_loop.thisRepN'
p3092
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3093
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vy
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.9833648745661776
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x105\x01\x01\xd0'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1393
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1206
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1400
sS'block_loop.thisRepN'
p3105
I0
sg907
g1206
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3106
I0
sg909
g1213
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vy
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.78320767207469544
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x10;\x01S\xd8'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g896
sS'block_loop.thisIndex'
p3112
g889
sg38
S'right'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g905
sS'block_loop.thisRepN'
p3118
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3119
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vy
sS'block_loop.thisTrialN'
p3121
I0
sg39
F1.1165299816566403
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11\x04\r\xd3\x10'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g2068
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g2075
sS'block_loop.thisRepN'
p3131
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3132
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vy
sS'block_loop.thisTrialN'
p3134
I0
sg39
F1.0332656893160674
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11\x0b\x00\xcf\x08'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1826
sS'block_loop.thisIndex'
p3138
g889
sg38
S'right'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1833
sS'block_loop.thisRepN'
p3144
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3145
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vy
sS'block_loop.thisTrialN'
p3147
I0
sg39
F1.0999102514615515
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11\x11\x01\xd8\xa8'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g1247
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g1255
sS'block_loop.thisRepN'
p3157
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3158
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vy
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.81688703715235533
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11\x17\x03\xd8`'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1675
sS'block_loop.thisIndex'
p3164
g889
sg38
S'left'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1682
sS'block_loop.thisRepN'
p3170
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3171
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vy
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.3332718474116518
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11\x1d\x01\x8ep'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1093
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1101
sS'block_loop.thisRepN'
p3183
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3184
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vy
sS'block_loop.thisTrialN'
p3186
I0
sg39
F1.1832309930100564
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11#\x07 8'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1434
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1442
sS'block_loop.thisRepN'
p3196
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3197
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vy
sS'block_loop.thisTrialN'
p3199
I0
sg39
F1.7998778644409867
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x11)\n\x8b8'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g997
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1005
sS'block_loop.thisRepN'
p3209
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3210
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vy
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.8833149255697208
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x110\x07\xfe\xe0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1507
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1514
sS'block_loop.thisRepN'
p3222
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3223
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vy
sS'block_loop.thisTrialN'
p3225
I0
sg39
F1.2666284256542895
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x116\x06\xa7 '
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g1477
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g1485
sS'block_loop.thisRepN'
p3235
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3236
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vy
sS'block_loop.thisTrialN'
p3238
I0
sg39
F1.8665298391083525
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\x00\x0bF\xb8'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1014
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1021
sS'block_loop.thisRepN'
p3248
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3249
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vy
sS'block_loop.thisTrialN'
p3251
I0
sg39
F1.0999093961700055
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\x07\t\xac\x90'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1232
sS'block_loop.thisIndex'
p3255
g889
sg38
S'left'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1151
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1239
sS'block_loop.thisRepN'
p3261
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3262
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vy
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.0832249489531023
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\r\x0b\xacH'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g933
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g941
sS'block_loop.thisRepN'
p3274
I0
sg907
g937
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3275
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vy
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.849644113402519
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\x13\rm\x80'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g1110
sS'block_loop.thisIndex'
p3281
g889
sg38
S'left'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g1118
sS'block_loop.thisRepN'
p3287
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3288
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vy
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.70001607947142475
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\x19\x0b\xdb('
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1880
sS'block_loop.thisIndex'
p3294
g889
sg38
S'right'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1481
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1887
sS'block_loop.thisRepN'
p3300
I0
sg907
g1481
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3301
I0
sg909
g1488
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vy
sS'block_loop.thisTrialN'
p3303
I0
sg39
F2.3165269596283906
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12\x1f\x07\xa8\xf0'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g916
sS'block_loop.thisIndex'
p3307
g889
sg38
S'left'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g924
sS'block_loop.thisRepN'
p3313
I0
sg907
g920
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3314
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vy
sS'block_loop.thisTrialN'
p3316
I0
sg39
F1.8331535321526644
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12&\x0c\xf8P'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1264
sS'block_loop.thisIndex'
p3320
g889
sg38
S'right'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1065
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1271
sS'block_loop.thisRepN'
p3326
I0
sg907
g1065
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3327
I0
sg909
g1072
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vy
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.88334942230812885
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x12-\n\xe5\x10'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g896
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g905
sS'block_loop.thisRepN'
p3339
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3340
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vy
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.81667635046142095
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x123\t\xcb\xd0'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g2068
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g1283
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g2075
sS'block_loop.thisRepN'
p3352
I0
sg907
g1283
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3353
I0
sg909
g1290
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vy
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.85003583669413274
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x129\x07\x81\xe0'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1078
sS'block_loop.thisIndex'
p3359
g889
sg38
S'right'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1048
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1085
sS'block_loop.thisRepN'
p3365
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3366
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vy
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.69992399313696296
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13\x03\x05\xb1\x08'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g950
sS'block_loop.thisIndex'
p3372
g889
sg38
S'right'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g958
sS'block_loop.thisRepN'
p3378
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3379
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vy
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.69988265407073413
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13\t\x01~\xd0'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1675
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1682
sS'block_loop.thisRepN'
p3391
I0
sg907
g900
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3392
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vy
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.833186888502496
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13\x0e\x0c\xcdX'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g1247
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g1258
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g1255
sS'block_loop.thisRepN'
p3404
I0
sg907
g1251
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3405
I0
sg909
g1258
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vy
sS'block_loop.thisTrialN'
p3407
I0
sg39
F1.0831659338723512
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13\x14\n\xbe\x00'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1507
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1514
sS'block_loop.thisRepN'
p3417
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3418
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vy
sS'block_loop.thisTrialN'
p3420
I0
sg39
F1.0832386336101081
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13\x1a\x0c\x83 '
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g2027
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g2034
sS'block_loop.thisRepN'
p3430
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3431
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vy
sS'block_loop.thisTrialN'
p3433
I0
sg39
F2.0334176460228264
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13 \x0eDX'
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1093
sS'block_loop.thisIndex'
p3437
g889
sg38
S'left'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1103
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1101
sS'block_loop.thisRepN'
p3443
I0
sg907
g1103
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3444
I0
sg909
g1097
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vy
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.4166344982204464
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13(\x00\x07\xd0'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1796
sS'block_loop.thisIndex'
p3450
g889
sg38
S'left'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1804
sS'block_loop.thisRepN'
p3456
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3457
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vy
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.83320656019623129
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13.\x06\xcaH'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1232
sS'block_loop.thisIndex'
p3463
g889
sg38
S'left'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g1144
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1239
sS'block_loop.thisRepN'
p3469
I0
sg907
g1144
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3470
I0
sg909
g1151
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vy
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.78330175408791547
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x134\x04\xf9p'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g2027
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1597
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g2034
sS'block_loop.thisRepN'
p3482
I0
sg907
g1597
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3483
I0
sg909
g1604
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vy
sS'block_loop.thisTrialN'
p3485
I0
sg39
F2.2665665596032341
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x13:\x01\xf7\xe8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1507
sS'block_loop.thisIndex'
p3489
g889
sg38
S'left'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1514
sS'block_loop.thisRepN'
p3495
I0
sg907
g954
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3496
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vy
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.88355697293081903
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14\x05\x06\x8f\xb0'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g2226
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g2233
sS'block_loop.thisRepN'
p3508
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3509
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vy
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.79998049936466487
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14\x0b\x05vp'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1309
sS'block_loop.thisIndex'
p3515
g889
sg38
S'right'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1168
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1316
sS'block_loop.thisRepN'
p3521
I0
sg907
g1161
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3522
I0
sg909
g1168
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vy
sS'block_loop.thisTrialN'
p3524
I0
sg39
F1.183193075107738
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14\x11\x02\xee\x00'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1826
sS'block_loop.thisIndex'
p3528
g889
sg38
S'right'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g1438
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1833
sS'block_loop.thisRepN'
p3534
I0
sg907
g1438
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3535
I0
sg909
g1445
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vy
sS'block_loop.thisTrialN'
p3537
I0
sg39
F1.7332675139368803
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14\x17\x06\x1eh'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g1578
sS'block_loop.thisIndex'
p3541
g889
sg38
S'right'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g1585
sS'block_loop.thisRepN'
p3547
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3548
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vy
sS'block_loop.thisTrialN'
p3550
I0
sg39
F1.849963422053861
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14\x1e\x02\x9b\xf8'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1078
sS'block_loop.thisIndex'
p3554
g889
sg38
S'right'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1055
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1085
sS'block_loop.thisRepN'
p3560
I0
sg907
g1048
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3561
I0
sg909
g1055
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vy
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.81702274332883462
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14%\x00\xc78'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g1110
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g1118
sS'block_loop.thisRepN'
p3573
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3574
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vy
sS'block_loop.thisTrialN'
p3576
I0
sg39
F1.4331501680076144
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x14*\r\xbf\x88'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g2226
sS'block_loop.thisIndex'
p3580
g889
sg38
S'left'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1806
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g2233
sS'block_loop.thisRepN'
p3586
I0
sg907
g1806
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3587
I0
sg909
g1800
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vy
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.73330600203371432
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x141\x05\xb8\xd8'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g997
sS'block_loop.thisIndex'
p3593
g889
sg38
S'right'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g1005
sS'block_loop.thisRepN'
p3599
I0
sg907
g1001
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3600
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vy
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.94991615296930831
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x147\x01\xff\xb8'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1578
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1114
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1585
sS'block_loop.thisRepN'
p3612
I0
sg907
g1114
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3613
I0
sg909
g1121
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vy
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.0499253330931424
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x15\x01\x01\xdc\x90'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F250.85900755450029
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vy
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vy
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'2-steamed_puddings.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'right'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'20-fruit_pastilles.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'20-fruit_pastilles.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'2-steamed_puddings.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vy
sS'block_loop.thisTrialN'
p3650
I0
sg39
F1.2164063065742994
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c\x08\x05\xb8\xd8'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'27-hartleys_raspberries_jelly.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'27-hartleys_raspberries_jelly.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'51-mars.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3664
I1
sg3647
S'51-mars.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vy
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.83343435270717237
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c\x0e\t\xa0\xd8'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'29-beans.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'29-beans.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'46-pistachios.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3681
I1
sg3647
S'46-pistachios.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vy
sS'block_loop.thisTrialN'
p3684
I0
sg39
F1.1665767660761048
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c\x14\x07\x95h'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3698
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3699
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vy
sS'block_loop.thisTrialN'
p3701
I0
sg39
F1.0665373656697739
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c\x1a\n\x87P'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'5-pineapple.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'left'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'5-pineapple.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'40-sardines.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3715
I1
sg3647
S'40-sardines.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vy
sS'block_loop.thisTrialN'
p3718
I0
sg39
F1.0832565947216608
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c \x0c\n\x08'
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
g3654
sS'block_loop.thisIndex'
p3722
g3627
sg38
S'left'
p3723
sg59
g63
sS'trial_loop.thisN'
p3724
I5
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3728
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3729
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vy
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.71695226734800599
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c&\x0e\t\xc0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p3735
sS'block_loop.thisIndex'
p3736
g3627
sg38
S'right'
p3737
sg59
g63
sS'trial_loop.thisN'
p3738
I6
sg33
S'34-hula_hoops_bbq_beef_redo.png'
p3739
sg64
g65
sS'trial_loop.thisIndex'
p3740
g60
(g99
S'\x06\x00\x00\x00'
tRp3741
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3742
I0
sg3642
S'36-fig_rolls.png'
p3743
sS'block_loop.thisRepN'
p3744
I1
sg3645
S'36-fig_rolls.png'
p3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3746
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p3747
Nsg70
Vy
sS'block_loop.thisTrialN'
p3748
I0
sg39
F1.3665480853169356
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c,\n\x16\x08'
tRp3749
sa(dp3750
S'trial_loop.thisTrialN'
p3751
I7
sg3633
S'31-hobnobs.png'
p3752
sS'block_loop.thisIndex'
p3753
g3627
sg38
S'right'
p3754
sg59
g63
sS'trial_loop.thisN'
p3755
I7
sg33
S'25-kitkat.png'
p3756
sg64
g65
sS'trial_loop.thisIndex'
p3757
g60
(g99
S'\x07\x00\x00\x00'
tRp3758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3759
I0
sg3642
S'25-kitkat.png'
p3760
sS'block_loop.thisRepN'
p3761
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3762
I1
sg3647
S'31-hobnobs.png'
p3763
sg55
g11
sS'block_loop.thisTrial'
p3764
Nsg70
Vy
sS'block_loop.thisTrialN'
p3765
I0
sg39
F1.0499552682786089
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c3\x00\xde\xa8'
tRp3766
sa(dp3767
S'trial_loop.thisTrialN'
p3768
I8
sg3633
S'45-chewy_nougat_redo.png'
p3769
sS'block_loop.thisIndex'
p3770
g3627
sg38
S'right'
p3771
sg59
g63
sS'trial_loop.thisN'
p3772
I8
sg33
S'41-peanuts_redo.png'
p3773
sg64
g65
sS'trial_loop.thisIndex'
p3774
g60
(g99
S'\x08\x00\x00\x00'
tRp3775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3776
I0
sg3642
S'41-peanuts_redo.png'
p3777
sS'block_loop.thisRepN'
p3778
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3779
I1
sg3647
S'45-chewy_nougat_redo.png'
p3780
sg55
g11
sS'block_loop.thisTrial'
p3781
Nsg70
Vy
sS'block_loop.thisTrialN'
p3782
I0
sg39
F1.5165555833682447
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1c9\x02&\xc8'
tRp3783
sa(dp3784
S'trial_loop.thisTrialN'
p3785
I9
sg3633
g3654
sS'block_loop.thisIndex'
p3786
g3627
sg38
S'left'
p3787
sg59
g63
sS'trial_loop.thisN'
p3788
I9
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3789
g60
(g99
S'\t\x00\x00\x00'
tRp3790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3791
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3792
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3793
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3794
Nsg70
Vy
sS'block_loop.thisTrialN'
p3795
I0
sg39
F0.74985559836477478
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d\x03\n\x93\x08'
tRp3796
sa(dp3797
S'trial_loop.thisTrialN'
p3798
I10
sg3633
S'33-ambrosia_rice.png'
p3799
sS'block_loop.thisIndex'
p3800
g3627
sg38
S'left'
p3801
sg59
g63
sS'trial_loop.thisN'
p3802
I10
sg33
S'33-ambrosia_rice.png'
p3803
sg64
g65
sS'trial_loop.thisIndex'
p3804
g60
(g99
S'\n\x00\x00\x00'
tRp3805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3806
I0
sg3642
S'23-crunchie_redo.png'
p3807
sS'block_loop.thisRepN'
p3808
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3809
I1
sg3647
S'23-crunchie_redo.png'
p3810
sg55
g11
sS'block_loop.thisTrial'
p3811
Nsg70
Vy
sS'block_loop.thisTrialN'
p3812
I0
sg39
F1.1833207985673653
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d\t\x07V\xe8'
tRp3813
sa(dp3814
S'trial_loop.thisTrialN'
p3815
I11
sg3633
S'16-skips_prawn.png'
p3816
sS'block_loop.thisIndex'
p3817
g3627
sg38
S'left'
p3818
sg59
g63
sS'trial_loop.thisN'
p3819
I11
sg33
S'42-mrkipling_lemon_slices.png'
p3820
sg64
g65
sS'trial_loop.thisIndex'
p3821
g60
(g99
S'\x0b\x00\x00\x00'
tRp3822
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3823
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3824
sS'block_loop.thisRepN'
p3825
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3826
I1
sg3647
S'16-skips_prawn.png'
p3827
sg55
g11
sS'block_loop.thisTrial'
p3828
Nsg70
Vy
sS'block_loop.thisTrialN'
p3829
I0
sg39
F1.6997994057437609
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d\x0f\n\x87P'
tRp3830
sa(dp3831
S'trial_loop.thisTrialN'
p3832
I12
sg3633
S'49-yorkie.png'
p3833
sS'block_loop.thisIndex'
p3834
g3627
sg38
S'right'
p3835
sg59
g63
sS'trial_loop.thisN'
p3836
I12
sg33
S'35-raisins.png'
p3837
sg64
g65
sS'trial_loop.thisIndex'
p3838
g60
(g99
S'\x0c\x00\x00\x00'
tRp3839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3840
I0
sg3642
S'35-raisins.png'
p3841
sS'block_loop.thisRepN'
p3842
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3843
I1
sg3647
S'49-yorkie.png'
p3844
sg55
g11
sS'block_loop.thisTrial'
p3845
Nsg70
Vy
sS'block_loop.thisTrialN'
p3846
I0
sg39
F1.0666799141745287
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d\x16\x06\x8b\xc8'
tRp3847
sa(dp3848
S'trial_loop.thisTrialN'
p3849
I13
sg3633
S'13-mccoys_steak_crisps.png'
p3850
sS'block_loop.thisIndex'
p3851
g3627
sg38
S'right'
p3852
sg59
g63
sS'trial_loop.thisN'
p3853
I13
sg33
S'3-ellas_strawberries_apples.png'
p3854
sg64
g65
sS'trial_loop.thisIndex'
p3855
g60
(g99
S'\r\x00\x00\x00'
tRp3856
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3857
I0
sg3642
S'3-ellas_strawberries_apples.png'
p3858
sS'block_loop.thisRepN'
p3859
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3860
I1
sg3647
S'13-mccoys_steak_crisps.png'
p3861
sg55
g11
sS'block_loop.thisTrial'
p3862
Nsg70
Vy
sS'block_loop.thisTrialN'
p3863
I0
sg39
F1.2999374497167082
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d\x1c\x08\x0e\x80'
tRp3864
sa(dp3865
S'trial_loop.thisTrialN'
p3866
I14
sg3633
g3833
sS'block_loop.thisIndex'
p3867
g3627
sg38
S'right'
p3868
sg59
g63
sS'trial_loop.thisN'
p3869
I14
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p3870
g60
(g99
S'\x0e\x00\x00\x00'
tRp3871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3872
I0
sg3642
g3841
sS'block_loop.thisRepN'
p3873
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3874
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p3875
Nsg70
Vy
sS'block_loop.thisTrialN'
p3876
I0
sg39
F1.1498546860539136
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d"\r\'0'
tRp3877
sa(dp3878
S'trial_loop.thisTrialN'
p3879
I15
sg3633
S'44-crunch.png'
p3880
sS'block_loop.thisIndex'
p3881
g3627
sg38
S'left'
p3882
sg59
g63
sS'trial_loop.thisN'
p3883
I15
sg33
S'26-walkers_smoky_bacon.png'
p3884
sg64
g65
sS'trial_loop.thisIndex'
p3885
g60
(g99
S'\x0f\x00\x00\x00'
tRp3886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3887
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3888
sS'block_loop.thisRepN'
p3889
I1
sg3645
S'44-crunch.png'
p3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3891
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p3892
Nsg70
Vy
sS'block_loop.thisTrialN'
p3893
I0
sg39
F1.0666354390405104
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d)\x00\x9c@'
tRp3894
sa(dp3895
S'trial_loop.thisTrialN'
p3896
I16
sg3633
S'48-twix.png'
p3897
sS'block_loop.thisIndex'
p3898
g3627
sg38
S'right'
p3899
sg59
g63
sS'trial_loop.thisN'
p3900
I16
sg33
S'50-polo.png'
p3901
sg64
g65
sS'trial_loop.thisIndex'
p3902
g60
(g99
S'\x10\x00\x00\x00'
tRp3903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3904
I0
sg3642
S'50-polo.png'
p3905
sS'block_loop.thisRepN'
p3906
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3907
I1
sg3647
S'48-twix.png'
p3908
sg55
g11
sS'block_loop.thisTrial'
p3909
Nsg70
Vy
sS'block_loop.thisTrialN'
p3910
I0
sg39
F1.1332318197910354
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d/\x02\x1e\xf8'
tRp3911
sa(dp3912
S'trial_loop.thisTrialN'
p3913
I17
sg3633
S'18-mms.png'
p3914
sS'block_loop.thisIndex'
p3915
g3627
sg38
S'left'
p3916
sg59
g63
sS'trial_loop.thisN'
p3917
I17
sg33
S'18-mms.png'
p3918
sg64
g65
sS'trial_loop.thisIndex'
p3919
g60
(g99
S'\x11\x00\x00\x00'
tRp3920
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3921
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3922
sS'block_loop.thisRepN'
p3923
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3924
I1
sg3647
S'43-mrporky_pork_crackles_redo.png'
p3925
sg55
g11
sS'block_loop.thisTrial'
p3926
Nsg70
Vy
sS'block_loop.thisTrialN'
p3927
I0
sg39
F1.3333682102011153
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d5\x04\xd6H'
tRp3928
sa(dp3929
S'trial_loop.thisTrialN'
p3930
I18
sg3633
S'40-sardines.png'
p3931
sS'block_loop.thisIndex'
p3932
g3627
sg38
S'right'
p3933
sg59
g63
sS'trial_loop.thisN'
p3934
I18
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p3935
g60
(g99
S'\x12\x00\x00\x00'
tRp3936
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3937
I0
sg3642
S'5-pineapple.png'
p3938
sS'block_loop.thisRepN'
p3939
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3940
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3941
Nsg70
Vy
sS'block_loop.thisTrialN'
p3942
I0
sg39
F1.0832497523933853
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1d;\nh\x10'
tRp3943
sa(dp3944
S'trial_loop.thisTrialN'
p3945
I19
sg3633
S'23-crunchie_redo.png'
p3946
sS'block_loop.thisIndex'
p3947
g3627
sg38
S'right'
p3948
sg59
g63
sS'trial_loop.thisN'
p3949
I19
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p3950
g60
(g99
S'\x13\x00\x00\x00'
tRp3951
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3952
I0
sg3642
S'33-ambrosia_rice.png'
p3953
sS'block_loop.thisRepN'
p3954
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3955
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p3956
Nsg70
Vy
sS'block_loop.thisTrialN'
p3957
I0
sg39
F1.0832751260277291
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e\x05\x0c)H'
tRp3958
sa(dp3959
S'trial_loop.thisTrialN'
p3960
I20
sg3633
S'50-polo.png'
p3961
sS'block_loop.thisIndex'
p3962
g3627
sg38
S'left'
p3963
sg59
g63
sS'trial_loop.thisN'
p3964
I20
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p3965
g60
(g99
S'\x14\x00\x00\x00'
tRp3966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3967
I0
sg3642
S'48-twix.png'
p3968
sS'block_loop.thisRepN'
p3969
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3970
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p3971
Nsg70
Vy
sS'block_loop.thisTrialN'
p3972
I0
sg39
F0.88330979382408259
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e\x0b\r\xea\x80'
tRp3973
sa(dp3974
S'trial_loop.thisTrialN'
p3975
I21
sg3633
S'41-peanuts_redo.png'
p3976
sS'block_loop.thisIndex'
p3977
g3627
sg38
S'left'
p3978
sg59
g63
sS'trial_loop.thisN'
p3979
I21
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p3980
g60
(g99
S'\x15\x00\x00\x00'
tRp3981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3982
I0
sg3642
S'45-chewy_nougat_redo.png'
p3983
sS'block_loop.thisRepN'
p3984
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3985
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p3986
Nsg70
Vy
sS'block_loop.thisTrialN'
p3987
I0
sg39
F3.149794530584586
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e\x11\x0c\x92\xc0'
tRp3988
sa(dp3989
S'trial_loop.thisTrialN'
p3990
I22
sg3633
g3634
sS'block_loop.thisIndex'
p3991
g3627
sg38
S'right'
p3992
sg59
g63
sS'trial_loop.thisN'
p3993
I22
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3994
g60
(g99
S'\x16\x00\x00\x00'
tRp3995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3996
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3997
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p3998
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3999
Nsg70
Vy
sS'block_loop.thisTrialN'
p4000
I0
sg39
F1.0999672708639991
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e\x1a\x006\xb0'
tRp4001
sa(dp4002
S'trial_loop.thisTrialN'
p4003
I23
sg3633
S'19-caramello_redo.png'
p4004
sS'block_loop.thisIndex'
p4005
g3627
sg38
S'left'
p4006
sg59
g63
sS'trial_loop.thisN'
p4007
I23
sg33
S'30-spaghetti_hoops.png'
p4008
sg64
g65
sS'trial_loop.thisIndex'
p4009
g60
(g99
S'\x17\x00\x00\x00'
tRp4010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4011
I0
sg3642
S'30-spaghetti_hoops.png'
p4012
sS'block_loop.thisRepN'
p4013
I1
sg3645
S'19-caramello_redo.png'
p4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4015
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4016
Nsg70
Vy
sS'block_loop.thisTrialN'
p4017
I0
sg39
F1.7665480282976205
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e \x026h'
tRp4018
sa(dp4019
S'trial_loop.thisTrialN'
p4020
I24
sg3633
S'10-bounty_redo.png'
p4021
sS'block_loop.thisIndex'
p4022
g3627
sg38
S'left'
p4023
sg59
g63
sS'trial_loop.thisN'
p4024
I24
sg33
S'10-bounty_redo.png'
p4025
sg64
g65
sS'trial_loop.thisIndex'
p4026
g60
(g99
S'\x18\x00\x00\x00'
tRp4027
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4028
I0
sg3642
S'4-corn.png'
p4029
sS'block_loop.thisRepN'
p4030
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4031
I1
sg3647
S'4-corn.png'
p4032
sg55
g11
sS'block_loop.thisTrial'
p4033
Nsg70
Vy
sS'block_loop.thisTrialN'
p4034
I0
sg39
F3.1332081567388741
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e&\x0es8'
tRp4035
sa(dp4036
S'trial_loop.thisTrialN'
p4037
I25
sg3633
g3961
sS'block_loop.thisIndex'
p4038
g3627
sg38
S'left'
p4039
sg59
g63
sS'trial_loop.thisN'
p4040
I25
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4041
g60
(g99
S'\x19\x00\x00\x00'
tRp4042
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4043
I0
sg3642
g3968
sS'block_loop.thisRepN'
p4044
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4045
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4046
Nsg70
Vy
sS'block_loop.thisTrialN'
p4047
I0
sg39
F0.83332259467897529
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e/\x01\x9e\x10'
tRp4048
sa(dp4049
S'trial_loop.thisTrialN'
p4050
I26
sg3633
g3705
sS'block_loop.thisIndex'
p4051
g3627
sg38
S'left'
p4052
sg59
g63
sS'trial_loop.thisN'
p4053
I26
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4054
g60
(g99
S'\x1a\x00\x00\x00'
tRp4055
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4056
I0
sg3642
g3713
sS'block_loop.thisRepN'
p4057
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4058
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4059
Nsg70
Vy
sS'block_loop.thisTrialN'
p4060
I0
sg39
F0.8832211286535312
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e4\x0e\xd0\xf8'
tRp4061
sa(dp4062
S'trial_loop.thisTrialN'
p4063
I27
sg3633
S'21-nakd_banana_crunch.png'
p4064
sS'block_loop.thisIndex'
p4065
g3627
sg38
S'right'
p4066
sg59
g63
sS'trial_loop.thisN'
p4067
I27
sg33
S'1-treacle_cookies.png'
p4068
sg64
g65
sS'trial_loop.thisIndex'
p4069
g60
(g99
S'\x1b\x00\x00\x00'
tRp4070
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4071
I0
sg3642
S'1-treacle_cookies.png'
p4072
sS'block_loop.thisRepN'
p4073
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4074
I1
sg3647
S'21-nakd_banana_crunch.png'
p4075
sg55
g11
sS'block_loop.thisTrial'
p4076
Nsg70
Vy
sS'block_loop.thisTrialN'
p4077
I0
sg39
F1.3165406442849417
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1e:\r\xb7\xb8'
tRp4078
sa(dp4079
S'trial_loop.thisTrialN'
p4080
I28
sg3633
g4004
sS'block_loop.thisIndex'
p4081
g3627
sg38
S'left'
p4082
sg59
g63
sS'trial_loop.thisN'
p4083
I28
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p4084
g60
(g99
S'\x1c\x00\x00\x00'
tRp4085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4086
I0
sg3642
g4012
sS'block_loop.thisRepN'
p4087
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4088
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4089
Nsg70
Vy
sS'block_loop.thisTrialN'
p4090
I0
sg39
F1.1998786627127629
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f\x05\x03\xcc\xa8'
tRp4091
sa(dp4092
S'trial_loop.thisTrialN'
p4093
I29
sg3633
S'7-olives.png'
p4094
sS'block_loop.thisIndex'
p4095
g3627
sg38
S'left'
p4096
sg59
g63
sS'trial_loop.thisN'
p4097
I29
sg33
S'7-olives.png'
p4098
sg64
g65
sS'trial_loop.thisIndex'
p4099
g60
(g99
S'\x1d\x00\x00\x00'
tRp4100
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4101
I0
sg3642
S'22-daim.png'
p4102
sS'block_loop.thisRepN'
p4103
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4104
I1
sg3647
S'22-daim.png'
p4105
sg55
g11
sS'block_loop.thisTrial'
p4106
Nsg70
Vy
sS'block_loop.thisTrialN'
p4107
I0
sg39
F1.4665233388968772
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f\x0b\x077\xa8'
tRp4108
sa(dp4109
S'trial_loop.thisTrialN'
p4110
I30
sg3633
g3752
sS'block_loop.thisIndex'
p4111
g3627
sg38
S'right'
p4112
sg59
g63
sS'trial_loop.thisN'
p4113
I30
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4114
g60
(g99
S'\x1e\x00\x00\x00'
tRp4115
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4116
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4117
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4118
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4119
Nsg70
Vy
sS'block_loop.thisTrialN'
p4120
I0
sg39
F0.93332635796014074
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f\x11\x0e\xecP'
tRp4121
sa(dp4122
S'trial_loop.thisTrialN'
p4123
I31
sg3633
g4004
sS'block_loop.thisIndex'
p4124
g3627
sg38
S'left'
p4125
sg59
g63
sS'trial_loop.thisN'
p4126
I31
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4127
g60
(g99
S'\x1f\x00\x00\x00'
tRp4128
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4129
I0
sg3642
g4012
sS'block_loop.thisRepN'
p4130
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4131
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4132
Nsg70
Vy
sS'block_loop.thisTrialN'
p4133
I0
sg39
F2.1664804032870961
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f\x17\x0eL('
tRp4134
sa(dp4135
S'trial_loop.thisTrialN'
p4136
I32
sg3633
g3799
sS'block_loop.thisIndex'
p4137
g3627
sg38
S'left'
p4138
sg59
g63
sS'trial_loop.thisN'
p4139
I32
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p4140
g60
(g99
S' \x00\x00\x00'
tRp4141
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4142
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4143
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4144
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4145
Nsg70
Vy
sS'block_loop.thisTrialN'
p4146
I0
sg39
F0.81652410865808633
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f\x1f\x026h'
tRp4147
sa(dp4148
S'trial_loop.thisTrialN'
p4149
I33
sg3633
S'51-mars.png'
p4150
sS'block_loop.thisIndex'
p4151
g3627
sg38
S'right'
p4152
sg59
g63
sS'trial_loop.thisN'
p4153
I33
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4154
g60
(g99
S'!\x00\x00\x00'
tRp4155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4156
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4157
sS'block_loop.thisRepN'
p4158
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4159
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4160
Nsg70
Vy
sS'block_loop.thisTrialN'
p4161
I0
sg39
F1.599859789290349
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f$\x0f.\xb8'
tRp4162
sa(dp4163
S'trial_loop.thisTrialN'
p4164
I34
sg3633
S'35-raisins.png'
p4165
sS'block_loop.thisIndex'
p4166
g3627
sg38
S'left'
p4167
sg59
g63
sS'trial_loop.thisN'
p4168
I34
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4169
g60
(g99
S'"\x00\x00\x00'
tRp4170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4171
I0
sg3642
S'49-yorkie.png'
p4172
sS'block_loop.thisRepN'
p4173
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4174
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4175
Nsg70
Vy
sS'block_loop.thisTrialN'
p4176
I0
sg39
F0.86655008099569386
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f+\t\x89h'
tRp4177
sa(dp4178
S'trial_loop.thisTrialN'
p4179
I35
sg3633
S'3-ellas_strawberries_apples.png'
p4180
sS'block_loop.thisIndex'
p4181
g3627
sg38
S'left'
p4182
sg59
g63
sS'trial_loop.thisN'
p4183
I35
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4184
g60
(g99
S'#\x00\x00\x00'
tRp4185
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4186
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4187
sS'block_loop.thisRepN'
p4188
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4189
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4190
Nsg70
Vy
sS'block_loop.thisTrialN'
p4191
I0
sg39
F1.0500262574341832
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f1\x07\xf3('
tRp4192
sa(dp4193
S'trial_loop.thisTrialN'
p4194
I36
sg3633
g3816
sS'block_loop.thisIndex'
p4195
g3627
sg38
S'right'
p4196
sg59
g63
sS'trial_loop.thisN'
p4197
I36
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4198
g60
(g99
S'$\x00\x00\x00'
tRp4199
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4200
I0
sg3642
g3824
sS'block_loop.thisRepN'
p4201
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4202
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4203
Nsg70
Vy
sS'block_loop.thisTrialN'
p4204
I0
sg39
F1.5497588364387411
sg34
g753
(S'\x07\xdf\x07\x03\x0b\x1f7\t;H'
tRp4205
sa(dp4206
S'trial_loop.thisTrialN'
p4207
I37
sg3633
g4165
sS'block_loop.thisIndex'
p4208
g3627
sg38
S'left'
p4209
sg59
g63
sS'trial_loop.thisN'
p4210
I37
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p4211
g60
(g99
S'%\x00\x00\x00'
tRp4212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4213
I0
sg3642
g4172
sS'block_loop.thisRepN'
p4214
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4215
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4216
Nsg70
Vy
sS'block_loop.thisTrialN'
p4217
I0
sg39
F0.71669225887490029
sg34
g753
(S'\x07\xdf\x07\x03\x0b \x02\x02\xe2H'
tRp4218
sa(dp4219
S'trial_loop.thisTrialN'
p4220
I38
sg3633
g3634
sS'block_loop.thisIndex'
p4221
g3627
sg38
S'right'
p4222
sg59
g63
sS'trial_loop.thisN'
p4223
I38
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4224
g60
(g99
S'&\x00\x00\x00'
tRp4225
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4226
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4227
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4228
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4229
Nsg70
Vy
sS'block_loop.thisTrialN'
p4230
I0
sg39
F1.249856738751987
sg34
g753
(S'\x07\xdf\x07\x03\x0b \x07\x0ekh'
tRp4231
sa(dp4232
S'trial_loop.thisTrialN'
p4233
I39
sg3633
g3688
sS'block_loop.thisIndex'
p4234
g3627
sg38
S'left'
p4235
sg59
g63
sS'trial_loop.thisN'
p4236
I39
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4237
g60
(g99
S"'\x00\x00\x00"
tRp4238
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4239
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4240
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4241
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4242
Nsg70
Vy
sS'block_loop.thisTrialN'
p4243
I0
sg39
F1.1665015004655288
sg34
g753
(S'\x07\xdf\x07\x03\x0b \x0e\x03\x8a@'
tRp4244
sa(dp4245
S'trial_loop.thisTrialN'
p4246
I40
sg3633
g4180
sS'block_loop.thisIndex'
p4247
g3627
sg38
S'left'
p4248
sg59
g63
sS'trial_loop.thisN'
p4249
I40
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4250
g60
(g99
S'(\x00\x00\x00'
tRp4251
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4252
I0
sg3642
g4187
sS'block_loop.thisRepN'
p4253
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4254
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4255
Nsg70
Vy
sS'block_loop.thisTrialN'
p4256
I0
sg39
F2.6669550898086527
sg34
g753
(S'\x07\xdf\x07\x03\x0b \x14\x06|('
tRp4257
sa(dp4258
S'trial_loop.thisTrialN'
p4259
I41
sg3633
g3931
sS'block_loop.thisIndex'
p4260
g3627
sg38
S'right'
p4261
sg59
g63
sS'trial_loop.thisN'
p4262
I41
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4263
g60
(g99
S')\x00\x00\x00'
tRp4264
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4265
I0
sg3642
g3938
sS'block_loop.thisRepN'
p4266
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4267
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4268
Nsg70
Vy
sS'block_loop.thisTrialN'
p4269
I0
sg39
F1.2166948247477194
sg34
g753
(S'\x07\xdf\x07\x03\x0b \x1c\x01\xff\xb8'
tRp4270
sa(dp4271
S'trial_loop.thisTrialN'
p4272
I42
sg3633
g4165
sS'block_loop.thisIndex'
p4273
g3627
sg38
S'left'
p4274
sg59
g63
sS'trial_loop.thisN'
p4275
I42
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4276
g60
(g99
S'*\x00\x00\x00'
tRp4277
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4278
I0
sg3642
g4172
sS'block_loop.thisRepN'
p4279
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4280
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4281
Nsg70
Vy
sS'block_loop.thisTrialN'
p4282
I0
sg39
F0.7330990216041755
sg34
g753
(S'\x07\xdf\x07\x03\x0b "\x05\xa98'
tRp4283
sa(dp4284
S'trial_loop.thisTrialN'
p4285
I43
sg3633
g3880
sS'block_loop.thisIndex'
p4286
g3627
sg38
S'left'
p4287
sg59
g63
sS'trial_loop.thisN'
p4288
I43
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p4289
g60
(g99
S'+\x00\x00\x00'
tRp4290
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4291
I0
sg3642
g3888
sS'block_loop.thisRepN'
p4292
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4293
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p4294
Nsg70
Vy
sS'block_loop.thisTrialN'
p4295
I0
sg39
F0.78324844094731816
sg34
g753
(S'\x07\xdf\x07\x03\x0b (\x02.\x98'
tRp4296
sa(dp4297
S'trial_loop.thisTrialN'
p4298
I44
sg3633
g3961
sS'block_loop.thisIndex'
p4299
g3627
sg38
S'left'
p4300
sg59
g63
sS'trial_loop.thisN'
p4301
I44
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4302
g60
(g99
S',\x00\x00\x00'
tRp4303
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4304
I0
sg3642
g3968
sS'block_loop.thisRepN'
p4305
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4306
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4307
Nsg70
Vy
sS'block_loop.thisTrialN'
p4308
I0
sg39
F0.78323846255170793
sg34
g753
(S'\x07\xdf\x07\x03\x0b -\x0e\xad\xd0'
tRp4309
sa(dp4310
S'trial_loop.thisTrialN'
p4311
I45
sg3633
S'20-fruit_pastilles.png'
p4312
sS'block_loop.thisIndex'
p4313
g3627
sg38
S'left'
p4314
sg59
g63
sS'trial_loop.thisN'
p4315
I45
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4316
g60
(g99
S'-\x00\x00\x00'
tRp4317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4318
I0
sg3642
S'2-steamed_puddings.png'
p4319
sS'block_loop.thisRepN'
p4320
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4321
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4322
Nsg70
Vy
sS'block_loop.thisTrialN'
p4323
I0
sg39
F0.94990275340933295
sg34
g753
(S'\x07\xdf\x07\x03\x0b 3\x0b\xea\xc8'
tRp4324
sa(dp4325
S'trial_loop.thisTrialN'
p4326
I46
sg3633
g3769
sS'block_loop.thisIndex'
p4327
g3627
sg38
S'right'
p4328
sg59
g63
sS'trial_loop.thisN'
p4329
I46
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4330
g60
(g99
S'.\x00\x00\x00'
tRp4331
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4332
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4333
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4334
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4335
Nsg70
Vy
sS'block_loop.thisTrialN'
p4336
I0
sg39
F1.9166305068629299
sg34
g753
(S'\x07\xdf\x07\x03\x0b 9\x0b\x89 '
tRp4337
sa(dp4338
S'trial_loop.thisTrialN'
p4339
I47
sg3633
g3735
sS'block_loop.thisIndex'
p4340
g3627
sg38
S'right'
p4341
sg59
g63
sS'trial_loop.thisN'
p4342
I47
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4343
g60
(g99
S'/\x00\x00\x00'
tRp4344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4345
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4346
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4347
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4348
Nsg70
Vy
sS'block_loop.thisTrialN'
p4349
I0
sg39
F1.3166372921705261
sg34
g753
(S'\x07\xdf\x07\x03\x0b!\x04\n\xe5\x10'
tRp4350
sa(dp4351
S'trial_loop.thisTrialN'
p4352
I48
sg3633
g3850
sS'block_loop.thisIndex'
p4353
g3627
sg38
S'right'
p4354
sg59
g63
sS'trial_loop.thisN'
p4355
I48
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4356
g60
(g99
S'0\x00\x00\x00'
tRp4357
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4358
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4359
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4360
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4361
Nsg70
Vy
sS'block_loop.thisTrialN'
p4362
I0
sg39
F0.85000390582899854
sg34
g753
(S'\x07\xdf\x07\x03\x0b!\x0b\x00\xf6\x18'
tRp4363
sa(dp4364
S'trial_loop.thisTrialN'
p4365
I49
sg3633
g3735
sS'block_loop.thisIndex'
p4366
g3627
sg38
S'right'
p4367
sg59
g63
sS'trial_loop.thisN'
p4368
I49
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4369
g60
(g99
S'1\x00\x00\x00'
tRp4370
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4371
I0
sg3642
g3743
sS'block_loop.thisRepN'
p4372
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4373
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4374
Nsg70
Vy
sS'block_loop.thisTrialN'
p4375
I0
sg39
F1.3499913615605692
sg34
g753
(S'\x07\xdf\x07\x03\x0b!\x10\x0eg\x80'
tRp4376
sa(dp4377
S'trial_loop.thisTrialN'
p4378
I50
sg3633
S'8-liquorice_catherine_wheels.png'
p4379
sS'block_loop.thisIndex'
p4380
g3627
sg38
S'right'
p4381
sg59
g63
sS'trial_loop.thisN'
p4382
I50
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4383
g60
(g99
S'2\x00\x00\x00'
tRp4384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4385
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p4386
sS'block_loop.thisRepN'
p4387
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4388
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4389
Nsg70
Vy
sS'block_loop.thisTrialN'
p4390
I0
sg39
F2.1166562796324797
sg34
g753
(S'\x07\xdf\x07\x03\x0b!\x17\x04\xf1\xa0'
tRp4391
sa(dp4392
S'trial_loop.thisTrialN'
p4393
I51
sg3633
S'6-sour_patch_kids.png'
p4394
sS'block_loop.thisIndex'
p4395
g3627
sg38
S'right'
p4396
sg59
g63
sS'trial_loop.thisN'
p4397
I51
sg33
S'38-maltesers.png'
p4398
sg64
g65
sS'trial_loop.thisIndex'
p4399
g60
(g99
S'3\x00\x00\x00'
tRp4400
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4401
I0
sg3642
S'38-maltesers.png'
p4402
sS'block_loop.thisRepN'
p4403
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4404
I1
sg3647
S'6-sour_patch_kids.png'
p4405
sg55
g11
sS'block_loop.thisTrial'
p4406
Nsg70
Vy
sS'block_loop.thisTrialN'
p4407
I0
sg39
F0.96664022867025778
sg34
g753
(S'\x07\xdf\x07\x03\x0b!\x1e\x07(\x08'
tRp4408
sa(dp4409
S'trial_loop.thisTrialN'
p4410
I52
sg3633
g3654
sS'block_loop.thisIndex'
p4411
g3627
sg38
S'left'
p4412
sg59
g63
sS'trial_loop.thisN'
p4413
I52
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4414
g60
(g99
S'4\x00\x00\x00'
tRp4415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4416
I0
sg3642
g3662
sS'block_loop.thisRepN'
p4417
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4418
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4419
Nsg70
Vy
sS'block_loop.thisTrialN'
p4420
I0
sg39
F1.7997960415987109
sg34
g753
(S'\x07\xdf\x07\x03\x0b!$\x07?x'
tRp4421
sa(dp4422
S'trial_loop.thisTrialN'
p4423
I53
sg3633
S'30-spaghetti_hoops.png'
p4424
sS'block_loop.thisIndex'
p4425
g3627
sg38
S'right'
p4426
sg59
g63
sS'trial_loop.thisN'
p4427
I53
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p4428
g60
(g99
S'5\x00\x00\x00'
tRp4429
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4430
I0
sg3642
S'19-caramello_redo.png'
p4431
sS'block_loop.thisRepN'
p4432
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4433
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4434
Nsg70
Vy
sS'block_loop.thisTrialN'
p4435
I0
sg39
F1.4332513774470499
sg34
g753
(S'\x07\xdf\x07\x03\x0b!+\x04\xb3 '
tRp4436
sa(dp4437
S'trial_loop.thisTrialN'
p4438
I54
sg3633
S'26-walkers_smoky_bacon.png'
p4439
sS'block_loop.thisIndex'
p4440
g3627
sg38
S'right'
p4441
sg59
g63
sS'trial_loop.thisN'
p4442
I54
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p4443
g60
(g99
S'6\x00\x00\x00'
tRp4444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4445
I0
sg3642
S'44-crunch.png'
p4446
sS'block_loop.thisRepN'
p4447
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4448
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p4449
Nsg70
Vy
sS'block_loop.thisTrialN'
p4450
I0
sg39
F1.7665545855288656
sg34
g753
(S'\x07\xdf\x07\x03\x0b!1\x0b\xee\xb0'
tRp4451
sa(dp4452
S'trial_loop.thisTrialN'
p4453
I55
sg3633
g4150
sS'block_loop.thisIndex'
p4454
g3627
sg38
S'right'
p4455
sg59
g63
sS'trial_loop.thisN'
p4456
I55
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4457
g60
(g99
S'7\x00\x00\x00'
tRp4458
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4459
I0
sg3642
g4157
sS'block_loop.thisRepN'
p4460
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4461
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4462
Nsg70
Vy
sS'block_loop.thisTrialN'
p4463
I0
sg39
F1.0497927629830883
sg34
g753
(S'\x07\xdf\x07\x03\x0b!8\x08\xe9@'
tRp4464
sa(dp4465
S'trial_loop.thisTrialN'
p4466
I56
sg3633
g3914
sS'block_loop.thisIndex'
p4467
g3627
sg38
S'left'
p4468
sg59
g63
sS'trial_loop.thisN'
p4469
I56
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4470
g60
(g99
S'8\x00\x00\x00'
tRp4471
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4472
I0
sg3642
g3922
sS'block_loop.thisRepN'
p4473
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4474
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vy
sS'block_loop.thisTrialN'
p4476
I0
sg39
F1.6999621961367666
sg34
g753
(S'\x07\xdf\x07\x03\x0b"\x02\n1`'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3961
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'left'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3968
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4487
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vy
sS'block_loop.thisTrialN'
p4489
I0
sg39
F0.86668436168838525
sg34
g753
(S'\x07\xdf\x07\x03\x0b"\t\x05\xf7X'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
g3931
sS'block_loop.thisIndex'
p4493
g3627
sg38
S'right'
p4494
sg59
g63
sS'trial_loop.thisN'
p4495
I58
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4496
g60
(g99
S':\x00\x00\x00'
tRp4497
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4498
I0
sg3642
g3938
sS'block_loop.thisRepN'
p4499
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4500
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vy
sS'block_loop.thisTrialN'
p4502
I0
sg39
F1.3164000914593998
sg34
g753
(S'\x07\xdf\x07\x03\x0b"\x0f\x04e\x00'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
g4021
sS'block_loop.thisIndex'
p4506
g3627
sg38
S'left'
p4507
sg59
g63
sS'trial_loop.thisN'
p4508
I59
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4509
g60
(g99
S';\x00\x00\x00'
tRp4510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4511
I0
sg3642
g4029
sS'block_loop.thisRepN'
p4512
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4513
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4514
Nsg70
Vy
sS'block_loop.thisTrialN'
p4515
I0
sg39
F1.0998352709475512
sg34
g753
(S'\x07\xdf\x07\x03\x0b"\x15\t\xb8H'
tRp4516
sa(dp4517
S'trial_loop.thisTrialN'
p4518
I60
sg3633
g4180
sS'block_loop.thisIndex'
p4519
g3627
sg38
S'left'
p4520
sg59
g63
sS'trial_loop.thisN'
p4521
I60
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4522
g60
(g99
S'<\x00\x00\x00'
tRp4523
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4524
I0
sg3642
g4187
sS'block_loop.thisRepN'
p4525
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4526
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4527
Nsg70
Vy
sS'block_loop.thisTrialN'
p4528
I0
sg39
F1.6832677705242531
sg34
g753
(S'\x07\xdf\x07\x03\x0b"\x1b\x0b\xf6\x80'
tRp4529
sa(dp4530
S'trial_loop.thisTrialN'
p4531
I61
sg3633
S'46-pistachios.png'
p4532
sS'block_loop.thisIndex'
p4533
g3627
sg38
S'right'
p4534
sg59
g63
sS'trial_loop.thisN'
p4535
I61
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4536
g60
(g99
S'=\x00\x00\x00'
tRp4537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4538
I0
sg3642
S'29-beans.png'
p4539
sS'block_loop.thisRepN'
p4540
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4541
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vy
sS'block_loop.thisTrialN'
p4543
I0
sg39
F1.4999492527322218
sg34
g753
(S'\x07\xdf\x07\x03\x0b""\x07\x81\xe0'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
S'22-daim.png'
p4547
sS'block_loop.thisIndex'
p4548
g3627
sg38
S'right'
p4549
sg59
g63
sS'trial_loop.thisN'
p4550
I62
sg33
g4105
sg64
g65
sS'trial_loop.thisIndex'
p4551
g60
(g99
S'>\x00\x00\x00'
tRp4552
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4553
I0
sg3642
S'7-olives.png'
p4554
sS'block_loop.thisRepN'
p4555
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4556
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4557
Nsg70
Vy
sS'block_loop.thisTrialN'
p4558
I0
sg39
F1.0998714782681418
sg34
g753
(S'\x07\xdf\x07\x03\x0b")\x00m`'
tRp4559
sa(dp4560
S'trial_loop.thisTrialN'
p4561
I63
sg3633
g4532
sS'block_loop.thisIndex'
p4562
g3627
sg38
S'right'
p4563
sg59
g63
sS'trial_loop.thisN'
p4564
I63
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4565
g60
(g99
S'?\x00\x00\x00'
tRp4566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4567
I0
sg3642
g4539
sS'block_loop.thisRepN'
p4568
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4569
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4570
Nsg70
Vy
sS'block_loop.thisTrialN'
p4571
I0
sg39
F1.1665203168677181
sg34
g753
(S'\x07\xdf\x07\x03\x0b"/\x02m\x18'
tRp4572
sa(dp4573
S'trial_loop.thisTrialN'
p4574
I64
sg3633
g4180
sS'block_loop.thisIndex'
p4575
g3627
sg38
S'left'
p4576
sg59
g63
sS'trial_loop.thisN'
p4577
I64
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4578
g60
(g99
S'@\x00\x00\x00'
tRp4579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4580
I0
sg3642
g4187
sS'block_loop.thisRepN'
p4581
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4582
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4583
Nsg70
Vy
sS'block_loop.thisTrialN'
p4584
I0
sg39
F0.74986329598414159
sg34
g753
(S'\x07\xdf\x07\x03\x0b"5\x05_\x00'
tRp4585
sa(dp4586
S'trial_loop.thisTrialN'
p4587
I65
sg3633
g4424
sS'block_loop.thisIndex'
p4588
g3627
sg38
S'left'
p4589
sg59
g63
sS'trial_loop.thisN'
p4590
I65
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p4591
g60
(g99
S'A\x00\x00\x00'
tRp4592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4593
I0
sg3642
g4431
sS'block_loop.thisRepN'
p4594
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4595
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4596
Nsg70
Vy
sS'block_loop.thisTrialN'
p4597
I0
sg39
F0.99989679488226102
sg34
g753
(S'\x07\xdf\x07\x03\x0b";\x02"\xe0'
tRp4598
sa(dp4599
S'trial_loop.thisTrialN'
p4600
I66
sg3633
g3769
sS'block_loop.thisIndex'
p4601
g3627
sg38
S'right'
p4602
sg59
g63
sS'trial_loop.thisN'
p4603
I66
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4604
g60
(g99
S'B\x00\x00\x00'
tRp4605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4606
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4607
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4608
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4609
Nsg70
Vy
sS'block_loop.thisTrialN'
p4610
I0
sg39
F1.1332765800216293
sg34
g753
(S'\x07\xdf\x07\x03\x0b#\x05\x02\xb3h'
tRp4611
sa(dp4612
S'trial_loop.thisTrialN'
p4613
I67
sg3633
g4312
sS'block_loop.thisIndex'
p4614
g3627
sg38
S'left'
p4615
sg59
g63
sS'trial_loop.thisN'
p4616
I67
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4617
g60
(g99
S'C\x00\x00\x00'
tRp4618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4619
I0
sg3642
g4319
sS'block_loop.thisRepN'
p4620
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4621
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4622
Nsg70
Vy
sS'block_loop.thisTrialN'
p4623
I0
sg39
F1.149822470091749
sg34
g753
(S'\x07\xdf\x07\x03\x0b#\x0b\x05,8'
tRp4624
sa(dp4625
S'trial_loop.thisTrialN'
p4626
I68
sg3633
g4394
sS'block_loop.thisIndex'
p4627
g3627
sg38
S'right'
p4628
sg59
g63
sS'trial_loop.thisN'
p4629
I68
sg33
g4405
sg64
g65
sS'trial_loop.thisIndex'
p4630
g60
(g99
S'D\x00\x00\x00'
tRp4631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4632
I0
sg3642
g4402
sS'block_loop.thisRepN'
p4633
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4634
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p4635
Nsg70
Vy
sS'block_loop.thisTrialN'
p4636
I0
sg39
F1.8329203227976905
sg34
g753
(S'\x07\xdf\x07\x03\x0b#\x11\x08\x1e '
tRp4637
sa(dp4638
S'trial_loop.thisTrialN'
p4639
I69
sg3633
g4547
sS'block_loop.thisIndex'
p4640
g3627
sg38
S'right'
p4641
sg59
g63
sS'trial_loop.thisN'
p4642
I69
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p4643
g60
(g99
S'E\x00\x00\x00'
tRp4644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4645
I0
sg3642
g4554
sS'block_loop.thisRepN'
p4646
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4647
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4648
Nsg70
Vy
sS'block_loop.thisTrialN'
p4649
I0
sg39
F1.1330536341592961
sg34
g753
(S'\x07\xdf\x07\x03\x0b#\x18\x06\n\xe0'
tRp4650
sa(dp4651
S'trial_loop.thisTrialN'
p4652
I70
sg3633
g4064
sS'block_loop.thisIndex'
p4653
g3627
sg38
S'right'
p4654
sg59
g63
sS'trial_loop.thisN'
p4655
I70
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4656
g60
(g99
S'F\x00\x00\x00'
tRp4657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4658
I0
sg3642
g4072
sS'block_loop.thisRepN'
p4659
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4660
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4661
Nsg70
Vy
sS'block_loop.thisTrialN'
p4662
I0
sg39
F1.216510937176281
sg34
g753
(S'\x07\xdf\x07\x03\x0b#\x1e\x08\x83\xb0'
tRp4663
sa(dp4664
S'trial_loop.thisTrialN'
p4665
I71
sg3633
g4439
sS'block_loop.thisIndex'
p4666
g3627
sg38
S'right'
p4667
sg59
g63
sS'trial_loop.thisN'
p4668
I71
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p4669
g60
(g99
S'G\x00\x00\x00'
tRp4670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4671
I0
sg3642
g4446
sS'block_loop.thisRepN'
p4672
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4673
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p4674
Nsg70
Vy
sS'block_loop.thisTrialN'
p4675
I0
sg39
F1.8666167936962665
sg34
g753
(S'\x07\xdf\x07\x03\x0b#$\x0ck\xb0'
tRp4676
sa(dp4677
S'trial_loop.thisTrialN'
p4678
I72
sg3633
g4379
sS'block_loop.thisIndex'
p4679
g3627
sg38
S'right'
p4680
sg59
g63
sS'trial_loop.thisN'
p4681
I72
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p4682
g60
(g99
S'H\x00\x00\x00'
tRp4683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4684
I0
sg3642
g4386
sS'block_loop.thisRepN'
p4685
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4686
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4687
Nsg70
Vy
sS'block_loop.thisTrialN'
p4688
I0
sg39
F2.0998344156569146
sg34
g753
(S'\x07\xdf\x07\x03\x0b#+\n\xd1\x88'
tRp4689
sa(dp4690
S'trial_loop.thisTrialN'
p4691
I73
sg3633
S'25-kitkat.png'
p4692
sS'block_loop.thisIndex'
p4693
g3627
sg38
S'left'
p4694
sg59
g63
sS'trial_loop.thisN'
p4695
I73
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4696
g60
(g99
S'I\x00\x00\x00'
tRp4697
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4698
I0
sg3642
S'31-hobnobs.png'
p4699
sS'block_loop.thisRepN'
p4700
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4701
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4702
Nsg70
Vy
sS'block_loop.thisTrialN'
p4703
I0
sg39
F1.4997171837658243
sg34
g753
(S'\x07\xdf\x07\x03\x0b#2\x0c\xc9p'
tRp4704
sa(dp4705
S'trial_loop.thisTrialN'
p4706
I74
sg3633
g3769
sS'block_loop.thisIndex'
p4707
g3627
sg38
S'right'
p4708
sg59
g63
sS'trial_loop.thisN'
p4709
I74
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p4710
g60
(g99
S'J\x00\x00\x00'
tRp4711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4712
I0
sg3642
g3777
sS'block_loop.thisRepN'
p4713
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4714
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p4715
Nsg70
Vy
sS'block_loop.thisTrialN'
p4716
I0
sg39
F1.2999984604757628
sg34
g753
(S'\x07\xdf\x07\x03\x0b#9\x05\xb8\xd8'
tRp4717
sa(dp4718
S'trial_loop.thisTrialN'
p4719
I75
sg3633
g3897
sS'block_loop.thisIndex'
p4720
g3627
sg38
S'right'
p4721
sg59
g63
sS'trial_loop.thisN'
p4722
I75
sg33
g3908
sg64
g65
sS'trial_loop.thisIndex'
p4723
g60
(g99
S'K\x00\x00\x00'
tRp4724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4725
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4726
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4727
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4728
Nsg70
Vy
sS'block_loop.thisTrialN'
p4729
I0
sg39
F0.88323082195165625
sg34
g753
(S'\x07\xdf\x07\x03\x0b$\x03\n\xcd\xa0'
tRp4730
sa(dp4731
S'trial_loop.thisTrialN'
p4732
I76
sg3633
S'42-mrkipling_lemon_slices.png'
p4733
sS'block_loop.thisIndex'
p4734
g3627
sg38
S'left'
p4735
sg59
g63
sS'trial_loop.thisN'
p4736
I76
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p4737
g60
(g99
S'L\x00\x00\x00'
tRp4738
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4739
I0
sg3642
S'16-skips_prawn.png'
p4740
sS'block_loop.thisRepN'
p4741
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4742
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p4743
Nsg70
Vy
sS'block_loop.thisTrialN'
p4744
I0
sg39
F0.85027531818286661
sg34
g753
(S'\x07\xdf\x07\x03\x0b$\t\ty\xc8'
tRp4745
sa(dp4746
S'trial_loop.thisTrialN'
p4747
I77
sg3633
g4394
sS'block_loop.thisIndex'
p4748
g3627
sg38
S'right'
p4749
sg59
g63
sS'trial_loop.thisN'
p4750
I77
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p4751
g60
(g99
S'M\x00\x00\x00'
tRp4752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4753
I0
sg3642
g4402
sS'block_loop.thisRepN'
p4754
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4755
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p4756
Nsg70
Vy
sS'block_loop.thisTrialN'
p4757
I0
sg39
F0.89966866025497438
sg34
g753
(S'\x07\xdf\x07\x03\x0b$\x0f\x07\xa8\xf0'
tRp4758
sa(dp4759
S'trial_loop.thisTrialN'
p4760
I78
sg3633
g3752
sS'block_loop.thisIndex'
p4761
g3627
sg38
S'right'
p4762
sg59
g63
sS'trial_loop.thisN'
p4763
I78
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4764
g60
(g99
S'N\x00\x00\x00'
tRp4765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4766
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4767
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4768
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4769
Nsg70
Vy
sS'block_loop.thisTrialN'
p4770
I0
sg39
F1.6831044099371866
sg34
g753
(S'\x07\xdf\x07\x03\x0b$\x15\x06\xcaH'
tRp4771
sa(dp4772
S'trial_loop.thisTrialN'
p4773
I79
sg3633
g3688
sS'block_loop.thisIndex'
p4774
g3627
sg38
S'left'
p4775
sg59
g63
sS'trial_loop.thisN'
p4776
I79
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4777
g60
(g99
S'O\x00\x00\x00'
tRp4778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4779
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4780
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4781
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4782
Nsg70
Vy
sS'block_loop.thisTrialN'
p4783
I0
sg39
F0.91648995403738809
sg34
g753
(S'\x07\xdf\x07\x03\x0b$\x1c\x02U\xa8'
tRp4784
sa(dp4785
S'trial_loop.thisTrialN'
p4786
I80
sg3633
g4424
sS'block_loop.thisIndex'
p4787
g3627
sg38
S'right'
p4788
sg59
g63
sS'trial_loop.thisN'
p4789
I80
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p4790
g60
(g99
S'P\x00\x00\x00'
tRp4791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4792
I0
sg3642
g4431
sS'block_loop.thisRepN'
p4793
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4794
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p4795
Nsg70
Vy
sS'block_loop.thisTrialN'
p4796
I0
sg39
F1.6998484424293565
sg34
g753
(S'\x07\xdf\x07\x03\x0b$"\x01\xb9h'
tRp4797
sa(dp4798
S'trial_loop.thisTrialN'
p4799
I81
sg3633
g4379
sS'block_loop.thisIndex'
p4800
g3627
sg38
S'right'
p4801
sg59
g63
sS'trial_loop.thisN'
p4802
I81
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p4803
g60
(g99
S'Q\x00\x00\x00'
tRp4804
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4805
I0
sg3642
g4386
sS'block_loop.thisRepN'
p4806
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4807
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p4808
Nsg70
Vy
sS'block_loop.thisTrialN'
p4809
I0
sg39
F0.73334135406184942
sg34
g753
(S'\x07\xdf\x07\x03\x0b$(\x0c\xc1\xa0'
tRp4810
sa(dp4811
S'trial_loop.thisTrialN'
p4812
I82
sg3633
g3752
sS'block_loop.thisIndex'
p4813
g3627
sg38
S'right'
p4814
sg59
g63
sS'trial_loop.thisN'
p4815
I82
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p4816
g60
(g99
S'R\x00\x00\x00'
tRp4817
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4818
I0
sg3642
g3760
sS'block_loop.thisRepN'
p4819
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4820
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p4821
Nsg70
Vy
sS'block_loop.thisTrialN'
p4822
I0
sg39
F2.4832573929925275
sg34
g753
(S'\x07\xdf\x07\x03\x0b$.\tG\x00'
tRp4823
sa(dp4824
S'trial_loop.thisTrialN'
p4825
I83
sg3633
g4394
sS'block_loop.thisIndex'
p4826
g3627
sg38
S'right'
p4827
sg59
g63
sS'trial_loop.thisN'
p4828
I83
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p4829
g60
(g99
S'S\x00\x00\x00'
tRp4830
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4831
I0
sg3642
g4402
sS'block_loop.thisRepN'
p4832
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4833
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p4834
Nsg70
Vy
sS'block_loop.thisTrialN'
p4835
I0
sg39
F0.79961186892978731
sg34
g753
(S'\x07\xdf\x07\x03\x0b$6\x01\xf4\x00'
tRp4836
sa(dp4837
S'trial_loop.thisTrialN'
p4838
I84
sg3633
g3897
sS'block_loop.thisIndex'
p4839
g3627
sg38
S'right'
p4840
sg59
g63
sS'trial_loop.thisN'
p4841
I84
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p4842
g60
(g99
S'T\x00\x00\x00'
tRp4843
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4844
I0
sg3642
g3905
sS'block_loop.thisRepN'
p4845
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4846
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p4847
Nsg70
Vy
sS'block_loop.thisTrialN'
p4848
I0
sg39
F0.98330015754436317
sg34
g753
(S'\x07\xdf\x07\x03\x0b$;\x0e\xad\xd0'
tRp4849
sa(dp4850
S'trial_loop.thisTrialN'
p4851
I85
sg3633
S'38-maltesers.png'
p4852
sS'block_loop.thisIndex'
p4853
g3627
sg38
S'left'
p4854
sg59
g63
sS'trial_loop.thisN'
p4855
I85
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p4856
g60
(g99
S'U\x00\x00\x00'
tRp4857
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4858
I0
sg3642
S'6-sour_patch_kids.png'
p4859
sS'block_loop.thisRepN'
p4860
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4861
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p4862
Nsg70
Vy
sS'block_loop.thisTrialN'
p4863
I0
sg39
F0.74953172816094593
sg34
g753
(S'\x07\xdf\x07\x03\x0b%\x05\x0e\xc5@'
tRp4864
sa(dp4865
S'trial_loop.thisTrialN'
p4866
I86
sg3633
S'1-treacle_cookies.png'
p4867
sS'block_loop.thisIndex'
p4868
g3627
sg38
S'left'
p4869
sg59
g63
sS'trial_loop.thisN'
p4870
I86
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p4871
g60
(g99
S'V\x00\x00\x00'
tRp4872
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4873
I0
sg3642
S'21-nakd_banana_crunch.png'
p4874
sS'block_loop.thisRepN'
p4875
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4876
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vy
sS'block_loop.thisTrialN'
p4878
I0
sg39
F1.0333221385244542
sg34
g753
(S'\x07\xdf\x07\x03\x0b%\x0b\x0b\x89 '
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g3799
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'left'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g3807
sS'block_loop.thisRepN'
p4888
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4889
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vy
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.86655948919724324
sg34
g753
(S'\x07\xdf\x07\x03\x0b%\x11\x0c\x92\xc0'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
g3833
sS'block_loop.thisIndex'
p4895
g3627
sg38
S'right'
p4896
sg59
g63
sS'trial_loop.thisN'
p4897
I88
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p4898
g60
(g99
S'X\x00\x00\x00'
tRp4899
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4900
I0
sg3642
g3841
sS'block_loop.thisRepN'
p4901
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4902
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p4903
Nsg70
Vy
sS'block_loop.thisTrialN'
p4904
I0
sg39
F0.89992581775823055
sg34
g753
(S'\x07\xdf\x07\x03\x0b%\x17\x0b\x00h'
tRp4905
sa(dp4906
S'trial_loop.thisTrialN'
p4907
I89
sg3633
g4094
sS'block_loop.thisIndex'
p4908
g3627
sg38
S'left'
p4909
sg59
g63
sS'trial_loop.thisN'
p4910
I89
sg33
g4105
sg64
g65
sS'trial_loop.thisIndex'
p4911
g60
(g99
S'Y\x00\x00\x00'
tRp4912
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4913
I0
sg3642
g4102
sS'block_loop.thisRepN'
p4914
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4915
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p4916
Nsg70
Vy
sS'block_loop.thisTrialN'
p4917
I0
sg39
F1.2165331747428354
sg34
g753
(S'\x07\xdf\x07\x03\x0b%\x1d\n!\xc0'
tRp4918
sa(dp4919
S'trial_loop.thisTrialN'
p4920
I90
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4921
sS'block_loop.thisIndex'
p4922
g3627
sg38
S'right'
p4923
sg59
g63
sS'trial_loop.thisN'
p4924
I90
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p4925
g60
(g99
S'Z\x00\x00\x00'
tRp4926
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4927
I0
sg3642
S'18-mms.png'
p4928
sS'block_loop.thisRepN'
p4929
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4930
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vy
sS'block_loop.thisTrialN'
p4932
I0
sg39
F1.0999282125731042
sg34
g753
(S'\x07\xdf\x07\x03\x0b%#\r\xcb@'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
S'36-fig_rolls.png'
p4936
sS'block_loop.thisIndex'
p4937
g3627
sg38
S'left'
p4938
sg59
g63
sS'trial_loop.thisN'
p4939
I91
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p4940
g60
(g99
S'[\x00\x00\x00'
tRp4941
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4942
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p4943
sS'block_loop.thisRepN'
p4944
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4945
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p4946
Nsg70
Vy
sS'block_loop.thisTrialN'
p4947
I0
sg39
F0.81703785347053781
sg34
g753
(S'\x07\xdf\x07\x03\x0b%*\x00\x88\xb8'
tRp4948
sa(dp4949
S'trial_loop.thisTrialN'
p4950
I92
sg3633
g3850
sS'block_loop.thisIndex'
p4951
g3627
sg38
S'right'
p4952
sg59
g63
sS'trial_loop.thisN'
p4953
I92
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p4954
g60
(g99
S'\\\x00\x00\x00'
tRp4955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4956
I0
sg3642
g3858
sS'block_loop.thisRepN'
p4957
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4958
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p4959
Nsg70
Vy
sS'block_loop.thisTrialN'
p4960
I0
sg39
F0.83321739388247806
sg34
g753
(S'\x07\xdf\x07\x03\x0b%/\r\x81\x08'
tRp4961
sa(dp4962
S'trial_loop.thisTrialN'
p4963
I93
sg3633
g4852
sS'block_loop.thisIndex'
p4964
g3627
sg38
S'left'
p4965
sg59
g63
sS'trial_loop.thisN'
p4966
I93
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p4967
g60
(g99
S']\x00\x00\x00'
tRp4968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4969
I0
sg3642
g4859
sS'block_loop.thisRepN'
p4970
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4971
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vy
sS'block_loop.thisTrialN'
p4973
I0
sg39
F1.2496896719048891
sg34
g753
(S'\x07\xdf\x07\x03\x0b%5\x0bu\x98'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4021
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'left'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4029
sS'block_loop.thisRepN'
p4983
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4984
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vy
sS'block_loop.thisTrialN'
p4986
I0
sg39
F1.1999194315849309
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x00\x00\x94p'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g4921
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'right'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g4928
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p4997
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vy
sS'block_loop.thisTrialN'
p4999
I0
sg39
F0.86673425366461743
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x06\x04=\xf0'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g4150
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'right'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g3665
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g4157
sS'block_loop.thisRepN'
p5009
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5010
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vy
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.76668573015285801
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x0c\x02\xa7\xb0'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g3705
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'left'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5023
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vy
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.99997804753002129
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x11\x0e\xecP'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g3688
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5036
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vy
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.88325505519787839
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x18\x00:\x98'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3799
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'left'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5049
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vy
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.73328747072719125
sg34
g753
(S'\x07\xdf\x07\x03\x0b&\x1d\x0e%\x18'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4439
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'right'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4446
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5062
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vy
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.69987438625685172
sg34
g753
(S'\x07\xdf\x07\x03\x0b&#\no\xe0'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g3816
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'right'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5075
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vy
sS'block_loop.thisTrialN'
p5077
I0
sg39
F1.5834607241804406
sg34
g753
(S'\x07\xdf\x07\x03\x0b&)\x06|('
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g3735
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g3743
sS'block_loop.thisRepN'
p5087
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5088
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vy
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.4332687683636323
sg34
g753
(S'\x07\xdf\x07\x03\x0b&0\x00\x98X'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4733
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'left'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4740
sS'block_loop.thisRepN'
p5100
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5101
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vy
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.2664379808520607
sg34
g753
(S'\x07\xdf\x07\x03\x0b&6\x07\xd3\xe8'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3654
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5114
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vy
sS'block_loop.thisTrialN'
p5116
I0
sg39
F2.3499705494787122
sg34
g753
(S"\x07\xdf\x07\x03\x0b'\x00\x0c5\x00"
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4312
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4319
sS'block_loop.thisRepN'
p5126
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5127
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vy
sS'block_loop.thisTrialN'
p5129
I0
sg39
F1.5998500959922239
sg34
g753
(S"\x07\xdf\x07\x03\x0b'\x08\x02\xf5\xd0"
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g3914
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'left'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g3922
sS'block_loop.thisRepN'
p5139
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5140
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vy
sS'block_loop.thisTrialN'
p5142
I0
sg39
F1.7333293799874809
sg34
g753
(S"\x07\xdf\x07\x03\x0b'\x0e\x0c\x92\xc0"
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4394
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'right'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4402
sS'block_loop.thisRepN'
p5152
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5153
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vy
sS'block_loop.thisTrialN'
p5155
I0
sg39
F1.5829130528245514
sg34
g753
(S"\x07\xdf\x07\x03\x0b'\x15\t\x148"
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g4021
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'left'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g4029
sS'block_loop.thisRepN'
p5165
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5166
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vy
sS'block_loop.thisTrialN'
p5168
I0
sg39
F2.9665461466574925
sg34
g753
(S"\x07\xdf\x07\x03\x0b'\x1c\x030h"
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4064
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'right'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5179
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vy
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.79999532440888288
sg34
g753
(S"\x07\xdf\x07\x03\x0b'$\x03< "
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4547
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g4105
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4554
sS'block_loop.thisRepN'
p5191
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5192
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vy
sS'block_loop.thisTrialN'
p5194
I0
sg39
F1.2833259873332281
sg34
g753
(S"\x07\xdf\x07\x03\x0b'*\x00\xb3\xb0"
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4921
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'right'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4928
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5205
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vy
sS'block_loop.thisTrialN'
p5207
I0
sg39
F1.966570950096866
sg34
g753
(S"\x07\xdf\x07\x03\x0b'0\x05\x8d\xe0"
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4379
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g3699
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4386
sS'block_loop.thisRepN'
p5217
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5218
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vy
sS'block_loop.thisTrialN'
p5220
I0
sg39
F1.6665320058455109
sg34
g753
(S"\x07\xdf\x07\x03\x0b'7\x05b\xe8"
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4692
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g3763
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4699
sS'block_loop.thisRepN'
p5230
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5231
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vy
sS'block_loop.thisTrialN'
p5233
I0
sg39
F1.199864407862151
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x02\x00\xeeH'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g3769
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g3777
sS'block_loop.thisRepN'
p5243
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5244
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vy
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.88324336622099509
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x08\x04YH'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3946
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'right'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3953
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5257
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vy
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.94995663674490061
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x0e\x03@\x08'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g4921
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'right'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g4928
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5270
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vy
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.66702066212110367
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x14\x02\xde`'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g4852
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g4859
sS'block_loop.thisRepN'
p5282
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5283
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vy
sS'block_loop.thisTrialN'
p5285
I0
sg39
F0.91633628674844658
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x19\ruP'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
g3816
sS'block_loop.thisIndex'
p5289
g3627
sg38
S'right'
p5290
sg59
g63
sS'trial_loop.thisN'
p5291
I118
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5292
g60
(g99
S'v\x00\x00\x00'
tRp5293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5294
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5295
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5296
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5297
Nsg70
Vy
sS'block_loop.thisTrialN'
p5298
I0
sg39
F1.1664567402349348
sg34
g753
(S'\x07\xdf\x07\x03\x0b(\x1f\x0c\xd9\x10'
tRp5299
sa(dp5300
S'trial_loop.thisTrialN'
p5301
I119
sg3633
g4180
sS'block_loop.thisIndex'
p5302
g3627
sg38
S'left'
p5303
sg59
g63
sS'trial_loop.thisN'
p5304
I119
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5305
g60
(g99
S'w\x00\x00\x00'
tRp5306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5307
I0
sg3642
g4187
sS'block_loop.thisRepN'
p5308
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5309
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5310
Nsg70
Vy
sS'block_loop.thisTrialN'
p5311
I0
sg39
F1.1665704939414354
sg34
g753
(S'\x07\xdf\x07\x03\x0b(&\x00\x88\xb8'
tRp5312
sa(dp5313
S'trial_loop.thisTrialN'
p5314
I120
sg3633
g4312
sS'block_loop.thisIndex'
p5315
g3627
sg38
S'left'
p5316
sg59
g63
sS'trial_loop.thisN'
p5317
I120
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5318
g60
(g99
S'x\x00\x00\x00'
tRp5319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5320
I0
sg3642
g4319
sS'block_loop.thisRepN'
p5321
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5322
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5323
Nsg70
Vy
sS'block_loop.thisTrialN'
p5324
I0
sg39
F0.98321462844160123
sg34
g753
(S'\x07\xdf\x07\x03\x0b(,\x03\xb9 '
tRp5325
sa(dp5326
S'trial_loop.thisTrialN'
p5327
I121
sg3633
g3705
sS'block_loop.thisIndex'
p5328
g3627
sg38
S'left'
p5329
sg59
g63
sS'trial_loop.thisN'
p5330
I121
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5331
g60
(g99
S'y\x00\x00\x00'
tRp5332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5333
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5334
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5335
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5336
Nsg70
Vy
sS'block_loop.thisTrialN'
p5337
I0
sg39
F0.98368361302254925
sg34
g753
(S'\x07\xdf\x07\x03\x0b(2\x03\xd0\x90'
tRp5338
sa(dp5339
S'trial_loop.thisTrialN'
p5340
I122
sg3633
g4021
sS'block_loop.thisIndex'
p5341
g3627
sg38
S'left'
p5342
sg59
g63
sS'trial_loop.thisN'
p5343
I122
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p5344
g60
(g99
S'z\x00\x00\x00'
tRp5345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5346
I0
sg3642
g4029
sS'block_loop.thisRepN'
p5347
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5348
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5349
Nsg70
Vy
sS'block_loop.thisTrialN'
p5350
I0
sg39
F1.4998916631366228
sg34
g753
(S'\x07\xdf\x07\x03\x0b(8\x04"\x98'
tRp5351
sa(dp5352
S'trial_loop.thisTrialN'
p5353
I123
sg3633
g4379
sS'block_loop.thisIndex'
p5354
g3627
sg38
S'right'
p5355
sg59
g63
sS'trial_loop.thisN'
p5356
I123
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p5357
g60
(g99
S'{\x00\x00\x00'
tRp5358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5359
I0
sg3642
g4386
sS'block_loop.thisRepN'
p5360
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5361
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p5362
Nsg70
Vy
sS'block_loop.thisTrialN'
p5363
I0
sg39
F2.0164828836304878
sg34
g753
(S'\x07\xdf\x07\x03\x0b)\x02\x0cT@'
tRp5364
sa(dp5365
S'trial_loop.thisTrialN'
p5366
I124
sg3633
g3880
sS'block_loop.thisIndex'
p5367
g3627
sg38
S'left'
p5368
sg59
g63
sS'trial_loop.thisN'
p5369
I124
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p5370
g60
(g99
S'|\x00\x00\x00'
tRp5371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5372
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5373
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5374
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5375
Nsg70
Vy
sS'block_loop.thisTrialN'
p5376
I0
sg39
F1.0998500959922239
sg34
g753
(S'\x07\xdf\x07\x03\x0b)\t\r\x1bx'
tRp5377
sa(dp5378
S'trial_loop.thisTrialN'
p5379
I125
sg3633
g4921
sS'block_loop.thisIndex'
p5380
g3627
sg38
S'right'
p5381
sg59
g63
sS'trial_loop.thisN'
p5382
I125
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5383
g60
(g99
S'}\x00\x00\x00'
tRp5384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5385
I0
sg3642
g4928
sS'block_loop.thisRepN'
p5386
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5387
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5388
Nsg70
Vy
sS'block_loop.thisTrialN'
p5389
I0
sg39
F0.73324869753469102
sg34
g753
(S'\x07\xdf\x07\x03\x0b)\x0f\x0f\x1b0'
tRp5390
sa(dp5391
S'trial_loop.thisTrialN'
p5392
I126
sg3633
g3799
sS'block_loop.thisIndex'
p5393
g3627
sg38
S'left'
p5394
sg59
g63
sS'trial_loop.thisN'
p5395
I126
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p5396
g60
(g99
S'~\x00\x00\x00'
tRp5397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5398
I0
sg3642
g3807
sS'block_loop.thisRepN'
p5399
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5400
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5401
Nsg70
Vy
sS'block_loop.thisTrialN'
p5402
I0
sg39
F0.90000707040599082
sg34
g753
(S'\x07\xdf\x07\x03\x0b)\x15\x0b\xa0\x90'
tRp5403
sa(dp5404
S'trial_loop.thisTrialN'
p5405
I127
sg3633
g4692
sS'block_loop.thisIndex'
p5406
g3627
sg38
S'left'
p5407
sg59
g63
sS'trial_loop.thisN'
p5408
I127
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5409
g60
(g99
S'\x7f\x00\x00\x00'
tRp5410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5411
I0
sg3642
g4699
sS'block_loop.thisRepN'
p5412
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5413
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5414
Nsg70
Vy
sS'block_loop.thisTrialN'
p5415
I0
sg39
F1.8498442515037823
sg34
g753
(S'\x07\xdf\x07\x03\x0b)\x1b\n\x87P'
tRp5416
sa(dp5417
S'trial_loop.thisTrialN'
p5418
I128
sg3633
g4733
sS'block_loop.thisIndex'
p5419
g3627
sg38
S'left'
p5420
sg59
g63
sS'trial_loop.thisN'
p5421
I128
sg33
g3820
sg64
g65
sS'trial_loop.thisIndex'
p5422
g60
(g99
S'\x80\x00\x00\x00'
tRp5423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5424
I0
sg3642
g4740
sS'block_loop.thisRepN'
p5425
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5426
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5427
Nsg70
Vy
sS'block_loop.thisTrialN'
p5428
I0
sg39
F1.0329332662031447
sg34
g753
(S'\x07\xdf\x07\x03\x0b)"\x08\xae\xa8'
tRp5429
sa(dp5430
S'trial_loop.thisTrialN'
p5431
I129
sg3633
g4094
sS'block_loop.thisIndex'
p5432
g3627
sg38
S'left'
p5433
sg59
g63
sS'trial_loop.thisN'
p5434
I129
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5435
g60
(g99
S'\x81\x00\x00\x00'
tRp5436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5437
I0
sg3642
g4102
sS'block_loop.thisRepN'
p5438
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5439
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5440
Nsg70
Vy
sS'block_loop.thisTrialN'
p5441
I0
sg39
F0.91664590210075403
sg34
g753
(S'\x07\xdf\x07\x03\x0b)(\t\xbc0'
tRp5442
sa(dp5443
S'trial_loop.thisTrialN'
p5444
I130
sg3633
g4439
sS'block_loop.thisIndex'
p5445
g3627
sg38
S'right'
p5446
sg59
g63
sS'trial_loop.thisN'
p5447
I130
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p5448
g60
(g99
S'\x82\x00\x00\x00'
tRp5449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5450
I0
sg3642
g4446
sS'block_loop.thisRepN'
p5451
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5452
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5453
Nsg70
Vy
sS'block_loop.thisTrialN'
p5454
I0
sg39
F1.1998467318471739
sg34
g753
(S'\x07\xdf\x07\x03\x0b).\x08\xdd\x88'
tRp5455
sa(dp5456
S'trial_loop.thisTrialN'
p5457
I131
sg3633
g4852
sS'block_loop.thisIndex'
p5458
g3627
sg38
S'left'
p5459
sg59
g63
sS'trial_loop.thisN'
p5460
I131
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p5461
g60
(g99
S'\x83\x00\x00\x00'
tRp5462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5463
I0
sg3642
g4859
sS'block_loop.thisRepN'
p5464
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5465
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p5466
Nsg70
Vy
sS'block_loop.thisTrialN'
p5467
I0
sg39
F1.0000607256624789
sg34
g753
(S'\x07\xdf\x07\x03\x0b)4\x0c\x87\x08'
tRp5468
sa(dp5469
S'trial_loop.thisTrialN'
p5470
I132
sg3633
g3946
sS'block_loop.thisIndex'
p5471
g3627
sg38
S'right'
p5472
sg59
g63
sS'trial_loop.thisN'
p5473
I132
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p5474
g60
(g99
S'\x84\x00\x00\x00'
tRp5475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5476
I0
sg3642
g3953
sS'block_loop.thisRepN'
p5477
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5478
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p5479
Nsg70
Vy
sS'block_loop.thisTrialN'
p5480
I0
sg39
F0.74997049245939706
sg34
g753
(S'\x07\xdf\x07\x03\x0b):\r\x17\x90'
tRp5481
sa(dp5482
S'trial_loop.thisTrialN'
p5483
I133
sg3633
S'4-corn.png'
p5484
sS'block_loop.thisIndex'
p5485
g3627
sg38
S'right'
p5486
sg59
g63
sS'trial_loop.thisN'
p5487
I133
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p5488
g60
(g99
S'\x85\x00\x00\x00'
tRp5489
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5490
I0
sg3642
S'10-bounty_redo.png'
p5491
sS'block_loop.thisRepN'
p5492
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5493
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vy
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.1332172798438478
sg34
g753
(S'\x07\xdf\x07\x03\x0b*\x04\t\xdbp'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g4094
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'left'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g4102
sS'block_loop.thisRepN'
p5505
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5506
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vy
sS'block_loop.thisTrialN'
p5508
I0
sg39
F1.4832157688297229
sg34
g753
(S'\x07\xdf\x07\x03\x0b*\n\x0cT@'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g4064
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5518
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5519
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vy
sS'block_loop.thisTrialN'
p5521
I0
sg39
F1.4998748424131918
sg34
g753
(S'\x07\xdf\x07\x03\x0b*\x11\x05\x05('
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g4936
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5532
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vy
sS'block_loop.thisTrialN'
p5534
I0
sg39
F1.6332392323138265
sg34
g753
(S'\x07\xdf\x07\x03\x0b*\x17\x0c\xf8P'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g3671
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5545
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vy
sS'block_loop.thisTrialN'
p5547
I0
sg39
F1.2332980193168623
sg34
g753
(S'\x07\xdf\x07\x03\x0b*\x1e\x08\n\x98'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g3880
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g3884
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5557
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5558
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vy
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.70011956968573941
sg34
g753
(S'\x07\xdf\x07\x03\x0b*$\x0b\xee\xb0'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g3976
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g3983
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5571
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vy
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.89989303160200507
sg34
g753
(S'\x07\xdf\x07\x03\x0b**\x07\xfa\xf8'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4532
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'right'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4539
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5584
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vy
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.93324025866240845
sg34
g753
(S'\x07\xdf\x07\x03\x0b*0\x06\xe1\xb8'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g3833
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g3841
sS'block_loop.thisRepN'
p5596
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5597
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vy
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.86664302262124693
sg34
g753
(S'\x07\xdf\x07\x03\x0b*6\x06\x80\x10'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g4692
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g4699
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5610
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vy
sS'block_loop.thisTrialN'
p5612
I0
sg39
F2.5836129659837752
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x00\x04\xed\xb8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4094
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4102
sS'block_loop.thisRepN'
p5622
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5623
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vy
sS'block_loop.thisTrialN'
p5625
I0
sg39
F1.0999946401761918
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x07\x0eDX'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3961
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'left'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3968
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5636
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vy
sS'block_loop.thisTrialN'
p5638
I0
sg39
F1.1499077140979352
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x0e\x01\x01\xd0'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4733
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'left'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4740
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5649
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vy
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.66650606201710616
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x14\x03\xf3\xb8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g3880
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'left'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g3888
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5662
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vy
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.63317907684449892
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x19\x0e\x8a\xa8'
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4852
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4398
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4859
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4398
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5675
I1
sg3647
g4405
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vy
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.73309189417886955
sg34
g753
(S'\x07\xdf\x07\x03\x0b+\x1f\tf@'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4424
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'left'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4431
sS'block_loop.thisRepN'
p5687
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5688
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vy
sS'block_loop.thisTrialN'
p5690
I0
sg39
F1.9336171569093494
sg34
g753
(S'\x07\xdf\x07\x03\x0b+%\x05\xeb\xa0'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4936
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'left'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5701
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vy
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.79994571752922639
sg34
g753
(S'\x07\xdf\x07\x03\x0b+,\x05\x82('
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g3976
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'left'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g3983
sS'block_loop.thisRepN'
p5713
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5714
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vy
sS'block_loop.thisTrialN'
p5716
I0
sg39
F1.3665304093019586
sg34
g753
(S'\x07\xdf\x07\x03\x0b+2\x02\xbf '
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3671
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5727
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vy
sS'block_loop.thisTrialN'
p5729
I0
sg39
F1.1832358396595737
sg34
g753
(S'\x07\xdf\x07\x03\x0b+8\t\x08\x80'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g3931
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g3938
sS'block_loop.thisRepN'
p5739
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5740
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vy
sS'block_loop.thisTrialN'
p5742
I0
sg39
F1.01657525506198
sg34
g753
(S'\x07\xdf\x07\x03\x0b,\x02\x0c8\xe8'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g3671
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5752
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5753
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vy
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.83325901804619207
sg34
g753
(S'\x07\xdf\x07\x03\x0b,\x08\r\x07\xf0'
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4733
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'left'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4740
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5766
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vy
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.79977323383809562
sg34
g753
(S'\x07\xdf\x07\x03\x0b,\x0e\n\xf8\x98'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4547
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4554
sS'block_loop.thisRepN'
p5778
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5779
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vy
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.7497737755220442
sg34
g753
(S'\x07\xdf\x07\x03\x0b,\x14\x08t\x10'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4064
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4072
sS'block_loop.thisRepN'
p5791
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5792
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vy
sS'block_loop.thisTrialN'
p5794
I0
sg39
F0.76658252503602853
sg34
g753
(S'\x07\xdf\x07\x03\x0b,\x1b\x050 '
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4532
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4539
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5805
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vy
sS'block_loop.thisTrialN'
p5807
I0
sg39
F0.86659997297283553
sg34
g753
(S'\x07\xdf\x07\x03\x0b,!\x02.\x98'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4165
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4172
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5818
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vy
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.71666488956179819
sg34
g753
(S"\x07\xdf\x07\x03\x0b,'\x00\x9c@"
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3897
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3905
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5831
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vy
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.76667518156409642
sg34
g753
(S'\x07\xdf\x07\x03\x0b,,\x0b\xe6\xe0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g4936
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5844
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vy
sS'block_loop.thisTrialN'
p5846
I0
sg39
F1.000020812081857
sg34
g753
(S'\x07\xdf\x07\x03\x0b,2\x08\xe9@'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4532
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4539
sS'block_loop.thisRepN'
p5856
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5857
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vy
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.83326956663495366
sg34
g753
(S'\x07\xdf\x07\x03\x0b,8\ty\xc8'
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g4867
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g4874
sS'block_loop.thisRepN'
p5869
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5870
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vy
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.63322355197760771
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\x02\x07jp'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g4439
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'right'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3890
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g4446
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3890
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5883
I1
sg3647
g3884
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vy
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.76657568270729826
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\x08\x02F\x08'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3850
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'right'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3858
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5896
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vy
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.93335885901888105
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\r\x0e\x86\xc0'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g4867
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'left'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g4075
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g4874
sS'block_loop.thisRepN'
p5908
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5909
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vy
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.63316653257606959
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\x13\x0e%\x18'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g4150
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g4157
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5922
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vy
sS'block_loop.thisTrialN'
p5924
I0
sg39
F1.0332976201807469
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\x19\t\x00\xb0'
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g3914
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'left'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g3925
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g3922
sS'block_loop.thisRepN'
p5934
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5935
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vy
sS'block_loop.thisTrialN'
p5937
I0
sg39
F0.8832849903837996
sg34
g753
(S'\x07\xdf\x07\x03\x0b-\x1f\n\nP'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4150
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4157
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3658
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5948
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vy
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.65001605096131243
sg34
g753
(S'\x07\xdf\x07\x03\x0b-%\x08\xb6x'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g3816
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'right'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g3827
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g3824
sS'block_loop.thisRepN'
p5960
I1
sg3645
g3820
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5961
I1
sg3647
g3827
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vy
sS'block_loop.thisTrialN'
p5963
I0
sg39
F0.76653633931982768
sg34
g753
(S'\x07\xdf\x07\x03\x0b-+\x03\xcc\xa8'
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g3752
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'right'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g3760
sS'block_loop.thisRepN'
p5973
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5974
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vy
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.2666446761841144
sg34
g753
(S'\x07\xdf\x07\x03\x0b-1\x00\xcb '
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g3914
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'left'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3918
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g3922
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3918
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p5987
I1
sg3647
g3925
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vy
sS'block_loop.thisTrialN'
p5989
I0
sg39
F0.70002377709079155
sg34
g753
(S'\x07\xdf\x07\x03\x0b-7\x05j\xb8'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4936
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'left'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g3745
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4943
sS'block_loop.thisRepN'
p5999
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6000
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vy
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.88316268376638618
sg34
g753
(S'\x07\xdf\x07\x03\x0b.\x01\x018\x80'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3931
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3938
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6013
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vy
sS'block_loop.thisTrialN'
p6015
I0
sg39
F1.4165558114455052
sg34
g753
(S'\x07\xdf\x07\x03\x0b.\x07\x00\x1f@'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g4312
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'left'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g4319
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6026
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vy
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.0333195726507256
sg34
g753
(S'\x07\xdf\x07\x03\x0b.\r\x06\xe1\xb8'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g3671
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6038
I1
sg3645
g3675
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6039
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vy
sS'block_loop.thisTrialN'
p6041
I0
sg39
F1.4333309195117181
sg34
g753
(S'\x07\xdf\x07\x03\x0b.\x13\x07\xebX'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g4547
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g4098
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g4554
sS'block_loop.thisRepN'
p6051
I1
sg3645
g4098
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6052
I1
sg3647
g4105
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vy
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.6498948847329302
sg34
g753
(S'\x07\xdf\x07\x03\x0b.\x19\x0f&\xe8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4165
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'right'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g3837
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4172
sS'block_loop.thisRepN'
p6064
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6065
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vy
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.73327777742906619
sg34
g753
(S'\x07\xdf\x07\x03\x0b. \n90'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3946
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'right'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3803
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3953
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6078
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vy
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.73331740591402195
sg34
g753
(S'\x07\xdf\x07\x03\x0b.&\x06\xbe\x90'
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4867
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4874
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6091
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vy
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.68338893675354484
sg34
g753
(S'\x07\xdf\x07\x03\x0b.,\x03\tX'
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g5484
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g5491
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6104
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vy
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.3503123807940938
sg34
g753
(S'\x07\xdf\x07\x03\x0b.1\x0e\x19`'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4867
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g4068
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4874
sS'block_loop.thisRepN'
p6116
I1
sg3645
g4068
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6117
I1
sg3647
g4075
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vy
sS'block_loop.thisTrialN'
p6119
I0
sg39
F1.1665847487920473
sg34
g753
(S'\x07\xdf\x07\x03\x0b.8\x04\xa3\x80'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g4692
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'left'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3756
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g4699
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3756
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6130
I1
sg3647
g3763
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vy
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.1332455044475864
sg34
g753
(S'\x07\xdf\x07\x03\x0b/\x02\x07\x95h'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3688
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'left'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3692
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3696
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3692
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6143
I1
sg3647
g3699
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vy
sS'block_loop.thisTrialN'
p6145
I0
sg39
F1.5666072144367718
sg34
g753
(S'\x07\xdf\x07\x03\x0b/\x08\nL\xb8'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3634
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'right'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6156
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vy
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.1331939018891717
sg34
g753
(S'\x07\xdf\x07\x03\x0b/\x0f\x04.P'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g5484
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g5491
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6169
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vy
sS'block_loop.thisTrialN'
p6171
I0
sg39
F1.6336626013726345
sg34
g753
(S'\x07\xdf\x07\x03\x0b/\x15\x06\xa7 '
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g3897
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3901
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g3905
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3901
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6182
I1
sg3647
g3908
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vy
sS'block_loop.thisTrialN'
p6184
I0
sg39
F1.3998511223417154
sg34
g753
(S'\x07\xdf\x07\x03\x0b/\x1c\x01z\xe8'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g3833
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'right'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g3844
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g3841
sS'block_loop.thisRepN'
p6194
I1
sg3645
g3837
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6195
I1
sg3647
g3844
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vy
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.79986788604583126
sg34
g753
(S'\x07\xdf\x07\x03\x0b/"\x08=`'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g5484
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g5491
sS'block_loop.thisRepN'
p6207
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6208
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vy
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.2666349828850798
sg34
g753
(S'\x07\xdf\x07\x03\x0b/(\x05\xb4\xf0'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4424
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'right'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4431
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6221
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vy
sS'block_loop.thisTrialN'
p6223
I0
sg39
F1.0998908648643919
sg34
g753
(S'\x07\xdf\x07\x03\x0b/.\n\x16\x08'
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g3946
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g3810
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g3953
sS'block_loop.thisRepN'
p6233
I1
sg3645
g3803
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6234
I1
sg3647
g3810
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vy
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.5836919378562015
sg34
g753
(S'\x07\xdf\x07\x03\x0b/4\x0cT@'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g3976
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g3983
sS'block_loop.thisRepN'
p6246
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6247
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vy
sS'block_loop.thisTrialN'
p6249
I0
sg39
F1.1832315632036625
sg34
g753
(S'\x07\xdf\x07\x03\x0b/;\x06pp'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g4004
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g4008
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g4012
sS'block_loop.thisRepN'
p6259
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6260
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vy
sS'block_loop.thisTrialN'
p6262
I0
sg39
F1.450027625900475
sg34
g753
(S'\x07\xdf\x07\x03\x0b0\x05\t\xa0\xd8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g3705
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'left'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3709
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6273
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vy
sS'block_loop.thisTrialN'
p6275
I0
sg39
F1.0498352424374389
sg34
g753
(S'\x07\xdf\x07\x03\x0b0\x0c\x01\xd4\xc0'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g3976
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'left'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3773
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g3983
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3773
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6286
I1
sg3647
g3780
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vy
sS'block_loop.thisTrialN'
p6288
I0
sg39
F1.8331888841821637
sg34
g753
(S'\x07\xdf\x07\x03\x0b0\x12\x03\x1c\xe0'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g5484
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g4025
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g5491
sS'block_loop.thisRepN'
p6298
I1
sg3645
g4025
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6299
I1
sg3647
g4032
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vy
sS'block_loop.thisTrialN'
p6301
I0
sg39
F2.0499492812414246
sg34
g753
(S'\x07\xdf\x07\x03\x0b0\x19\x01\t\xa0'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g3735
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3739
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g3743
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3745
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6312
I1
sg3647
g3739
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vy
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.7164884145131509
sg34
g753
(S'\x07\xdf\x07\x03\x0b0 \x02M\xd8'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g3850
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'right'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3854
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g3858
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3854
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6325
I1
sg3647
g3861
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vy
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.78333083398229064
sg34
g753
(S'\x07\xdf\x07\x03\x0b0&\r\xd3\x10'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3634
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3643
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3638
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6338
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vy
sS'block_loop.thisTrialN'
p6340
I0
sg39
F1.6999872846727158
sg34
g753
(S'\x07\xdf\x07\x03\x0b0,\x0b\x0c '
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g4004
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g4014
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g4012
sS'block_loop.thisRepN'
p6350
I1
sg3645
g4014
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6351
I1
sg3647
g4008
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vy
sS'block_loop.thisTrialN'
p6353
I0
sg39
F1.2663735489277315
sg34
g753
(S'\x07\xdf\x07\x03\x0b03\x06\xd6\x00'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F169.3619967966506
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vy
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vy
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'7-olives.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'7-olives.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'22-daim.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'22-daim.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vy
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.93318780081335717
sg34
g753
(S'\x07\xdf\x07\x03\x0b4+\r\x13\xa8'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'42-mrkipling_lemon_slices.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'42-mrkipling_lemon_slices.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'16-skips_prawn.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6402
I2
sg6385
S'16-skips_prawn.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vy
sS'block_loop.thisTrialN'
p6405
I0
sg39
F1.0163711256027455
sg34
g753
(S'\x07\xdf\x07\x03\x0b41\x0c\xb2\x00'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'51-mars.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'right'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'27-hartleys_raspberries_jelly.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6419
I2
sg6385
S'51-mars.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vy
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.93328330831172934
sg34
g753
(S'\x07\xdf\x07\x03\x0b47\r\x81\x08'
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'35-raisins.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'left'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'35-raisins.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'49-yorkie.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6436
I2
sg6385
S'49-yorkie.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vy
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.86659683690595557
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\x01\x0c\xe0\xe0'
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'25-kitkat.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'left'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'25-kitkat.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'31-hobnobs.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6453
I2
sg6385
S'31-hobnobs.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vy
sS'block_loop.thisTrialN'
p6456
I0
sg39
F1.1666012844189027
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\x07\x0b\x89 '
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'19-caramello_redo.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'left'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
S'30-spaghetti_hoops.png'
p6464
sg64
g65
sS'trial_loop.thisIndex'
p6465
g60
(g99
S'\x05\x00\x00\x00'
tRp6466
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6467
I0
sg6380
S'30-spaghetti_hoops.png'
p6468
sS'block_loop.thisRepN'
p6469
I2
sg6383
S'19-caramello_redo.png'
p6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6471
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p6472
Nsg70
Vy
sS'block_loop.thisTrialN'
p6473
I0
sg39
F1.0666582468020351
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\r\x0e~\xf0'
tRp6474
sa(dp6475
S'trial_loop.thisTrialN'
p6476
I6
sg6371
g6409
sS'block_loop.thisIndex'
p6477
g6365
sg38
S'right'
p6478
sg59
g63
sS'trial_loop.thisN'
p6479
I6
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6483
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6484
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6485
Nsg70
Vy
sS'block_loop.thisTrialN'
p6486
I0
sg39
F0.91663079195950559
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\x14\x00\xbfh'
tRp6487
sa(dp6488
S'trial_loop.thisTrialN'
p6489
I7
sg6371
S'50-polo.png'
p6490
sS'block_loop.thisIndex'
p6491
g6365
sg38
S'left'
p6492
sg59
g63
sS'trial_loop.thisN'
p6493
I7
sg33
S'48-twix.png'
p6494
sg64
g65
sS'trial_loop.thisIndex'
p6495
g60
(g99
S'\x07\x00\x00\x00'
tRp6496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6497
I0
sg6380
S'48-twix.png'
p6498
sS'block_loop.thisRepN'
p6499
I2
sg6383
S'50-polo.png'
p6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6501
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p6502
Nsg70
Vy
sS'block_loop.thisTrialN'
p6503
I0
sg39
F0.86658400754004106
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\x19\x0f&\xe8'
tRp6504
sa(dp6505
S'trial_loop.thisTrialN'
p6506
I8
sg6371
g6392
sS'block_loop.thisIndex'
p6507
g6365
sg38
S'left'
p6508
sg59
g63
sS'trial_loop.thisN'
p6509
I8
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6510
g60
(g99
S'\x08\x00\x00\x00'
tRp6511
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6512
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6513
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6514
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6515
Nsg70
Vy
sS'block_loop.thisTrialN'
p6516
I0
sg39
F0.88315413085638284
sg34
g753
(S'\x07\xdf\x07\x03\x0b5\x1f\r\xcf('
tRp6517
sa(dp6518
S'trial_loop.thisTrialN'
p6519
I9
sg6371
S'44-crunch.png'
p6520
sS'block_loop.thisIndex'
p6521
g6365
sg38
S'left'
p6522
sg59
g63
sS'trial_loop.thisN'
p6523
I9
sg33
S'44-crunch.png'
p6524
sg64
g65
sS'trial_loop.thisIndex'
p6525
g60
(g99
S'\t\x00\x00\x00'
tRp6526
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6527
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6528
sS'block_loop.thisRepN'
p6529
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6530
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6531
sg55
g11
sS'block_loop.thisTrial'
p6532
Nsg70
Vy
sS'block_loop.thisTrialN'
p6533
I0
sg39
F1.4166729863172804
sg34
g753
(S'\x07\xdf\x07\x03\x0b5%\x0c{P'
tRp6534
sa(dp6535
S'trial_loop.thisTrialN'
p6536
I10
sg6371
S'33-ambrosia_rice.png'
p6537
sS'block_loop.thisIndex'
p6538
g6365
sg38
S'left'
p6539
sg59
g63
sS'trial_loop.thisN'
p6540
I10
sg33
S'33-ambrosia_rice.png'
p6541
sg64
g65
sS'trial_loop.thisIndex'
p6542
g60
(g99
S'\n\x00\x00\x00'
tRp6543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6544
I0
sg6380
S'23-crunchie_redo.png'
p6545
sS'block_loop.thisRepN'
p6546
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6547
I2
sg6385
S'23-crunchie_redo.png'
p6548
sg55
g11
sS'block_loop.thisTrial'
p6549
Nsg70
Vy
sS'block_loop.thisTrialN'
p6550
I0
sg39
F1.000352950098204
sg34
g753
(S'\x07\xdf\x07\x03\x0b5,\x03\xfb\x88'
tRp6551
sa(dp6552
S'trial_loop.thisTrialN'
p6553
I11
sg6371
g6490
sS'block_loop.thisIndex'
p6554
g6365
sg38
S'left'
p6555
sg59
g63
sS'trial_loop.thisN'
p6556
I11
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p6557
g60
(g99
S'\x0b\x00\x00\x00'
tRp6558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6559
I0
sg6380
g6498
sS'block_loop.thisRepN'
p6560
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6561
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p6562
Nsg70
Vy
sS'block_loop.thisTrialN'
p6563
I0
sg39
F0.78322107163421606
sg34
g753
(S'\x07\xdf\x07\x03\x0b52\x04\x8c\x10'
tRp6564
sa(dp6565
S'trial_loop.thisTrialN'
p6566
I12
sg6371
S'5-pineapple.png'
p6567
sS'block_loop.thisIndex'
p6568
g6365
sg38
S'left'
p6569
sg59
g63
sS'trial_loop.thisN'
p6570
I12
sg33
S'5-pineapple.png'
p6571
sg64
g65
sS'trial_loop.thisIndex'
p6572
g60
(g99
S'\x0c\x00\x00\x00'
tRp6573
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6574
I0
sg6380
S'40-sardines.png'
p6575
sS'block_loop.thisRepN'
p6576
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6577
I2
sg6385
S'40-sardines.png'
p6578
sg55
g11
sS'block_loop.thisTrial'
p6579
Nsg70
Vy
sS'block_loop.thisTrialN'
p6580
I0
sg39
F0.81662275222333847
sg34
g753
(S'\x07\xdf\x07\x03\x0b58\x01\xc9\x08'
tRp6581
sa(dp6582
S'trial_loop.thisTrialN'
p6583
I13
sg6371
S'6-sour_patch_kids.png'
p6584
sS'block_loop.thisIndex'
p6585
g6365
sg38
S'right'
p6586
sg59
g63
sS'trial_loop.thisN'
p6587
I13
sg33
S'38-maltesers.png'
p6588
sg64
g65
sS'trial_loop.thisIndex'
p6589
g60
(g99
S'\r\x00\x00\x00'
tRp6590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6591
I0
sg6380
S'38-maltesers.png'
p6592
sS'block_loop.thisRepN'
p6593
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6594
I2
sg6385
S'6-sour_patch_kids.png'
p6595
sg55
g11
sS'block_loop.thisTrial'
p6596
Nsg70
Vy
sS'block_loop.thisTrialN'
p6597
I0
sg39
F0.88297223896370269
sg34
g753
(S'\x07\xdf\x07\x03\x0b6\x01\x0e\xc1X'
tRp6598
sa(dp6599
S'trial_loop.thisTrialN'
p6600
I14
sg6371
S'36-fig_rolls.png'
p6601
sS'block_loop.thisIndex'
p6602
g6365
sg38
S'left'
p6603
sg59
g63
sS'trial_loop.thisN'
p6604
I14
sg33
S'36-fig_rolls.png'
p6605
sg64
g65
sS'trial_loop.thisIndex'
p6606
g60
(g99
S'\x0e\x00\x00\x00'
tRp6607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6608
I0
sg6380
S'34-hula_hoops_bbq_beef_redo.png'
p6609
sS'block_loop.thisRepN'
p6610
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6611
I2
sg6385
S'34-hula_hoops_bbq_beef_redo.png'
p6612
sg55
g11
sS'block_loop.thisTrial'
p6613
Nsg70
Vy
sS'block_loop.thisTrialN'
p6614
I0
sg39
F1.5164820283398512
sg34
g753
(S'\x07\xdf\x07\x03\x0b6\x07\ri\x98'
tRp6615
sa(dp6616
S'trial_loop.thisTrialN'
p6617
I15
sg6371
S'10-bounty_redo.png'
p6618
sS'block_loop.thisIndex'
p6619
g6365
sg38
S'left'
p6620
sg59
g63
sS'trial_loop.thisN'
p6621
I15
sg33
S'10-bounty_redo.png'
p6622
sg64
g65
sS'trial_loop.thisIndex'
p6623
g60
(g99
S'\x0f\x00\x00\x00'
tRp6624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6625
I0
sg6380
S'4-corn.png'
p6626
sS'block_loop.thisRepN'
p6627
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6628
I2
sg6385
S'4-corn.png'
p6629
sg55
g11
sS'block_loop.thisTrial'
p6630
Nsg70
Vy
sS'block_loop.thisTrialN'
p6631
I0
sg39
F0.78329662234136777
sg34
g753
(S'\x07\xdf\x07\x03\x0b6\x0e\x06\x93\x98'
tRp6632
sa(dp6633
S'trial_loop.thisTrialN'
p6634
I16
sg6371
S'20-fruit_pastilles.png'
p6635
sS'block_loop.thisIndex'
p6636
g6365
sg38
S'left'
p6637
sg59
g63
sS'trial_loop.thisN'
p6638
I16
sg33
S'20-fruit_pastilles.png'
p6639
sg64
g65
sS'trial_loop.thisIndex'
p6640
g60
(g99
S'\x10\x00\x00\x00'
tRp6641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6642
I0
sg6380
S'2-steamed_puddings.png'
p6643
sS'block_loop.thisRepN'
p6644
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6645
I2
sg6385
S'2-steamed_puddings.png'
p6646
sg55
g11
sS'block_loop.thisTrial'
p6647
Nsg70
Vy
sS'block_loop.thisTrialN'
p6648
I0
sg39
F1.0165949267557153
sg34
g753
(S'\x07\xdf\x07\x03\x0b6\x14\x03\xd0\x90'
tRp6649
sa(dp6650
S'trial_loop.thisTrialN'
p6651
I17
sg6371
S'41-peanuts_redo.png'
p6652
sS'block_loop.thisIndex'
p6653
g6365
sg38
S'left'
p6654
sg59
g63
sS'trial_loop.thisN'
p6655
I17
sg33
S'41-peanuts_redo.png'
p6656
sg64
g65
sS'trial_loop.thisIndex'
p6657
g60
(g99
S'\x11\x00\x00\x00'
tRp6658
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6659
I0
sg6380
S'45-chewy_nougat_redo.png'
p6660
sS'block_loop.thisRepN'
p6661
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6662
I2
sg6385
S'45-chewy_nougat_redo.png'
p6663
sg55
g11
sS'block_loop.thisTrial'
p6664
Nsg70
Vy
sS'block_loop.thisTrialN'
p6665
I0
sg39
F0.96655755053780013
sg34
g753
(S'\x07\xdf\x07\x03\x0b6\x1a\x04\x9f\x98'
tRp6666
sa(dp6667
S'trial_loop.thisTrialN'
p6668
I18
sg6371
g6409
sS'block_loop.thisIndex'
p6669
g6365
sg38
S'right'
p6670
sg59
g63
sS'trial_loop.thisN'
p6671
I18
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p6672
g60
(g99
S'\x12\x00\x00\x00'
tRp6673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6674
I0
sg6380
g6417
sS'block_loop.thisRepN'
p6675
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6676
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6677
Nsg70
Vy
sS'block_loop.thisTrialN'
p6678
I0
sg39
F0.66660755655357207
sg34
g753
(S'\x07\xdf\x07\x03\x0b6 \x04x\x88'
tRp6679
sa(dp6680
S'trial_loop.thisTrialN'
p6681
I19
sg6371
S'3-ellas_strawberries_apples.png'
p6682
sS'block_loop.thisIndex'
p6683
g6365
sg38
S'left'
p6684
sg59
g63
sS'trial_loop.thisN'
p6685
I19
sg33
S'3-ellas_strawberries_apples.png'
p6686
sg64
g65
sS'trial_loop.thisIndex'
p6687
g60
(g99
S'\x13\x00\x00\x00'
tRp6688
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6689
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6690
sS'block_loop.thisRepN'
p6691
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6692
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6693
sg55
g11
sS'block_loop.thisTrial'
p6694
Nsg70
Vy
sS'block_loop.thisTrialN'
p6695
I0
sg39
F1.0165587194351247
sg34
g753
(S'\x07\xdf\x07\x03\x0b6&\x00\x0b\xb8'
tRp6696
sa(dp6697
S'trial_loop.thisTrialN'
p6698
I20
sg6371
g6635
sS'block_loop.thisIndex'
p6699
g6365
sg38
S'left'
p6700
sg59
g63
sS'trial_loop.thisN'
p6701
I20
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p6702
g60
(g99
S'\x14\x00\x00\x00'
tRp6703
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6704
I0
sg6380
g6643
sS'block_loop.thisRepN'
p6705
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6706
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p6707
Nsg70
Vy
sS'block_loop.thisTrialN'
p6708
I0
sg39
F0.93321517012554978
sg34
g753
(S'\x07\xdf\x07\x03\x0b6,\x00\xd6\xd8'
tRp6709
sa(dp6710
S'trial_loop.thisTrialN'
p6711
I21
sg6371
g6567
sS'block_loop.thisIndex'
p6712
g6365
sg38
S'left'
p6713
sg59
g63
sS'trial_loop.thisN'
p6714
I21
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p6715
g60
(g99
S'\x15\x00\x00\x00'
tRp6716
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6717
I0
sg6380
g6575
sS'block_loop.thisRepN'
p6718
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6719
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p6720
Nsg70
Vy
sS'block_loop.thisTrialN'
p6721
I0
sg39
F0.883730597010981
sg34
g753
(S'\x07\xdf\x07\x03\x0b62\x00:\x98'
tRp6722
sa(dp6723
S'trial_loop.thisTrialN'
p6724
I22
sg6371
S'27-hartleys_raspberries_jelly.png'
p6725
sS'block_loop.thisIndex'
p6726
g6365
sg38
S'left'
p6727
sg59
g63
sS'trial_loop.thisN'
p6728
I22
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6729
g60
(g99
S'\x16\x00\x00\x00'
tRp6730
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6731
I0
sg6380
S'51-mars.png'
p6732
sS'block_loop.thisRepN'
p6733
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6734
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6735
Nsg70
Vy
sS'block_loop.thisTrialN'
p6736
I0
sg39
F0.69998985054644436
sg34
g753
(S'\x07\xdf\x07\x03\x0b67\x0e%\x18'
tRp6737
sa(dp6738
S'trial_loop.thisTrialN'
p6739
I23
sg6371
S'1-treacle_cookies.png'
p6740
sS'block_loop.thisIndex'
p6741
g6365
sg38
S'left'
p6742
sg59
g63
sS'trial_loop.thisN'
p6743
I23
sg33
S'1-treacle_cookies.png'
p6744
sg64
g65
sS'trial_loop.thisIndex'
p6745
g60
(g99
S'\x17\x00\x00\x00'
tRp6746
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6747
I0
sg6380
S'21-nakd_banana_crunch.png'
p6748
sS'block_loop.thisRepN'
p6749
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6750
I2
sg6385
S'21-nakd_banana_crunch.png'
p6751
sg55
g11
sS'block_loop.thisTrial'
p6752
Nsg70
Vy
sS'block_loop.thisTrialN'
p6753
I0
sg39
F0.88317465784075466
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\x01\n1`'
tRp6754
sa(dp6755
S'trial_loop.thisTrialN'
p6756
I24
sg6371
g6372
sS'block_loop.thisIndex'
p6757
g6365
sg38
S'left'
p6758
sg59
g63
sS'trial_loop.thisN'
p6759
I24
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6760
g60
(g99
S'\x18\x00\x00\x00'
tRp6761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6762
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6763
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6764
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6765
Nsg70
Vy
sS'block_loop.thisTrialN'
p6766
I0
sg39
F0.61665684982654057
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\x07\x08\xd9\xa0'
tRp6767
sa(dp6768
S'trial_loop.thisTrialN'
p6769
I25
sg6371
S'49-yorkie.png'
p6770
sS'block_loop.thisIndex'
p6771
g6365
sg38
S'right'
p6772
sg59
g63
sS'trial_loop.thisN'
p6773
I25
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6774
g60
(g99
S'\x19\x00\x00\x00'
tRp6775
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6776
I0
sg6380
S'35-raisins.png'
p6777
sS'block_loop.thisRepN'
p6778
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6779
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6780
Nsg70
Vy
sS'block_loop.thisTrialN'
p6781
I0
sg39
F0.68331595191830274
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\r\x03v\xb8'
tRp6782
sa(dp6783
S'trial_loop.thisTrialN'
p6784
I26
sg6371
S'26-walkers_smoky_bacon.png'
p6785
sS'block_loop.thisIndex'
p6786
g6365
sg38
S'right'
p6787
sg59
g63
sS'trial_loop.thisN'
p6788
I26
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p6789
g60
(g99
S'\x1a\x00\x00\x00'
tRp6790
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6791
I0
sg6380
S'44-crunch.png'
p6792
sS'block_loop.thisRepN'
p6793
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6794
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p6795
Nsg70
Vy
sS'block_loop.thisTrialN'
p6796
I0
sg39
F0.81655546932961443
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\x12\x0e\x8a\xa8'
tRp6797
sa(dp6798
S'trial_loop.thisTrialN'
p6799
I27
sg6371
S'13-mccoys_steak_crisps.png'
p6800
sS'block_loop.thisIndex'
p6801
g6365
sg38
S'right'
p6802
sg59
g63
sS'trial_loop.thisN'
p6803
I27
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p6804
g60
(g99
S'\x1b\x00\x00\x00'
tRp6805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6806
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6807
sS'block_loop.thisRepN'
p6808
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6809
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p6810
Nsg70
Vy
sS'block_loop.thisTrialN'
p6811
I0
sg39
F0.91699742671426065
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\x18\x0c@\xb8'
tRp6812
sa(dp6813
S'trial_loop.thisTrialN'
p6814
I28
sg6371
g6537
sS'block_loop.thisIndex'
p6815
g6365
sg38
S'left'
p6816
sg59
g63
sS'trial_loop.thisN'
p6817
I28
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p6818
g60
(g99
S'\x1c\x00\x00\x00'
tRp6819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6820
I0
sg6380
g6545
sS'block_loop.thisRepN'
p6821
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6822
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p6823
Nsg70
Vy
sS'block_loop.thisTrialN'
p6824
I0
sg39
F0.71667087659898243
sg34
g753
(S'\x07\xdf\x07\x03\x0b7\x1e\x0bb\x10'
tRp6825
sa(dp6826
S'trial_loop.thisTrialN'
p6827
I29
sg6371
g6682
sS'block_loop.thisIndex'
p6828
g6365
sg38
S'left'
p6829
sg59
g63
sS'trial_loop.thisN'
p6830
I29
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p6831
g60
(g99
S'\x1d\x00\x00\x00'
tRp6832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6833
I0
sg6380
g6690
sS'block_loop.thisRepN'
p6834
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6835
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p6836
Nsg70
Vy
sS'block_loop.thisTrialN'
p6837
I0
sg39
F0.7666754666606721
sg34
g753
(S'\x07\xdf\x07\x03\x0b7$\x07\xac\xd8'
tRp6838
sa(dp6839
S'trial_loop.thisTrialN'
p6840
I30
sg6371
g6652
sS'block_loop.thisIndex'
p6841
g6365
sg38
S'left'
p6842
sg59
g63
sS'trial_loop.thisN'
p6843
I30
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p6844
g60
(g99
S'\x1e\x00\x00\x00'
tRp6845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6846
I0
sg6380
g6660
sS'block_loop.thisRepN'
p6847
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6848
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p6849
Nsg70
Vy
sS'block_loop.thisTrialN'
p6850
I0
sg39
F1.2832789463273002
sg34
g753
(S'\x07\xdf\x07\x03\x0b7*\x04l\xd0'
tRp6851
sa(dp6852
S'trial_loop.thisTrialN'
p6853
I31
sg6371
g6372
sS'block_loop.thisIndex'
p6854
g6365
sg38
S'left'
p6855
sg59
g63
sS'trial_loop.thisN'
p6856
I31
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6857
g60
(g99
S'\x1f\x00\x00\x00'
tRp6858
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6859
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6860
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6861
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6862
Nsg70
Vy
sS'block_loop.thisTrialN'
p6863
I0
sg39
F0.64986380915888731
sg34
g753
(S'\x07\xdf\x07\x03\x0b70\tG\x00'
tRp6864
sa(dp6865
S'trial_loop.thisTrialN'
p6866
I32
sg6371
g6392
sS'block_loop.thisIndex'
p6867
g6365
sg38
S'left'
p6868
sg59
g63
sS'trial_loop.thisN'
p6869
I32
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6870
g60
(g99
S' \x00\x00\x00'
tRp6871
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6872
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6873
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6874
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6875
Nsg70
Vy
sS'block_loop.thisTrialN'
p6876
I0
sg39
F0.83306401169102173
sg34
g753
(S'\x07\xdf\x07\x03\x0b76\x04\x9b\xb0'
tRp6877
sa(dp6878
S'trial_loop.thisTrialN'
p6879
I33
sg6371
S'45-chewy_nougat_redo.png'
p6880
sS'block_loop.thisIndex'
p6881
g6365
sg38
S'right'
p6882
sg59
g63
sS'trial_loop.thisN'
p6883
I33
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p6884
g60
(g99
S'!\x00\x00\x00'
tRp6885
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6886
I0
sg6380
S'41-peanuts_redo.png'
p6887
sS'block_loop.thisRepN'
p6888
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6889
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p6890
Nsg70
Vy
sS'block_loop.thisTrialN'
p6891
I0
sg39
F1.1170522793790951
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x00\x02\x90@'
tRp6892
sa(dp6893
S'trial_loop.thisTrialN'
p6894
I34
sg6371
S'31-hobnobs.png'
p6895
sS'block_loop.thisIndex'
p6896
g6365
sg38
S'right'
p6897
sg59
g63
sS'trial_loop.thisN'
p6898
I34
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6899
g60
(g99
S'"\x00\x00\x00'
tRp6900
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6901
I0
sg6380
S'25-kitkat.png'
p6902
sS'block_loop.thisRepN'
p6903
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6904
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6905
Nsg70
Vy
sS'block_loop.thisTrialN'
p6906
I0
sg39
F0.90003016326409124
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x06\x04\xca\x90'
tRp6907
sa(dp6908
S'trial_loop.thisTrialN'
p6909
I35
sg6371
S'30-spaghetti_hoops.png'
p6910
sS'block_loop.thisIndex'
p6911
g6365
sg38
S'right'
p6912
sg59
g63
sS'trial_loop.thisN'
p6913
I35
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p6914
g60
(g99
S'#\x00\x00\x00'
tRp6915
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6916
I0
sg6380
S'19-caramello_redo.png'
p6917
sS'block_loop.thisRepN'
p6918
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6919
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p6920
Nsg70
Vy
sS'block_loop.thisTrialN'
p6921
I0
sg39
F2.6832495243161247
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x0c\x03\xb1P'
tRp6922
sa(dp6923
S'trial_loop.thisTrialN'
p6924
I36
sg6371
S'4-corn.png'
p6925
sS'block_loop.thisIndex'
p6926
g6365
sg38
S'right'
p6927
sg59
g63
sS'trial_loop.thisN'
p6928
I36
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p6929
g60
(g99
S'$\x00\x00\x00'
tRp6930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6931
I0
sg6380
S'10-bounty_redo.png'
p6932
sS'block_loop.thisRepN'
p6933
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6934
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p6935
Nsg70
Vy
sS'block_loop.thisTrialN'
p6936
I0
sg39
F1.0998880138940876
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x13\x0e\xb5\xa0'
tRp6937
sa(dp6938
S'trial_loop.thisTrialN'
p6939
I37
sg6371
S'43-mrporky_pork_crackles_redo.png'
p6940
sS'block_loop.thisIndex'
p6941
g6365
sg38
S'right'
p6942
sg59
g63
sS'trial_loop.thisN'
p6943
I37
sg33
S'43-mrporky_pork_crackles_redo.png'
p6944
sg64
g65
sS'trial_loop.thisIndex'
p6945
g60
(g99
S'%\x00\x00\x00'
tRp6946
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6947
I0
sg6380
S'18-mms.png'
p6948
sS'block_loop.thisRepN'
p6949
I2
sg6383
S'18-mms.png'
p6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6951
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p6952
Nsg70
Vy
sS'block_loop.thisTrialN'
p6953
I0
sg39
F0.80000444751294708
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x1a\x01s\x18'
tRp6954
sa(dp6955
S'trial_loop.thisTrialN'
p6956
I38
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6957
sS'block_loop.thisIndex'
p6958
g6365
sg38
S'left'
p6959
sg59
g63
sS'trial_loop.thisN'
p6960
I38
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6961
sg64
g65
sS'trial_loop.thisIndex'
p6962
g60
(g99
S'&\x00\x00\x00'
tRp6963
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6964
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6965
sS'block_loop.thisRepN'
p6966
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6967
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6968
sg55
g11
sS'block_loop.thisTrial'
p6969
Nsg70
Vy
sS'block_loop.thisTrialN'
p6970
I0
sg39
F0.88366702037728828
sg34
g753
(S'\x07\xdf\x07\x03\x0b8\x1f\x0e0\xd0'
tRp6971
sa(dp6972
S'trial_loop.thisTrialN'
p6973
I39
sg6371
S'38-maltesers.png'
p6974
sS'block_loop.thisIndex'
p6975
g6365
sg38
S'left'
p6976
sg59
g63
sS'trial_loop.thisN'
p6977
I39
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p6978
g60
(g99
S"'\x00\x00\x00"
tRp6979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6980
I0
sg6380
S'6-sour_patch_kids.png'
p6981
sS'block_loop.thisRepN'
p6982
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6983
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p6984
Nsg70
Vy
sS'block_loop.thisTrialN'
p6985
I0
sg39
F0.81637557311660203
sg34
g753
(S'\x07\xdf\x07\x03\x0b8%\x0c\xd9\x10'
tRp6986
sa(dp6987
S'trial_loop.thisTrialN'
p6988
I40
sg6371
S'18-mms.png'
p6989
sS'block_loop.thisIndex'
p6990
g6365
sg38
S'left'
p6991
sg59
g63
sS'trial_loop.thisN'
p6992
I40
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p6993
g60
(g99
S'(\x00\x00\x00'
tRp6994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6995
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6996
sS'block_loop.thisRepN'
p6997
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p6998
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p6999
Nsg70
Vy
sS'block_loop.thisTrialN'
p7000
I0
sg39
F1.7165890537571613
sg34
g753
(S'\x07\xdf\x07\x03\x0b8+\n\x8f '
tRp7001
sa(dp7002
S'trial_loop.thisTrialN'
p7003
I41
sg6371
g6895
sS'block_loop.thisIndex'
p7004
g6365
sg38
S'right'
p7005
sg59
g63
sS'trial_loop.thisN'
p7006
I41
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7007
g60
(g99
S')\x00\x00\x00'
tRp7008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7009
I0
sg6380
g6902
sS'block_loop.thisRepN'
p7010
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7011
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7012
Nsg70
Vy
sS'block_loop.thisTrialN'
p7013
I0
sg39
F1.1666209561135474
sg34
g753
(S'\x07\xdf\x07\x03\x0b82\x06\xd2\x18'
tRp7014
sa(dp7015
S'trial_loop.thisTrialN'
p7016
I42
sg6371
g6974
sS'block_loop.thisIndex'
p7017
g6365
sg38
S'left'
p7018
sg59
g63
sS'trial_loop.thisN'
p7019
I42
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7020
g60
(g99
S'*\x00\x00\x00'
tRp7021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7022
I0
sg6380
g6981
sS'block_loop.thisRepN'
p7023
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7024
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vy
sS'block_loop.thisTrialN'
p7026
I0
sg39
F1.2829037586625418
sg34
g753
(S'\x07\xdf\x07\x03\x0b88\t\xc4\x00'
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
S'46-pistachios.png'
p7030
sS'block_loop.thisIndex'
p7031
g6365
sg38
S'right'
p7032
sg59
g63
sS'trial_loop.thisN'
p7033
I43
sg33
S'46-pistachios.png'
p7034
sg64
g65
sS'trial_loop.thisIndex'
p7035
g60
(g99
S'+\x00\x00\x00'
tRp7036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7037
I0
sg6380
S'29-beans.png'
p7038
sS'block_loop.thisRepN'
p7039
I2
sg6383
S'29-beans.png'
p7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7041
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p7042
Nsg70
Vy
sS'block_loop.thisTrialN'
p7043
I0
sg39
F1.1668909429808991
sg34
g753
(S'\x07\xdf\x07\x03\x0b9\x02\x0e\x9e0'
tRp7044
sa(dp7045
S'trial_loop.thisTrialN'
p7046
I44
sg6371
g6785
sS'block_loop.thisIndex'
p7047
g6365
sg38
S'right'
p7048
sg59
g63
sS'trial_loop.thisN'
p7049
I44
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7050
g60
(g99
S',\x00\x00\x00'
tRp7051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7052
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7053
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7054
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7055
Nsg70
Vy
sS'block_loop.thisTrialN'
p7056
I0
sg39
F2.3498000614672492
sg34
g753
(S'\x07\xdf\x07\x03\x0b9\t\x02\x8cX'
tRp7057
sa(dp7058
S'trial_loop.thisTrialN'
p7059
I45
sg6371
S'48-twix.png'
p7060
sS'block_loop.thisIndex'
p7061
g6365
sg38
S'right'
p7062
sg59
g63
sS'trial_loop.thisN'
p7063
I45
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7064
g60
(g99
S'-\x00\x00\x00'
tRp7065
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7066
I0
sg6380
S'50-polo.png'
p7067
sS'block_loop.thisRepN'
p7068
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7069
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7070
Nsg70
Vy
sS'block_loop.thisTrialN'
p7071
I0
sg39
F0.91656864081141975
sg34
g753
(S'\x07\xdf\x07\x03\x0b9\x10\x08T\xd0'
tRp7072
sa(dp7073
S'trial_loop.thisTrialN'
p7074
I46
sg6371
g6740
sS'block_loop.thisIndex'
p7075
g6365
sg38
S'left'
p7076
sg59
g63
sS'trial_loop.thisN'
p7077
I46
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p7078
g60
(g99
S'.\x00\x00\x00'
tRp7079
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7080
I0
sg6380
g6748
sS'block_loop.thisRepN'
p7081
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7082
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p7083
Nsg70
Vy
sS'block_loop.thisTrialN'
p7084
I0
sg39
F0.78319199173893139
sg34
g753
(S'\x07\xdf\x07\x03\x0b9\x16\x07v('
tRp7085
sa(dp7086
S'trial_loop.thisTrialN'
p7087
I47
sg6371
S'16-skips_prawn.png'
p7088
sS'block_loop.thisIndex'
p7089
g6365
sg38
S'right'
p7090
sg59
g63
sS'trial_loop.thisN'
p7091
I47
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7092
g60
(g99
S'/\x00\x00\x00'
tRp7093
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7094
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7095
sS'block_loop.thisRepN'
p7096
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7097
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7098
Nsg70
Vy
sS'block_loop.thisTrialN'
p7099
I0
sg39
F0.76648103050047212
sg34
g753
(S'\x07\xdf\x07\x03\x0b9\x1c\x04\xb3 '
tRp7100
sa(dp7101
S'trial_loop.thisTrialN'
p7102
I48
sg6371
g6460
sS'block_loop.thisIndex'
p7103
g6365
sg38
S'right'
p7104
sg59
g63
sS'trial_loop.thisN'
p7105
I48
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p7106
g60
(g99
S'0\x00\x00\x00'
tRp7107
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7108
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7109
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7110
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7111
Nsg70
Vy
sS'block_loop.thisTrialN'
p7112
I0
sg39
F3.6168683918076567
sg34
g753
(S'\x07\xdf\x07\x03\x0b9"\x01\xb1\x98'
tRp7113
sa(dp7114
S'trial_loop.thisTrialN'
p7115
I49
sg6371
g6618
sS'block_loop.thisIndex'
p7116
g6365
sg38
S'left'
p7117
sg59
g63
sS'trial_loop.thisN'
p7118
I49
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7119
g60
(g99
S'1\x00\x00\x00'
tRp7120
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7121
I0
sg6380
g6626
sS'block_loop.thisRepN'
p7122
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7123
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p7124
Nsg70
Vy
sS'block_loop.thisTrialN'
p7125
I0
sg39
F0.81653693802400085
sg34
g753
(S'\x07\xdf\x07\x03\x0b9*\x0b\xbb\xe8'
tRp7126
sa(dp7127
S'trial_loop.thisTrialN'
p7128
I50
sg6371
g6800
sS'block_loop.thisIndex'
p7129
g6365
sg38
S'right'
p7130
sg59
g63
sS'trial_loop.thisN'
p7131
I50
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p7132
g60
(g99
S'2\x00\x00\x00'
tRp7133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7134
I0
sg6380
g6807
sS'block_loop.thisRepN'
p7135
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7136
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p7137
Nsg70
Vy
sS'block_loop.thisTrialN'
p7138
I0
sg39
F0.69998699957704957
sg34
g753
(S'\x07\xdf\x07\x03\x0b90\tq\xf8'
tRp7139
sa(dp7140
S'trial_loop.thisTrialN'
p7141
I51
sg6371
g6409
sS'block_loop.thisIndex'
p7142
g6365
sg38
S'right'
p7143
sg59
g63
sS'trial_loop.thisN'
p7144
I51
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7145
g60
(g99
S'3\x00\x00\x00'
tRp7146
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7147
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7148
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7149
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7150
Nsg70
Vy
sS'block_loop.thisTrialN'
p7151
I0
sg39
F0.69986725883245526
sg34
g753
(S'\x07\xdf\x07\x03\x0b96\x05C\xa8'
tRp7152
sa(dp7153
S'trial_loop.thisTrialN'
p7154
I52
sg6371
g7060
sS'block_loop.thisIndex'
p7155
g6365
sg38
S'right'
p7156
sg59
g63
sS'trial_loop.thisN'
p7157
I52
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7158
g60
(g99
S'4\x00\x00\x00'
tRp7159
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7160
I0
sg6380
g7067
sS'block_loop.thisRepN'
p7161
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7162
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7163
Nsg70
Vy
sS'block_loop.thisTrialN'
p7164
I0
sg39
F1.3998816277216974
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x00\x01L\x08'
tRp7165
sa(dp7166
S'trial_loop.thisTrialN'
p7167
I53
sg6371
g6785
sS'block_loop.thisIndex'
p7168
g6365
sg38
S'right'
p7169
sg59
g63
sS'trial_loop.thisN'
p7170
I53
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7171
g60
(g99
S'5\x00\x00\x00'
tRp7172
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7173
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7174
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7175
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7176
Nsg70
Vy
sS'block_loop.thisTrialN'
p7177
I0
sg39
F1.0332029679739207
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x06\x07\xd3\xe8'
tRp7178
sa(dp7179
S'trial_loop.thisTrialN'
p7180
I54
sg6371
g6989
sS'block_loop.thisIndex'
p7181
g6365
sg38
S'left'
p7182
sg59
g63
sS'trial_loop.thisN'
p7183
I54
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7184
g60
(g99
S'6\x00\x00\x00'
tRp7185
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7186
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7187
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7188
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7189
Nsg70
Vy
sS'block_loop.thisTrialN'
p7190
I0
sg39
F1.2337011464887837
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x0c\x08\xdd\x88'
tRp7191
sa(dp7192
S'trial_loop.thisTrialN'
p7193
I55
sg6371
g6895
sS'block_loop.thisIndex'
p7194
g6365
sg38
S'right'
p7195
sg59
g63
sS'trial_loop.thisN'
p7196
I55
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7197
g60
(g99
S'7\x00\x00\x00'
tRp7198
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7199
I0
sg6380
g6902
sS'block_loop.thisRepN'
p7200
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7201
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7202
Nsg70
Vy
sS'block_loop.thisTrialN'
p7203
I0
sg39
F1.23330628713029
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x12\r\x00 '
tRp7204
sa(dp7205
S'trial_loop.thisTrialN'
p7206
I56
sg6371
S'22-daim.png'
p7207
sS'block_loop.thisIndex'
p7208
g6365
sg38
S'right'
p7209
sg59
g63
sS'trial_loop.thisN'
p7210
I56
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7211
g60
(g99
S'8\x00\x00\x00'
tRp7212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7213
I0
sg6380
S'7-olives.png'
p7214
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7216
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vy
sS'block_loop.thisTrialN'
p7218
I0
sg39
F1.0500048751591748
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x19\x01\xa5\xe0'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6567
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6578
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6575
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7229
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vy
sS'block_loop.thisTrialN'
p7231
I0
sg39
F1.1498535456657919
sg34
g753
(S'\x07\xdf\x07\x03\x0b:\x1f\x02\xee\x00'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
g6601
sS'block_loop.thisIndex'
p7235
g6365
sg38
S'right'
p7236
sg59
g63
sS'trial_loop.thisN'
p7237
I58
sg33
g6612
sg64
g65
sS'trial_loop.thisIndex'
p7238
g60
(g99
S':\x00\x00\x00'
tRp7239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7240
I0
sg6380
g6609
sS'block_loop.thisRepN'
p7241
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7242
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7243
Nsg70
Vy
sS'block_loop.thisTrialN'
p7244
I0
sg39
F1.4833198292380985
sg34
g753
(S'\x07\xdf\x07\x03\x0b:%\x05\xdf\xe8'
tRp7245
sa(dp7246
S'trial_loop.thisTrialN'
p7247
I59
sg6371
g7030
sS'block_loop.thisIndex'
p7248
g6365
sg38
S'right'
p7249
sg59
g63
sS'trial_loop.thisN'
p7250
I59
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p7251
g60
(g99
S';\x00\x00\x00'
tRp7252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7253
I0
sg6380
g7038
sS'block_loop.thisRepN'
p7254
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7255
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p7256
Nsg70
Vy
sS'block_loop.thisTrialN'
p7257
I0
sg39
F0.9830977386682207
sg34
g753
(S'\x07\xdf\x07\x03\x0b:+\r\x94\x90'
tRp7258
sa(dp7259
S'trial_loop.thisTrialN'
p7260
I60
sg6371
g6989
sS'block_loop.thisIndex'
p7261
g6365
sg38
S'left'
p7262
sg59
g63
sS'trial_loop.thisN'
p7263
I60
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p7264
g60
(g99
S'<\x00\x00\x00'
tRp7265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7266
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7267
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7268
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7269
Nsg70
Vy
sS'block_loop.thisTrialN'
p7270
I0
sg39
F1.2665796740657242
sg34
g753
(S'\x07\xdf\x07\x03\x0b:1\r\xea\x80'
tRp7271
sa(dp7272
S'trial_loop.thisTrialN'
p7273
I61
sg6371
S'40-sardines.png'
p7274
sS'block_loop.thisIndex'
p7275
g6365
sg38
S'right'
p7276
sg59
g63
sS'trial_loop.thisN'
p7277
I61
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p7278
g60
(g99
S'=\x00\x00\x00'
tRp7279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7280
I0
sg6380
S'5-pineapple.png'
p7281
sS'block_loop.thisRepN'
p7282
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7283
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p7284
Nsg70
Vy
sS'block_loop.thisTrialN'
p7285
I0
sg39
F0.79998192484981701
sg34
g753
(S'\x07\xdf\x07\x03\x0b:8\x03C\xf0'
tRp7286
sa(dp7287
S'trial_loop.thisTrialN'
p7288
I62
sg6371
g6635
sS'block_loop.thisIndex'
p7289
g6365
sg38
S'left'
p7290
sg59
g63
sS'trial_loop.thisN'
p7291
I62
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p7292
g60
(g99
S'>\x00\x00\x00'
tRp7293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7294
I0
sg6380
g6643
sS'block_loop.thisRepN'
p7295
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7296
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p7297
Nsg70
Vy
sS'block_loop.thisTrialN'
p7298
I0
sg39
F0.99996835423189623
sg34
g753
(S'\x07\xdf\x07\x03\x0b;\x02\x00\xbfh'
tRp7299
sa(dp7300
S'trial_loop.thisTrialN'
p7301
I63
sg6371
g6443
sS'block_loop.thisIndex'
p7302
g6365
sg38
S'left'
p7303
sg59
g63
sS'trial_loop.thisN'
p7304
I63
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7305
g60
(g99
S'?\x00\x00\x00'
tRp7306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7307
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7308
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7309
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7310
Nsg70
Vy
sS'block_loop.thisTrialN'
p7311
I0
sg39
F1.2498986480131862
sg34
g753
(S'\x07\xdf\x07\x03\x0b;\x08\x01O\xf0'
tRp7312
sa(dp7313
S'trial_loop.thisTrialN'
p7314
I64
sg6371
g6989
sS'block_loop.thisIndex'
p7315
g6365
sg38
S'left'
p7316
sg59
g63
sS'trial_loop.thisN'
p7317
I64
sg33
g6944
sg64
g65
sS'trial_loop.thisIndex'
p7318
g60
(g99
S'@\x00\x00\x00'
tRp7319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7320
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7321
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7322
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7323
Nsg70
Vy
sS'block_loop.thisTrialN'
p7324
I0
sg39
F3.8166033656270884
sg34
g753
(S'\x07\xdf\x07\x03\x0b;\x0e\x05r\x88'
tRp7325
sa(dp7326
S'trial_loop.thisTrialN'
p7327
I65
sg6371
S'8-liquorice_catherine_wheels.png'
p7328
sS'block_loop.thisIndex'
p7329
g6365
sg38
S'right'
p7330
sg59
g63
sS'trial_loop.thisN'
p7331
I65
sg33
g6968
sg64
g65
sS'trial_loop.thisIndex'
p7332
g60
(g99
S'A\x00\x00\x00'
tRp7333
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7334
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7335
sS'block_loop.thisRepN'
p7336
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7337
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p7338
Nsg70
Vy
sS'block_loop.thisTrialN'
p7339
I0
sg39
F1.0832392038037142
sg34
g753
(S'\x07\xdf\x07\x03\x0b;\x17\x03S\x90'
tRp7340
sa(dp7341
S'trial_loop.thisTrialN'
p7342
I66
sg6371
g6409
sS'block_loop.thisIndex'
p7343
g6365
sg38
S'right'
p7344
sg59
g63
sS'trial_loop.thisN'
p7345
I66
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p7346
g60
(g99
S'B\x00\x00\x00'
tRp7347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7348
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7349
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7350
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7351
Nsg70
Vy
sS'block_loop.thisTrialN'
p7352
I0
sg39
F0.74985816423759388
sg34
g753
(S'\x07\xdf\x07\x03\x0b;\x1d\x05\x14\xc8'
tRp7353
sa(dp7354
S'trial_loop.thisTrialN'
p7355
I67
sg6371
S'23-crunchie_redo.png'
p7356
sS'block_loop.thisIndex'
p7357
g6365
sg38
S'right'
p7358
sg59
g63
sS'trial_loop.thisN'
p7359
I67
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7360
g60
(g99
S'C\x00\x00\x00'
tRp7361
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7362
I0
sg6380
S'33-ambrosia_rice.png'
p7363
sS'block_loop.thisRepN'
p7364
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7365
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7366
Nsg70
Vy
sS'block_loop.thisTrialN'
p7367
I0
sg39
F1.0665727176983637
sg34
g753
(S'\x07\xdf\x07\x03\x0b;#\x01\x9a('
tRp7368
sa(dp7369
S'trial_loop.thisTrialN'
p7370
I68
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7371
sS'block_loop.thisIndex'
p7372
g6365
sg38
S'right'
p7373
sg59
g63
sS'trial_loop.thisN'
p7374
I68
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7375
g60
(g99
S'D\x00\x00\x00'
tRp7376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7377
I0
sg6380
S'36-fig_rolls.png'
p7378
sS'block_loop.thisRepN'
p7379
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7380
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7381
Nsg70
Vy
sS'block_loop.thisTrialN'
p7382
I0
sg39
F1.6165302667541255
sg34
g753
(S'\x07\xdf\x07\x03\x0b;)\x03 \xc8'
tRp7383
sa(dp7384
S'trial_loop.thisTrialN'
p7385
I69
sg6371
g6372
sS'block_loop.thisIndex'
p7386
g6365
sg38
S'left'
p7387
sg59
g63
sS'trial_loop.thisN'
p7388
I69
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7389
g60
(g99
S'E\x00\x00\x00'
tRp7390
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7391
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7392
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7393
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7394
Nsg70
Vy
sS'block_loop.thisTrialN'
p7395
I0
sg39
F0.91695580255145615
sg34
g753
(S'\x07\xdf\x07\x03\x0b;/\r6\xd0'
tRp7396
sa(dp7397
S'trial_loop.thisTrialN'
p7398
I70
sg6371
S'29-beans.png'
p7399
sS'block_loop.thisIndex'
p7400
g6365
sg38
S'left'
p7401
sg59
g63
sS'trial_loop.thisN'
p7402
I70
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p7403
g60
(g99
S'F\x00\x00\x00'
tRp7404
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7405
I0
sg6380
S'46-pistachios.png'
p7406
sS'block_loop.thisRepN'
p7407
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7408
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p7409
Nsg70
Vy
sS'block_loop.thisTrialN'
p7410
I0
sg39
F1.1333313186478335
sg34
g753
(S'\x07\xdf\x07\x03\x0b;5\x0c\\\x10'
tRp7411
sa(dp7412
S'trial_loop.thisTrialN'
p7413
I71
sg6371
g6940
sS'block_loop.thisIndex'
p7414
g6365
sg38
S'right'
p7415
sg59
g63
sS'trial_loop.thisN'
p7416
I71
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p7417
g60
(g99
S'G\x00\x00\x00'
tRp7418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7419
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7420
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7421
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7422
Nsg70
Vy
sS'block_loop.thisTrialN'
p7423
I0
sg39
F1.5332725316438882
sg34
g753
(S'\x07\xdf\x07\x03\x0b;;\x0e\xd4\xe0'
tRp7424
sa(dp7425
S'trial_loop.thisTrialN'
p7426
I72
sg6371
g6880
sS'block_loop.thisIndex'
p7427
g6365
sg38
S'right'
p7428
sg59
g63
sS'trial_loop.thisN'
p7429
I72
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p7430
g60
(g99
S'H\x00\x00\x00'
tRp7431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7432
I0
sg6380
g6887
sS'block_loop.thisRepN'
p7433
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7434
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p7435
Nsg70
Vy
sS'block_loop.thisTrialN'
p7436
I0
sg39
F1.1830821723706322
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00\x06\x089x'
tRp7437
sa(dp7438
S'trial_loop.thisTrialN'
p7439
I73
sg6371
g6443
sS'block_loop.thisIndex'
p7440
g6365
sg38
S'left'
p7441
sg59
g63
sS'trial_loop.thisN'
p7442
I73
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7443
g60
(g99
S'I\x00\x00\x00'
tRp7444
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7445
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7446
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7447
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7448
Nsg70
Vy
sS'block_loop.thisTrialN'
p7449
I0
sg39
F1.633222411589486
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00\x0c\x0b\xa8`'
tRp7450
sa(dp7451
S'trial_loop.thisTrialN'
p7452
I74
sg6371
g6537
sS'block_loop.thisIndex'
p7453
g6365
sg38
S'left'
p7454
sg59
g63
sS'trial_loop.thisN'
p7455
I74
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7456
g60
(g99
S'J\x00\x00\x00'
tRp7457
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7458
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7459
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7460
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7461
Nsg70
Vy
sS'block_loop.thisTrialN'
p7462
I0
sg39
F0.83364674997937982
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00\x13\x06|('
tRp7463
sa(dp7464
S'trial_loop.thisTrialN'
p7465
I75
sg6371
g7399
sS'block_loop.thisIndex'
p7466
g6365
sg38
S'left'
p7467
sg59
g63
sS'trial_loop.thisN'
p7468
I75
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p7469
g60
(g99
S'K\x00\x00\x00'
tRp7470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7471
I0
sg6380
g7406
sS'block_loop.thisRepN'
p7472
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7473
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p7474
Nsg70
Vy
sS'block_loop.thisTrialN'
p7475
I0
sg39
F1.0499153546979869
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00\x19\x04l\xd0'
tRp7476
sa(dp7477
S'trial_loop.thisTrialN'
p7478
I76
sg6371
g6537
sS'block_loop.thisIndex'
p7479
g6365
sg38
S'left'
p7480
sg59
g63
sS'trial_loop.thisN'
p7481
I76
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7482
g60
(g99
S'L\x00\x00\x00'
tRp7483
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7484
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7485
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7486
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7487
Nsg70
Vy
sS'block_loop.thisTrialN'
p7488
I0
sg39
F1.5832340720571665
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00\x1f\x05\xb4\xf0'
tRp7489
sa(dp7490
S'trial_loop.thisTrialN'
p7491
I77
sg6371
g6584
sS'block_loop.thisIndex'
p7492
g6365
sg38
S'right'
p7493
sg59
g63
sS'trial_loop.thisN'
p7494
I77
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7495
g60
(g99
S'M\x00\x00\x00'
tRp7496
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7497
I0
sg6380
g6592
sS'block_loop.thisRepN'
p7498
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7499
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7500
Nsg70
Vy
sS'block_loop.thisTrialN'
p7501
I0
sg39
F0.68282045331579866
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00%\x0f\x17H'
tRp7502
sa(dp7503
S'trial_loop.thisTrialN'
p7504
I78
sg6371
g6910
sS'block_loop.thisIndex'
p7505
g6365
sg38
S'right'
p7506
sg59
g63
sS'trial_loop.thisN'
p7507
I78
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7508
g60
(g99
S'N\x00\x00\x00'
tRp7509
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7510
I0
sg6380
g6917
sS'block_loop.thisRepN'
p7511
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7512
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7513
Nsg70
Vy
sS'block_loop.thisTrialN'
p7514
I0
sg39
F1.8998494117595328
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x00+\n\xe5\x10'
tRp7515
sa(dp7516
S'trial_loop.thisTrialN'
p7517
I79
sg6371
g6957
sS'block_loop.thisIndex'
p7518
g6365
sg38
S'left'
p7519
sg59
g63
sS'trial_loop.thisN'
p7520
I79
sg33
g6961
sg64
g65
sS'trial_loop.thisIndex'
p7521
g60
(g99
S'O\x00\x00\x00'
tRp7522
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7523
I0
sg6380
g6965
sS'block_loop.thisRepN'
p7524
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7525
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p7526
Nsg70
Vy
sS'block_loop.thisTrialN'
p7527
I0
sg39
F1.0169575701520444
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x002\t\xc4\x00'
tRp7528
sa(dp7529
S'trial_loop.thisTrialN'
p7530
I80
sg6371
g6725
sS'block_loop.thisIndex'
p7531
g6365
sg38
S'left'
p7532
sg59
g63
sS'trial_loop.thisN'
p7533
I80
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7534
g60
(g99
S'P\x00\x00\x00'
tRp7535
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7536
I0
sg6380
g6732
sS'block_loop.thisRepN'
p7537
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7538
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7539
Nsg70
Vy
sS'block_loop.thisTrialN'
p7540
I0
sg39
F0.93330412039267685
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x008\n\x93\x08'
tRp7541
sa(dp7542
S'trial_loop.thisTrialN'
p7543
I81
sg6371
g6490
sS'block_loop.thisIndex'
p7544
g6365
sg38
S'left'
p7545
sg59
g63
sS'trial_loop.thisN'
p7546
I81
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7547
g60
(g99
S'Q\x00\x00\x00'
tRp7548
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7549
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7550
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7551
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7552
Nsg70
Vy
sS'block_loop.thisTrialN'
p7553
I0
sg39
F1.0832295105055891
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01\x02\n1`'
tRp7554
sa(dp7555
S'trial_loop.thisTrialN'
p7556
I82
sg6371
S'2-steamed_puddings.png'
p7557
sS'block_loop.thisIndex'
p7558
g6365
sg38
S'right'
p7559
sg59
g63
sS'trial_loop.thisN'
p7560
I82
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p7561
g60
(g99
S'R\x00\x00\x00'
tRp7562
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7563
I0
sg6380
S'20-fruit_pastilles.png'
p7564
sS'block_loop.thisRepN'
p7565
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7566
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p7567
Nsg70
Vy
sS'block_loop.thisTrialN'
p7568
I0
sg39
F1.3999899645850746
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01\x08\x0b\xf2\x98'
tRp7569
sa(dp7570
S'trial_loop.thisTrialN'
p7571
I83
sg6371
g6520
sS'block_loop.thisIndex'
p7572
g6365
sg38
S'left'
p7573
sg59
g63
sS'trial_loop.thisN'
p7574
I83
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7575
g60
(g99
S'S\x00\x00\x00'
tRp7576
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7577
I0
sg6380
g6528
sS'block_loop.thisRepN'
p7578
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7579
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7580
Nsg70
Vy
sS'block_loop.thisTrialN'
p7581
I0
sg39
F0.89985824976611184
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01\x0f\x0388'
tRp7582
sa(dp7583
S'trial_loop.thisTrialN'
p7584
I84
sg6371
g7088
sS'block_loop.thisIndex'
p7585
g6365
sg38
S'right'
p7586
sg59
g63
sS'trial_loop.thisN'
p7587
I84
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7588
g60
(g99
S'T\x00\x00\x00'
tRp7589
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7590
I0
sg6380
g7095
sS'block_loop.thisRepN'
p7591
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7592
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7593
Nsg70
Vy
sS'block_loop.thisTrialN'
p7594
I0
sg39
F1.1667734830134577
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01\x15\x02\x1e\xf8'
tRp7595
sa(dp7596
S'trial_loop.thisTrialN'
p7597
I85
sg6371
g6940
sS'block_loop.thisIndex'
p7598
g6365
sg38
S'right'
p7599
sg59
g63
sS'trial_loop.thisN'
p7600
I85
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p7601
g60
(g99
S'U\x00\x00\x00'
tRp7602
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7603
I0
sg6380
g6948
sS'block_loop.thisRepN'
p7604
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7605
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7606
Nsg70
Vy
sS'block_loop.thisTrialN'
p7607
I0
sg39
F0.94991301690242835
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01\x1b\x05Kx'
tRp7608
sa(dp7609
S'trial_loop.thisTrialN'
p7610
I86
sg6371
g6567
sS'block_loop.thisIndex'
p7611
g6365
sg38
S'left'
p7612
sg59
g63
sS'trial_loop.thisN'
p7613
I86
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p7614
g60
(g99
S'V\x00\x00\x00'
tRp7615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7616
I0
sg6380
g6575
sS'block_loop.thisRepN'
p7617
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7618
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p7619
Nsg70
Vy
sS'block_loop.thisTrialN'
p7620
I0
sg39
F0.99973229390798224
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01!\x04\xe9\xd0'
tRp7621
sa(dp7622
S'trial_loop.thisTrialN'
p7623
I87
sg6371
g7328
sS'block_loop.thisIndex'
p7624
g6365
sg38
S'right'
p7625
sg59
g63
sS'trial_loop.thisN'
p7626
I87
sg33
g6968
sg64
g65
sS'trial_loop.thisIndex'
p7627
g60
(g99
S'W\x00\x00\x00'
tRp7628
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7629
I0
sg6380
g7335
sS'block_loop.thisRepN'
p7630
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7631
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p7632
Nsg70
Vy
sS'block_loop.thisTrialN'
p7633
I0
sg39
F0.69991230415962491
sg34
g753
(S"\x07\xdf\x07\x03\x0c\x01'\x05zX"
tRp7634
sa(dp7635
S'trial_loop.thisTrialN'
p7636
I88
sg6371
g6601
sS'block_loop.thisIndex'
p7637
g6365
sg38
S'left'
p7638
sg59
g63
sS'trial_loop.thisN'
p7639
I88
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7640
g60
(g99
S'X\x00\x00\x00'
tRp7641
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7642
I0
sg6380
g6609
sS'block_loop.thisRepN'
p7643
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7644
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7645
Nsg70
Vy
sS'block_loop.thisTrialN'
p7646
I0
sg39
F1.0332246353464143
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x01-\x01\x86\xa0'
tRp7647
sa(dp7648
S'trial_loop.thisTrialN'
p7649
I89
sg6371
g7088
sS'block_loop.thisIndex'
p7650
g6365
sg38
S'right'
p7651
sg59
g63
sS'trial_loop.thisN'
p7652
I89
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7653
g60
(g99
S'Y\x00\x00\x00'
tRp7654
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7655
I0
sg6380
g7095
sS'block_loop.thisRepN'
p7656
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7657
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7658
Nsg70
Vy
sS'block_loop.thisTrialN'
p7659
I0
sg39
F0.69990118537680246
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x013\x02U\xa8'
tRp7660
sa(dp7661
S'trial_loop.thisTrialN'
p7662
I90
sg6371
g7371
sS'block_loop.thisIndex'
p7663
g6365
sg38
S'right'
p7664
sg59
g63
sS'trial_loop.thisN'
p7665
I90
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7666
g60
(g99
S'Z\x00\x00\x00'
tRp7667
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7668
I0
sg6380
g7378
sS'block_loop.thisRepN'
p7669
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7670
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7671
Nsg70
Vy
sS'block_loop.thisTrialN'
p7672
I0
sg39
F1.4003506123026455
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x018\r\xa40'
tRp7673
sa(dp7674
S'trial_loop.thisTrialN'
p7675
I91
sg6371
g7328
sS'block_loop.thisIndex'
p7676
g6365
sg38
S'right'
p7677
sg59
g63
sS'trial_loop.thisN'
p7678
I91
sg33
g6961
sg64
g65
sS'trial_loop.thisIndex'
p7679
g60
(g99
S'[\x00\x00\x00'
tRp7680
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7681
I0
sg6380
g7335
sS'block_loop.thisRepN'
p7682
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7683
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p7684
Nsg70
Vy
sS'block_loop.thisTrialN'
p7685
I0
sg39
F0.73328861111622246
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02\x03\x04\xe5\xe8'
tRp7686
sa(dp7687
S'trial_loop.thisTrialN'
p7688
I92
sg6371
g6880
sS'block_loop.thisIndex'
p7689
g6365
sg38
S'right'
p7690
sg59
g63
sS'trial_loop.thisN'
p7691
I92
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p7692
g60
(g99
S'\\\x00\x00\x00'
tRp7693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7694
I0
sg6380
g6887
sS'block_loop.thisRepN'
p7695
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7696
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p7697
Nsg70
Vy
sS'block_loop.thisTrialN'
p7698
I0
sg39
F0.93324025866240845
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02\t\x01kH'
tRp7699
sa(dp7700
S'trial_loop.thisTrialN'
p7701
I93
sg6371
g7371
sS'block_loop.thisIndex'
p7702
g6365
sg38
S'right'
p7703
sg59
g63
sS'trial_loop.thisN'
p7704
I93
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7705
g60
(g99
S']\x00\x00\x00'
tRp7706
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7707
I0
sg6380
g7378
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7709
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vy
sS'block_loop.thisTrialN'
p7711
I0
sg39
F2.3165144153608708
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02\x0f\x01\t\xa0'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g7030
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'right'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g7038
sS'block_loop.thisRepN'
p7721
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7722
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vy
sS'block_loop.thisTrialN'
p7724
I0
sg39
F3.4830977386673112
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02\x16\x06U\x18'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g7088
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'right'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g7095
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7735
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vy
sS'block_loop.thisTrialN'
p7737
I0
sg39
F3.1831793904511869
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02\x1e\x0e<\x88'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g6460
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'left'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g6468
sS'block_loop.thisRepN'
p7747
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7748
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vy
sS'block_loop.thisTrialN'
p7750
I0
sg39
F1.5332468729138782
sg34
g753
(S"\x07\xdf\x07\x03\x0c\x02'\x02\x1e\xf8"
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6974
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'left'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6981
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7761
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vy
sS'block_loop.thisTrialN'
p7763
I0
sg39
F2.2331352289238566
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02-\n\xc5\xd0'
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
g7328
sS'block_loop.thisIndex'
p7767
g6365
sg38
S'right'
p7768
sg59
g63
sS'trial_loop.thisN'
p7769
I98
sg33
g6968
sg64
g65
sS'trial_loop.thisIndex'
p7770
g60
(g99
S'b\x00\x00\x00'
tRp7771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7772
I0
sg6380
g7335
sS'block_loop.thisRepN'
p7773
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7774
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p7775
Nsg70
Vy
sS'block_loop.thisTrialN'
p7776
I0
sg39
F0.99985060916696966
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x024\x0e\xe4\x80'
tRp7777
sa(dp7778
S'trial_loop.thisTrialN'
p7779
I99
sg6371
g7060
sS'block_loop.thisIndex'
p7780
g6365
sg38
S'right'
p7781
sg59
g63
sS'trial_loop.thisN'
p7782
I99
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7783
g60
(g99
S'c\x00\x00\x00'
tRp7784
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7785
I0
sg6380
g7067
sS'block_loop.thisRepN'
p7786
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7787
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7788
Nsg70
Vy
sS'block_loop.thisTrialN'
p7789
I0
sg39
F0.84989613915968221
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x02;\x002\xc8'
tRp7790
sa(dp7791
S'trial_loop.thisTrialN'
p7792
I100
sg6371
g6601
sS'block_loop.thisIndex'
p7793
g6365
sg38
S'left'
p7794
sg59
g63
sS'trial_loop.thisN'
p7795
I100
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p7796
g60
(g99
S'd\x00\x00\x00'
tRp7797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7798
I0
sg6380
g6609
sS'block_loop.thisRepN'
p7799
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7800
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p7801
Nsg70
Vy
sS'block_loop.thisTrialN'
p7802
I0
sg39
F1.0165783911297694
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03\x04\r\xa40'
tRp7803
sa(dp7804
S'trial_loop.thisTrialN'
p7805
I101
sg6371
g6426
sS'block_loop.thisIndex'
p7806
g6365
sg38
S'left'
p7807
sg59
g63
sS'trial_loop.thisN'
p7808
I101
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7809
g60
(g99
S'e\x00\x00\x00'
tRp7810
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7811
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7812
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7813
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7814
Nsg70
Vy
sS'block_loop.thisTrialN'
p7815
I0
sg39
F0.99990021604662616
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03\n\x0es8'
tRp7816
sa(dp7817
S'trial_loop.thisTrialN'
p7818
I102
sg6371
g6567
sS'block_loop.thisIndex'
p7819
g6365
sg38
S'left'
p7820
sg59
g63
sS'trial_loop.thisN'
p7821
I102
sg33
g6578
sg64
g65
sS'trial_loop.thisIndex'
p7822
g60
(g99
S'f\x00\x00\x00'
tRp7823
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7824
I0
sg6380
g6575
sS'block_loop.thisRepN'
p7825
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7826
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p7827
Nsg70
Vy
sS'block_loop.thisTrialN'
p7828
I0
sg39
F0.95019355236036063
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03\x10\x0e\xc9('
tRp7829
sa(dp7830
S'trial_loop.thisTrialN'
p7831
I103
sg6371
g6785
sS'block_loop.thisIndex'
p7832
g6365
sg38
S'right'
p7833
sg59
g63
sS'trial_loop.thisN'
p7834
I103
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p7835
g60
(g99
S'g\x00\x00\x00'
tRp7836
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7837
I0
sg6380
g6792
sS'block_loop.thisRepN'
p7838
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7839
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p7840
Nsg70
Vy
sS'block_loop.thisTrialN'
p7841
I0
sg39
F1.1166394589090487
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03\x16\x0e\xa2\x18'
tRp7842
sa(dp7843
S'trial_loop.thisTrialN'
p7844
I104
sg6371
g6989
sS'block_loop.thisIndex'
p7845
g6365
sg38
S'left'
p7846
sg59
g63
sS'trial_loop.thisN'
p7847
I104
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p7848
g60
(g99
S'h\x00\x00\x00'
tRp7849
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7850
I0
sg6380
g6996
sS'block_loop.thisRepN'
p7851
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7852
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p7853
Nsg70
Vy
sS'block_loop.thisTrialN'
p7854
I0
sg39
F0.83333770482113323
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03\x1d\x01\x9e\x10'
tRp7855
sa(dp7856
S'trial_loop.thisTrialN'
p7857
I105
sg6371
g7274
sS'block_loop.thisIndex'
p7858
g6365
sg38
S'right'
p7859
sg59
g63
sS'trial_loop.thisN'
p7860
I105
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p7861
g60
(g99
S'i\x00\x00\x00'
tRp7862
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7863
I0
sg6380
g7281
sS'block_loop.thisRepN'
p7864
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7865
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p7866
Nsg70
Vy
sS'block_loop.thisTrialN'
p7867
I0
sg39
F1.9999714902987762
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03"\x0e\xd0\xf8'
tRp7868
sa(dp7869
S'trial_loop.thisTrialN'
p7870
I106
sg6371
g7060
sS'block_loop.thisIndex'
p7871
g6365
sg38
S'right'
p7872
sg59
g63
sS'trial_loop.thisN'
p7873
I106
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p7874
g60
(g99
S'j\x00\x00\x00'
tRp7875
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7876
I0
sg6380
g7067
sS'block_loop.thisRepN'
p7877
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7878
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7879
Nsg70
Vy
sS'block_loop.thisTrialN'
p7880
I0
sg39
F0.79989525535802386
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03*\x00\x1bX'
tRp7881
sa(dp7882
S'trial_loop.thisTrialN'
p7883
I107
sg6371
g6426
sS'block_loop.thisIndex'
p7884
g6365
sg38
S'left'
p7885
sg59
g63
sS'trial_loop.thisN'
p7886
I107
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7887
g60
(g99
S'k\x00\x00\x00'
tRp7888
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7889
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7890
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7891
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7892
Nsg70
Vy
sS'block_loop.thisTrialN'
p7893
I0
sg39
F2.2664941449629623
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x03/\x0c\xd5('
tRp7894
sa(dp7895
S'trial_loop.thisTrialN'
p7896
I108
sg6371
g6490
sS'block_loop.thisIndex'
p7897
g6365
sg38
S'left'
p7898
sg59
g63
sS'trial_loop.thisN'
p7899
I108
sg33
g6494
sg64
g65
sS'trial_loop.thisIndex'
p7900
g60
(g99
S'l\x00\x00\x00'
tRp7901
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7902
I0
sg6380
g6498
sS'block_loop.thisRepN'
p7903
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7904
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p7905
Nsg70
Vy
sS'block_loop.thisTrialN'
p7906
I0
sg39
F0.9000829062106277
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x037\x02*\xb0'
tRp7907
sa(dp7908
S'trial_loop.thisTrialN'
p7909
I109
sg6371
g6925
sS'block_loop.thisIndex'
p7910
g6365
sg38
S'right'
p7911
sg59
g63
sS'trial_loop.thisN'
p7912
I109
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p7913
g60
(g99
S'm\x00\x00\x00'
tRp7914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7915
I0
sg6380
g6932
sS'block_loop.thisRepN'
p7916
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7917
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p7918
Nsg70
Vy
sS'block_loop.thisTrialN'
p7919
I0
sg39
F1.2833205704910142
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04\x01\x01\x11p'
tRp7920
sa(dp7921
S'trial_loop.thisTrialN'
p7922
I110
sg6371
g6770
sS'block_loop.thisIndex'
p7923
g6365
sg38
S'right'
p7924
sg59
g63
sS'trial_loop.thisN'
p7925
I110
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7926
g60
(g99
S'n\x00\x00\x00'
tRp7927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7928
I0
sg6380
g6777
sS'block_loop.thisRepN'
p7929
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7930
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7931
Nsg70
Vy
sS'block_loop.thisTrialN'
p7932
I0
sg39
F1.9502825026274877
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04\x07\x05\xeb\xa0'
tRp7933
sa(dp7934
S'trial_loop.thisTrialN'
p7935
I111
sg6371
g6537
sS'block_loop.thisIndex'
p7936
g6365
sg38
S'left'
p7937
sg59
g63
sS'trial_loop.thisN'
p7938
I111
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7939
g60
(g99
S'o\x00\x00\x00'
tRp7940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7941
I0
sg6380
g6545
sS'block_loop.thisRepN'
p7942
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7943
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7944
Nsg70
Vy
sS'block_loop.thisTrialN'
p7945
I0
sg39
F1.9666000299921507
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04\x0e\x05\xc0\xa8'
tRp7946
sa(dp7947
S'trial_loop.thisTrialN'
p7948
I112
sg6371
S'21-nakd_banana_crunch.png'
p7949
sS'block_loop.thisIndex'
p7950
g6365
sg38
S'right'
p7951
sg59
g63
sS'trial_loop.thisN'
p7952
I112
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p7953
g60
(g99
S'p\x00\x00\x00'
tRp7954
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7955
I0
sg6380
S'1-treacle_cookies.png'
p7956
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7958
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vy
sS'block_loop.thisTrialN'
p7960
I0
sg39
F1.4166752670926144
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04\x15\x05\xd0H'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g6725
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'left'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g6732
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7971
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vy
sS'block_loop.thisTrialN'
p7973
I0
sg39
F1.666642623486041
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04\x1b\x0c\x92\xc0'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7356
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7363
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7984
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vy
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.74993799139974726
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04"\x08\x1e '
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7949
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'right'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7956
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p7997
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vy
sS'block_loop.thisTrialN'
p7999
I0
sg39
F1.0168788833771032
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04(\x04\xa3\x80'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6940
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'right'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6948
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8010
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vy
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.68332307934451819
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x04.\x05r\x88'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g6800
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6693
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8023
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vy
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.78333339985510975
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x044\x01@P'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g7356
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'right'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6541
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g7363
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8036
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vy
sS'block_loop.thisTrialN'
p8038
I0
sg39
F1.0498894108695822
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x049\r\x81\x08'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g7207
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g7214
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8049
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vy
sS'block_loop.thisTrialN'
p8051
I0
sg39
F1.2665628533422932
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05\x03\x0e\xc9('
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g7557
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'right'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8062
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vy
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.89997456934634101
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05\n\x04&\x80'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g6940
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6950
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g6948
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6950
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8075
I2
sg6385
g6944
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vy
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.83336250826050673
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05\x10\x03G\xd8'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6618
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8088
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vy
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.93321773599927837
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05\x16\x01<h'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g6800
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'right'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8100
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8101
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vy
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.80002582978977443
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05\x1c\x00\x9c@'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g6770
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'right'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8114
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vy
sS'block_loop.thisTrialN'
p8116
I0
sg39
F1.3665369665332037
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05!\rY\xf8'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6682
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6690
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8127
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vy
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.86652926891383686
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05(\x04"\x98'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g6392
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'left'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8140
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vy
sS'block_loop.thisTrialN'
p8142
I0
sg39
F1.066571577310242
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05.\x02\x8cX'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6785
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'right'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6792
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8153
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vy
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.7833430931541443
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x054\x04\x12\xf8'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7949
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7956
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8166
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vy
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.79957822748383478
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x05:\x01O\xf0'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g7030
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g7038
sS'block_loop.thisRepN'
p8178
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8179
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vy
sS'block_loop.thisTrialN'
p8181
I0
sg39
F2.283187430187354
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06\x03\x0e\t\xc0'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6974
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6981
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8192
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vy
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.89953266898100992
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06\x0b\x03\x9d\xc8'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6635
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'left'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6643
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8205
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vy
sS'block_loop.thisTrialN'
p8207
I0
sg39
F1.183491571677223
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06\x11\x02\xbf '
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g6957
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'left'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6961
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g6965
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8218
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vy
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.94983832148500369
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06\x17\x05\xef\x88'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7557
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8230
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8231
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vy
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.81656516262773948
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06\x1d\x05\xc8x'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6601
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6612
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6609
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8244
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vy
sS'block_loop.thisTrialN'
p8246
I0
sg39
F1.4664922633219248
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06#\x03~\x88'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6392
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6400
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8257
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vy
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.71645078170695342
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06)\n\xf8\x98'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7274
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'right'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7281
sS'block_loop.thisRepN'
p8269
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8270
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vy
sS'block_loop.thisTrialN'
p8272
I0
sg39
F1.6666312196048239
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x06/\x07?x'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g7030
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'right'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g7038
sS'block_loop.thisRepN'
p8282
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8283
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vy
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.84988644586064765
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x066\x02\x90@'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g7207
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'right'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g7214
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8296
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vy
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.96660943819370004
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x00\x00\xfd\xe8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7274
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7281
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8309
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vy
sS'block_loop.thisTrialN'
p8311
I0
sg39
F1.0833233074217787
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x06\x00\xd6\xd8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6910
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6917
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8322
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vy
sS'block_loop.thisTrialN'
p8324
I0
sg39
F1.5664774952974767
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x0c\x02\x98\x10'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6895
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6902
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8335
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vy
sS'block_loop.thisTrialN'
p8337
I0
sg39
F1.4336128804552573
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x12\x0b\xbb\xe8'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6520
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'left'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8348
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vy
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.86654979589911818
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x19\x03\xb58'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g7557
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'right'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6646
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8361
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vy
sS'block_loop.thisTrialN'
p8363
I0
sg39
F1.0999877978474615
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07\x1f\x02"\xe0'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6910
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6917
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8374
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vy
sS'block_loop.thisTrialN'
p8376
I0
sg39
F2.0331727476914239
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07%\x04"\x98'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g6618
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'left'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g6629
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8386
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8387
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vy
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.79988727264208137
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x07,\x05(P'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g6443
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'left'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8400
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vy
sS'block_loop.thisTrialN'
p8402
I0
sg39
F1.9666211271705833
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x072\x02\x9f\xe0'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g6460
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'left'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6464
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g6468
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8413
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vy
sS'block_loop.thisTrialN'
p8415
I0
sg39
F1.2998755836651981
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x079\x02\xaf\x80'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g6895
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g6902
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8426
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vy
sS'block_loop.thisTrialN'
p8428
I0
sg39
F1.7332874707281007
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08\x03\x07\xc80'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6520
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'left'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6531
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8439
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vy
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.6833530145304394
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08\n\x04E\xc0'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6800
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6693
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6807
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8452
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vy
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.94982264114969439
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08\x0f\x0f\x1b0'
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6426
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'left'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8465
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vy
sS'block_loop.thisTrialN'
p8467
I0
sg39
F0.95039026929771353
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08\x15\x0e\xf4 '
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6584
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'right'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8478
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vy
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.81628690794605063
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08\x1b\x0e\x92x'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6740
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6748
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8491
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vy
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.81654321015776077
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08!\x0cH\x88'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g7356
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'right'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6548
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g7363
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8504
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vy
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.98332353549994878
sg34
g753
(S"\x07\xdf\x07\x03\x0c\x08'\t\xfe\x98"
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7088
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7095
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6396
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8517
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vy
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.81644285601032607
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08-\nT\x88'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6725
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'left'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6732
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8530
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vy
sS'block_loop.thisTrialN'
p8532
I0
sg39
F1.7003105846824837
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x083\x08\n\x98'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7557
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7564
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8543
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vy
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.74965745594272448
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x08:\x03\xd4x'
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6725
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'left'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6732
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6413
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8556
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vy
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.63326232517101744
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t\x04\x00\x94p'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6652
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'left'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6660
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8569
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vy
sS'block_loop.thisTrialN'
p8571
I0
sg39
F2.7665793889682391
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t\t\n\xb2H'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g6584
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'right'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8581
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8582
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vy
sS'block_loop.thisTrialN'
p8584
I0
sg39
F0.6663686452584443
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t\x11\x07\xa5\x08'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6682
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6690
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8595
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vy
sS'block_loop.thisTrialN'
p8597
I0
sg39
F1.0503136352208458
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t\x17\x0388'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6652
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6660
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8608
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vy
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.91670463208447472
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t\x1d\x04\x80X'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6490
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6498
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8621
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vy
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.68319364530179882
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t#\x03\xa1\xb0'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6584
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'right'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6592
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8634
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vy
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.63306788901081745
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t(\x0ew '
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g6740
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g6748
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8647
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vy
sS'block_loop.thisTrialN'
p8649
I0
sg39
F1.0666223245789297
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t.\t\x8dP'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6925
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'right'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6932
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8660
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vy
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.91663022176544473
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t4\x0b\x13\xf0'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7371
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g6605
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7378
sS'block_loop.thisRepN'
p8672
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8673
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vy
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.91670890854038589
sg34
g753
(S'\x07\xdf\x07\x03\x0c\t:\n5H'
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g6652
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'left'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6663
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g6660
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8686
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vy
sS'block_loop.thisTrialN'
p8688
I0
sg39
F1.0832451908408984
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n\x04\t\x99\x08'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g6770
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'right'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8699
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vy
sS'block_loop.thisTrialN'
p8701
I0
sg39
F1.3165204023971455
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n\n\x0bZ@'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g7399
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'left'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g7406
sS'block_loop.thisRepN'
p8711
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8712
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vy
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.98323857659124769
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n\x11\x01kH'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6635
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'left'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6639
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6643
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6639
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8725
I2
sg6385
g6646
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vy
sS'block_loop.thisTrialN'
p8727
I0
sg39
F1.0499207715411103
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n\x17\x01\x82\xb8'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g6925
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g6932
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8738
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vy
sS'block_loop.thisTrialN'
p8740
I0
sg39
F1.033589844616472
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n\x1d\x02\xca\xd8'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g7207
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g7214
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8751
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vy
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.7499647905187885
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n#\x03\xd4x'
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g6682
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'left'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6686
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g6690
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6686
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8764
I2
sg6385
g6693
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vy
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.84991410027123493
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n)\x00\x98X'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g7399
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'left'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g7040
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g7406
sS'block_loop.thisRepN'
p8776
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8777
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vy
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.68328145518080419
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n.\x0e\t\xc0'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6880
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'right'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6887
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8790
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vy
sS'block_loop.thisTrialN'
p8792
I0
sg39
F1.3499266445387548
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n4\t\xdbp'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7328
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6968
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7335
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8803
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vy
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.71668056989801698
sg34
g753
(S'\x07\xdf\x07\x03\x0c\n;\x00e\x90'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g7371
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6612
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g7378
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6605
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8816
I2
sg6385
g6612
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vy
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.80037621401515935
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b\x04\x0b\xb4\x18'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g6957
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'left'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6961
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g6965
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8829
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vy
sS'block_loop.thisTrialN'
p8831
I0
sg39
F1.3664873596535472
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b\n\t+\xa8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6520
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'left'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6524
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6528
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6524
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8842
I2
sg6385
g6531
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vy
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.96656125679874094
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b\x10\x0f6\x88'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g6426
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'left'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8855
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vy
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.86664644378561206
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b\x17\x00\x0b\xb8'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6957
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6961
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6965
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6961
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8868
I2
sg6385
g6968
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vy
sS'block_loop.thisTrialN'
p8870
I0
sg39
F1.1833310620604607
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b\x1c\r\xbb\xa0'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g7399
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g7034
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g7406
sS'block_loop.thisRepN'
p8880
I2
sg6383
g7040
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8881
I2
sg6385
g7034
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vy
sS'block_loop.thisTrialN'
p8883
I0
sg39
F1.433623714141504
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b#\x01\xe4`'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g7356
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6548
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g7363
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6541
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8894
I2
sg6385
g6548
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vy
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.98326338003062119
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b)\x08\xe5X'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g6443
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6447
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8907
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vy
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.81659737858990411
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b/\t7`'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6910
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'right'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6917
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8920
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vy
sS'block_loop.thisTrialN'
p8922
I0
sg39
F2.8498510938325126
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0b5\x06\xedp'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g6925
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g6932
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8933
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vy
sS'block_loop.thisTrialN'
p8935
I0
sg39
F1.6331916211129283
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\x01\x05\x10\xe0'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6770
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'right'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6777
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6430
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8946
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vy
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.86668151071717148
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\x08\x00#('
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6740
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6748
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8959
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vy
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.8500161649999427
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\r\r\xd3\x10'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6618
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'left'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6622
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6626
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6622
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8972
I2
sg6385
g6629
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vy
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.83327583876962308
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\x13\x0c\x028'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g6880
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6656
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g6887
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6656
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8985
I2
sg6385
g6663
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vy
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.66653713759205857
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\x19\t\xf6\xc8'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g7274
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6571
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g7281
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6571
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p8998
I2
sg6385
g6578
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vy
sS'block_loop.thisTrialN'
p9000
I0
sg39
F1.349964562441528
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c\x1f\x05Kx'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g7207
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'right'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g7214
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9011
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vy
sS'block_loop.thisTrialN'
p9013
I0
sg39
F1.6499288112763679
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c%\x0bVX'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g7949
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'right'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g7956
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9024
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vy
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.91651133631239645
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c,\x06h\xa0'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g7060
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'right'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6500
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g7067
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6500
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9037
I2
sg6385
g6494
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vy
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.73317770837911667
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c2\x05\x89\xf8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6460
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6470
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6468
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6470
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9050
I2
sg6385
g6464
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vy
sS'block_loop.thisTrialN'
p9052
I0
sg39
F1.3333211691942779
sg34
g753
(S'\x07\xdf\x07\x03\x0c\x0c8\x02\x0fX'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g6372
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'left'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g6381
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6376
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9063
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vy
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.86655891900318238
sg34
g753
(S'\x07\xdf\x07\x03\x0c\r\x02\x07\xa1 '
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7949
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7956
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6744
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9076
I2
sg6385
g6751
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vy
sS'block_loop.thisTrialN'
p9078
I0
sg39
F1.1003014045591044
sg34
g753
(S'\x07\xdf\x07\x03\x0c\r\x08\x06\x0e\xc8'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g6974
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'left'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6588
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g6981
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6588
sg56
g57
sg58
Vn
sS'block_loop.thisN'
p9089
I2
sg6385
g6595
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vy
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.71630937359077507
sg34
g753
(S'\x07\xdf\x07\x03\x0c\r\x0e\x08I\x18'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vn
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vy
sa(dp9099
g64
g65
sg43
I39
sg56
g57
sg58
Vn
sg42
I561
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vy
sa(dp9100
g64
g65
sg43
I39
sg55
g11
sg56
g57
sg45
F1.4199999999999999
sg42
I561
sg49
F0.01
sg58
Vn
sg59
g63
sg44
I00
sg48
I25
sg47
g651
sg51
F30.609999999999999
sg46
F0.77999999999999936
sg66
g67
sg68
g69
sg50
I0
sg70
Vy
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I216260944
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xaeG\x01@\x8f\xc2\xb5?=\n\xd7>\x14\xaeG?\x85\xebQ?\x85\xeb\x11@\x00\x00\xc0?\xcd\xccL?\x14\xaeG?\xe1z\x94?\\\x8f\x82?q=\xca?\xa4p\xfd?\x85\xebQ?\x00\x00\x80?\x14\xaeG?=\nW?\xf6(\\?=\nW?\\\x8fB?\x00\x00\x00\x00{\x14.?)\\\x0f>ff\xa6?{\x14.?H\xe1z?R\xb8\x1e?33\xb3?\xecQ\xb8?\xecQ8?\x00\x00\x80?R\xb8\x9e?\x00\x00\x00@\x00\x00\xc0?\x9a\x99\x99?\xa4p=?\x85\xebQ?\xaeGa>\xecQ\xb8>\x85\xebQ?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\x10X\x1dA\xcb\xa1\x99@\x87\x16\xc9@\xaa\xf1\xd6@\x93\x18\x98@o\x12eA\xcd\xccPA\xa8\xc6{@\x87\x16!@T\xe3\xb5@\x9a\x99\tA\xdb\xf9.@\xbaI\xec@!\xb0\x8a@\x10X\x95@D\x8b\x0cA\xc9vf@\xdb\xf9\xee?\x0e-"@b\x10 @\xbaI\xdc@!\xb0\xa2@d;\xc3@#\xdb\x8d@\x9a\x991A\x9a\x99YA\xdb\xf9N@\xbaI\x14@\x96C3@o\x12\x11A!\xb0\xba@\x10X\xcd@w\xbe\xd3@u\x93X@\x10X\tA\xaa\xf1\x06A\xdd$\xc2@1\x08\x90@T\xe3\x85@\x87\x16Q@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\xd0A\x00\x00\x88A\x00\x00\xe8A\x00\x00\xa8A\x00\x00\xa0@\x00\x00\x80A\x00\x00\x98A\x00\x00\xe0A\x00\x00\x10A\x00\x00\x00@\x00\x00\xc0@\x00\x00\xc8A\x00\x000A\x00\x00pA\x00\x00\xb8A\x00\x00\x00B\x00\x00\x1cB\x00\x00@A\x00\x00\x90A\x00\x00\xf0A\x00\x00\xb0A\x00\x00\xe0@\x00\x00\xa0A\x00\x00\x14B\x00\x00\x80@\x00\x00\xc0A\x00\x00\x04B\x00\x00\x08B\x00\x00\xd8A\x00\x00`A\x00\x00PA\x00\x00\x00\x00\x00\x00@@\x00\x00 A\x00\x00\xf8A\x00\x00\x00A\x00\x00\x10B\x00\x00\x0cB\x00\x00\x18B'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'33\xb3?33\xf3?\x9a\x99\x99?ff\xa6?\x9a\x99\x99?\xcd\xcc\x8c?33\xb3?\x9a\x99\x99?\xcd\xcc\xcc?ff\xa6?ff\xe6?33\xf3?\x9a\x99\x99?\x00\x00\x00@\x00\x00\xc0?\x00\x00\xc0?ff\xa6?ff\xa6?\x9a\x99\xd9?33\xb3?\xcd\xcc\xcc?\x9a\x99\xd9?33\xb3?\x9a\x99\xd9?33\xb3?ff\xa6?\x9a\x99\x99?\x00\x00\xc0?\xcd\xcc\xcc?33\xb3?\xcd\xcc\xcc?\x00\x00\x00@\x00\x00\x00@\x9a\x99\xd9?\x9a\x99\xd9?\x9a\x99\x99?ff\xe6?33\xb3?\x00\x00\xc0?ff\xe6?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S' \x00\x00\x00\x00\x00\x00\x00\n\x00\x00\x00!\x00\x00\x00\x19\x00\x00\x00\x05\x00\x00\x00\x0b\x00\x00\x00\x16\x00\x00\x00$\x00\x00\x00\t\x00\x00\x00"\x00\x00\x00\r\x00\x00\x00\x12\x00\x00\x00\x1f\x00\x00\x00\x1e\x00\x00\x00\x0e\x00\x00\x00\x06\x00\x00\x00\x02\x00\x00\x00\x13\x00\x00\x00\x07\x00\x00\x00\x17\x00\x00\x00\x04\x00\x00\x00\x15\x00\x00\x00\x0f\x00\x00\x00\x1a\x00\x00\x00\x0c\x00\x00\x00\x01\x00\x00\x00\x1d\x00\x00\x00\x08\x00\x00\x00\x03\x00\x00\x00\x14\x00\x00\x00#\x00\x00\x00\x10\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00&\x00\x00\x00%\x00\x00\x00\x18\x00\x00\x00\'\x00\x00\x00\x11\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g110
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g285
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g222
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g306
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g250
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g138
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g215
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g236
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g299
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g166
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g117
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g145
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g278
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g180
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g208
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g264
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g327
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g376
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g187
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g229
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g313
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g257
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g152
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g243
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g362
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g131
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g271
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g334
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g341
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g292
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g201
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g194
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g103
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g124
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g173
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g320
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g159
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g355
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g348
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g369
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I216260944
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80@\xcd\xccl@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@ff\xb6@\x00\x00\xc0@\xcd\xcc\x9c@33s@\xcd\xcc\xbc@\x00\x00\xb0@\x00\x00\x90@\x9a\x99Y@\x00\x00\xc0@33\xb3@\x9a\x99\x89@33\xa3@33\x83@\x9a\x99\x99@\x9a\x99y@\x00\x00\xa0@\xcd\xcc\x8c@33\x93@\x00\x00\xc0@\x00\x00\xc0@ff\x86@\x9a\x99\x89@\x9a\x99\x89@\x00\x00\xc0@\x00\x00\xb0@ff\xa6@33\x83@\x00\x00\xc0@\x00\x00\xc0@\xcd\xcc\x8c@\xcd\xcc\x9c@\x00\x00\xc0@ff\x96@33\xb3@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'"\x18A@7#\x82@mg\xa6?\x89\xaa*@gl\xe6?\x94h\xc6?#\xab\xaa?yF\xa4?\x1d\x03\xa0@\xf1\xf0\x0e@[\x9c\x19@\xfdgf@\xc3\xaa.A\x89\x8e\x88?/\xce\x8c?\xdd\x08\x91?\xbfxg@\x90\xcc\xa4@\xa1\x00\xb8@\xef&\xa2?\xa6h6@9e\xee@\x016\x93?\xea\xf5\xee?\xf2\xf3\xce?\x8aVU@*\xcb\xa4@\x00\x9b\x19@\x07\x16\x91?:\xb0\xea?\xc5\x03\x00@\xeb\xc2{?\x17>s?q$\xa2?\xd46\x13@B\xbf\xbb?\xf2\x9b\x19@r\x121@5D\x14@\xd7[U?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'\x00\x00@@\x00\x00`@\x00\x00`@33s@\x00\x00\x80@\x9a\x99\x89@\x9a\x99Y@\xcd\xccl@33s@33\x83@\x00\x00\x80@ffF@\xcd\xccl@\x9a\x999@\xcd\xccl@\xcd\xccL@\x00\x00`@ffF@\x9a\x99y@\x00\x00@@\x00\x00@@\x9a\x999@\x00\x00@@33\x83@\x00\x00\x80@fff@333@\x9a\x99Y@\x00\x00@@ff\x86@333@\x00\x00@@\x00\x00@@\x00\x00\x80@\xcd\xccl@33S@\x9a\x999@\x00\x00@@33s@\x9a\x99Y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S'\xe0\x1b9\r\xa0\n\xe6\x0c\x00\xbc\xe7\x0c\xc0@\x97\x04\x00A\x97\x04`@\x97\x04`\xb8\xe7\x0c C\x97\x04\x00\x0b\xe6\x0c @\x97\x04@\x18\x98\x04 \x12\x98\x04\x80A\x97\x04\x00\xbb\xe7\x0c\xc0\xb6\xe7\x0c\xe0\xbb\xe7\x0c\xa0\xb5\xe7\x0c`\xbd\xe7\x0c\xe0\xb7\xe7\x0c\x80\xb6\xe7\x0c\xe0\xb5\xe7\x0c`\n\xe6\x0c`\xb6\xe7\x0c@\xbc\xe7\x0c\x80\xb7\xe7\x0c\x00\xbd\xe7\x0c`\x0b\xe6\x0c\xc0\x189\r\x80\x159\r\xa0\x169\r\x00\x169\r\xc0\x179\r\x80\x189\r\x00\x159\r\xe0\x149\r \x169\r`\x149\r\xa0\x1b9\r\x00\x1c9\r@\x1a9\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'\x98n\x96@D\x8b\xb0@\xc5 \xe0?!\xb0*@\xa8\xc6\x1b@\x0e-\x82?u\x93\xa8?B`E@\xb6\xf3\x1d?\xf0\xa7f?\x1dZ\x84?B`%@/\xdd,@\xdb\xf9\x8e?\xb6\xf3\x9d?\xc9vF@33\xdb@/\xdd,@+\x87\xc6?\x91\xed\x8c?B`\x05@\x0e-B@\x1dZ\xa4?\xf0\xa7f?\xb6\xf3]?\x06\x81\x95?u\x93\xc8?^\xba\xd9?\xb6\xf3\x9d?\xe9&Q?^\xba\xb9?\x0e-B@u\x93\x88?m\xe7;?\xa0\x1a\xaf?\xfc\xa9\x19@\x83\xc0\x8a?\x83\xc0\xaa?\x91\xed\x8c?\x1dZ\xa4?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I216260944
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'`\xcbf\r\x88\xcbf\r\xb0\xcbf\rP\x96O\r\x88\xcbf\r\xd8\xcbf\r`\xcbf\r\x80\x96O\r\xd8\xcbf\r\x00\xccf\rx\xccf\r\x00\xccf\rP\x96O\r\x10\x97O\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\xd8r\xe5\x04\x90~\xe5\x04pz\xe5\x04\xa8~\xe5\x04\x98s\xe5\x048\x89\x9a\x04\xf0\x8b\x9a\x04\xc8\x86\x9a\x04`\x88\x9a\x04h\x86\x9a\x04H\x8b\x9a\x04\xe8\x84\x9a\x04(\x84\x9a\x04\xc0\x85\x9a\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g767
sg83
g768
sg84
g772
sg85
g773
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g778
sg83
g779
sg84
g783
sg85
g784
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g756
sg83
g789
sg84
g761
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g744
sg83
g809
sg84
g749
sg85
g813
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g818
sg83
g819
sg84
g823
sg85
g824
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g798
sg83
g829
sg84
g803
sg85
g833
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g838
sg83
g839
sg84
g843
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g767
sg83
g849
sg84
g772
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g838
sg83
g858
sg84
g843
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g778
sg83
g867
sg84
g783
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g818
sg83
g876
sg84
g823
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I216260944
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I216260944
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'\xe0\xf57\r\x80\xf07\r\x98\xdah\r \x00i\r \xf6h\r\xe0\xf57\rP\xf6h\r\x80\xf07\rP\xf6h\r\xc0\xdah\r\xe8\xdah\r\xc0\xdah\rP\xdch\r8\xdbh\r\x10\xf7h\r\x80\xf6h\r`\xdbh\r\x10\xdbh\rP\xf6h\r\x88\xdbh\r\xc0\xdah\r\x80\xf6h\r\xb0\xf6h\r\xa0\xf7h\rX\x00i\r\xe0\xf57\r`\xdbh\r\x10\xf7h\r\x90\x00i\r0\xf8h\r\xc8\xdch\r \xf6h\r\x88\xdbh\r\xc0\xdah\rX\x00i\r\xb0\xdbh\r\x80\xf6h\r`\xf07\r\xd8\xdbh\r\x80\xf07\r \x00i\r\xc8\xdch\r\x98\xdah\r\xe8\xdah\rp\x01i\rx\xdch\r\x00\xdch\rx\xdch\r\x00\xdch\r`\xdbh\r\xc8\xdch\r \x00i\r\xe0\xf57\r8\xdbh\r\x98\xdah\r\x00\xdch\r\xc0\xdah\r\xe8\xdah\rX\x00i\r\x10\xf7h\r\x10\xdbh\r \xf07\r\xe0\xf6h\r\xb0\xdbh\r\x88\xdbh\r\xc0\xdah\r\xb0\xdbh\r\xd8\xdbh\r`\xf07\r\xe8\xdah\r`\xdbh\r\xb0\xf6h\r\xa0\xdch\r\xc0\xdah\r\x90\x00i\r\xb0\xf6h\r8\xdbh\r\x80\xf6h\r\xf0\xdch\r\x88\xdbh\r\x98\xdah\rX\x00i\r \xf07\r@\xf57\r\x88\xdbh\r\x10\xdbh\rX\x00i\r@\xf57\r\xe8\xdah\r\xc8\x00i\r\xe8\xdah\r\x88\xdbh\r \xf6h\r\xc8\x00i\rP\xf6h\r \x00i\r\x80\xf07\r`\xdbh\r\xc0\xdah\r\xc8\xdch\r\xc8\x00i\r\xe0\xf57\r\xb0\xf6h\rP\xf6h\r\x10\xf7h\r`\xdbh\r\xd8\xdbh\r\x80\xf6h\r\x98\xdah\r\xb0\xf6h\r\x80\xf6h\rX\x00i\r\x98\xdah\r\xb0\xdbh\r\x00\xf8h\r\xe0\xf6h\r\x80\xf07\r8\xdbh\r`\xdbh\r\x00\xdch\rP\xdch\r\x80\xf07\r\xb0\xf6h\rP\xf6h\r0\xf8h\r\x00\xdch\r \xf6h\r\xb0\xdbh\r\xd8\xdbh\r\x00\xdch\r\xb0\xdbh\r@\xf57\r \xf07\r`\xdbh\r\x80\xf6h\r\x88\xdbh\r\xd8\xdbh\r \xf6h\r\xc8\xdch\r\x80\xf07\r\xe8\xdah\r\xe0\xf6h\r\x90\x00i\r\x80\xf07\r\x10\xdbh\r\x80\xf6h\r\x10\xdbh\r\xf0\xdch\r\x90\x00i\r \x00i\r\x00\xf8h\r@\xf7h\r\x10\xdbh\r\xe8\xdah\r\xe0\xf57\r\xc8\xdch\rP\xf6h\r \xf6h\r8\x01i\r\xc8\x00i\r\x88\xdbh\r\xe0\xf57\rX\x00i\r\xb0\xdbh\r\x00\xf8h\r\xe0\xf57\r\x10\xdbh\r\xb0\xdbh\rP\xf6h\r \x00i\r\xd8\xdbh\r\xa0\xf37\r\xd0\xf7h\r\x98\xdah\r8\xdbh\r\xd8\xdbh\r\x80\xf07\r\xe8\xdah\r\xe0\xf57\rX\x00i\r\xc0\xdah\r \x00i\r\xe0\xf57\r\x00\xf8h\r \x00i\r\x00\xdch\r\x10\xdbh\r\xc8\x00i\r\x80\xf6h\r\x00\xdch\r \x00i\r\xc8\x00i\r\xa0\xdch\r\xb0\xdbh\r8\xdbh\rp\xf7h\r8\xdbh\r\xc8\x00i\rP\xf6h\r8\xdbh\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'\xe0\xe9O\r@\xd06\r@?\xe8\x0c@\xdc6\r`\xd06\r\xc0\xe9O\r`\xe6O\r\xe0\xe7O\r`\xebO\r\x80\xe1O\r\xe0\xe5O\r\x80\xe6O\r\x80\xebO\r\x80\xe5O\r@0\xe8\x0c\xe0\xe8O\r`\xeaO\r \xeaO\r\x00\xedO\r \xe9O\r \xecO\r\xe0\xebO\r\x80\xeaO\r\xa0\xeaO\r\x80\xe7O\r\x00\xe8O\r\x80\xecO\r\xc0\xe8O\r\x00\xad9\r\x00\xae9\r\x00\xab9\r\x80\xaa9\r\x00\xaf9\r@\xaf9\r\x80\xad9\r\x00\xa69\r\xc0\xaa9\r\xc0\xac9\r\x00\xac9\r@\xaa9\r@\xad9\r\xa0\xa69\r\xe0\xa69\r@\xac9\r@\xa69\r\x80D\x97\x04@\xab9\r\x80\xae9\r@\xa89\r\x00\xaa9\r`\xa59\r\xc0\xad9\r\x80\xa89\r\x80\xac9\r\xa0\xa09\r\xc0\xa89\r\x00\xa99\r\xc0\xa09\r@\xa99\r`\xa79\r\xc0\xa99\r@\xae9\r\x80\xa69\r\x80\xa99\r\x00\xa89\r`\xa09\r \xa79\r\x00\xa19\r\xc0\xa79\r\x80\xab9\r\x80\xa09\r \xa09\r\xc0\xab9\r@\xa09\r\x00\xdc6\r\xe0\xa09\r \x129\r\xa0\x129\r@\x1e9\r \x1e9\r\xc0\x1e9\r\x00\x1f9\r\x00\x129\r\xa0\x189\r \x1f9\r`\x1f9\r\x80\x1f9\r\xa0\x1f9\r\xc0\x1f9\r\xe0\x1f9\r`\x109\r\x00\x119\r \x119\r\xa0\x1e9\r\xa0\x119\r\x80\x119\r`\x129\r\xc0\x119\r\xc0\x129\r\x80\x129\r\x00\x139\r`\x139\r@\x119\r@\x1f9\r\xe0\x1e9\r\xe0\x119\r@\x129\r \x149\r\xc0\x139\r`\x1e9\r\x00\x149\r\xe0\x139\r \x139\r\xa0\x139\r`\x1b9\r \xa19\r\x80\x139\r\xc0\x10\x98\x04\xc0\xa59\r\x80\x1e9\r\xc0\xae9\r`\x1b\x98\x04\x80\x1c9\r\xe01\xe8\x0c`M8\r N8\r\x80E8\r\xa0O8\r\xe0N8\r\xe0\x129\r\x00O8\r\x00\xeaO\r\xc0\xebO\r@\xecO\r@\xeaO\r`\xecO\r \xebO\r \xe8O\r \xedO\r\xa0\xebO\r\xa0\xeeO\r\xe0\xedO\r\xa0\xecO\r\xe0\xeeO\r`\xe7O\r\xe0\xeaO\r`\xeeO\r\x00\xeeO\r\x80\xedO\r\xa0\xe9O\r\x00\xefO\r\x00\xebO\r\xc0\xedO\r`\xe9O\r\x80\xefO\r\xa0\xefO\r \xefO\r@\xeeO\r\xa0\xedO\r\xc0\xeaO\r\xe0\xefO\r\xc0\xefO\r@\xefO\r\x00\xecO\r\xc0\xecO\r@\xebO\r@\x139\r`\xe8O\r@b\xbb\x1f b\xbb\x1f\xc0`\xbb\x1f@a\xbb\x1f\x00b\xbb\x1f\xe0`\xbb\x1f `\xbb\x1f\x00a\xbb\x1f\x80`\xbb\x1f\xc0b\xbb\x1f\xa0b\xbb\x1f\x80b\xbb\x1f`b\xbb\x1f c\xbb\x1f\x00c\xbb\x1f`c\xbb\x1f@c\xbb\x1f\x80a\xbb\x1f\x80c\xbb\x1f\xe0c\xbb\x1f\x00d\xbb\x1f d\xbb\x1f a\xbb\x1f@`\xbb\x1f\x80d\xbb\x1f`d\xbb\x1f\xa0\xe6O\r \xe5O\r\x80\xe8O\r\x00\xe5O\r\xe0\xe0O\r \xe7O\r'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'\x97\xdb=@c\x1c\xa2?~\x8b\xb9?Y\x97\xb9?\xbc\x88\xc8?? \xe2?W1\xb3?w)\xb3?\x1b2\xb3?]Z\x05@\\1\x03@\xe4\xa5\x8a?\x19\xfd\x9f?a\xb8\x9b?\xaf\xc2\xcc?\xfdt\x17@\xc5\xe8\xae?\x9d?\xc4?\x15\xfb\xdf?\xfbd\xc6?\xa50\x93?\x9f\x1e2@2U\xb5?.\x1b\xe2?\xbdr\xa6?\x1a\xdb\r@\xf1q\xb7?b\xec.@\xea\x969@\xa5\xae\xca?2$s?\xa0b\x86?\xf5P\x95?\x03\xfb\x7f?\xc04s?\xea\x0f\xf1?\xa00C@e\x0b\x91?"\xec>@x\x8c\x18@&\xdc\r@\x08>\x84?\xaf}\xc8?\xda\xc9\x8c?f%\xc2?\x99~\x88?\x9f`\xe6?\xb3\x0c\xb1?\xb1\x86\xa8?\xba\xb7\x8a?\xac\x1b\xc2?\xf5\x1bb?\xcf\xed\x8e?\xd7\xb5{?\xda\x80w?\xfa,s?\xaa\r\x91?l\xeb\xae?\xf7\xfd\x7f?p\xe9\xbd?\xa9\x86\xc8?\x11U\x05@t:\x84?\xea1\x13@\xdf0\x82?(\x85H?;\x1f\x82?A/\xf3?\x0e\xda\x9d?\x8b\xe0L?\x0f\x0c\xd1?2\xba\x1b@\xa5\x95\x99?\x88\x92Y?\xf7\xddL?\xcdcf?\x03\x11Q?D\x87\x08@KR\x15@\xc1\xf8]?s\x08\x01@\xe7\x83\x88?\xac\xa7\xea?\xf4\x87\xa8?P\xfb]?\xe4S\x95?\xd4\xb7\x9b?\xfc\xba\x9b?V\x0f\x11@\x046\x03@\x0b\x19b?d\x82H?X\x0f\x01@Y\xec\x0e@\xf6\xb2\xca?\x15s\xb7?\x98\xa6\x8a?{TU?k\xceL?\xd9KU?\xfb\xb4{?r\xbb\x0b@\x93\tQ?\x04\xeb\x8e?\x19\x96\xf9?e\xa6\x8a?IS\x95?\xbeQ\xd5?\x9adw?bC\xe4?\x97C\x84?\x8a\xd9\xbd?\x95\x9c\xaa?4S\x15@Y\xdd\xbd?S\x90j?\xd7\x1c\x82?\xbd\xfc??I\xf8\x7f?ub\x86?\xe90\x13@\xf2\xf7\x7f?\x02p7?\xe4\xba;@\x13#\xe2?G\xfe\xdf?z\xb6\xfb?\xf9\xca\xcc?\xd8\x98\t@h\xee\x8e?\x84s\x97?t/\x13@\x00t\x97?*\xfb\x9f?\xf8\x8dw?pBD@\x89\x0f\xd1?\xa9\xa6\n@N\x08\x91?\xfd\x82Y?\xf4\xb1{?\xf9\x1a\x82?>,\x93?(QU?\x14w\x07@\x02"\x82?\xf6`f?K\xaa\x8a?\xc7\x85(@\xec\x8ew?\xc4\xec\x0e@7\x86\xa8?\xc8\x1e\x02@\xbb\xad{?o\x1c\xd1?\x19/S@\xf4a\x86?\xc1\x86\xc8?\xdc\xcb\xcc?\xcd\xbd{?L\x80H?t\xea\x8e?\rB\x84?\xdc\xc9\x8c?\x82\x1fQ?\xa7\xa8\xaa?\x1dt\x97?fb\xe6?\xed b?\xe1 \xa2?s\xea\xee?\xd5\xc9\x8c?\x1d\xa7\x8a?G\x82Y?A43?\xfaA\x14@\xc6\xa4\xea?0#b?\xb4\x11Q?\xf3\x9bY?8.3?\x82+3?\xbcKU?.\xa5\x8a?\x90\xa7\x8a?\x84#\x02@GT\xb5?\x06MU?w\x86H?m\x0f\x11@\xca0b?\x86\xcbL?\xdfr\x97?\xb6\xdb\xdd?\x9a\xcb\xec?g(Q?wq\xb7?\xf1\xb9;?\xb4-s?\xf4c\x86?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\x98\x89\x9a\x04\x00\x85\x9a\x04\xe0\xd6\xf8\x040\xd2\xf8\x04\xd0\xd1\xf8\x04\x10\xd4\xf8\x04\xd8\xd5\xf8\x04\x88\xd1\xf8\x04\x18\xd2\xf8\x04\x90\xd8\xf8\x04\xa0\xd1\xf8\x04\x98\xd9\xf8\x04\x98\xdc\xf8\x04\xa8\xd8\xf8\x04\xe8\xd4\xf8\x04\xc0\xd5\xf8\x040\xdb\xf8\x04\xc8\xd9\xf8\x04h\xd9\xf8\x04\x90\xde\xf8\x04H\xdb\xf8\x04\xb0\xdf\xf8\x04P\xdc\xf8\x04\xf8\xd6\xf8\x04\xc0\xde\xf8\x04(\xdd\xf8\x04h\xdc\xf8\x04@\xda\xf8\x04@\xdd\xf8\x04\xb8\xd7\xf8\x04\x00\xd2\xf8\x04@\xd7\xf8\x04\x00\xde\xf8\x048\xdc\xf8\x04(\xd1\xf8\x04h\xd0\xf8\x04 \xd0\xf8\x04\xd8\xd8\xf8\x04 \xdf\xf8\x04p\xdd\xf8\x04(\xd7\xf8\x040\xd8\xf8\x04\xa0\xd4\xf8\x04\xa0\xdd\xf8\x04(\xda\xf8\x040\xd5\xf8\x04\xf0\xd2\xf8\x04X\xd7\xf8\x04\xc8\xdc\xf8\x04\x98\xdf\xf8\x04P\xd0\xf8\x04\x08\xdc\xf8\x04\xc8\xd3\xf8\x048\xdf\xf8\x04\x80\xd6\xf8\x04\xf0\xdb\xf8\x04\xd0\xda\xf8\x04\xa8\xde\xf8\x048\xd3\xf8\x04\xe8\xdd\xf8\x04\x80\xdf\xf8\x04\xe0\xdf\xf8\x04H\xde\xf8\x04\xa8\xd2\xf8\x04\xc0\xd8\xf8\x04\x08\xd3\xf8\x04p\xd4\xf8\x04\xc0\xdb\xf8\x04`\xde\xf8\x04\xd8\xde\xf8\x04\xb8\xda\xf8\x04\xb0\xdc\xf8\x04\x80\xd9\xf8\x04 \xdc\xf8\x048\xd0\xf8\x04p\xd7\xf8\x04\xb8\xd4\xf8\x04\xf8\xd9\xf8\x04h\xdf\xf8\x04@\xd1\xf8\x04\xb8\xdd\xf8\x04\x88\xd7\xf8\x04x\xdb\xf8\x04h\xd6\xf8\x04\xc8\xdf\xf8\x04\x18\xde\xf8\x04\x08\xdf\xf8\x04\x18\xdb\xf8\x04x\xd8\xf8\x04p\xd1\xf8\x04\xa0\xd7\xf8\x04(\xd4\xf8\x04\xb0\xd6\xf8\x04P\xdf\xf8\x04\xd0\xdd\xf8\x04\x88\xdd\xf8\x04\xe8\xda\xf8\x04x\xd5\xf8\x04x\xde\xf8\x04X\xdd\xf8\x04X\xd4\xf8\x040\xde\xf8\x04`\xd8\xf8\x04\x18\xd8\xf8\x04\x00\xdb\xf8\x04\x18\xd5\xf8\x04\xe8D^\x02X\xf7S\x03 \xfcS\x03\xd0\x9a\xf9\x04\x98\x96\xf9\x04@\x9a\xf9\x04\x18\x9e\xf9\x040\x9e\xf9\x04\xe0\x99\xf9\x04\x80\x9f\xf9\x04\xe8\x9a\xf9\x04X\x9a\xf9\x04\xc0\x98\xf9\x04\xa0\x9a\xf9\x04h\x99\xf9\x04\xf8\x90\xf9\x04`\x95\xf9\x04\xf0\x9b\xf9\x04h\x9f\xf9\x04\xd8u\xe5\x04\x08s\xe5\x04 y\xe5\x040x\xe5\x04\xc8|\xe5\x04\xb0s\xe5\x04\x10t\xe5\x04\xb8t\xe5\x04\x18r\xe5\x048v\xe5\x04hs\xe5\x048s\xe5\x04hc\xf9\x04\xe8d\xf9\x04`k\xf9\x04\xe0c\xf9\x04\xd0j\xf9\x04\xa8n\xf9\x04\xf0\xde\xf8\x04@\xd4\xf8\x04\xa8\xdb\xf8\x04x\xd2\xf8\x04\xe8\xd7\xf8\x04P\xd9\xf8\x04\x80\xd0\xf8\x04\xb0\xd9\xf8\x04P\xd3\xf8\x04P\xd6\xf8\x04\xc8\xd0\xf8\x04\xf8\xd3\xf8\x04`\xdb\xf8\x04\x98\xd3\xf8\x04\xf0\xd5\xf8\x04\x00\xd8\xf8\x04\xf0\xd8\xf8\x04H\xd2\xf8\x04`\xd2\xf8\x04 \xd9\xf8\x04\x10\xd7\xf8\x04H\xd5\xf8\x04\xf8\xd0\xf8\x04h\xd3\xf8\x04\x90\xd5\xf8\x04\x10\xda\xf8\x04 \xd6\xf8\x04\xd0\xd4\xf8\x04\xe0\xd0\xf8\x04\x98\xd6\xf8\x04\xb0\xd3\xf8\x04\x88\xd4\xf8\x04\xe0\xd9\xf8\x04X\xda\xf8\x04\x10\xd1\xf8\x04\xb0\xd0\xf8\x04 \xd3\xf8\x04H\xd8\xf8\x04X\xd1\xf8\x04\x80\xd3\xf8\x04\xc0\xd2\xf8\x04\x08\xd6\xf8\x04\xe0\xd3\xf8\x04\xf8\xdc\xf8\x04\x80\xdc\xf8\x04`\xd5\xf8\x04\xb8\xd1\xf8\x04\x00\xd5\xf8\x04\xd8\xdb\xf8\x04\x10\xdd\xf8\x04\x98\xd0\xf8\x04\xa8{\xe5\x04Py\xe5\x04\xc0~\xe5\x04Hu\xe5\x04\xd8~\xe5\x04\xf0x\xe5\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g920
sg895
g1014
sg909
g927
sg904
g1021
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1001
sg895
g1029
sg909
g1008
sg904
g1036
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1048
sg895
g1078
sg909
g1055
sg904
g1085
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1103
sg895
g1174
sg909
g1097
sg904
g1181
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1001
sg895
g1029
sg909
g1008
sg904
g1036
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1048
sg895
g1078
sg909
g1055
sg904
g1085
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1144
sg895
g1232
sg909
g1151
sg904
g1239
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g1161
sg895
g1309
sg909
g1168
sg904
g1316
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g1341
sg895
g1337
sg909
g1348
sg904
g1345
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1341
sg895
g1337
sg909
g1348
sg904
g1345
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g1206
sg895
g1393
sg909
g1213
sg904
g1400
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1438
sg895
g1434
sg909
g1445
sg904
g1442
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1206
sg895
g1393
sg909
g1213
sg904
g1400
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g954
sg895
g1507
sg909
g961
sg904
g1514
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g1341
sg895
g1522
sg909
g1348
sg904
g1529
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g937
sg895
g1537
sg909
g944
sg904
g1544
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1438
sg895
g1434
sg909
g1445
sg904
g1442
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1114
sg895
g1578
sg909
g1121
sg904
g1585
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1597
sg895
g1593
sg909
g1604
sg904
g1601
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1114
sg895
g1578
sg909
g1121
sg904
g1585
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1597
sg895
g1593
sg909
g1604
sg904
g1601
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g1341
sg895
g1522
sg909
g1348
sg904
g1529
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g900
sg895
g1675
sg909
g910
sg904
g1682
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1597
sg895
g1593
sg909
g1604
sg904
g1601
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g1048
sg895
g1078
sg909
g1055
sg904
g1085
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g971
sg895
g1768
sg909
g978
sg904
g1775
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g1103
sg895
g1174
sg909
g1097
sg904
g1181
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1806
sg895
g1796
sg909
g1800
sg904
g1804
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g1438
sg895
g1826
sg909
g1445
sg904
g1833
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1206
sg895
g1393
sg909
g1213
sg904
g1400
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1438
sg895
g1434
sg909
g1445
sg904
g1442
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1481
sg895
g1880
sg909
g1488
sg904
g1887
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1206
sg895
g1393
sg909
g1213
sg904
g1400
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1161
sg895
g1309
sg909
g1168
sg904
g1316
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1251
sg895
g1934
sg909
g1258
sg904
g1941
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1161
sg895
g1309
sg909
g1168
sg904
g1316
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1341
sg895
g1522
sg909
g1348
sg904
g1529
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1251
sg895
g1934
sg909
g1258
sg904
g1941
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1597
sg895
g2027
sg909
g1604
sg904
g2034
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g937
sg895
g1537
sg909
g944
sg904
g1544
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1283
sg895
g2068
sg909
g1290
sg904
g2075
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1806
sg895
g1796
sg909
g1800
sg904
g1804
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g1283
sg895
g2068
sg909
g1290
sg904
g2075
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1806
sg895
g1796
sg909
g1800
sg904
g1804
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g971
sg895
g1768
sg909
g978
sg904
g1775
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g1806
sg895
g2226
sg909
g1800
sg904
g2233
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g920
sg895
g1014
sg909
g927
sg904
g1021
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1048
sg895
g1044
sg909
g1055
sg904
g1052
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1341
sg895
g1522
sg909
g1348
sg904
g1529
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1806
sg895
g1796
sg909
g1800
sg904
g1804
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g900
sg895
g1675
sg909
g910
sg904
g1682
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1251
sg895
g1934
sg909
g1258
sg904
g1941
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g971
sg895
g967
sg909
g978
sg904
g975
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1481
sg895
g1880
sg909
g1488
sg904
g1887
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g1144
sg895
g1232
sg909
g1151
sg904
g1239
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1144
sg895
g1232
sg909
g1151
sg904
g1239
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g1283
sg895
g1279
sg909
g1290
sg904
g1287
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g937
sg895
g1537
sg909
g944
sg904
g1544
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g1438
sg895
g1826
sg909
g1445
sg904
g1833
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1251
sg895
g1934
sg909
g1258
sg904
g1941
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g937
sg895
g1537
sg909
g944
sg904
g1544
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g920
sg895
g1014
sg909
g927
sg904
g1021
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1114
sg895
g1578
sg909
g1121
sg904
g1585
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1161
sg895
g1157
sg909
g1168
sg904
g1165
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1597
sg895
g2027
sg909
g1604
sg904
g2034
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1103
sg895
g1174
sg909
g1097
sg904
g1181
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1251
sg895
g1934
sg909
g1258
sg904
g1941
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1001
sg895
g1029
sg909
g1008
sg904
g1036
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1283
sg895
g2068
sg909
g1290
sg904
g2075
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1597
sg895
g2027
sg909
g1604
sg904
g2034
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g971
sg895
g1768
sg909
g978
sg904
g1775
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1438
sg895
g1826
sg909
g1445
sg904
g1833
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1597
sg895
g1593
sg909
g1604
sg904
g1601
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g1438
sg895
g1434
sg909
g1445
sg904
g1442
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1481
sg895
g1880
sg909
g1488
sg904
g1887
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1806
sg895
g2226
sg909
g1800
sg904
g2233
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1161
sg895
g1309
sg909
g1168
sg904
g1316
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1206
sg895
g1202
sg909
g1213
sg904
g1210
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g1481
sg895
g1880
sg909
g1488
sg904
g1887
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g971
sg895
g1768
sg909
g978
sg904
g1775
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1341
sg895
g1337
sg909
g1348
sg904
g1345
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g920
sg895
g1014
sg909
g927
sg904
g1021
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g937
sg895
g1537
sg909
g944
sg904
g1544
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1341
sg895
g1337
sg909
g1348
sg904
g1345
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1144
sg895
g1140
sg909
g1151
sg904
g1148
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1103
sg895
g1174
sg909
g1097
sg904
g1181
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1597
sg895
g1593
sg909
g1604
sg904
g1601
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g1341
sg895
g1522
sg909
g1348
sg904
g1529
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g954
sg895
g1507
sg909
g961
sg904
g1514
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1001
sg895
g1029
sg909
g1008
sg904
g1036
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g1103
sg895
g1174
sg909
g1097
sg904
g1181
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1065
sg895
g1061
sg909
g1072
sg904
g1069
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g900
sg895
g1675
sg909
g910
sg904
g1682
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1341
sg895
g1337
sg909
g1348
sg904
g1345
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g1001
sg895
g1029
sg909
g1008
sg904
g1036
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g971
sg895
g1768
sg909
g978
sg904
g1775
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1806
sg895
g2226
sg909
g1800
sg904
g2233
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1206
sg895
g1393
sg909
g1213
sg904
g1400
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1283
sg895
g2068
sg909
g1290
sg904
g2075
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1438
sg895
g1826
sg909
g1445
sg904
g1833
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g900
sg895
g1675
sg909
g910
sg904
g1682
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1438
sg895
g1434
sg909
g1445
sg904
g1442
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g954
sg895
g1507
sg909
g961
sg904
g1514
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1481
sg895
g1477
sg909
g1488
sg904
g1485
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g920
sg895
g1014
sg909
g927
sg904
g1021
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1144
sg895
g1232
sg909
g1151
sg904
g1239
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1481
sg895
g1880
sg909
g1488
sg904
g1887
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1065
sg895
g1264
sg909
g1072
sg904
g1271
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g1283
sg895
g2068
sg909
g1290
sg904
g2075
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1048
sg895
g1078
sg909
g1055
sg904
g1085
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g900
sg895
g1675
sg909
g910
sg904
g1682
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g1251
sg895
g1247
sg909
g1258
sg904
g1255
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g954
sg895
g1507
sg909
g961
sg904
g1514
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1597
sg895
g2027
sg909
g1604
sg904
g2034
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1103
sg895
g1093
sg909
g1097
sg904
g1101
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1806
sg895
g1796
sg909
g1800
sg904
g1804
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g1144
sg895
g1232
sg909
g1151
sg904
g1239
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1597
sg895
g2027
sg909
g1604
sg904
g2034
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g954
sg895
g1507
sg909
g961
sg904
g1514
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1806
sg895
g2226
sg909
g1800
sg904
g2233
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1161
sg895
g1309
sg909
g1168
sg904
g1316
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g1438
sg895
g1826
sg909
g1445
sg904
g1833
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1114
sg895
g1578
sg909
g1121
sg904
g1585
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1048
sg895
g1078
sg909
g1055
sg904
g1085
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g1114
sg895
g1110
sg909
g1121
sg904
g1118
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1806
sg895
g2226
sg909
g1800
sg904
g2233
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1114
sg895
g1578
sg909
g1121
sg904
g1585
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I216260944
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'\x10\x04\xe7\x0cH;\xe7\x0c \x9a\xa7\x04\x80;\xe7\x0c`\x9b\xa7\x04H;\xe7\x0c`<\xe7\x0cH\x95\xa7\x04 \x95\x98\x04H;\xe7\x0c@\x04\xe7\x0c\xb8;\xe7\x0c\xa8\x94\x98\x04\xf0;\xe7\x0c\xa8\x94\x98\x04\x90\x05\xe7\x0c\xc0\x08\xdf\x0c\x80\x06\xdf\x0c`\x9b\xa7\x040\x05\xe7\x0c\xc0\x08\xdf\x0c \x95\x98\x04\xd0\x04\xe7\x0c\xc0\x05\xe7\x0c\x88\x91\x98\x04`\r\xdf\x0c`\x9b\xa7\x04\xa0\x04\xe7\x0cp\x04\xe7\x0c\xd8\x91\x98\x04H\x95\xa7\x04\xc0\x05\xe7\x0c@\x04\xe7\x0cH;\xe7\x0c\xf8\xee\xe6\x0c\xf0;\xe7\x0c\xb8;\xe7\x0c\xa8\x94\x98\x04\x10\x04\xe7\x0c\x80;\xe7\x0c\xf0;\xe7\x0c`\x9b\xa7\x04\xf8\xee\xe6\x0c0\x94\x98\x04`\r\xdf\x0c\x10\x04\xe7\x0c \x95\x98\x04`\x91\xa7\x04\xf0;\xe7\x0c`\x91\xa7\x04\x80;\xe7\x0c(\x92\x98\x04H;\xe7\x0c\xc0\x05\xe7\x0c0\x94\x98\x04H;\xe7\x0c\x98<\xe7\x0c`\r\xdf\x0c`\x9b\xa7\x04\x88\x91\x98\x04\xf0;\xe7\x0c \x9a\xa7\x04 \t\xdf\x0c \x9a\xa7\x04\xf0;\xe7\x0cp\x04\xe7\x0c \x95\x98\x04\x10\x04\xe7\x0c \x06\xe7\x0c\xd8\x91\x98\x04\xa0\x04\xe7\x0c\x90\x05\xe7\x0c(<\xe7\x0cH\x95\xa7\x04 \x95\x98\x04`\r\xdf\x0c\xb8;\xe7\x0c(\x92\x98\x04H\x95\xa7\x04\x80;\xe7\x0cp\x04\xe7\x0c\x80;\xe7\x0cH\x95\xa7\x04(\x92\x98\x04\xc0\x08\xdf\x0c(\x92\x98\x04\xa0\x04\xe7\x0c0\x05\xe7\x0c\xf8\xee\xe6\x0c \t\xdf\x0c\x98<\xe7\x0c`\x91\xa7\x04\xf0;\xe7\x0c(\x92\x98\x04\x88\x91\x98\x04\x80\x06\xdf\x0c\x00\t\xdf\x0c`\x9b\xa7\x04\x80;\xe7\x0c@\x04\xe7\x0c0\x94\x98\x04\xb8;\xe7\x0c`\x91\xa7\x04\xb8;\xe7\x0cH;\xe7\x0c\x10\x04\xe7\x0c\x80\x06\xdf\x0c(\x92\x98\x04\x88\x91\x98\x04\xf0\x05\xe7\x0c \t\xdf\x0c\x80\x06\xdf\x0c(<\xe7\x0cH\xef\xe6\x0c \x95\x98\x04@\x04\xe7\x0c\x98<\xe7\x0c(\x92\x98\x04\xb8;\xe7\x0c\xf0;\xe7\x0c\x10\x04\xe7\x0c`\x9b\xa7\x04\x88\x91\x98\x04\x80;\xe7\x0c0\x94\x98\x04\x80\x06\xdf\x0c0\x05\xe7\x0cH\x95\xa7\x04\xb8;\xe7\x0c\xd8\x91\x98\x040\x94\x98\x04(\x92\x98\x04@\x04\xe7\x0c\x88\x91\x98\x04\xd8\x91\x98\x04\xf0\x05\xe7\x0c`\x91\xa7\x04 \x9a\xa7\x04\x90\x05\xe7\x0c \x95\x98\x04 \x9a\xa7\x04\xa8\x94\x98\x04H\x95\xa7\x04\xd8\x91\x98\x04\xc0\x08\xdf\x0c \xef\xe6\x0c0\x94\x98\x04(\x92\x98\x04p\x04\xe7\x0c`\x91\xa7\x04 \x95\x98\x04 \x9a\xa7\x04p\xef\xe6\x0c \x9a\xa7\x04 \xef\xe6\x0c\xd8\x91\x98\x04\xa0\x04\xe7\x0c \x9a\xa7\x04\xa8\x94\x98\x04\xc0\x08\xdf\x0c`<\xe7\x0c \x9a\xa7\x04\xa0\x04\xe7\x0c0\x94\x98\x04\xf0;\xe7\x0c\xf0\x05\xe7\x0cH;\xe7\x0c\x98<\xe7\x0cH;\xe7\x0c \xef\xe6\x0cH\x95\xa7\x04\x80\x06\xdf\x0c`\x91\xa7\x04`\x9b\xa7\x04\x10\x04\xe7\x0c \x9a\xa7\x04\xd8\x91\x98\x04\xa8\x94\x98\x04@\x04\xe7\x0c\xa0\x04\xe7\x0c\x88\x91\x98\x04\xa0\x04\xe7\x0cH\x95\xa7\x04\x80;\xe7\x0c\xd0\x04\xe7\x0c\x88\x91\x98\x04\xc0\x08\xdf\x0c\xf8\xee\xe6\x0c\x88\x91\x98\x04p\x04\xe7\x0c0\x05\xe7\x0c \x95\x98\x04\xc0\x05\xe7\x0c`\x9b\xa7\x04 \x95\x98\x04\x88\x91\x98\x04`<\xe7\x0c\xf0;\xe7\x0c\x10\x04\xe7\x0cp\x04\xe7\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S'\x00g\xbb\x1f g\xbb\x1f\xa0g\xbb\x1f\xe0e\xbb\x1f\xc0g\xbb\x1f f\xbb\x1f`h\xbb\x1f\xc0e\xbb\x1f\x00f\xbb\x1f\xe0b\xbb\x1f\x80h\xbb\x1f\xe0f\xbb\x1f@h\xbb\x1f\x80g\xbb\x1f@g\xbb\x1f\xc0h\xbb\x1f\xa0e\xbb\x1f\xa0h\xbb\x1f\x00i\xbb\x1f@i\xbb\x1f`f\xbb\x1f`i\xbb\x1f\xc0i\xbb\x1f\xa0i\xbb\x1f@j\xbb\x1f\xe0h\xbb\x1f@f\xbb\x1f\xc0j\xbb\x1f j\xbb\x1f`j\xbb\x1f\x00j\xbb\x1f\xe0j\xbb\x1f h\xbb\x1f\xc0f\xbb\x1f\xa0j\xbb\x1f\xa0k\xbb\x1f i\xbb\x1f`k\xbb\x1f@k\xbb\x1f k\xbb\x1f\xe0i\xbb\x1f l\xbb\x1f\x80e\xbb\x1f\xe0k\xbb\x1f\x00h\xbb\x1f`g\xbb\x1f\x80l\xbb\x1f@l\xbb\x1f\x00l\xbb\x1f\x80m\xbb\x1f m\xbb\x1f\xa0f\xbb\x1f\x80i\xbb\x1f\xa0m\xbb\x1f\x80f\xbb\x1f\x00k\xbb\x1f`l\xbb\x1f`m\xbb\x1f\xc0k\xbb\x1f\xe0m\xbb\x1f\x80n\xbb\x1f\x80j\xbb\x1f`n\xbb\x1f\xc0l\xbb\x1f n\xbb\x1f@m\xbb\x1f\xc0o\xbb\x1f`o\xbb\x1f\x00m\xbb\x1f@\xe5O\r@o\xbb\x1f\xe0g\xbb\x1f\xc0n\xbb\x1f@n\xbb\x1f\xe0l\xbb\x1f\xa0o\xbb\x1f\x80o\xbb\x1f\x00o\xbb\x1f\xe0n\xbb\x1f\xa0n\xbb\x1f\xe0o\xbb\x1f\x00n\xbb\x1f\xa0l\xbb\x1f\xa0\xe0O\r  \xe5\x1f@"\xe5\x1f\x80 \xe5\x1f\x80!\xe5\x1f !\xe5\x1f@ \xe5\x1f\xe0!\xe5\x1f@!\xe5\x1f\xc0!\xe5\x1f\x80"\xe5\x1f\xa0"\xe5\x1f "\xe5\x1f\x00"\xe5\x1f #\xe5\x1f@#\xe5\x1f`!\xe5\x1f\x00!\xe5\x1f`#\xe5\x1f\x80#\xe5\x1f\xa0#\xe5\x1f\xc0#\xe5\x1f $\xe5\x1f\x00$\xe5\x1f`$\xe5\x1f@$\xe5\x1f` \xe5\x1f\x80$\xe5\x1f\xa0$\xe5\x1f\x00%\xe5\x1f\xe0$\xe5\x1f\xc0"\xe5\x1f`%\xe5\x1f@%\xe5\x1f\xe0"\xe5\x1f\xc0%\xe5\x1f\xe0%\xe5\x1f\x00&\xe5\x1f &\xe5\x1f\xa0 \xe5\x1f\xe0#\xe5\x1f\x80&\xe5\x1f`&\xe5\x1f\xc0$\xe5\x1f\xa0&\xe5\x1f\xa0\'\xe5\x1f \'\xe5\x1f\xc0&\xe5\x1f %\xe5\x1f\x80\'\xe5\x1f\xe0&\xe5\x1f`"\xe5\x1f\xa0%\xe5\x1f\xc0\'\xe5\x1f\xe0\'\xe5\x1f@(\xe5\x1f`(\xe5\x1f@&\xe5\x1f\x80%\xe5\x1f\xe0(\xe5\x1f\xc0(\xe5\x1f`\'\xe5\x1f )\xe5\x1f\xc0 \xe5\x1f`)\xe5\x1f\x80)\xe5\x1f\xe0 \xe5\x1f\x00#\xe5\x1f\xa0)\xe5\x1f\xc0)\xe5\x1f\xe0)\xe5\x1f@*\xe5\x1f`*\xe5\x1f\x80*\xe5\x1f\xa0*\xe5\x1f\x00\'\xe5\x1f\xe0*\xe5\x1f\xc0*\xe5\x1f\x00(\xe5\x1f@+\xe5\x1f +\xe5\x1f\x00)\xe5\x1f`+\xe5\x1f\xc0+\xe5\x1f\xa0+\xe5\x1f *\xe5\x1f\xe0+\xe5\x1f@,\xe5\x1f ,\xe5\x1f@\'\xe5\x1f\xa0,\xe5\x1f\x80,\xe5\x1f\xe0,\xe5\x1f\xc0,\xe5\x1f -\xe5\x1f@-\xe5\x1f\x00+\xe5\x1f\x80(\xe5\x1f (\xe5\x1f\xe0-\xe5\x1f\xa0!\xe5\x1f`-\xe5\x1f\x00,\xe5\x1f\xa0.\xe5\x1f\x00-\xe5\x1f .\xe5\x1f\x80.\xe5\x1f@.\xe5\x1f\xe0.\xe5\x1f\xc0.\xe5\x1f /\xe5\x1f\xa0/\xe5\x1f\x00*\xe5\x1f`/\xe5\x1f`.\xe5\x1f\x00/\xe5\x1f\x80k\xbb\x1f'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'4\xb3\x9b?\xf4[U?cR\x95?L\x84\x88?\'\xa8\x8a?/\x8a7?\x0c\xeb\xae?\xefd\x86?~\x1e\xc2?\x89\xf6??\x0ew\x97?\x07\x93\xd9?\xf8\x88\x88?Zd\xa6?p.\x93?\x83\x87\x88?\xbe\r\x91?\xcf\xab\xaa?\xee\xa7\x8a?\xc2\xa8\x8a?\x97 b?<\x96I@\xba\xcb\x8c??\x1e\xe2?|\x86H@\xa1TU?\xc8\x1ab?g\x84\xa8?\xa0\x95\x99?\t\xb7\xbb?z\xeen?\x9d\xa7\n@\xb9\x07Q?5\xc8\xcc?:\xd6]?Cg\x86?\x7f^\xc6?%y7?N\xfb\x9f?\xecO\x95?d\xaf*@\xa8\xbc\x9b?a\xac;?\xf8\x82H?Q\x82H?\xd4,s?&T\xf5?\x92\x87\xa8?\xdb\x99Y?\x84\xcc\xac?Lw\x07@\xbcuw?\xb7_\xe6?\xc8t\xb7?v\x1e\xe2?\x9c_\x86?\\\x98\xd9?\x07\xdf]?\xcc\x7f\xa8?g\xc7\x8c?Qu\xd7?V\xfe\xbf?\x97\xc8\x8c?\x8aP\x95?\n\xf7??=\xf9\x7f?5\x0f\x91?b-\x93?"\x9d\xea?\xe7\x07\x91?\xa1\xb6\x9b?M\xed\xee?\xb0c\x06@\xbc\xf6\xbf?Yf\xa6?j\x1bb?\xa5\xabY?\xafPf?\xf7o\xd7?\x16\x9fj?\xa2\x94\xd9?B\xbc;?\xb0\xed\x1e@]\xb3L?\x8f\xb9{?P\xe1??\xe6C\x84?\xd8\xd6]?\x8aaf?\\\xb7\x9b?s\xca\x8c?e)Q?\xbcMU?\xd5\xf5\x9f?\xf6\x96\x99?L\xe2]?\x84ED?\x90\xfe\x7f?\x01\x1db?\xba\xb8;?\xf8*3?\xd7\xae\xca?Zu\xb7?\xa4\x1a\xa2?\xebe\x16@\xe3\xc7\xcc?\xbd\xdd\xdd?\xe5\x9c\xca?\xe4\xdb=@~\xccL?\x07D\xa4?\x99\xb8\xfb?\xecP\xd5?(\x95\x99?=\x1cb?\\0s?\xde\xc1*?\x04\x95j?tN\x95?/R\x95?\xf4\xb3{?\xb0\xd2{?s\xfc\xbf?\x0e\x0e\x01@\xe3\xc7\x8c?0\xb6;?\xddff?\xb2\xc7\xec?(7\x84?N\xa9j?\x94\x94\x99?\xfd\x01\x80?\x11\xfe??D\r\x91?\x04\xda\xbd?\xe6\xfb\xbf?\xfc\r\xd1?\xb6\xdc\x9d?\t;3?d_f?\xd5\xe8n?Q\xdc]?\xeaY%@\xa0\xcc\x8c?-0\x93?$\xa0*?\x06\x18"?\xe9\xab;?\xc4\x80\xf7?>\xc9L?x\xea\xae?Ft\x97?#\x1f\x82?wPU?\xf0\xbdL?\x96\xf8\xdf?\xc1>D?\x7f\xd9]?Zw7?\xd3DD?\xaf\x00\x80?(QU?\xf0\x1a"?N>D?\x9b\xf0n?4\x17"?\x19C\x84?\xf7\x1eb?tg&?\xba;D?j!\xa2?\xc243?\xf3\x16b?\xb3Q\xb5?\xd1C\x84?cw\xb7?\xc1/\xd3?\x18\xb8;?\xb1\xba;?\x94\xf2.?\t\xd7\xac?\xa6R\x95?0\x0e\x91?\x96\x86\xc8?\x7f\x0c\x91?\xdb\x1b\xd1?R.\xb3?$\xc4L?\x18!\xa2?9\xc9\x8c?k\xb6\xca?"t\x97?\x81\x9a\xb9?\x00a\x86?\xef\xa5\xea?^2\x03@\xe4\xb5\xdb?_\x88H?/\x99\xd9?\x87\x18\xa2?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S' \x93\xf9\x04h\x90\xf9\x04\xa8\x88\x9a\x04\x10\x87\x9a\x04 \x86\x9a\x04\x00\x88\x9a\x04@\x8d\x9a\x04\xd8\x85\x9a\x04\x98\x8c\x9a\x04\xa0\x8a\x9a\x04\xb0\x8c\x9a\x04H\x82\x9a\x04\x18\x85\x9a\x04\xf8\x86\x9a\x04\x00\x8e\x9a\x048\x8f\x9a\x04\xc8\x8c\x9a\x04 \x8c\x9a\x04@\x87\x9a\x04\xe0\x83\x9a\x04\x80\x80\x9a\x04\xa8\x8e\x9a\x04\xb0\x89\x9a\x04x\x82\x9a\x04\xf8\x8c\x9a\x04P\x80\x9a\x04\xf0\x88\x9a\x04\x08\x86\x9a\x04\x80\x8f\x9a\x048\x83\x9a\x04@\x84\x9a\x04\xb8\x81\x9a\x04\x10\x81\x9a\x04\x00\x8b\x9a\x04p\x8a\x9a\x04\x18\x82\x9a\x04p\x81\x9a\x04P\x89\x9a\x04(\x87\x9a\x04@\x8a\x9a\x04\x08\x83\x9a\x04\xd0\x87\x9a\x04P\x83\x9a\x04\x88\x8a\x9a\x04\xa0\x81\x9a\x04\x10\x8a\x9a\x04X\x87\x9a\x04\x18\x8e\x9a\x04x\x85\x9a\x04\x98\x83\x9a\x048\x86\x9a\x040\x88\x9a\x040\x85\x9a\x04h\x8c\x9a\x04\xa0\x84\x9a\x04 \x89\x9a\x04h\x83\x9a\x04\xa8\x85\x9a\x04\x10\x84\x9a\x04(\x8d\x9a\x04\xb8\x84\x9a\x04 \x80\x9a\x04\x90k\xf9\x04\xb8m\xf9\x048l\xf9\x04\xb0o\xf9\x04xk\xf9\x040n\xf9\x04h`\xf9\x04\xf0b\xf9\x04\x90n\xf9\x04\xc8l\xf9\x04\xe0o\xf9\x04\xd0g\xf9\x04\xa8e\xf9\x04\xe0i\xf9\x04\xc0n\xf9\x04(m\xf9\x04\xe8g\xf9\x04\x80l\xf9\x04\xc0k\xf9\x04\x00h\xf9\x04\xa0j\xf9\x04\x18e\xf9\x04\xb8a\xf9\x04@j\xf9\x04Xa\xf9\x04\xb8d\xf9\x04\xd0a\xf9\x04(g\xf9\x04 f\xf9\x04hi\xf9\x04\xa8b\xf9\x04@a\xf9\x04P`\xf9\x04\x88j\xf9\x04\xc0b\xf9\x04\x08f\xf9\x04\xe0l\xf9\x04pg\xf9\x04hf\xf9\x040b\xf9\x04\xb0`\xf9\x04 c\xf9\x04\xe8a\xf9\x04\xc0h\xf9\x04\xb8g\xf9\x04\x00k\xf9\x04@d\xf9\x04\x98f\xf9\x04\xd0m\xf9\x04\xf0e\xf9\x04\xd8b\xf9\x04 `\xf9\x048o\xf9\x04\xa0m\xf9\x04\xc8f\xf9\x040k\xf9\x04\x88d\xf9\x04xb\xf9\x04\xb0c\xf9\x04Hb\xf9\x04`b\xf9\x04\x08c\xf9\x048f\xf9\x04\x10a\xf9\x04Xd\xf9\x04\x00n\xf9\x04\xa8h\xf9\x04\xf8c\xf9\x04\x18k\xf9\x04 l\xf9\x04He\xf9\x048i\xf9\x04\xf0n\xf9\x04\x80i\xf9\x04\x88m\xf9\x04\xf8l\xf9\x04(a\xf9\x04\xc8o\xf9\x04\x10d\xf9\x04\x90e\xf9\x04\xf0\x85\x9a\x040\x8b\x9a\x04P\x8f\x9a\x04\x80\x89\x9a\x04\xc8\x89\x9a\x04\x08\x89\x9a\x04\xe0\x86\x9a\x04\x88\x87\x9a\x04\x18\x8b\x9a\x04\xf8\x80\x9a\x04\xd0\x8d\x9a\x04\xc0\x8b\x9a\x04\xb8\x8a\x9a\x04\x10\x8d\x9a\x04H\x88\x9a\x04\xb8\x8d\x9a\x04P\x8c\x9a\x04`\x8b\x9a\x04\xb0\x83\x9a\x04\x90\x85\x9a\x04p\x87\x9a\x04\xb0\x8f\x9a\x04\xe8\x8d\x9a\x04\xa8\x8b\x9a\x04h\x80\x9a\x04\x98\x80\x9a\x040\x8e\x9a\x04\x88\x8d\x9a\x04\xf0\x82\x9a\x04\x80\x8c\x9a\x048\x8c\x9a\x04H\x8e\x9a\x04\xe0\x89\x9a\x04\xd8\x8b\x9a\x04(\x81\x9a\x04\xb0\x86\x9a\x04`\x85\x9a\x04x\x8e\x9a\x04\x88\x84\x9a\x04\x90\x8e\x9a\x04X\x8a\x9a\x04\xa0\x8d\x9a\x04x\x88\x9a\x04X\x8d\x9a\x04\xe8\x8a\x9a\x04(\x8a\x9a\x04\xd8\x82\x9a\x04\xc0\x88\x9a\x04\xc8\x83\x9a\x04\xd0\x8a\x9a\x04\xa0\x87\x9a\x04\xd8\x88\x9a\x04@\x81\x9a\x04\x90\x88\x9a\x04\xc8\x8f\x9a\x04\x80\x83\x9a\x04`\x8e\x9a\x04\xf8\x89\x9a\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3890
sg3633
g3880
sg3647
g3884
sg3642
g3888
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3709
sg3633
g3931
sg3647
g3716
sg3642
g3938
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3803
sg3633
g3946
sg3647
g3810
sg3642
g3953
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3901
sg3633
g3961
sg3647
g3908
sg3642
g3968
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3773
sg3633
g3976
sg3647
g3780
sg3642
g3983
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g4014
sg3633
g4004
sg3647
g4008
sg3642
g4012
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g3901
sg3633
g3961
sg3647
g3908
sg3642
g3968
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4014
sg3633
g4004
sg3647
g4008
sg3642
g4012
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g4014
sg3633
g4004
sg3647
g4008
sg3642
g4012
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3658
sg3633
g4150
sg3647
g3665
sg3642
g4157
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g3837
sg3633
g4165
sg3647
g3844
sg3642
g4172
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g3854
sg3633
g4180
sg3647
g3861
sg3642
g4187
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3837
sg3633
g4165
sg3647
g3844
sg3642
g4172
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g3854
sg3633
g4180
sg3647
g3861
sg3642
g4187
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3709
sg3633
g3931
sg3647
g3716
sg3642
g3938
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3837
sg3633
g4165
sg3647
g3844
sg3642
g4172
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3890
sg3633
g3880
sg3647
g3884
sg3642
g3888
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3901
sg3633
g3961
sg3647
g3908
sg3642
g3968
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3638
sg3633
g4312
sg3647
g3648
sg3642
g4319
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g3692
sg3633
g4379
sg3647
g3699
sg3642
g4386
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4398
sg3633
g4394
sg3647
g4405
sg3642
g4402
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4014
sg3633
g4424
sg3647
g4008
sg3642
g4431
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g3890
sg3633
g4439
sg3647
g3884
sg3642
g4446
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3658
sg3633
g4150
sg3647
g3665
sg3642
g4157
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3901
sg3633
g3961
sg3647
g3908
sg3642
g3968
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3709
sg3633
g3931
sg3647
g3716
sg3642
g3938
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3854
sg3633
g4180
sg3647
g3861
sg3642
g4187
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3675
sg3633
g4532
sg3647
g3682
sg3642
g4539
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4098
sg3633
g4547
sg3647
g4105
sg3642
g4554
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g3675
sg3633
g4532
sg3647
g3682
sg3642
g4539
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3854
sg3633
g4180
sg3647
g3861
sg3642
g4187
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4014
sg3633
g4424
sg3647
g4008
sg3642
g4431
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g3638
sg3633
g4312
sg3647
g3648
sg3642
g4319
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g4398
sg3633
g4394
sg3647
g4405
sg3642
g4402
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g4098
sg3633
g4547
sg3647
g4105
sg3642
g4554
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3890
sg3633
g4439
sg3647
g3884
sg3642
g4446
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3692
sg3633
g4379
sg3647
g3699
sg3642
g4386
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3756
sg3633
g4692
sg3647
g3763
sg3642
g4699
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3820
sg3633
g4733
sg3647
g3827
sg3642
g4740
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g4398
sg3633
g4394
sg3647
g4405
sg3642
g4402
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g4014
sg3633
g4424
sg3647
g4008
sg3642
g4431
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3692
sg3633
g4379
sg3647
g3699
sg3642
g4386
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g4398
sg3633
g4394
sg3647
g4405
sg3642
g4402
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4398
sg3633
g4852
sg3647
g4405
sg3642
g4859
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4068
sg3633
g4867
sg3647
g4075
sg3642
g4874
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g3918
sg3633
g4921
sg3647
g3925
sg3642
g4928
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g3745
sg3633
g4936
sg3647
g3739
sg3642
g4943
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g4398
sg3633
g4852
sg3647
g4405
sg3642
g4859
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3918
sg3633
g4921
sg3647
g3925
sg3642
g4928
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g3658
sg3633
g4150
sg3647
g3665
sg3642
g4157
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3890
sg3633
g4439
sg3647
g3884
sg3642
g4446
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g3820
sg3633
g4733
sg3647
g3827
sg3642
g4740
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g3638
sg3633
g4312
sg3647
g3648
sg3642
g4319
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4398
sg3633
g4394
sg3647
g4405
sg3642
g4402
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g4098
sg3633
g4547
sg3647
g4105
sg3642
g4554
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3918
sg3633
g4921
sg3647
g3925
sg3642
g4928
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g3692
sg3633
g4379
sg3647
g3699
sg3642
g4386
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g3756
sg3633
g4692
sg3647
g3763
sg3642
g4699
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g3773
sg3633
g3769
sg3647
g3780
sg3642
g3777
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3803
sg3633
g3946
sg3647
g3810
sg3642
g3953
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3918
sg3633
g4921
sg3647
g3925
sg3642
g4928
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g4398
sg3633
g4852
sg3647
g4405
sg3642
g4859
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g3854
sg3633
g4180
sg3647
g3861
sg3642
g4187
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g3638
sg3633
g4312
sg3647
g3648
sg3642
g4319
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g4025
sg3633
g4021
sg3647
g4032
sg3642
g4029
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3692
sg3633
g4379
sg3647
g3699
sg3642
g4386
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3890
sg3633
g3880
sg3647
g3884
sg3642
g3888
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3918
sg3633
g4921
sg3647
g3925
sg3642
g4928
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3803
sg3633
g3799
sg3647
g3810
sg3642
g3807
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3756
sg3633
g4692
sg3647
g3763
sg3642
g4699
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3820
sg3633
g4733
sg3647
g3827
sg3642
g4740
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3890
sg3633
g4439
sg3647
g3884
sg3642
g4446
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g4398
sg3633
g4852
sg3647
g4405
sg3642
g4859
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g3803
sg3633
g3946
sg3647
g3810
sg3642
g3953
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g4025
sg3633
g5484
sg3647
g4032
sg3642
g5491
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3745
sg3633
g4936
sg3647
g3739
sg3642
g4943
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g3890
sg3633
g3880
sg3647
g3884
sg3642
g3888
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3773
sg3633
g3976
sg3647
g3780
sg3642
g3983
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3675
sg3633
g4532
sg3647
g3682
sg3642
g4539
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3756
sg3633
g4692
sg3647
g3763
sg3642
g4699
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g4098
sg3633
g4094
sg3647
g4105
sg3642
g4102
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3901
sg3633
g3961
sg3647
g3908
sg3642
g3968
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3820
sg3633
g4733
sg3647
g3827
sg3642
g4740
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3890
sg3633
g3880
sg3647
g3884
sg3642
g3888
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4398
sg3633
g4852
sg3647
g4405
sg3642
g4859
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g4014
sg3633
g4424
sg3647
g4008
sg3642
g4431
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3745
sg3633
g4936
sg3647
g3739
sg3642
g4943
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g3773
sg3633
g3976
sg3647
g3780
sg3642
g3983
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g3709
sg3633
g3931
sg3647
g3716
sg3642
g3938
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3820
sg3633
g4733
sg3647
g3827
sg3642
g4740
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g4098
sg3633
g4547
sg3647
g4105
sg3642
g4554
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g4068
sg3633
g4064
sg3647
g4075
sg3642
g4072
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3675
sg3633
g4532
sg3647
g3682
sg3642
g4539
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3837
sg3633
g4165
sg3647
g3844
sg3642
g4172
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3745
sg3633
g4936
sg3647
g3739
sg3642
g4943
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g3675
sg3633
g4532
sg3647
g3682
sg3642
g4539
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g4068
sg3633
g4867
sg3647
g4075
sg3642
g4874
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3890
sg3633
g4439
sg3647
g3884
sg3642
g4446
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g4068
sg3633
g4867
sg3647
g4075
sg3642
g4874
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3658
sg3633
g4150
sg3647
g3665
sg3642
g4157
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3658
sg3633
g4150
sg3647
g3665
sg3642
g4157
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g3820
sg3633
g3816
sg3647
g3827
sg3642
g3824
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g3756
sg3633
g3752
sg3647
g3763
sg3642
g3760
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3918
sg3633
g3914
sg3647
g3925
sg3642
g3922
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g3745
sg3633
g4936
sg3647
g3739
sg3642
g4943
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3709
sg3633
g3931
sg3647
g3716
sg3642
g3938
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3638
sg3633
g4312
sg3647
g3648
sg3642
g4319
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g4098
sg3633
g4547
sg3647
g4105
sg3642
g4554
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g3837
sg3633
g4165
sg3647
g3844
sg3642
g4172
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3803
sg3633
g3946
sg3647
g3810
sg3642
g3953
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4068
sg3633
g4867
sg3647
g4075
sg3642
g4874
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4025
sg3633
g5484
sg3647
g4032
sg3642
g5491
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g4068
sg3633
g4867
sg3647
g4075
sg3642
g4874
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3756
sg3633
g4692
sg3647
g3763
sg3642
g4699
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3692
sg3633
g3688
sg3647
g3699
sg3642
g3696
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4025
sg3633
g5484
sg3647
g4032
sg3642
g5491
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3901
sg3633
g3897
sg3647
g3908
sg3642
g3905
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g3837
sg3633
g3833
sg3647
g3844
sg3642
g3841
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g4025
sg3633
g5484
sg3647
g4032
sg3642
g5491
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4014
sg3633
g4424
sg3647
g4008
sg3642
g4431
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g3803
sg3633
g3946
sg3647
g3810
sg3642
g3953
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g3773
sg3633
g3976
sg3647
g3780
sg3642
g3983
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g4014
sg3633
g4004
sg3647
g4008
sg3642
g4012
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3773
sg3633
g3976
sg3647
g3780
sg3642
g3983
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g4025
sg3633
g5484
sg3647
g4032
sg3642
g5491
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3745
sg3633
g3735
sg3647
g3739
sg3642
g3743
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3854
sg3633
g3850
sg3647
g3861
sg3642
g3858
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g4014
sg3633
g4004
sg3647
g4008
sg3642
g4012
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I216260944
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S'\x00\x0c\x06 \xf8"\x06 0#\x06 (\x0c\x06 P\x0c\x06  \\\x05 \x801\x06 \xa01\x06 \xf8"\x06 x\x0c\x06 \x90[\x05  1\x06 \xa0\x0c\x06 \xc8\x0c\x06 \xf0\x0c\x06 \x18\r\x06 \xc0[\x05 @\r\x06 0#\x06 h#\x06 \xe0\\\x05 \xa0\x0c\x06 \x801\x06 \xf0[\x05 \x00\x0c\x06 (\x0c\x06 x\x0c\x06 h#\x06 \x90[\x05 h#\x06 \x10]\x05 \x00\x0c\x06 \xf8"\x06 @\r\x06 P\x0c\x06  \\\x05 \x18\r\x06 \x10$\x06 \xa0#\x06 \xc8\x0c\x06 @1\x06 P\x0c\x06 \xc8\x0c\x06 X\x0e\x06 x\x0c\x06  1\x06 \xf0[\x05 \xf8"\x06 `[\x05 \x18\r\x06 h#\x06 0#\x06  1\x06 x\x0c\x06 \x10$\x06 \x08\x0e\x06 \x00\x0c\x06 0\x0e\x06 \xd8#\x06 h\r\x06 @1\x06 \xa0\x0c\x06 \xc0[\x05 P\x0c\x06 \x10$\x06 H$\x06 \x801\x06 \x90[\x05 \xf0\x0c\x06 \x00\x0c\x06 h\r\x06 @1\x06 \x10]\x05 P\x0c\x06 \x90[\x05 h\r\x06 \x90[\x05 \xc8\x0c\x06  \\\x05 \xa0#\x06 0#\x06  1\x06 \xe0\\\x05 x\x0c\x06 \xf8"\x06 @1\x06 \xa0\x0c\x06 H$\x06 \xf0\x0c\x06 \xf8"\x06 \xf0\x0c\x06 \xa0#\x06 @\r\x06 \xf0\x0c\x06 h\r\x06 \xb8\r\x06  \\\x05 \xc8\x0c\x06 H$\x06 \xa01\x06 \xf0\x0c\x06 (\x0c\x06 0\x0e\x06 x\x0c\x06 @1\x06 \xa0\x0c\x06  1\x06 (\x0c\x06 \xa01\x06 \x18\r\x06 (\x0c\x06 \x90[\x05 \xf0[\x05 0#\x06 \x90[\x05 \xf0[\x05 @1\x06 @]\x05 \x90[\x05 \x00\x0c\x06 \xe0\\\x05 @1\x06 \x18\r\x06 h#\x06 \xe0\r\x06 h#\x06 \xf8"\x06 x\x0c\x06 \xf0[\x05 h\r\x06 \xc8\x0c\x06 \xe0\\\x05 \xa0#\x06 \xc0[\x05 \xd8#\x06 \xf8"\x06 \xa0\x0c\x06 h\r\x06 \x00\x0c\x06 \xa0\x0c\x06 `[\x05 P\x0c\x06 x\x0c\x06 \xe0\\\x05 `[\x05 \xc01\x06 P\x0c\x06  \\\x05 \x08\x0e\x06 P\\\x05 @]\x05 (\x0c\x06 \xc8\x0c\x06 \xf0[\x05 \x80\\\x05 \xf8"\x06 \x801\x06 \xc0[\x05 \x801\x06 \x10]\x05 \xc8\x0c\x06 h#\x06 @\r\x06  1\x06 \xc8\x0c\x06 \xf0[\x05 \x18\r\x06 \xf0\x0c\x06 \x10]\x05 (\x0c\x06 h\r\x06 \xc0[\x05 \x18\r\x06 \x00\x0c\x06 h#\x06 h\r\x06 @\r\x06 H$\x06 \xd8#\x06 \xa0#\x06 x\x0c\x06 \xe0\r\x06 \xa0#\x06 X\x0e\x06 \x80\\\x05 \x08\x0e\x06 `[\x05 \x18\r\x06 (\x0c\x06 \xf0[\x05 \x18\r\x06 @\r\x06 \xa0\x0c\x06 \x00\x0c\x06 \xf0[\x05  1\x06 `[\x05 \x00\x0c\x06 \xf0[\x05 \xc8\x0c\x06 '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S'@4\x06 \xc02\x06 \xa03\x06 \x003\x06 @2\x06 `3\x06  4\x06 \x803\x06 \x802\x06 \xe04\x06 \xa04\x06 @5\x06 \xc03\x06 \xe03\x06 `2\x06 \xa02\x06 \xe05\x06 \x804\x06 \x004\x06 \x805\x06 \x006\x06 \xa05\x06 \xc04\x06 `6\x06 @6\x06 \xe02\x06 \x806\x06 \xa06\x06 \xc06\x06 \xe06\x06 \x007\x06 `7\x06 @7\x06 \xa07\x06 \xc07\x06 `5\x06 \x008\x06 \xe07\x06 \xc05\x06 `8\x06 @8\x06 \xa08\x06 \xc08\x06 \x807\x06  3\x06 \xe08\x06 \x009\x06 @3\x06 \xe01\x06 \xc09\x06  5\x06  :\x06 \x808\x06 \x80:\x06 `9\x06  8\x06 @:\x06 \x00:\x06  6\x06 \xa0:\x06 \x00;\x06 \xe0:\x06 \x809\x06  ;\x06 \x80;\x06 `;\x06 \xc0;\x06 \xa0;\x06 \xa09\x06  <\x06 @<\x06 `<\x06 @9\x06 \xa0<\x06 \x80<\x06 @;\x06 \x00=\x06 \xe0<\x06 @=\x06 `=\x06 \x80=\x06 \xa0=\x06 \xc0=\x06 \x005\x06 \x00>\x06  =\x06 `,\xe5\x1f\xe0;\x06  >\x06 `:\x06 \xc0<\x06  7\x06 `4\x06 \xc0>\x06 @>\x06 `>\x06 \xc0:\x06 `?\x06 @?\x06 \xe09\x06 \xe0=\x06 \xe0>\x06  2\x06  ?\x06 \xa0?\x06 \x80?\x06 \x00<\x06 \xe0?\x06 \xc0?\x06 \x00?\x06 \x80>\x06  o\xbb\x1f@\xb24  \xb24 \xc0\xb04 @\xb14 \x00\xb24 \xe0\xb04  \xb04 \x00\xb14 \xa0\xb24 \x80\xb24 \xe0\xb14 \xe0\xb24 \x00\xb34 \xa0\xb14  \xb14  \xb34 @\xb34 \xa0\xb34 \xc0\xb34 `\xb14 \xc0\xb14 \xe0\xb34 @\xb44  \xb44 \xa0\xb04 `\xb44 \x80\xb44 \xa0\xb44 \x00\xb54 \xe0\xb44 \x80\xb34  \xb54 @\xb54 `\xb54 \xc0\xb54 \xa0\xb54 `\xb34 \xe0\xb54 @\xb64  \xb64 \x80\xb64 `\xb64 \x00\xb44 \xa0\xb64 \x00\xb74 \xa0>\x06 `\xb04 @\xb74  \xb74 \xc0\xb74 \x80\xb14 @\xb04  \xb84 \x80\xb84 \xc0\xb44 @\xb84 \xc0\xb64 `\xb24 \xe0\xb64 \xc0\xb84 \x80\xb04 \x00\xb84 \xe0\xb84 \xc0\xb94  \xb94 \x80\xb54 `\xb74 \x00\xb94 \xa0\xb84 \x00\xba4 `\xb84 \x00\xb64 \xa0\xb74 `\xb94 @\xba4 \xe0\xba4 \xa0\xb94 \x80\xbb4  \xbb4 @\xbb4 \xa0\xbb4 \x80\xb94 \xc0\xba4 `\xba4 \x00\xbc4 \x80\xb74 \xc0\xb24 `\xbb4 '
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'e\xe5n?s\x18\x82?\xa8\xebn?J\xd9]?1S\x95?B\x88\x88?Q\xa8j?s\xd8]?d\x16b?\x8aU\xb5?\x91\x0b\x80?-\x81H?0\x0eQ?x\nb?\x15\x1c\xc2?!\x86H?\xc8\x1f\x82?Qpw?\xcb\xa6*?\x99\x1e\x82?0\xe7n?+<b?\x8923?\xbc\x17b?9\xdd\x1d?\xcb\xed.?\xc7\tQ?X\xc0j?\xbew7?\xd8DD?|B\xa4?y]&?\xafCU?\x92\xfb\x8e?`hf?\\\xba+@!\xc9\x8c?\x17\xcdL?\x008b?\xfd\xfdP?1\xb9\xdb?\xd6S\x95?16\xa4?\xaf\\\x95? c\x16@>\xa4j?E\x7fH?\x1a8D?\xc6zg@\x91\x08Q?Y23?\x80*3?R/\xb3?\xff?\x84?\xeb\xe9\x9d?\xfb\xdc\x9d?\x8ff\x86?g.\x93?m\xdd\xbd?K\xac{?H\x1f\xa2?\x9e\xcbL?\xed\xfd\x7f?\xae\xfc\x9f?;Ct@\x95\xa7\x8a?\xb4\xf6??t\x85\x88?w\xea\xce?\x9e\xbdj?\x00\x11\x91?FB\xc4?=o\x97?o\r\xd1?\xe0iU?\xa0c\x86?j\xa7\xca?R\xcd.?D.\xf3?\xaa+\x82?\x05\xedn?D\xa7\x8a?\xdf2\xb3?\x1c]f?\xd5X\x95?\x80-s?u\xee\x7f?t-3?\xb4@\x84?\xb9,3?\xb0>\xb3?\xcd\xb8;?\xd5\xe8n?\xc6A\x14@\x13\xeb^@6\xb9K@oA\xc4?\xb0\xeb\x0e@6\xf6\x7f?\xcb\x92Y?>\x1f\x82?v\xf9\x7f?\xe2?s?\x0b\xee\x8e?\x9fUU?\x11\xff\xff?\xef\xc5L?=\x0e\x11@\xd5kf?\xd9C\xa4?\xdb\xa2\xf9?\x8d\xb9\xfb?\x9dU\xb5?\x8cT\xd5?\xf0\xfb??\x16)\x82?C\xee.?\x8a\x88H?\xc7b\x86?\xbb\x1e\xa2?\xbcdf??WU?\\\xe7n?~\xceL?\xaf\xea\xae?\xdd\xd4]?k\x85\x88?,\x89H?)\xb1L?\xbe\x1f\x12@\xc6Gf?\xa7|\x97?\x9b(s?j\nQ?\x05\xb6\xbb?Ri7?,T\xd5?(\x92Y?\xb7sw?W\xaa\x8a?V\x82\xc8?\xa0\x80\xb7?5\xd6]?f\xcc\x8c?\x81\x1f\x02@j\xc5L?>\xba\xfb?Sb\xa6?]\xdc\xdd?9\xf0.?\x94\'s?\xc7Ls?.\xf8P?\xfa\x08Q?\x17\xbb{?f\x02Q?\xc7\xa3\xd9?\x8d\xe9??{\x1d"?\xa3\x0f1@#\x97*?\xadp\x86?(\xadj?\xc7\xe5.?\xbd\x10"?\x15\x87\x88?G\xa8j?o\xadj?\xc7\xa7\x8a?\xbe\x83\xa8?\x86\xb5{?\xcec\x86?\xacL\x84?\xb1\xfd??\xf8\x93Y?\x89\xeb.?e\xca\xac?ax7?u\xe5L?\x0f\xe9\xae?\x8fpw?\x8b\xdc]?dw\x97?\xfb\x80\xb7?&\xb7{?\x87\x0cQ?\xf6c6@l\x0c\xd1?\xd7\xde]?\xa9\x9aY?\x91QU?.\xa2*?\xa4\xcb\xac?\xde0\xd3?}\xa0j?\x89\xb1;?E\xaa\xaa?\xce\xd6]?\xad\xd6\x8c?\r`7?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'Po\xf9\x04Pf\xf9\x04\xc8\xb9\xe4\x0c\xd0\xba\xe4\x0c\xf0\xb2\xe4\x0cP\xb6\xe4\x0c\xf8\xb6\xe4\x0c\x00\xb5\xe4\x0c(\xb1\xe4\x0c\x10\xba\xe4\x0c@\xba\xe4\x0c`\xbe\xe4\x0c\xe8\xb7\xe4\x0c\xb0\xbc\xe4\x0c\xb8\xba\xe4\x0cH\xb8\xe4\x0c\x88\xb7\xe4\x0c\x10\xb7\xe4\x0c\xc8\xbc\xe4\x0cX\xb4\xe4\x0c\x10\xbd\xe4\x0c\x88\xbd\xe4\x0c\x08\xbc\xe4\x0c8\xbc\xe4\x0c8\x16\xe5\x048\x19\xe5\x040\x1b\xe5\x04\x08\x16\xe5\x04\xd0\x17\xe5\x04x\x12\xe5\x04`\x12\xe5\x04\xa0\x1a\xe5\x04(\x17\xe5\x04\xf8\x19\xe5\x04\xb0\x10\xe5\x04\xf8\x10\xe5\x04\x80\x10\xe5\x04`\x15\xe5\x04\xf8\x16\xe5\x04p\x17\xe5\x04@\x11\xe5\x04\xc8\x10\xe5\x04\xe8\x14\xe5\x04H\x18\xe5\x04\xf0\x12\xe5\x04\xb8\x14\xe5\x04X\x14\xe5\x04\x00\x12\xe5\x04\xb8\x1d\xe5\x04\xa0\x1d\xe5\x04\x10\x14\xe5\x04\x88\x1a\xe5\x04\x10\x1a\xe5\x04H\x1b\xe5\x048\x1c\xe5\x04\xe8\x11\xe5\x04\x18\x15\xe5\x04\xa0\x11\xe5\x04\x80\x1f\xe5\x04\xc0\x1e\xe5\x04\x90\x1b\xe5\x04\xd8\x12\xe5\x04\xc0\x15\xe5\x04X\x11\xe5\x04p\x1a\xe5\x04h\x1c\xe5\x04\x98\x16\xe5\x04\x18\x18\xe5\x04\xb0\x13\xe5\x04\xa8\x18\xe5\x04\x00\x18\xe5\x04\x80\x19\xe5\x04\x98\x19\xe5\x04\x80\x13\xe5\x04\xa0\x17\xe5\x04\xa8\x15\xe5\x04x\x1e\xe5\x04\xe0\x1c\xe5\x04\x88\x1d\xe5\x04 \x10\xe5\x04\xc0\x12\xe5\x04\xb0\x19\xe5\x04\xa8\x1e\xe5\x04\xb8\x17\xe5\x04\xf0\x1e\xe5\x04\xf0\x1b\xe5\x04\x98\x1c\xe5\x04 \x1f\xe5\x04P\x1f\xe5\x04\xe0\x10\xe5\x04P\x16\xe5\x04H\x15\xe5\x04\x90\x18\xe5\x04\x18\x12\xe5\x04 \x1c\xe5\x04\xc0\x1b\xe5\x04\xd8\x15\xe5\x04\x80\x1c\xe5\x04p\x11\xe5\x040\x18\xe5\x04\xa0\x14\xe5\x04\xb8\x1a\xe5\x04\x98\x10\xe5\x04\x18\x1b\xe5\x04\x08\x1f\xe5\x04h\x16\xe5\x04\xe0\x16\xe5\x04h\x19\xe5\x04(\x1d\xe5\x040\x12\xe5\x04\x80\x16\xe5\x04\x00\x1b\xe5\x04\x08\x19\xe5\x04\xe8\x1a\xe5\x04@\x14\xe5\x04X\x1a\xe5\x04\xb0\x16\xe5\x04\x88\x17\xe5\x04@\x17\xe5\x040\x1e\xe5\x04\xd8\x1b\xe5\x04\xd8\x18\xe5\x04\xc8\x1c\xe5\x04\xf8\x1c\xe5\x04P\x1c\xe5\x04X\x17\xe5\x04`\x1b\xe5\x04\x08\x13\xe5\x04\x10\x1d\xe5\x04x\x18\xe5\x04\xd8\x1e\xe5\x04\xe0\x1f\xe5\x040\x15\xe5\x04\x98\x13\xe5\x04(\x1a\xe5\x04H\x1e\xe5\x04x\x15\xe5\x04 \x19\xe5\x04\xe0\x13\xe5\x04\xc8\x1f\xe5\x04\xb0\x1c\xe5\x04\xe8\x17\xe5\x04\x10\x17\xe5\x04h\x1f\xe5\x04\xf0\x15\xe5\x04\x00\x15\xe5\x04\x98\x1f\xe5\x04X\x1d\xe5\x04\x18\x1e\xe5\x04\xc0\x18\xe5\x04x\x1b\xe5\x04P\x10\xe5\x04\xc8\x16\xe5\x04@\x1d\xe5\x04\xc8\x13\xe5\x04\x10\x11\xe5\x04\xd0\x1d\xe5\x04p\x1d\xe5\x04\xb0\x1f\xe5\x04\xb8\x11\xe5\x04\xd0\x11\xe5\x04@\x1a\xe5\x04\xa8\x12\xe5\x04\x90\x15\xe5\x04 \x13\xe5\x04h\x13\xe5\x04\x88\x14\xe5\x04H\x12\xe5\x04(\x14\xe5\x048\x1f\xe5\x04\x08\x1c\xe5\x04\xf0\x18\xe5\x04\xe8\x1d\xe5\x04(\x11\xe5\x04\x90\x1e\xe5\x04\xa8\x1b\xe5\x04`\x1e\xe5\x04P\x13\xe5\x04\xf8\x13\xe5\x04\x88\x11\xe5\x04\x90\xd2\xf8\x04\xa0\xda\xf8\x04p\xda\xf8\x04\xa8\xd5\xf8\x04\xe8\xd1\xf8\x048\xd9\xf8\x04\xd8\xd2\xf8\x04\xa8\xbb\xe4\x0c\x18\xb2\xe4\x0cH\xb2\xe4\x0c\xf8\xbc\xe4\x0c\xf8\xb9\xe4\x0c\xc0\xb8\xe4\x0cP\xbf\xe4\x0cH\xbe\xe4\x0cp\xb1\xe4\x0c\xc8\xbf\xe4\x0cH\xbb\xe4\x0cx\xbe\xe4\x0c\x80\xb3\xe4\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6500
sg6371
g6490
sg6385
g6494
sg6380
g6498
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6500
sg6371
g6490
sg6385
g6494
sg6380
g6498
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6571
sg6371
g6567
sg6385
g6578
sg6380
g6575
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6656
sg6371
g6652
sg6385
g6663
sg6380
g6660
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6686
sg6371
g6682
sg6385
g6693
sg6380
g6690
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6571
sg6371
g6567
sg6385
g6578
sg6380
g6575
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6744
sg6371
g6740
sg6385
g6751
sg6380
g6748
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6430
sg6371
g6770
sg6385
g6437
sg6380
g6777
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6524
sg6371
g6785
sg6385
g6531
sg6380
g6792
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6686
sg6371
g6800
sg6385
g6693
sg6380
g6807
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6686
sg6371
g6682
sg6385
g6693
sg6380
g6690
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6656
sg6371
g6652
sg6385
g6663
sg6380
g6660
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6656
sg6371
g6880
sg6385
g6663
sg6380
g6887
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6447
sg6371
g6895
sg6385
g6454
sg6380
g6902
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6470
sg6371
g6910
sg6385
g6464
sg6380
g6917
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6622
sg6371
g6925
sg6385
g6629
sg6380
g6932
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6950
sg6371
g6940
sg6385
g6944
sg6380
g6948
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6961
sg6371
g6957
sg6385
g6968
sg6380
g6965
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6588
sg6371
g6974
sg6385
g6595
sg6380
g6981
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6950
sg6371
g6989
sg6385
g6944
sg6380
g6996
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6447
sg6371
g6895
sg6385
g6454
sg6380
g6902
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g6588
sg6371
g6974
sg6385
g6595
sg6380
g6981
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g7040
sg6371
g7030
sg6385
g7034
sg6380
g7038
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6524
sg6371
g6785
sg6385
g6531
sg6380
g6792
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6500
sg6371
g7060
sg6385
g6494
sg6380
g7067
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6744
sg6371
g6740
sg6385
g6751
sg6380
g6748
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6396
sg6371
g7088
sg6385
g6403
sg6380
g7095
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6686
sg6371
g6800
sg6385
g6693
sg6380
g6807
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6500
sg6371
g7060
sg6385
g6494
sg6380
g7067
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6524
sg6371
g6785
sg6385
g6531
sg6380
g6792
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6950
sg6371
g6989
sg6385
g6944
sg6380
g6996
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6447
sg6371
g6895
sg6385
g6454
sg6380
g6902
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6376
sg6371
g7207
sg6385
g6386
sg6380
g7214
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6571
sg6371
g6567
sg6385
g6578
sg6380
g6575
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g7040
sg6371
g7030
sg6385
g7034
sg6380
g7038
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6950
sg6371
g6989
sg6385
g6944
sg6380
g6996
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6571
sg6371
g7274
sg6385
g6578
sg6380
g7281
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6950
sg6371
g6989
sg6385
g6944
sg6380
g6996
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6961
sg6371
g7328
sg6385
g6968
sg6380
g7335
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6541
sg6371
g7356
sg6385
g6548
sg6380
g7363
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6605
sg6371
g7371
sg6385
g6612
sg6380
g7378
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g7040
sg6371
g7399
sg6385
g7034
sg6380
g7406
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6950
sg6371
g6940
sg6385
g6944
sg6380
g6948
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g6656
sg6371
g6880
sg6385
g6663
sg6380
g6887
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g7040
sg6371
g7399
sg6385
g7034
sg6380
g7406
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g6470
sg6371
g6910
sg6385
g6464
sg6380
g6917
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6961
sg6371
g6957
sg6385
g6968
sg6380
g6965
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6500
sg6371
g6490
sg6385
g6494
sg6380
g6498
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6639
sg6371
g7557
sg6385
g6646
sg6380
g7564
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6396
sg6371
g7088
sg6385
g6403
sg6380
g7095
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6950
sg6371
g6940
sg6385
g6944
sg6380
g6948
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6571
sg6371
g6567
sg6385
g6578
sg6380
g6575
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6961
sg6371
g7328
sg6385
g6968
sg6380
g7335
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6396
sg6371
g7088
sg6385
g6403
sg6380
g7095
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6605
sg6371
g7371
sg6385
g6612
sg6380
g7378
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6961
sg6371
g7328
sg6385
g6968
sg6380
g7335
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6656
sg6371
g6880
sg6385
g6663
sg6380
g6887
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6605
sg6371
g7371
sg6385
g6612
sg6380
g7378
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g7040
sg6371
g7030
sg6385
g7034
sg6380
g7038
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6396
sg6371
g7088
sg6385
g6403
sg6380
g7095
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6588
sg6371
g6974
sg6385
g6595
sg6380
g6981
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6961
sg6371
g7328
sg6385
g6968
sg6380
g7335
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6500
sg6371
g7060
sg6385
g6494
sg6380
g7067
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6571
sg6371
g6567
sg6385
g6578
sg6380
g6575
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6524
sg6371
g6785
sg6385
g6531
sg6380
g6792
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6950
sg6371
g6989
sg6385
g6944
sg6380
g6996
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6571
sg6371
g7274
sg6385
g6578
sg6380
g7281
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6500
sg6371
g7060
sg6385
g6494
sg6380
g7067
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6500
sg6371
g6490
sg6385
g6494
sg6380
g6498
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6622
sg6371
g6925
sg6385
g6629
sg6380
g6932
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6430
sg6371
g6770
sg6385
g6437
sg6380
g6777
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6541
sg6371
g6537
sg6385
g6548
sg6380
g6545
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6744
sg6371
g7949
sg6385
g6751
sg6380
g7956
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6541
sg6371
g7356
sg6385
g6548
sg6380
g7363
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6744
sg6371
g7949
sg6385
g6751
sg6380
g7956
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6950
sg6371
g6940
sg6385
g6944
sg6380
g6948
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6686
sg6371
g6800
sg6385
g6693
sg6380
g6807
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6541
sg6371
g7356
sg6385
g6548
sg6380
g7363
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6376
sg6371
g7207
sg6385
g6386
sg6380
g7214
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6639
sg6371
g7557
sg6385
g6646
sg6380
g7564
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6950
sg6371
g6940
sg6385
g6944
sg6380
g6948
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g6686
sg6371
g6800
sg6385
g6693
sg6380
g6807
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6430
sg6371
g6770
sg6385
g6437
sg6380
g6777
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6686
sg6371
g6682
sg6385
g6693
sg6380
g6690
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6524
sg6371
g6785
sg6385
g6531
sg6380
g6792
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6744
sg6371
g7949
sg6385
g6751
sg6380
g7956
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g7040
sg6371
g7030
sg6385
g7034
sg6380
g7038
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6588
sg6371
g6974
sg6385
g6595
sg6380
g6981
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6961
sg6371
g6957
sg6385
g6968
sg6380
g6965
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g6639
sg6371
g7557
sg6385
g6646
sg6380
g7564
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6605
sg6371
g6601
sg6385
g6612
sg6380
g6609
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g6571
sg6371
g7274
sg6385
g6578
sg6380
g7281
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g7040
sg6371
g7030
sg6385
g7034
sg6380
g7038
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6376
sg6371
g7207
sg6385
g6386
sg6380
g7214
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6571
sg6371
g7274
sg6385
g6578
sg6380
g7281
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6470
sg6371
g6910
sg6385
g6464
sg6380
g6917
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6447
sg6371
g6895
sg6385
g6454
sg6380
g6902
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6639
sg6371
g7557
sg6385
g6646
sg6380
g7564
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6470
sg6371
g6910
sg6385
g6464
sg6380
g6917
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6447
sg6371
g6895
sg6385
g6454
sg6380
g6902
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6686
sg6371
g6800
sg6385
g6693
sg6380
g6807
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6744
sg6371
g6740
sg6385
g6751
sg6380
g6748
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6541
sg6371
g7356
sg6385
g6548
sg6380
g7363
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6396
sg6371
g7088
sg6385
g6403
sg6380
g7095
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6639
sg6371
g7557
sg6385
g6646
sg6380
g7564
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6413
sg6371
g6725
sg6385
g6420
sg6380
g6732
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6656
sg6371
g6652
sg6385
g6663
sg6380
g6660
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6686
sg6371
g6682
sg6385
g6693
sg6380
g6690
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6656
sg6371
g6652
sg6385
g6663
sg6380
g6660
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6500
sg6371
g6490
sg6385
g6494
sg6380
g6498
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6588
sg6371
g6584
sg6385
g6595
sg6380
g6592
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6744
sg6371
g6740
sg6385
g6751
sg6380
g6748
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6622
sg6371
g6925
sg6385
g6629
sg6380
g6932
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g6605
sg6371
g7371
sg6385
g6612
sg6380
g7378
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6656
sg6371
g6652
sg6385
g6663
sg6380
g6660
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6430
sg6371
g6770
sg6385
g6437
sg6380
g6777
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g7040
sg6371
g7399
sg6385
g7034
sg6380
g7406
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6639
sg6371
g6635
sg6385
g6646
sg6380
g6643
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6622
sg6371
g6925
sg6385
g6629
sg6380
g6932
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6376
sg6371
g7207
sg6385
g6386
sg6380
g7214
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6686
sg6371
g6682
sg6385
g6693
sg6380
g6690
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g7040
sg6371
g7399
sg6385
g7034
sg6380
g7406
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6656
sg6371
g6880
sg6385
g6663
sg6380
g6887
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6961
sg6371
g7328
sg6385
g6968
sg6380
g7335
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6605
sg6371
g7371
sg6385
g6612
sg6380
g7378
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6961
sg6371
g6957
sg6385
g6968
sg6380
g6965
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6524
sg6371
g6520
sg6385
g6531
sg6380
g6528
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6961
sg6371
g6957
sg6385
g6968
sg6380
g6965
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g7040
sg6371
g7399
sg6385
g7034
sg6380
g7406
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6541
sg6371
g7356
sg6385
g6548
sg6380
g7363
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6470
sg6371
g6910
sg6385
g6464
sg6380
g6917
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6622
sg6371
g6925
sg6385
g6629
sg6380
g6932
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6430
sg6371
g6770
sg6385
g6437
sg6380
g6777
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6744
sg6371
g6740
sg6385
g6751
sg6380
g6748
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6622
sg6371
g6618
sg6385
g6629
sg6380
g6626
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6656
sg6371
g6880
sg6385
g6663
sg6380
g6887
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6571
sg6371
g7274
sg6385
g6578
sg6380
g7281
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6376
sg6371
g7207
sg6385
g6386
sg6380
g7214
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6744
sg6371
g7949
sg6385
g6751
sg6380
g7956
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6500
sg6371
g7060
sg6385
g6494
sg6380
g7067
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6470
sg6371
g6460
sg6385
g6464
sg6380
g6468
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6744
sg6371
g7949
sg6385
g6751
sg6380
g7956
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6588
sg6371
g6974
sg6385
g6595
sg6380
g6981
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.