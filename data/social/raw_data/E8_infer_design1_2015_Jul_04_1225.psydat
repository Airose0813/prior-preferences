ccopy_reg
_reconstructor
p1
(cpsychopy.data
ExperimentHandler
p2
c__builtin__
object
p3
NtRp4
(dp5
S'originPath'
p6
NsS'dataFileName'
p7
Vdata/E8_infer_design1_2015_Jul_04_1225
p8
sS'runtimeInfo'
p9
NsS'name'
p10
S'infer_design1'
p11
sS'dataNames'
p12
(lp13
S'instr_main_resp.keys'
p14
aS'instr_main_resp.rt'
p15
aS'instr_bdm_resp.keys'
p16
aS'partnered_pilot_participant'
p17
aS'instr_bdm_resp.rt'
p18
aS'bdm_bid1.response'
p19
aS'bdm_bid1.rt'
p20
aS'bdm_marker_start'
p21
aS'instr_choice_resp.keys'
p22
aS'instr_choice_resp.rt'
p23
aS'key_resp_choice.keys'
p24
aS'key_resp_choice.rt'
p25
aS'confidence_rating1.response'
p26
aS'confidence_rating1.rt'
p27
aS'confidence_marker_start'
p28
aS'instr_infer_intro_resp.keys'
p29
aS'instr_infer_intro_resp.rt'
p30
aS'instr_infer_practice_resp.keys'
p31
aS'instr_infer_practice_resp.rt'
p32
aS'set_feedback.feedback_img'
p33
aS'trial_start_time'
p34
aS'instr_infer_resp.keys'
p35
aS'instr_infer_resp.rt'
p36
aS'get_ready_resp.keys'
p37
aS'infer_resp.keys'
p38
aS'infer_resp.rt'
p39
aS'rest_prompt_resp.keys'
p40
aS'rest_prompt_resp.rt'
p41
aS'correct_counter'
p42
aS'incorrect_counter'
p43
aS'auction.win_item'
p44
aS'auction.price'
p45
aS'auction.bid'
p46
aS'auction.rand_itm_img'
p47
aS'score.base'
p48
aS'score.rwrd'
p49
aS'score.loss'
p50
aS'score.final_pymt'
p51
asS'autoLog'
p52
I01
sS'extraInfo'
p53
(dp54
S'expName'
p55
g11
sVeye
p56
Vright
p57
sVcontacts
p58
Vy
sS'frameRate'
p59
cnumpy.core.multiarray
scalar
p60
(cnumpy
dtype
p61
(S'f8'
I0
I1
tRp62
(I3
S'<'
NNNI-1
I-1
I0
tbS'\xe5\x12\xb0\x84%\x06N@'
tRp63
sVsession
p64
V001
p65
sS'date'
p66
V2015_Jul_04_1225
p67
sVparticipant
p68
VE8
p69
sVglasses
p70
Vn
ssS'loopsUnfinished'
p71
(lp72
sS'saveWideText'
p73
I01
sS'thisEntry'
p74
(dp75
sS'version'
p76
S''
sS'_paramNamesSoFar'
p77
(lp78
Vbdm_img
p79
aS'choice_left'
p80
aS'choice_right'
p81
aS'img_correct'
p82
aS'img_left'
p83
aS'img_wrong'
p84
aS'img_right'
p85
asS'entries'
p86
(lp87
(dp88
g64
g65
sg56
g57
sg15
F2.1168663332764481
sg14
S'space'
p89
sg59
g63
sg58
Vy
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp90
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg16
S'space'
p91
sg55
g11
sg66
g67
sg68
g69
sg18
F47.732009121914416
sg17
cnumpy.core.multiarray
_reconstruct
p92
(cnumpy
ndarray
p93
(I0
tS'b'
tRp94
(I1
(I1
tg61
(S'S3'
I0
I1
tRp95
(I3
S'|'
NNNI3
I1
I0
tbI00
S'P9\x00'
tbsg70
Vn
sa(dp96
g64
g65
sg20
F11.683999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p97
I0
sg19
F1.2399999999999993
sg55
g11
sS'bdm_loop1.thisIndex'
p98
g60
(g61
(S'i4'
I0
I1
tRp99
(I3
S'<'
NNNI-1
I-1
I0
tbS'\x0c\x00\x00\x00'
tRp100
sS'bdm_loop1.thisRepN'
p101
I0
sS'bdm_loop1.thisTrialN'
p102
I0
sg66
g67
sg68
g69
sg79
V18-mms.png
p103
sg21
F1.8999999999999999
sg70
Vn
sa(dp104
g64
g65
sg20
F6.734
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p105
I1
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p106
g60
(g99
S'\x18\x00\x00\x00'
tRp107
sS'bdm_loop1.thisRepN'
p108
I0
sS'bdm_loop1.thisTrialN'
p109
I1
sg66
g67
sg68
g69
sg79
V33-ambrosia_rice.png
p110
sg21
F1.3
sg70
Vn
sa(dp111
g64
g65
sg20
F4.617
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p112
I2
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p113
g60
(g99
S"'\x00\x00\x00"
tRp114
sS'bdm_loop1.thisRepN'
p115
I0
sS'bdm_loop1.thisTrialN'
p116
I2
sg66
g67
sg68
g69
sg79
V51-mars.png
p117
sg21
F1.7
sg70
Vn
sa(dp118
g64
g65
sg20
F9.9670000000000005
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p119
I3
sg19
F1.0599999999999998
sg55
g11
sS'bdm_loop1.thisIndex'
p120
g60
(g99
S'!\x00\x00\x00'
tRp121
sS'bdm_loop1.thisRepN'
p122
I0
sS'bdm_loop1.thisTrialN'
p123
I3
sg66
g67
sg68
g69
sg79
V44-crunch.png
p124
sg21
F1.2
sg70
Vn
sa(dp125
g64
g65
sg20
F3.1669999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p126
I4
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p127
g60
(g99
S'\x0f\x00\x00\x00'
tRp128
sS'bdm_loop1.thisRepN'
p129
I0
sS'bdm_loop1.thisTrialN'
p130
I4
sg66
g67
sg68
g69
sg79
V21-nakd_banana_crunch.png
p131
sg21
F1.5
sg70
Vn
sa(dp132
g64
g65
sg20
F4.0170000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p133
I5
sg19
F0.019999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p134
g60
(g99
S'\x15\x00\x00\x00'
tRp135
sS'bdm_loop1.thisRepN'
p136
I0
sS'bdm_loop1.thisTrialN'
p137
I5
sg66
g67
sg68
g69
sg79
V29-beans.png
p138
sg21
F1.6000000000000001
sg70
Vn
sa(dp139
g64
g65
sg20
F3.9340000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p140
I6
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p141
g60
(g99
S'\x14\x00\x00\x00'
tRp142
sS'bdm_loop1.thisRepN'
p143
I0
sS'bdm_loop1.thisTrialN'
p144
I6
sg66
g67
sg68
g69
sg79
V27-hartleys_raspberries_jelly.png
p145
sg21
F1.3
sg70
Vn
sa(dp146
g64
g65
sg20
F2.867
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p147
I7
sg19
F0.099999999999999395
sg55
g11
sS'bdm_loop1.thisIndex'
p148
g60
(g99
S'\x12\x00\x00\x00'
tRp149
sS'bdm_loop1.thisRepN'
p150
I0
sS'bdm_loop1.thisTrialN'
p151
I7
sg66
g67
sg68
g69
sg79
V25-kitkat.png
p152
sg21
F1.1000000000000001
sg70
Vn
sa(dp153
g64
g65
sg20
F4.1340000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p154
I8
sg19
F0.039999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p155
g60
(g99
S'\x04\x00\x00\x00'
tRp156
sS'bdm_loop1.thisRepN'
p157
I0
sS'bdm_loop1.thisTrialN'
p158
I8
sg66
g67
sg68
g69
sg79
V5-pineapple.png
p159
sg21
F1.5
sg70
Vn
sa(dp160
g64
g65
sg20
F3.101
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p161
I9
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p162
g60
(g99
S'"\x00\x00\x00'
tRp163
sS'bdm_loop1.thisRepN'
p164
I0
sS'bdm_loop1.thisTrialN'
p165
I9
sg66
g67
sg68
g69
sg79
V45-chewy_nougat_redo.png
p166
sg21
F1.6000000000000001
sg70
Vn
sa(dp167
g64
g65
sg20
F5.5339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p168
I10
sg19
F0.43999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p169
g60
(g99
S'\x06\x00\x00\x00'
tRp170
sS'bdm_loop1.thisRepN'
p171
I0
sS'bdm_loop1.thisTrialN'
p172
I10
sg66
g67
sg68
g69
sg79
V7-olives.png
p173
sg21
F1.3999999999999999
sg70
Vn
sa(dp174
g64
g65
sg20
F3.5339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p175
I11
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p176
g60
(g99
S'\x1b\x00\x00\x00'
tRp177
sS'bdm_loop1.thisRepN'
p178
I0
sS'bdm_loop1.thisTrialN'
p179
I11
sg66
g67
sg68
g69
sg79
V36-fig_rolls.png
p180
sg21
F1.7
sg70
Vn
sa(dp181
g64
g65
sg20
F3.6339999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p182
I12
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p183
g60
(g99
S'\x07\x00\x00\x00'
tRp184
sS'bdm_loop1.thisRepN'
p185
I0
sS'bdm_loop1.thisTrialN'
p186
I12
sg66
g67
sg68
g69
sg79
V8-liquorice_catherine_wheels.png
p187
sg21
F1.3999999999999999
sg70
Vn
sa(dp188
g64
g65
sg20
F3.9009999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p189
I13
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p190
g60
(g99
S'&\x00\x00\x00'
tRp191
sS'bdm_loop1.thisRepN'
p192
I0
sS'bdm_loop1.thisTrialN'
p193
I13
sg66
g67
sg68
g69
sg79
V50-polo.png
p194
sg21
F1.8
sg70
Vn
sa(dp195
g64
g65
sg20
F5.851
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p196
I14
sg19
F0.95999999999999996
sg55
g11
sS'bdm_loop1.thisIndex'
p197
g60
(g99
S'\x1e\x00\x00\x00'
tRp198
sS'bdm_loop1.thisRepN'
p199
I0
sS'bdm_loop1.thisTrialN'
p200
I14
sg66
g67
sg68
g69
sg79
V41-peanuts_redo.png
p201
sg21
F1.1000000000000001
sg70
Vn
sa(dp202
g64
g65
sg20
F5.1509999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p203
I15
sg19
F0.019999999999998717
sg55
g11
sS'bdm_loop1.thisIndex'
p204
g60
(g99
S'\x19\x00\x00\x00'
tRp205
sS'bdm_loop1.thisRepN'
p206
I0
sS'bdm_loop1.thisTrialN'
p207
I15
sg66
g67
sg68
g69
sg79
V34-hula_hoops_bbq_beef_redo.png
p208
sg21
F1.7
sg70
Vn
sa(dp209
g64
g65
sg20
F3.4169999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p210
I16
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p211
g60
(g99
S'\x0e\x00\x00\x00'
tRp212
sS'bdm_loop1.thisRepN'
p213
I0
sS'bdm_loop1.thisTrialN'
p214
I16
sg66
g67
sg68
g69
sg79
V20-fruit_pastilles.png
p215
sg21
F1
sg70
Vn
sa(dp216
g64
g65
sg20
F5.2009999999999996
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p217
I17
sg19
F0.37999999999999901
sg55
g11
sS'bdm_loop1.thisIndex'
p218
g60
(g99
S'\x0b\x00\x00\x00'
tRp219
sS'bdm_loop1.thisRepN'
p220
I0
sS'bdm_loop1.thisTrialN'
p221
I17
sg66
g67
sg68
g69
sg79
V17-jacobs_mini_cheddars_redo.png
p222
sg21
F1.5
sg70
Vn
sa(dp223
g64
g65
sg20
F4.0170000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p224
I18
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p225
g60
(g99
S' \x00\x00\x00'
tRp226
sS'bdm_loop1.thisRepN'
p227
I0
sS'bdm_loop1.thisTrialN'
p228
I18
sg66
g67
sg68
g69
sg79
V43-mrporky_pork_crackles_redo.png
p229
sg21
F1.2
sg70
Vn
sa(dp230
g64
g65
sg20
F4.5339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p231
I19
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p232
g60
(g99
S'\x17\x00\x00\x00'
tRp233
sS'bdm_loop1.thisRepN'
p234
I0
sS'bdm_loop1.thisTrialN'
p235
I19
sg66
g67
sg68
g69
sg79
V31-hobnobs.png
p236
sg21
F1.8999999999999999
sg70
Vn
sa(dp237
g64
g65
sg20
F2.0510000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p238
I20
sg19
F0.079999999999999391
sg55
g11
sS'bdm_loop1.thisIndex'
p239
g60
(g99
S'\x1a\x00\x00\x00'
tRp240
sS'bdm_loop1.thisRepN'
p241
I0
sS'bdm_loop1.thisTrialN'
p242
I20
sg66
g67
sg68
g69
sg79
V35-raisins.png
p243
sg21
F1.1000000000000001
sg70
Vn
sa(dp244
g64
g65
sg20
F3.0009999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p245
I21
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p246
g60
(g99
S'\x16\x00\x00\x00'
tRp247
sS'bdm_loop1.thisRepN'
p248
I0
sS'bdm_loop1.thisTrialN'
p249
I21
sg66
g67
sg68
g69
sg79
V30-spaghetti_hoops.png
p250
sg21
F2
sg70
Vn
sa(dp251
g64
g65
sg20
F3.484
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p252
I22
sg19
F0.93999999999999906
sg55
g11
sS'bdm_loop1.thisIndex'
p253
g60
(g99
S'#\x00\x00\x00'
tRp254
sS'bdm_loop1.thisRepN'
p255
I0
sS'bdm_loop1.thisTrialN'
p256
I22
sg66
g67
sg68
g69
sg79
V46-pistachios.png
p257
sg21
F2
sg70
Vn
sa(dp258
g64
g65
sg20
F3.5339999999999998
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p259
I23
sg19
F0.9399999999999995
sg55
g11
sS'bdm_loop1.thisIndex'
p260
g60
(g99
S'\x03\x00\x00\x00'
tRp261
sS'bdm_loop1.thisRepN'
p262
I0
sS'bdm_loop1.thisTrialN'
p263
I23
sg66
g67
sg68
g69
sg79
V4-corn.png
p264
sg21
F1.3999999999999999
sg70
Vn
sa(dp265
g64
g65
sg20
F3.0670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p266
I24
sg19
F0.019999999999998939
sg55
g11
sS'bdm_loop1.thisIndex'
p267
g60
(g99
S'\t\x00\x00\x00'
tRp268
sS'bdm_loop1.thisRepN'
p269
I0
sS'bdm_loop1.thisTrialN'
p270
I24
sg66
g67
sg68
g69
sg79
V13-mccoys_steak_crisps.png
p271
sg21
F1.6000000000000001
sg70
Vn
sa(dp272
g64
g65
sg20
F4.1840000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p273
I25
sg19
F0.69999999999999973
sg55
g11
sS'bdm_loop1.thisIndex'
p274
g60
(g99
S'\x1f\x00\x00\x00'
tRp275
sS'bdm_loop1.thisRepN'
p276
I0
sS'bdm_loop1.thisTrialN'
p277
I25
sg66
g67
sg68
g69
sg79
V42-mrkipling_lemon_slices.png
p278
sg21
F1
sg70
Vn
sa(dp279
g64
g65
sg20
F4.0170000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p280
I26
sg19
F0.13999999999999851
sg55
g11
sS'bdm_loop1.thisIndex'
p281
g60
(g99
S'\x10\x00\x00\x00'
tRp282
sS'bdm_loop1.thisRepN'
p283
I0
sS'bdm_loop1.thisTrialN'
p284
I26
sg66
g67
sg68
g69
sg79
V22-daim.png
p285
sg21
F1.8999999999999999
sg70
Vn
sa(dp286
g64
g65
sg20
F2.8340000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p287
I27
sg19
F0.21999999999999892
sg55
g11
sS'bdm_loop1.thisIndex'
p288
g60
(g99
S'\x11\x00\x00\x00'
tRp289
sS'bdm_loop1.thisRepN'
p290
I0
sS'bdm_loop1.thisTrialN'
p291
I27
sg66
g67
sg68
g69
sg79
V23-crunchie_redo.png
p292
sg21
F1.5
sg70
Vn
sa(dp293
g64
g65
sg20
F2.9510000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p294
I28
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p295
g60
(g99
S'\x08\x00\x00\x00'
tRp296
sS'bdm_loop1.thisRepN'
p297
I0
sS'bdm_loop1.thisTrialN'
p298
I28
sg66
g67
sg68
g69
sg79
V10-bounty_redo.png
p299
sg21
F1.8999999999999999
sg70
Vn
sa(dp300
g64
g65
sg20
F3.4510000000000001
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p301
I29
sg19
F0.51999999999999869
sg55
g11
sS'bdm_loop1.thisIndex'
p302
g60
(g99
S'$\x00\x00\x00'
tRp303
sS'bdm_loop1.thisRepN'
p304
I0
sS'bdm_loop1.thisTrialN'
p305
I29
sg66
g67
sg68
g69
sg79
V48-twix.png
p306
sg21
F1.8999999999999999
sg70
Vn
sa(dp307
g64
g65
sg20
F2.7509999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p308
I30
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p309
g60
(g99
S'\x05\x00\x00\x00'
tRp310
sS'bdm_loop1.thisRepN'
p311
I0
sS'bdm_loop1.thisTrialN'
p312
I30
sg66
g67
sg68
g69
sg79
V6-sour_patch_kids.png
p313
sg21
F1.3999999999999999
sg70
Vn
sa(dp314
g64
g65
sg20
F3.3170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p315
I31
sg19
F0.079999999999999169
sg55
g11
sS'bdm_loop1.thisIndex'
p316
g60
(g99
S'%\x00\x00\x00'
tRp317
sS'bdm_loop1.thisRepN'
p318
I0
sS'bdm_loop1.thisTrialN'
p319
I31
sg66
g67
sg68
g69
sg79
V49-yorkie.png
p320
sg21
F1.3
sg70
Vn
sa(dp321
g64
g65
sg20
F2.8839999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p322
I32
sg19
F0.059999999999999387
sg55
g11
sS'bdm_loop1.thisIndex'
p323
g60
(g99
S'\r\x00\x00\x00'
tRp324
sS'bdm_loop1.thisRepN'
p325
I0
sS'bdm_loop1.thisTrialN'
p326
I32
sg66
g67
sg68
g69
sg79
V19-caramello_redo.png
p327
sg21
F1
sg70
Vn
sa(dp328
g64
g65
sg20
F3.4340000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p329
I33
sg19
F0
sg55
g11
sS'bdm_loop1.thisIndex'
p330
g60
(g99
S'\n\x00\x00\x00'
tRp331
sS'bdm_loop1.thisRepN'
p332
I0
sS'bdm_loop1.thisTrialN'
p333
I33
sg66
g67
sg68
g69
sg79
V16-skips_prawn.png
p334
sg21
F1.8999999999999999
sg70
Vn
sa(dp335
g64
g65
sg20
F4.0670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p336
I34
sg19
F0.059999999999998943
sg55
g11
sS'bdm_loop1.thisIndex'
p337
g60
(g99
S'\x01\x00\x00\x00'
tRp338
sS'bdm_loop1.thisRepN'
p339
I0
sS'bdm_loop1.thisTrialN'
p340
I34
sg66
g67
sg68
g69
sg79
V2-steamed_puddings.png
p341
sg21
F1.5
sg70
Vn
sa(dp342
g64
g65
sg20
F4.1340000000000003
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p343
I35
sg19
F0.17999999999999849
sg55
g11
sS'bdm_loop1.thisIndex'
p344
g60
(g99
S'\x00\x00\x00\x00'
tRp345
sS'bdm_loop1.thisRepN'
p346
I0
sS'bdm_loop1.thisTrialN'
p347
I35
sg66
g67
sg68
g69
sg79
V1-treacle_cookies.png
p348
sg21
F2
sg70
Vn
sa(dp349
g64
g65
sg20
F4.8170000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p350
I36
sg19
F0.15999999999999917
sg55
g11
sS'bdm_loop1.thisIndex'
p351
g60
(g99
S'\x1d\x00\x00\x00'
tRp352
sS'bdm_loop1.thisRepN'
p353
I0
sS'bdm_loop1.thisTrialN'
p354
I36
sg66
g67
sg68
g69
sg79
V40-sardines.png
p355
sg21
F1.3
sg70
Vn
sa(dp356
g64
g65
sg20
F3.5169999999999999
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p357
I37
sg19
F0.039999999999998495
sg55
g11
sS'bdm_loop1.thisIndex'
p358
g60
(g99
S'\x13\x00\x00\x00'
tRp359
sS'bdm_loop1.thisRepN'
p360
I0
sS'bdm_loop1.thisTrialN'
p361
I37
sg66
g67
sg68
g69
sg79
V26-walkers_smoky_bacon.png
p362
sg21
F1.8999999999999999
sg70
Vn
sa(dp363
g64
g65
sg20
F3.5670000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p364
I38
sg19
F0.17999999999999894
sg55
g11
sS'bdm_loop1.thisIndex'
p365
g60
(g99
S'\x1c\x00\x00\x00'
tRp366
sS'bdm_loop1.thisRepN'
p367
I0
sS'bdm_loop1.thisTrialN'
p368
I38
sg66
g67
sg68
g69
sg79
V38-maltesers.png
p369
sg21
F1.5
sg70
Vn
sa(dp370
g64
g65
sg20
F5.1840000000000002
sg56
g57
sg58
Vy
sg59
g63
sS'bdm_loop1.thisN'
p371
I39
sg19
F0.17999999999999916
sg55
g11
sS'bdm_loop1.thisIndex'
p372
g60
(g99
S'\x02\x00\x00\x00'
tRp373
sS'bdm_loop1.thisRepN'
p374
I0
sS'bdm_loop1.thisTrialN'
p375
I39
sg66
g67
sg68
g69
sg79
V3-ellas_strawberries_apples.png
p376
sg21
F1.2
sg70
Vn
sa(dp377
g64
g65
sg55
g11
sg56
g57
sg23
F14.41673459066169
sg58
Vy
sg59
g63
sg22
S'space'
p378
sg66
g67
sg68
g69
sg70
Vn
sa(dp379
g64
g65
sS'binary.thisRepN'
p380
I0
sg68
g69
sg80
S'1-treacle_cookies.png'
p381
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'21-nakd_banana_crunch.png'
p382
sg66
g67
sg55
g11
sS'binary.thisN'
p383
I0
sg56
g57
sS'binary.thisIndex'
p384
g60
(g99
S'\x00\x00\x00\x00'
tRp385
sg24
S'left'
p386
sS'binary.thisTrialN'
p387
I0
sg25
F2.2832939473946681
sg27
F2.2509999999999999
sg70
Vn
sa(dp388
g64
g65
sS'binary.thisRepN'
p389
I0
sg68
g69
sg80
S'30-spaghetti_hoops.png'
p390
sg26
F1.5999999999999992
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'19-caramello_redo.png'
p391
sg66
g67
sg55
g11
sS'binary.thisN'
p392
I1
sg56
g57
sS'binary.thisIndex'
p393
g60
(g99
S'\x01\x00\x00\x00'
tRp394
sg24
S'right'
p395
sS'binary.thisTrialN'
p396
I1
sg25
F4.6667239708549459
sg27
F2.367
sg70
Vn
sa(dp397
g64
g65
sS'binary.thisRepN'
p398
I0
sg68
g69
sg80
S'31-hobnobs.png'
p399
sg26
F2.9999999999999996
sg28
F3.2999999999999998
sg59
g63
sg58
Vy
sg81
S'25-kitkat.png'
p400
sg66
g67
sg55
g11
sS'binary.thisN'
p401
I2
sg56
g57
sS'binary.thisIndex'
p402
g60
(g99
S'\x02\x00\x00\x00'
tRp403
sg24
S'right'
p404
sS'binary.thisTrialN'
p405
I2
sg25
F1.816771710091416
sg27
F2.2669999999999999
sg70
Vn
sa(dp406
g64
g65
sS'binary.thisRepN'
p407
I0
sg68
g69
sg80
S'16-skips_prawn.png'
p408
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'42-mrkipling_lemon_slices.png'
p409
sg66
g67
sg55
g11
sS'binary.thisN'
p410
I3
sg56
g57
sS'binary.thisIndex'
p411
g60
(g99
S'\x03\x00\x00\x00'
tRp412
sg24
S'right'
p413
sS'binary.thisTrialN'
p414
I3
sg25
F2.8999215132180325
sg27
F1.468
sg70
Vn
sa(dp415
g64
g65
sS'binary.thisRepN'
p416
I0
sg68
g69
sg80
S'22-daim.png'
p417
sg26
F5.9999999999999982
sg28
F3
sg59
g63
sg58
Vy
sg81
S'7-olives.png'
p418
sg66
g67
sg55
g11
sS'binary.thisN'
p419
I4
sg56
g57
sS'binary.thisIndex'
p420
g60
(g99
S'\x04\x00\x00\x00'
tRp421
sg24
S'right'
p422
sS'binary.thisTrialN'
p423
I4
sg25
F2.5833811580969268
sg27
F1.3340000000000001
sg70
Vn
sa(dp424
g64
g65
sS'binary.thisRepN'
p425
I0
sg68
g69
sg80
S'35-raisins.png'
p426
sg26
F2.899999999999999
sg28
F4
sg59
g63
sg58
Vy
sg81
S'49-yorkie.png'
p427
sg66
g67
sg55
g11
sS'binary.thisN'
p428
I5
sg56
g57
sS'binary.thisIndex'
p429
g60
(g99
S'\x05\x00\x00\x00'
tRp430
sg24
S'right'
p431
sS'binary.thisTrialN'
p432
I5
sg25
F3.0501180722867502
sg27
F2.8340000000000001
sg70
Vn
sa(dp433
g64
g65
sS'binary.thisRepN'
p434
I0
sg68
g69
sg80
S'34-hula_hoops_bbq_beef_redo.png'
p435
sg26
F1.4999999999999984
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'36-fig_rolls.png'
p436
sg66
g67
sg55
g11
sS'binary.thisN'
p437
I6
sg56
g57
sS'binary.thisIndex'
p438
g60
(g99
S'\x06\x00\x00\x00'
tRp439
sg24
S'right'
p440
sS'binary.thisTrialN'
p441
I6
sg25
F4.1000667978678393
sg27
F2.101
sg70
Vn
sa(dp442
g64
g65
sS'binary.thisRepN'
p443
I0
sg68
g69
sg80
S'27-hartleys_raspberries_jelly.png'
p444
sg26
F1.9999999999999996
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'51-mars.png'
p445
sg66
g67
sg55
g11
sS'binary.thisN'
p446
I7
sg56
g57
sS'binary.thisIndex'
p447
g60
(g99
S'\x07\x00\x00\x00'
tRp448
sg24
S'right'
p449
sS'binary.thisTrialN'
p450
I7
sg25
F3.083418077960232
sg27
F1.901
sg70
Vn
sa(dp451
g64
g65
sS'binary.thisRepN'
p452
I0
sg68
g69
sg80
S'46-pistachios.png'
p453
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'29-beans.png'
p454
sg66
g67
sg55
g11
sS'binary.thisN'
p455
I8
sg56
g57
sS'binary.thisIndex'
p456
g60
(g99
S'\x08\x00\x00\x00'
tRp457
sg24
S'left'
p458
sS'binary.thisTrialN'
p459
I8
sg25
F1.8501566742133946
sg27
F1.3340000000000001
sg70
Vn
sa(dp460
g64
g65
sS'binary.thisRepN'
p461
I0
sg68
g69
sg80
S'5-pineapple.png'
p462
sg26
F2.3999999999999986
sg28
F4
sg59
g63
sg58
Vy
sg81
S'40-sardines.png'
p463
sg66
g67
sg55
g11
sS'binary.thisN'
p464
I9
sg56
g57
sS'binary.thisIndex'
p465
g60
(g99
S'\t\x00\x00\x00'
tRp466
sg24
S'right'
p467
sS'binary.thisTrialN'
p468
I9
sg25
F4.8000482951720187
sg27
F5.5010000000000003
sg70
Vn
sa(dp469
g64
g65
sS'binary.thisRepN'
p470
I0
sg68
g69
sg80
S'49-yorkie.png'
p471
sg26
F1.6999999999999988
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'35-raisins.png'
p472
sg66
g67
sg55
g11
sS'binary.thisN'
p473
I10
sg56
g57
sS'binary.thisIndex'
p474
g60
(g99
S'\n\x00\x00\x00'
tRp475
sg24
S'left'
p476
sS'binary.thisTrialN'
p477
I10
sg25
F1.6333603888924699
sg27
F4.0010000000000003
sg70
Vn
sa(dp478
g64
g65
sS'binary.thisRepN'
p479
I0
sg68
g69
sg80
S'21-nakd_banana_crunch.png'
p480
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vy
sg81
S'1-treacle_cookies.png'
p481
sg66
g67
sg55
g11
sS'binary.thisN'
p482
I11
sg56
g57
sS'binary.thisIndex'
p483
g60
(g99
S'\x0b\x00\x00\x00'
tRp484
sg24
S'right'
p485
sS'binary.thisTrialN'
p486
I11
sg25
F1.3835001569450469
sg27
F1.234
sg70
Vn
sa(dp487
g64
g65
sS'binary.thisRepN'
p488
I0
sg68
g69
sg80
S'20-fruit_pastilles.png'
p489
sg26
F2.7999999999999989
sg28
F4
sg59
g63
sg58
Vy
sg81
S'2-steamed_puddings.png'
p490
sg66
g67
sg55
g11
sS'binary.thisN'
p491
I12
sg56
g57
sS'binary.thisIndex'
p492
g60
(g99
S'\x0c\x00\x00\x00'
tRp493
sg24
S'right'
p494
sS'binary.thisTrialN'
p495
I12
sg25
F3.8000001140380846
sg27
F1.9510000000000001
sg70
Vn
sa(dp496
g64
g65
sS'binary.thisRepN'
p497
I0
sg68
g69
sg80
S'3-ellas_strawberries_apples.png'
p498
sg26
F1.9999999999999982
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'13-mccoys_steak_crisps.png'
p499
sg66
g67
sg55
g11
sS'binary.thisN'
p500
I13
sg56
g57
sS'binary.thisIndex'
p501
g60
(g99
S'\r\x00\x00\x00'
tRp502
sg24
S'left'
p503
sS'binary.thisTrialN'
p504
I13
sg25
F2.1668027997511672
sg27
F3.0510000000000002
sg70
Vn
sa(dp505
g64
g65
sS'binary.thisRepN'
p506
I0
sg68
g69
sg80
S'36-fig_rolls.png'
p507
sg26
F1.7999999999999994
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'34-hula_hoops_bbq_beef_redo.png'
p508
sg66
g67
sg55
g11
sS'binary.thisN'
p509
I14
sg56
g57
sS'binary.thisIndex'
p510
g60
(g99
S'\x0e\x00\x00\x00'
tRp511
sg24
S'left'
p512
sS'binary.thisTrialN'
p513
I14
sg25
F3.7667457236393602
sg27
F1.6839999999999999
sg70
Vn
sa(dp514
g64
g65
sS'binary.thisRepN'
p515
I0
sg68
g69
sg80
S'17-jacobs_mini_cheddars_redo.png'
p516
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'8-liquorice_catherine_wheels.png'
p517
sg66
g67
sg55
g11
sS'binary.thisN'
p518
I15
sg56
g57
sS'binary.thisIndex'
p519
g60
(g99
S'\x0f\x00\x00\x00'
tRp520
sg24
S'left'
p521
sS'binary.thisTrialN'
p522
I15
sg25
F1.9668051945527623
sg27
F1.6339999999999999
sg70
Vn
sa(dp523
g64
g65
sS'binary.thisRepN'
p524
I0
sg68
g69
sg80
S'19-caramello_redo.png'
p525
sg26
F1.399999999999999
sg28
F3.5
sg59
g63
sg58
Vy
sg81
S'30-spaghetti_hoops.png'
p526
sg66
g67
sg55
g11
sS'binary.thisN'
p527
I16
sg56
g57
sS'binary.thisIndex'
p528
g60
(g99
S'\x10\x00\x00\x00'
tRp529
sg24
S'left'
p530
sS'binary.thisTrialN'
p531
I16
sg25
F3.350103218813274
sg27
F1.7170000000000001
sg70
Vn
sa(dp532
g64
g65
sS'binary.thisRepN'
p533
I0
sg68
g69
sg80
S'6-sour_patch_kids.png'
p534
sg26
F1.7999999999999985
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'38-maltesers.png'
p535
sg66
g67
sg55
g11
sS'binary.thisN'
p536
I17
sg56
g57
sS'binary.thisIndex'
p537
g60
(g99
S'\x11\x00\x00\x00'
tRp538
sg24
S'right'
p539
sS'binary.thisTrialN'
p540
I17
sg25
F1.7498940157611287
sg27
F2.484
sg70
Vn
sa(dp541
g64
g65
sS'binary.thisRepN'
p542
I0
sg68
g69
sg80
S'25-kitkat.png'
p543
sg26
F2.0999999999999988
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'31-hobnobs.png'
p544
sg66
g67
sg55
g11
sS'binary.thisN'
p545
I18
sg56
g57
sS'binary.thisIndex'
p546
g60
(g99
S'\x12\x00\x00\x00'
tRp547
sg24
S'right'
p548
sS'binary.thisTrialN'
p549
I18
sg25
F4.8167240991479048
sg27
F4.234
sg70
Vn
sa(dp550
g64
g65
sS'binary.thisRepN'
p551
I0
sg68
g69
sg80
S'29-beans.png'
p552
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'46-pistachios.png'
p553
sg66
g67
sg55
g11
sS'binary.thisN'
p554
I19
sg56
g57
sS'binary.thisIndex'
p555
g60
(g99
S'\x13\x00\x00\x00'
tRp556
sg24
S'right'
p557
sS'binary.thisTrialN'
p558
I19
sg25
F1.4833596904090882
sg27
F1.4339999999999999
sg70
Vn
sa(dp559
g64
g65
sS'binary.thisRepN'
p560
I0
sg68
g69
sg80
S'7-olives.png'
p561
sg26
F5.9999999999999973
sg28
F3.7999999999999998
sg59
g63
sg58
Vy
sg81
S'22-daim.png'
p562
sg66
g67
sg55
g11
sS'binary.thisN'
p563
I20
sg56
g57
sS'binary.thisIndex'
p564
g60
(g99
S'\x14\x00\x00\x00'
tRp565
sg24
S'left'
p566
sS'binary.thisTrialN'
p567
I20
sg25
F2.1000089234885309
sg27
F1.851
sg70
Vn
sa(dp568
g64
g65
sS'binary.thisRepN'
p569
I0
sg68
g69
sg80
S'26-walkers_smoky_bacon.png'
p570
sg26
F4.2000000000000011
sg28
F3.2999999999999998
sg59
g63
sg58
Vy
sg81
S'44-crunch.png'
p571
sg66
g67
sg55
g11
sS'binary.thisN'
p572
I21
sg56
g57
sS'binary.thisIndex'
p573
g60
(g99
S'\x15\x00\x00\x00'
tRp574
sg24
S'right'
p575
sS'binary.thisTrialN'
p576
I21
sg25
F1.483450065672514
sg27
F1.5840000000000001
sg70
Vn
sa(dp577
g64
g65
sS'binary.thisRepN'
p578
I0
sg68
g69
sg80
S'50-polo.png'
p579
sg26
F5.9999999999999982
sg28
F2.7999999999999998
sg59
g63
sg58
Vy
sg81
S'48-twix.png'
p580
sg66
g67
sg55
g11
sS'binary.thisN'
p581
I22
sg56
g57
sS'binary.thisIndex'
p582
g60
(g99
S'\x16\x00\x00\x00'
tRp583
sg24
S'right'
p584
sS'binary.thisTrialN'
p585
I22
sg25
F1.3999866575322812
sg27
F1.3839999999999999
sg70
Vn
sa(dp586
g64
g65
sS'binary.thisRepN'
p587
I0
sg68
g69
sg80
S'51-mars.png'
p588
sg26
F1.6999999999999984
sg28
F4
sg59
g63
sg58
Vy
sg81
S'27-hartleys_raspberries_jelly.png'
p589
sg66
g67
sg55
g11
sS'binary.thisN'
p590
I23
sg56
g57
sS'binary.thisIndex'
p591
g60
(g99
S'\x17\x00\x00\x00'
tRp592
sg24
S'left'
p593
sS'binary.thisTrialN'
p594
I23
sg25
F1.3166971576265496
sg27
F1.5509999999999999
sg70
Vn
sa(dp595
g64
g65
sS'binary.thisRepN'
p596
I0
sg68
g69
sg80
S'45-chewy_nougat_redo.png'
p597
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vy
sg81
S'41-peanuts_redo.png'
p598
sg66
g67
sg55
g11
sS'binary.thisN'
p599
I24
sg56
g57
sS'binary.thisIndex'
p600
g60
(g99
S'\x18\x00\x00\x00'
tRp601
sg24
S'right'
p602
sS'binary.thisTrialN'
p603
I24
sg25
F4.5667315829041399
sg27
F1.7170000000000001
sg70
Vn
sa(dp604
g64
g65
sS'binary.thisRepN'
p605
I0
sg68
g69
sg80
S'43-mrporky_pork_crackles_redo.png'
p606
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'18-mms.png'
p607
sg66
g67
sg55
g11
sS'binary.thisN'
p608
I25
sg56
g57
sS'binary.thisIndex'
p609
g60
(g99
S'\x19\x00\x00\x00'
tRp610
sg24
S'right'
p611
sS'binary.thisTrialN'
p612
I25
sg25
F1.8168281589933031
sg27
F1.6839999999999999
sg70
Vn
sa(dp613
g64
g65
sS'binary.thisRepN'
p614
I0
sg68
g69
sg80
S'10-bounty_redo.png'
p615
sg26
F5.9999999999999982
sg28
F2.8999999999999999
sg59
g63
sg58
Vy
sg81
S'4-corn.png'
p616
sg66
g67
sg55
g11
sS'binary.thisN'
p617
I26
sg56
g57
sS'binary.thisIndex'
p618
g60
(g99
S'\x1a\x00\x00\x00'
tRp619
sg24
S'right'
p620
sS'binary.thisTrialN'
p621
I26
sg25
F1.750207620772926
sg27
F1.534
sg70
Vn
sa(dp622
g64
g65
sS'binary.thisRepN'
p623
I0
sg68
g69
sg80
S'33-ambrosia_rice.png'
p624
sg26
F2.9000000000000004
sg28
F2.7000000000000002
sg59
g63
sg58
Vy
sg81
S'23-crunchie_redo.png'
p625
sg66
g67
sg55
g11
sS'binary.thisN'
p626
I27
sg56
g57
sS'binary.thisIndex'
p627
g60
(g99
S'\x1b\x00\x00\x00'
tRp628
sg24
S'right'
p629
sS'binary.thisTrialN'
p630
I27
sg25
F1.5501629748232517
sg27
F3.8849999999999998
sg70
Vn
sa(dp631
g64
g65
sS'binary.thisRepN'
p632
I0
sg68
g69
sg80
S'41-peanuts_redo.png'
p633
sg26
F5.9999999999999973
sg28
F3.6000000000000001
sg59
g63
sg58
Vy
sg81
S'45-chewy_nougat_redo.png'
p634
sg66
g67
sg55
g11
sS'binary.thisN'
p635
I28
sg56
g57
sS'binary.thisIndex'
p636
g60
(g99
S'\x1c\x00\x00\x00'
tRp637
sg24
S'left'
p638
sS'binary.thisTrialN'
p639
I28
sg25
F1.516685639770003
sg27
F1.284
sg70
Vn
sa(dp640
g64
g65
sS'binary.thisRepN'
p641
I0
sg68
g69
sg80
S'48-twix.png'
p642
sg26
F5.9999999999999982
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'50-polo.png'
p643
sg66
g67
sg55
g11
sS'binary.thisN'
p644
I29
sg56
g57
sS'binary.thisIndex'
p645
g60
(g99
S'\x1d\x00\x00\x00'
tRp646
sg24
S'left'
p647
sS'binary.thisTrialN'
p648
I29
sg25
F1.3333624130709723
sg27
F1.3340000000000001
sg70
Vn
sa(dp649
g64
g65
sS'binary.thisRepN'
p650
I0
sg68
g69
sg80
S'40-sardines.png'
p651
sg26
F1.8999999999999992
sg28
F3
sg59
g63
sg58
Vy
sg81
S'5-pineapple.png'
p652
sg66
g67
sg55
g11
sS'binary.thisN'
p653
I30
sg56
g57
sS'binary.thisIndex'
p654
g60
(g99
S'\x1e\x00\x00\x00'
tRp655
sg24
S'left'
p656
sS'binary.thisTrialN'
p657
I30
sg25
F2.8499645198689905
sg27
F4.484
sg70
Vn
sa(dp658
g64
g65
sS'binary.thisRepN'
p659
I0
sg68
g69
sg80
S'38-maltesers.png'
p660
sg26
F5.9999999999999973
sg28
F4
sg59
g63
sg58
Vy
sg81
S'6-sour_patch_kids.png'
p661
sg66
g67
sg55
g11
sS'binary.thisN'
p662
I31
sg56
g57
sS'binary.thisIndex'
p663
g60
(g99
S'\x1f\x00\x00\x00'
tRp664
sg24
S'left'
p665
sS'binary.thisTrialN'
p666
I31
sg25
F2.333094708428689
sg27
F3.484
sg70
Vn
sa(dp667
g64
g65
sS'binary.thisRepN'
p668
I0
sg68
g69
sg80
S'2-steamed_puddings.png'
p669
sg26
F2.7999999999999998
sg28
F3.1000000000000001
sg59
g63
sg58
Vy
sg81
S'20-fruit_pastilles.png'
p670
sg66
g67
sg55
g11
sS'binary.thisN'
p671
I32
sg56
g57
sS'binary.thisIndex'
p672
g60
(g99
S' \x00\x00\x00'
tRp673
sg24
S'left'
p674
sS'binary.thisTrialN'
p675
I32
sg25
F4.8667321245857238
sg27
F2.8340000000000001
sg70
Vn
sa(dp676
g64
g65
sS'binary.thisRepN'
p677
I0
sg68
g69
sg80
S'23-crunchie_redo.png'
p678
sg26
F5.9999999999999973
sg28
F4.2000000000000002
sg59
g63
sg58
Vy
sg81
S'33-ambrosia_rice.png'
p679
sg66
g67
sg55
g11
sS'binary.thisN'
p680
I33
sg56
g57
sS'binary.thisIndex'
p681
g60
(g99
S'!\x00\x00\x00'
tRp682
sg24
S'left'
p683
sS'binary.thisTrialN'
p684
I33
sg25
F4.9165938960486528
sg27
F5.9340000000000002
sg70
Vn
sa(dp685
g64
g65
sS'binary.thisRepN'
p686
I0
sg68
g69
sg80
S'4-corn.png'
p687
sg26
F5.9999999999999964
sg28
F4.2999999999999998
sg59
g63
sg58
Vy
sg81
S'10-bounty_redo.png'
p688
sg66
g67
sg55
g11
sS'binary.thisN'
p689
I34
sg56
g57
sS'binary.thisIndex'
p690
g60
(g99
S'"\x00\x00\x00'
tRp691
sg24
S'left'
p692
sS'binary.thisTrialN'
p693
I34
sg25
F1.1500408969450291
sg27
F1.8009999999999999
sg70
Vn
sa(dp694
g64
g65
sS'binary.thisRepN'
p695
I0
sg68
g69
sg80
S'13-mccoys_steak_crisps.png'
p696
sg26
F3.8999999999999986
sg28
F4.2999999999999998
sg59
g63
sg58
Vy
sg81
S'3-ellas_strawberries_apples.png'
p697
sg66
g67
sg55
g11
sS'binary.thisN'
p698
I35
sg56
g57
sS'binary.thisIndex'
p699
g60
(g99
S'#\x00\x00\x00'
tRp700
sg24
S'right'
p701
sS'binary.thisTrialN'
p702
I35
sg25
F3.0167821445847949
sg27
F4.5010000000000003
sg70
Vn
sa(dp703
g64
g65
sS'binary.thisRepN'
p704
I0
sg68
g69
sg80
S'44-crunch.png'
p705
sg26
F4
sg28
F4
sg59
g63
sg58
Vy
sg81
S'26-walkers_smoky_bacon.png'
p706
sg66
g67
sg55
g11
sS'binary.thisN'
p707
I36
sg56
g57
sS'binary.thisIndex'
p708
g60
(g99
S'$\x00\x00\x00'
tRp709
sg24
S'left'
p710
sS'binary.thisTrialN'
p711
I36
sg25
F1.5337734066943085
sg27
F0.90100000000000002
sg70
Vn
sa(dp712
g64
g65
sS'binary.thisRepN'
p713
I0
sg68
g69
sg80
S'42-mrkipling_lemon_slices.png'
p714
sg26
F5.9999999999999973
sg28
F3.3999999999999999
sg59
g63
sg58
Vy
sg81
S'16-skips_prawn.png'
p715
sg66
g67
sg55
g11
sS'binary.thisN'
p716
I37
sg56
g57
sS'binary.thisIndex'
p717
g60
(g99
S'%\x00\x00\x00'
tRp718
sg24
S'left'
p719
sS'binary.thisTrialN'
p720
I37
sg25
F2.7831843281883266
sg27
F1.2509999999999999
sg70
Vn
sa(dp721
g64
g65
sS'binary.thisRepN'
p722
I0
sg68
g69
sg80
S'18-mms.png'
p723
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'43-mrporky_pork_crackles_redo.png'
p724
sg66
g67
sg55
g11
sS'binary.thisN'
p725
I38
sg56
g57
sS'binary.thisIndex'
p726
g60
(g99
S'&\x00\x00\x00'
tRp727
sg24
S'left'
p728
sS'binary.thisTrialN'
p729
I38
sg25
F1.1833622847780134
sg27
F1.0840000000000001
sg70
Vn
sa(dp730
g64
g65
sS'binary.thisRepN'
p731
I0
sg68
g69
sg80
S'8-liquorice_catherine_wheels.png'
p732
sg26
F5.9999999999999973
sg28
F3.8999999999999999
sg59
g63
sg58
Vy
sg81
S'17-jacobs_mini_cheddars_redo.png'
p733
sg66
g67
sg55
g11
sS'binary.thisN'
p734
I39
sg56
g57
sS'binary.thisIndex'
p735
g60
(g99
S"'\x00\x00\x00"
tRp736
sg24
S'right'
p737
sS'binary.thisTrialN'
p738
I39
sg25
F2.2166394828136617
sg27
F1.1339999999999999
sg70
Vn
sa(dp739
g64
g65
sg56
g57
sg29
S'space'
p740
sg58
Vy
sg59
g63
sg30
F389.16966971975398
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp741
g64
g65
sg56
g57
sg58
Vy
sg31
S'space'
p742
sg59
g63
sg55
g11
sg32
F17.04949741945893
sg66
g67
sg68
g69
sg70
Vn
sa(dp743
g64
g65
sg82
S'52-aero_mousse.png'
p744
sg83
S'52-aero_mousse.png'
p745
sg56
g57
sS'practice_loop.thisN'
p746
I0
sS'practice_loop.thisTrialN'
p747
I0
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p748
I0
sg84
S'14-discos_salt_vinegar.png'
p749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'14-discos_salt_vinegar.png'
p750
sS'practice_loop.thisIndex'
p751
g60
(g99
S'\x00\x00\x00\x00'
tRp752
sg34
cdatetime
datetime
p753
(S'\x07\xdf\x07\x04\x0c*\x01\x0b+`'
tRp754
sa(dp755
g64
g65
sg82
S'12-topic.png'
p756
sg83
S'39-mackerel.png'
p757
sg56
g57
sS'practice_loop.thisN'
p758
I1
sS'practice_loop.thisTrialN'
p759
I1
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p760
I0
sg84
S'39-mackerel.png'
p761
sg33
g756
sg55
g11
sg66
g67
sg68
g69
sg85
S'12-topic.png'
p762
sS'practice_loop.thisIndex'
p763
g60
(g99
S'\x01\x00\x00\x00'
tRp764
sg34
g753
(S'\x07\xdf\x07\x04\x0c*\x0b\x00\xaf\xc8'
tRp765
sa(dp766
g64
g65
sg82
g744
sg83
S'14-discos_salt_vinegar.png'
p767
sg56
g57
sS'practice_loop.thisN'
p768
I2
sS'practice_loop.thisTrialN'
p769
I2
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p770
I0
sg84
g749
sg33
g744
sg55
g11
sg66
g67
sg68
g69
sg85
S'52-aero_mousse.png'
p771
sS'practice_loop.thisIndex'
p772
g60
(g99
S'\x02\x00\x00\x00'
tRp773
sg34
g753
(S'\x07\xdf\x07\x04\x0c*\x12\x07/\xd8'
tRp774
sa(dp775
g64
g65
sg82
S'37-nakd_cashew_cookie.png'
p776
sg83
S'9-yu_mango_pieces.png'
p777
sg56
g57
sS'practice_loop.thisN'
p778
I3
sS'practice_loop.thisTrialN'
p779
I3
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p780
I0
sg84
S'9-yu_mango_pieces.png'
p781
sg33
g781
sg55
g11
sg66
g67
sg68
g69
sg85
S'37-nakd_cashew_cookie.png'
p782
sS'practice_loop.thisIndex'
p783
g60
(g99
S'\x03\x00\x00\x00'
tRp784
sg34
g753
(S'\x07\xdf\x07\x04\x0c*\x18\r:\xb8'
tRp785
sa(dp786
g64
g65
sg82
S'53-cheestrings.png'
p787
sg83
S'47-picnic.png'
p788
sg56
g57
sS'practice_loop.thisN'
p789
I4
sS'practice_loop.thisTrialN'
p790
I4
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p791
I0
sg84
S'47-picnic.png'
p792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'53-cheestrings.png'
p793
sS'practice_loop.thisIndex'
p794
g60
(g99
S'\x04\x00\x00\x00'
tRp795
sg34
g753
(S'\x07\xdf\x07\x04\x0c*\x1f\r\xc3p'
tRp796
sa(dp797
g64
g65
sg82
S'11-snickers.png'
p798
sg83
S'54-frubes_yogurt.png'
p799
sg56
g57
sS'practice_loop.thisN'
p800
I5
sS'practice_loop.thisTrialN'
p801
I5
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p802
I0
sg84
S'54-frubes_yogurt.png'
p803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'11-snickers.png'
p804
sS'practice_loop.thisIndex'
p805
g60
(g99
S'\x05\x00\x00\x00'
tRp806
sg34
g753
(S"\x07\xdf\x07\x04\x0c*'\n=\x18"
tRp807
sa(dp808
g64
g65
sg82
S'15-walnut_whip.png'
p809
sg83
S'28-maple_pecan.png'
p810
sg56
g57
sS'practice_loop.thisN'
p811
I6
sS'practice_loop.thisTrialN'
p812
I6
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p813
I0
sg84
S'28-maple_pecan.png'
p814
sg33
g814
sg55
g11
sg66
g67
sg68
g69
sg85
S'15-walnut_whip.png'
p815
sS'practice_loop.thisIndex'
p816
g60
(g99
S'\x06\x00\x00\x00'
tRp817
sg34
g753
(S'\x07\xdf\x07\x04\x0c*/\x07\xe7p'
tRp818
sa(dp819
g64
g65
sg82
S'32-hovis_crackers.png'
p820
sg83
S'24-food_doctor_apple_walnut_bar.png'
p821
sg56
g57
sS'practice_loop.thisN'
p822
I7
sS'practice_loop.thisTrialN'
p823
I7
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p824
I0
sg84
S'24-food_doctor_apple_walnut_bar.png'
p825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'32-hovis_crackers.png'
p826
sS'practice_loop.thisIndex'
p827
g60
(g99
S'\x07\x00\x00\x00'
tRp828
sg34
g753
(S'\x07\xdf\x07\x04\x0c*7\x0cwh'
tRp829
sa(dp830
g64
g65
sg82
g798
sg83
S'11-snickers.png'
p831
sg56
g57
sS'practice_loop.thisN'
p832
I8
sS'practice_loop.thisTrialN'
p833
I8
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p834
I0
sg84
g803
sg33
g798
sg55
g11
sg66
g67
sg68
g69
sg85
S'54-frubes_yogurt.png'
p835
sS'practice_loop.thisIndex'
p836
g60
(g99
S'\x08\x00\x00\x00'
tRp837
sg34
g753
(S'\x07\xdf\x07\x04\x0c+\x05\x01\xc18'
tRp838
sa(dp839
g64
g65
sg82
g809
sg83
S'15-walnut_whip.png'
p840
sg56
g57
sS'practice_loop.thisN'
p841
I9
sS'practice_loop.thisTrialN'
p842
I9
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p843
I0
sg84
g814
sg33
g809
sg55
g11
sg66
g67
sg68
g69
sg85
S'28-maple_pecan.png'
p844
sS'practice_loop.thisIndex'
p845
g60
(g99
S'\t\x00\x00\x00'
tRp846
sg34
g753
(S'\x07\xdf\x07\x04\x0c+\x0c\x05\xa1h'
tRp847
sa(dp848
g64
g65
sg82
g820
sg83
S'32-hovis_crackers.png'
p849
sg56
g57
sS'practice_loop.thisN'
p850
I10
sS'practice_loop.thisTrialN'
p851
I10
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p852
I0
sg84
g825
sg33
g820
sg55
g11
sg66
g67
sg68
g69
sg85
S'24-food_doctor_apple_walnut_bar.png'
p853
sS'practice_loop.thisIndex'
p854
g60
(g99
S'\n\x00\x00\x00'
tRp855
sg34
g753
(S'\x07\xdf\x07\x04\x0c+\x15\r\xbb\xa0'
tRp856
sa(dp857
g64
g65
sg82
g787
sg83
S'53-cheestrings.png'
p858
sg56
g57
sS'practice_loop.thisN'
p859
I11
sS'practice_loop.thisTrialN'
p860
I11
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p861
I0
sg84
g792
sg33
g787
sg55
g11
sg66
g67
sg68
g69
sg85
S'47-picnic.png'
p862
sS'practice_loop.thisIndex'
p863
g60
(g99
S'\x0b\x00\x00\x00'
tRp864
sg34
g753
(S'\x07\xdf\x07\x04\x0c+\x1e\x05\xa98'
tRp865
sa(dp866
g64
g65
sg82
g776
sg83
S'37-nakd_cashew_cookie.png'
p867
sg56
g57
sS'practice_loop.thisN'
p868
I12
sS'practice_loop.thisTrialN'
p869
I12
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p870
I0
sg84
g781
sg33
g776
sg55
g11
sg66
g67
sg68
g69
sg85
S'9-yu_mango_pieces.png'
p871
sS'practice_loop.thisIndex'
p872
g60
(g99
S'\x0c\x00\x00\x00'
tRp873
sg34
g753
(S'\x07\xdf\x07\x04\x0c+%\x0f\x03\xc0'
tRp874
sa(dp875
g64
g65
sg82
g756
sg83
S'12-topic.png'
p876
sg56
g57
sS'practice_loop.thisN'
p877
I13
sS'practice_loop.thisTrialN'
p878
I13
sg70
Vn
sg58
Vy
sg59
g63
sS'practice_loop.thisRepN'
p879
I0
sg84
g761
sg33
g761
sg55
g11
sg66
g67
sg68
g69
sg85
S'39-mackerel.png'
p880
sS'practice_loop.thisIndex'
p881
g60
(g99
S'\r\x00\x00\x00'
tRp882
sg34
g753
(S'\x07\xdf\x07\x04\x0c+-\x08\xdd\x88'
tRp883
sa(dp884
g64
g65
sg56
g57
sg58
Vy
sg59
g63
sg35
S'space'
p885
sg55
g11
sg36
F150.1451192939212
sg66
g67
sg68
g69
sg70
Vn
sa(dp886
S'block_loop.thisRepN'
p887
I0
sg56
g57
sS'block_loop.thisIndex'
p888
g60
(g99
S'\x00\x00\x00\x00'
tRp889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p890
I0
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p891
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p892
I0
sg70
Vn
sa(dp893
S'trial_loop.thisTrialN'
p894
I0
sS'img_left'
p895
S'1-treacle_cookies.png'
p896
sS'block_loop.thisIndex'
p897
g889
sg38
S'left'
p898
sg59
g63
sS'trial_loop.thisN'
p899
I0
sg33
S'1-treacle_cookies.png'
p900
sg64
g65
sS'trial_loop.thisIndex'
p901
g60
(g99
S'\x00\x00\x00\x00'
tRp902
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p903
I0
sS'img_right'
p904
S'21-nakd_banana_crunch.png'
p905
sS'block_loop.thisRepN'
p906
I0
sS'img_correct'
p907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p908
I0
sS'img_wrong'
p909
S'21-nakd_banana_crunch.png'
p910
sg55
g11
sS'block_loop.thisTrial'
p911
Nsg70
Vn
sS'block_loop.thisTrialN'
p912
I0
sg39
F1.3665532271807024
sg34
g753
(S'\x07\xdf\x07\x04\x0c1\x03\x00*\xf8'
tRp913
sa(dp914
S'trial_loop.thisTrialN'
p915
I1
sg895
S'30-spaghetti_hoops.png'
p916
sS'block_loop.thisIndex'
p917
g889
sg38
S'right'
p918
sg59
g63
sS'trial_loop.thisN'
p919
I1
sg33
S'19-caramello_redo.png'
p920
sg64
g65
sS'trial_loop.thisIndex'
p921
g60
(g99
S'\x01\x00\x00\x00'
tRp922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p923
I0
sg904
S'19-caramello_redo.png'
p924
sS'block_loop.thisRepN'
p925
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p926
I0
sg909
S'30-spaghetti_hoops.png'
p927
sg55
g11
sS'block_loop.thisTrial'
p928
Nsg70
Vn
sS'block_loop.thisTrialN'
p929
I0
sg39
F1.3499218980978185
sg34
g753
(S'\x07\xdf\x07\x04\x0c1\t\x065\xd8'
tRp930
sa(dp931
S'trial_loop.thisTrialN'
p932
I2
sg895
S'49-yorkie.png'
p933
sS'block_loop.thisIndex'
p934
g889
sg38
S'left'
p935
sg59
g63
sS'trial_loop.thisN'
p936
I2
sg33
S'49-yorkie.png'
p937
sg64
g65
sS'trial_loop.thisIndex'
p938
g60
(g99
S'\x02\x00\x00\x00'
tRp939
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p940
I0
sg904
S'35-raisins.png'
p941
sS'block_loop.thisRepN'
p942
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p943
I0
sg909
S'35-raisins.png'
p944
sg55
g11
sS'block_loop.thisTrial'
p945
Nsg70
Vn
sS'block_loop.thisTrialN'
p946
I0
sg39
F1.4331566596738412
sg34
g753
(S'\x07\xdf\x07\x04\x0c1\x0f\x0c@\xb8'
tRp947
sa(dp948
S'trial_loop.thisTrialN'
p949
I3
sg895
S'31-hobnobs.png'
p950
sS'block_loop.thisIndex'
p951
g889
sg38
S'left'
p952
sg59
g63
sS'trial_loop.thisN'
p953
I3
sg33
S'25-kitkat.png'
p954
sg64
g65
sS'trial_loop.thisIndex'
p955
g60
(g99
S'\x03\x00\x00\x00'
tRp956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p957
I0
sg904
S'25-kitkat.png'
p958
sS'block_loop.thisRepN'
p959
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p960
I0
sg909
S'31-hobnobs.png'
p961
sg55
g11
sS'block_loop.thisTrial'
p962
Nsg70
Vn
sS'block_loop.thisTrialN'
p963
I0
sg39
F1.2499526028786931
sg34
g753
(S'\x07\xdf\x07\x04\x0c1\x16\x03\xfb\x88'
tRp964
sa(dp965
S'trial_loop.thisTrialN'
p966
I4
sg895
S'48-twix.png'
p967
sS'block_loop.thisIndex'
p968
g889
sg38
S'left'
p969
sg59
g63
sS'trial_loop.thisN'
p970
I4
sg33
S'50-polo.png'
p971
sg64
g65
sS'trial_loop.thisIndex'
p972
g60
(g99
S'\x04\x00\x00\x00'
tRp973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p974
I0
sg904
S'50-polo.png'
p975
sS'block_loop.thisRepN'
p976
I0
sg907
S'48-twix.png'
p977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p978
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p979
Nsg70
Vn
sS'block_loop.thisTrialN'
p980
I0
sg39
F1.0832917806692421
sg34
g753
(S'\x07\xdf\x07\x04\x0c1\x1c\x08\\\xa0'
tRp981
sa(dp982
S'trial_loop.thisTrialN'
p983
I5
sg895
g950
sS'block_loop.thisIndex'
p984
g889
sg38
S'right'
p985
sg59
g63
sS'trial_loop.thisN'
p986
I5
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p987
g60
(g99
S'\x05\x00\x00\x00'
tRp988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p989
I0
sg904
g958
sS'block_loop.thisRepN'
p990
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p991
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p992
Nsg70
Vn
sS'block_loop.thisTrialN'
p993
I0
sg39
F1.3335283386322772
sg34
g753
(S'\x07\xdf\x07\x04\x0c1"\n\x1d\xd8'
tRp994
sa(dp995
S'trial_loop.thisTrialN'
p996
I6
sg895
S'33-ambrosia_rice.png'
p997
sS'block_loop.thisIndex'
p998
g889
sg38
S'right'
p999
sg59
g63
sS'trial_loop.thisN'
p1000
I6
sg33
S'23-crunchie_redo.png'
p1001
sg64
g65
sS'trial_loop.thisIndex'
p1002
g60
(g99
S'\x06\x00\x00\x00'
tRp1003
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1004
I0
sg904
S'23-crunchie_redo.png'
p1005
sS'block_loop.thisRepN'
p1006
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1007
I0
sg909
S'33-ambrosia_rice.png'
p1008
sg55
g11
sS'block_loop.thisTrial'
p1009
Nsg70
Vn
sS'block_loop.thisTrialN'
p1010
I0
sg39
F1.3166606654067436
sg34
g753
(S'\x07\xdf\x07\x04\x0c1)\x00m`'
tRp1011
sa(dp1012
S'trial_loop.thisTrialN'
p1013
I7
sg895
S'10-bounty_redo.png'
p1014
sS'block_loop.thisIndex'
p1015
g889
sg38
S'left'
p1016
sg59
g63
sS'trial_loop.thisN'
p1017
I7
sg33
S'10-bounty_redo.png'
p1018
sg64
g65
sS'trial_loop.thisIndex'
p1019
g60
(g99
S'\x07\x00\x00\x00'
tRp1020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1021
I0
sg904
S'4-corn.png'
p1022
sS'block_loop.thisRepN'
p1023
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1024
I0
sg909
S'4-corn.png'
p1025
sg55
g11
sS'block_loop.thisTrial'
p1026
Nsg70
Vn
sS'block_loop.thisTrialN'
p1027
I0
sg39
F1.64986256973134
sg34
g753
(S'\x07\xdf\x07\x04\x0c1/\x05\xc0\xa8'
tRp1028
sa(dp1029
S'trial_loop.thisTrialN'
p1030
I8
sg895
S'20-fruit_pastilles.png'
p1031
sS'block_loop.thisIndex'
p1032
g889
sg38
S'right'
p1033
sg59
g63
sS'trial_loop.thisN'
p1034
I8
sg33
S'2-steamed_puddings.png'
p1035
sg64
g65
sS'trial_loop.thisIndex'
p1036
g60
(g99
S'\x08\x00\x00\x00'
tRp1037
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1038
I0
sg904
S'2-steamed_puddings.png'
p1039
sS'block_loop.thisRepN'
p1040
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1041
I0
sg909
S'20-fruit_pastilles.png'
p1042
sg55
g11
sS'block_loop.thisTrial'
p1043
Nsg70
Vn
sS'block_loop.thisTrialN'
p1044
I0
sg39
F1.9999079141643961
sg34
g753
(S'\x07\xdf\x07\x04\x0c16\x00\xd2\xf0'
tRp1045
sa(dp1046
S'trial_loop.thisTrialN'
p1047
I9
sg895
S'21-nakd_banana_crunch.png'
p1048
sS'block_loop.thisIndex'
p1049
g889
sg38
S'right'
p1050
sg59
g63
sS'trial_loop.thisN'
p1051
I9
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p1052
g60
(g99
S'\t\x00\x00\x00'
tRp1053
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1054
I0
sg904
S'1-treacle_cookies.png'
p1055
sS'block_loop.thisRepN'
p1056
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1057
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1058
Nsg70
Vn
sS'block_loop.thisTrialN'
p1059
I0
sg39
F1.1167169432519586
sg34
g753
(S'\x07\xdf\x07\x04\x0c2\x01\x01[\xa8'
tRp1060
sa(dp1061
S'trial_loop.thisTrialN'
p1062
I10
sg895
S'38-maltesers.png'
p1063
sS'block_loop.thisIndex'
p1064
g889
sg38
S'left'
p1065
sg59
g63
sS'trial_loop.thisN'
p1066
I10
sg33
S'6-sour_patch_kids.png'
p1067
sg64
g65
sS'trial_loop.thisIndex'
p1068
g60
(g99
S'\n\x00\x00\x00'
tRp1069
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1070
I0
sg904
S'6-sour_patch_kids.png'
p1071
sS'block_loop.thisRepN'
p1072
I0
sg907
S'38-maltesers.png'
p1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1074
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p1075
Nsg70
Vn
sS'block_loop.thisTrialN'
p1076
I0
sg39
F1.2666175732274496
sg34
g753
(S'\x07\xdf\x07\x04\x0c2\x07\x03\xd4x'
tRp1077
sa(dp1078
S'trial_loop.thisTrialN'
p1079
I11
sg895
S'29-beans.png'
p1080
sS'block_loop.thisIndex'
p1081
g889
sg38
S'right'
p1082
sg59
g63
sS'trial_loop.thisN'
p1083
I11
sg33
S'46-pistachios.png'
p1084
sg64
g65
sS'trial_loop.thisIndex'
p1085
g60
(g99
S'\x0b\x00\x00\x00'
tRp1086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1087
I0
sg904
S'46-pistachios.png'
p1088
sS'block_loop.thisRepN'
p1089
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1090
I0
sg909
S'29-beans.png'
p1091
sg55
g11
sS'block_loop.thisTrial'
p1092
Nsg70
Vn
sS'block_loop.thisTrialN'
p1093
I0
sg39
F1.8998391206287124
sg34
g753
(S'\x07\xdf\x07\x04\x0c2\r\x085\x90'
tRp1094
sa(dp1095
S'trial_loop.thisTrialN'
p1096
I12
sg895
S'50-polo.png'
p1097
sS'block_loop.thisIndex'
p1098
g889
sg38
S'left'
p1099
sg59
g63
sS'trial_loop.thisN'
p1100
I12
sg33
g971
sg64
g65
sS'trial_loop.thisIndex'
p1101
g60
(g99
S'\x0c\x00\x00\x00'
tRp1102
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1103
I0
sg904
S'48-twix.png'
p1104
sS'block_loop.thisRepN'
p1105
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1106
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1107
Nsg70
Vn
sS'block_loop.thisTrialN'
p1108
I0
sg39
F1.1499778908464577
sg34
g753
(S'\x07\xdf\x07\x04\x0c2\x14\x07S\x00'
tRp1109
sa(dp1110
S'trial_loop.thisTrialN'
p1111
I13
sg895
S'42-mrkipling_lemon_slices.png'
p1112
sS'block_loop.thisIndex'
p1113
g889
sg38
S'left'
p1114
sg59
g63
sS'trial_loop.thisN'
p1115
I13
sg33
S'42-mrkipling_lemon_slices.png'
p1116
sg64
g65
sS'trial_loop.thisIndex'
p1117
g60
(g99
S'\r\x00\x00\x00'
tRp1118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1119
I0
sg904
S'16-skips_prawn.png'
p1120
sS'block_loop.thisRepN'
p1121
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1122
I0
sg909
S'16-skips_prawn.png'
p1123
sg55
g11
sS'block_loop.thisTrial'
p1124
Nsg70
Vn
sS'block_loop.thisTrialN'
p1125
I0
sg39
F2.4331569447695074
sg34
g753
(S'\x07\xdf\x07\x04\x0c2\x1a\n\nP'
tRp1126
sa(dp1127
S'trial_loop.thisTrialN'
p1128
I14
sg895
g967
sS'block_loop.thisIndex'
p1129
g889
sg38
S'right'
p1130
sg59
g63
sS'trial_loop.thisN'
p1131
I14
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p1132
g60
(g99
S'\x0e\x00\x00\x00'
tRp1133
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1134
I0
sg904
g975
sS'block_loop.thisRepN'
p1135
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1136
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1137
Nsg70
Vn
sS'block_loop.thisTrialN'
p1138
I0
sg39
F1.3999994868281647
sg34
g753
(S'\x07\xdf\x07\x04\x0c2"\x01\xfb\xd0'
tRp1139
sa(dp1140
S'trial_loop.thisTrialN'
p1141
I15
sg895
S'34-hula_hoops_bbq_beef_redo.png'
p1142
sS'block_loop.thisIndex'
p1143
g889
sg38
S'left'
p1144
sg59
g63
sS'trial_loop.thisN'
p1145
I15
sg33
S'36-fig_rolls.png'
p1146
sg64
g65
sS'trial_loop.thisIndex'
p1147
g60
(g99
S'\x0f\x00\x00\x00'
tRp1148
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1149
I0
sg904
S'36-fig_rolls.png'
p1150
sS'block_loop.thisRepN'
p1151
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1152
I0
sg909
S'34-hula_hoops_bbq_beef_redo.png'
p1153
sg55
g11
sS'block_loop.thisTrial'
p1154
Nsg70
Vn
sS'block_loop.thisTrialN'
p1155
I0
sg39
F1.6169656890460828
sg34
g753
(S'\x07\xdf\x07\x04\x0c2(\x08\x7f\xc8'
tRp1156
sa(dp1157
S'trial_loop.thisTrialN'
p1158
I16
sg895
g896
sS'block_loop.thisIndex'
p1159
g889
sg38
S'left'
p1160
sg59
g63
sS'trial_loop.thisN'
p1161
I16
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1162
g60
(g99
S'\x10\x00\x00\x00'
tRp1163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1164
I0
sg904
g905
sS'block_loop.thisRepN'
p1165
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1166
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1167
Nsg70
Vn
sS'block_loop.thisTrialN'
p1168
I0
sg39
F1.5165716015835642
sg34
g753
(S'\x07\xdf\x07\x04\x0c2/\x03\x18\xf8'
tRp1169
sa(dp1170
S'trial_loop.thisTrialN'
p1171
I17
sg895
S'26-walkers_smoky_bacon.png'
p1172
sS'block_loop.thisIndex'
p1173
g889
sg38
S'left'
p1174
sg59
g63
sS'trial_loop.thisN'
p1175
I17
sg33
S'44-crunch.png'
p1176
sg64
g65
sS'trial_loop.thisIndex'
p1177
g60
(g99
S'\x11\x00\x00\x00'
tRp1178
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1179
I0
sg904
S'44-crunch.png'
p1180
sS'block_loop.thisRepN'
p1181
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1182
I0
sg909
S'26-walkers_smoky_bacon.png'
p1183
sg55
g11
sS'block_loop.thisTrial'
p1184
Nsg70
Vn
sS'block_loop.thisTrialN'
p1185
I0
sg39
F1.5165436622282868
sg34
g753
(S'\x07\xdf\x07\x04\x0c25\x0b\x858'
tRp1186
sa(dp1187
S'trial_loop.thisTrialN'
p1188
I18
sg895
S'3-ellas_strawberries_apples.png'
p1189
sS'block_loop.thisIndex'
p1190
g889
sg38
S'right'
p1191
sg59
g63
sS'trial_loop.thisN'
p1192
I18
sg33
S'3-ellas_strawberries_apples.png'
p1193
sg64
g65
sS'trial_loop.thisIndex'
p1194
g60
(g99
S'\x12\x00\x00\x00'
tRp1195
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1196
I0
sg904
S'13-mccoys_steak_crisps.png'
p1197
sS'block_loop.thisRepN'
p1198
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1199
I0
sg909
S'13-mccoys_steak_crisps.png'
p1200
sg55
g11
sS'block_loop.thisTrial'
p1201
Nsg70
Vn
sS'block_loop.thisTrialN'
p1202
I0
sg39
F2.2666241304232244
sg34
g753
(S'\x07\xdf\x07\x04\x0c3\x00\x04\xaf8'
tRp1203
sa(dp1204
S'trial_loop.thisTrialN'
p1205
I19
sg895
S'19-caramello_redo.png'
p1206
sS'block_loop.thisIndex'
p1207
g889
sg38
S'left'
p1208
sg59
g63
sS'trial_loop.thisN'
p1209
I19
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1210
g60
(g99
S'\x13\x00\x00\x00'
tRp1211
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1212
I0
sg904
S'30-spaghetti_hoops.png'
p1213
sS'block_loop.thisRepN'
p1214
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1215
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1216
Nsg70
Vn
sS'block_loop.thisTrialN'
p1217
I0
sg39
F1.2333209887001431
sg34
g753
(S'\x07\xdf\x07\x04\x0c3\x07\tG\x00'
tRp1218
sa(dp1219
S'trial_loop.thisTrialN'
p1220
I20
sg895
S'6-sour_patch_kids.png'
p1221
sS'block_loop.thisIndex'
p1222
g889
sg38
S'left'
p1223
sg59
g63
sS'trial_loop.thisN'
p1224
I20
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1225
g60
(g99
S'\x14\x00\x00\x00'
tRp1226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1227
I0
sg904
S'38-maltesers.png'
p1228
sS'block_loop.thisRepN'
p1229
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1230
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p1231
Nsg70
Vn
sS'block_loop.thisTrialN'
p1232
I0
sg39
F1.4999151840993363
sg34
g753
(S'\x07\xdf\x07\x04\x0c3\r\ri\x98'
tRp1233
sa(dp1234
S'trial_loop.thisTrialN'
p1235
I21
sg895
S'51-mars.png'
p1236
sS'block_loop.thisIndex'
p1237
g889
sg38
S'left'
p1238
sg59
g63
sS'trial_loop.thisN'
p1239
I21
sg33
S'51-mars.png'
p1240
sg64
g65
sS'trial_loop.thisIndex'
p1241
g60
(g99
S'\x15\x00\x00\x00'
tRp1242
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1243
I0
sg904
S'27-hartleys_raspberries_jelly.png'
p1244
sS'block_loop.thisRepN'
p1245
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1246
I0
sg909
S'27-hartleys_raspberries_jelly.png'
p1247
sg55
g11
sS'block_loop.thisTrial'
p1248
Nsg70
Vn
sS'block_loop.thisTrialN'
p1249
I0
sg39
F1.3999333446799938
sg34
g753
(S'\x07\xdf\x07\x04\x0c3\x14\x06Y\x00'
tRp1250
sa(dp1251
S'trial_loop.thisTrialN'
p1252
I22
sg895
S'5-pineapple.png'
p1253
sS'block_loop.thisIndex'
p1254
g889
sg38
S'left'
p1255
sg59
g63
sS'trial_loop.thisN'
p1256
I22
sg33
S'5-pineapple.png'
p1257
sg64
g65
sS'trial_loop.thisIndex'
p1258
g60
(g99
S'\x16\x00\x00\x00'
tRp1259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1260
I0
sg904
S'40-sardines.png'
p1261
sS'block_loop.thisRepN'
p1262
I0
sg907
S'40-sardines.png'
p1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1264
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p1265
Nsg70
Vn
sS'block_loop.thisTrialN'
p1266
I0
sg39
F1.616633837923473
sg34
g753
(S'\x07\xdf\x07\x04\x0c3\x1a\x0c\xdc\xf8'
tRp1267
sa(dp1268
S'trial_loop.thisTrialN'
p1269
I23
sg895
g1080
sS'block_loop.thisIndex'
p1270
g889
sg38
S'right'
p1271
sg59
g63
sS'trial_loop.thisN'
p1272
I23
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p1273
g60
(g99
S'\x17\x00\x00\x00'
tRp1274
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1275
I0
sg904
g1088
sS'block_loop.thisRepN'
p1276
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1277
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1278
Nsg70
Vn
sS'block_loop.thisTrialN'
p1279
I0
sg39
F1.1998131484315309
sg34
g753
(S'\x07\xdf\x07\x04\x0c3!\x07r@'
tRp1280
sa(dp1281
S'trial_loop.thisTrialN'
p1282
I24
sg895
S'43-mrporky_pork_crackles_redo.png'
p1283
sS'block_loop.thisIndex'
p1284
g889
sg38
S'right'
p1285
sg59
g63
sS'trial_loop.thisN'
p1286
I24
sg33
S'43-mrporky_pork_crackles_redo.png'
p1287
sg64
g65
sS'trial_loop.thisIndex'
p1288
g60
(g99
S'\x18\x00\x00\x00'
tRp1289
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1290
I0
sg904
S'18-mms.png'
p1291
sS'block_loop.thisRepN'
p1292
I0
sg907
S'18-mms.png'
p1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1294
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p1295
Nsg70
Vn
sS'block_loop.thisTrialN'
p1296
I0
sg39
F1.3166680778886075
sg34
g753
(S"\x07\xdf\x07\x04\x0c3'\x0b\x1b\xc0"
tRp1297
sa(dp1298
S'trial_loop.thisTrialN'
p1299
I25
sg895
S'36-fig_rolls.png'
p1300
sS'block_loop.thisIndex'
p1301
g889
sg38
S'right'
p1302
sg59
g63
sS'trial_loop.thisN'
p1303
I25
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1304
g60
(g99
S'\x19\x00\x00\x00'
tRp1305
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1306
I0
sg904
S'34-hula_hoops_bbq_beef_redo.png'
p1307
sS'block_loop.thisRepN'
p1308
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1309
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1310
Nsg70
Vn
sS'block_loop.thisTrialN'
p1311
I0
sg39
F1.7669954672674066
sg34
g753
(S'\x07\xdf\x07\x04\x0c3.\x010\xb0'
tRp1312
sa(dp1313
S'trial_loop.thisTrialN'
p1314
I26
sg895
S'35-raisins.png'
p1315
sS'block_loop.thisIndex'
p1316
g889
sg38
S'right'
p1317
sg59
g63
sS'trial_loop.thisN'
p1318
I26
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1319
g60
(g99
S'\x1a\x00\x00\x00'
tRp1320
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1321
I0
sg904
S'49-yorkie.png'
p1322
sS'block_loop.thisRepN'
p1323
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1324
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1325
Nsg70
Vn
sS'block_loop.thisTrialN'
p1326
I0
sg39
F1.349985189290237
sg34
g753
(S'\x07\xdf\x07\x04\x0c34\ri\x98'
tRp1327
sa(dp1328
S'trial_loop.thisTrialN'
p1329
I27
sg895
g1172
sS'block_loop.thisIndex'
p1330
g889
sg38
S'right'
p1331
sg59
g63
sS'trial_loop.thisN'
p1332
I27
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p1333
g60
(g99
S'\x1b\x00\x00\x00'
tRp1334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1335
I0
sg904
g1180
sS'block_loop.thisRepN'
p1336
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1337
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1338
Nsg70
Vn
sS'block_loop.thisTrialN'
p1339
I0
sg39
F1.2165633623244503
sg34
g753
(S'\x07\xdf\x07\x04\x0c3;\x03\xf7\xa0'
tRp1340
sa(dp1341
S'trial_loop.thisTrialN'
p1342
I28
sg895
g1097
sS'block_loop.thisIndex'
p1343
g889
sg38
S'left'
p1344
sg59
g63
sS'trial_loop.thisN'
p1345
I28
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p1346
g60
(g99
S'\x1c\x00\x00\x00'
tRp1347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1348
I0
sg904
g1104
sS'block_loop.thisRepN'
p1349
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1350
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1351
Nsg70
Vn
sS'block_loop.thisTrialN'
p1352
I0
sg39
F0.94989789305964223
sg34
g753
(S'\x07\xdf\x07\x04\x0c4\x05\x07\xdb\xb8'
tRp1353
sa(dp1354
S'trial_loop.thisTrialN'
p1355
I29
sg895
S'27-hartleys_raspberries_jelly.png'
p1356
sS'block_loop.thisIndex'
p1357
g889
sg38
S'right'
p1358
sg59
g63
sS'trial_loop.thisN'
p1359
I29
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p1360
g60
(g99
S'\x1d\x00\x00\x00'
tRp1361
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1362
I0
sg904
S'51-mars.png'
p1363
sS'block_loop.thisRepN'
p1364
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1365
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p1366
Nsg70
Vn
sS'block_loop.thisTrialN'
p1367
I0
sg39
F1.0999841201828531
sg34
g753
(S'\x07\xdf\x07\x04\x0c4\x0b\x07z\x10'
tRp1368
sa(dp1369
S'trial_loop.thisTrialN'
p1370
I30
sg895
S'17-jacobs_mini_cheddars_redo.png'
p1371
sS'block_loop.thisIndex'
p1372
g889
sg38
S'left'
p1373
sg59
g63
sS'trial_loop.thisN'
p1374
I30
sg33
S'17-jacobs_mini_cheddars_redo.png'
p1375
sg64
g65
sS'trial_loop.thisIndex'
p1376
g60
(g99
S'\x1e\x00\x00\x00'
tRp1377
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1378
I0
sg904
S'8-liquorice_catherine_wheels.png'
p1379
sS'block_loop.thisRepN'
p1380
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1381
I0
sg909
S'8-liquorice_catherine_wheels.png'
p1382
sg55
g11
sS'block_loop.thisTrial'
p1383
Nsg70
Vn
sS'block_loop.thisTrialN'
p1384
I0
sg39
F2.0334921600169764
sg34
g753
(S'\x07\xdf\x07\x04\x0c4\x11\ty\xc8'
tRp1385
sa(dp1386
S'trial_loop.thisTrialN'
p1387
I31
sg895
g896
sS'block_loop.thisIndex'
p1388
g889
sg38
S'left'
p1389
sg59
g63
sS'trial_loop.thisN'
p1390
I31
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1391
g60
(g99
S'\x1f\x00\x00\x00'
tRp1392
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1393
I0
sg904
g905
sS'block_loop.thisRepN'
p1394
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1395
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1396
Nsg70
Vn
sS'block_loop.thisTrialN'
p1397
I0
sg39
F0.9331590829842753
sg34
g753
(S'\x07\xdf\x07\x04\x0c4\x18\n\x7f\x80'
tRp1398
sa(dp1399
S'trial_loop.thisTrialN'
p1400
I32
sg895
g950
sS'block_loop.thisIndex'
p1401
g889
sg38
S'right'
p1402
sg59
g63
sS'trial_loop.thisN'
p1403
I32
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1404
g60
(g99
S' \x00\x00\x00'
tRp1405
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1406
I0
sg904
g958
sS'block_loop.thisRepN'
p1407
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1408
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1409
Nsg70
Vn
sS'block_loop.thisTrialN'
p1410
I0
sg39
F1.5330925987218507
sg34
g753
(S'\x07\xdf\x07\x04\x0c4\x1e\n\x19\xf0'
tRp1411
sa(dp1412
S'trial_loop.thisTrialN'
p1413
I33
sg895
g997
sS'block_loop.thisIndex'
p1414
g889
sg38
S'right'
p1415
sg59
g63
sS'trial_loop.thisN'
p1416
I33
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p1417
g60
(g99
S'!\x00\x00\x00'
tRp1418
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1419
I0
sg904
g1005
sS'block_loop.thisRepN'
p1420
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1421
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p1422
Nsg70
Vn
sS'block_loop.thisTrialN'
p1423
I0
sg39
F1.6999561238080787
sg34
g753
(S'\x07\xdf\x07\x04\x0c4%\x03\x82p'
tRp1424
sa(dp1425
S'trial_loop.thisTrialN'
p1426
I34
sg895
g1253
sS'block_loop.thisIndex'
p1427
g889
sg38
S'left'
p1428
sg59
g63
sS'trial_loop.thisN'
p1429
I34
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p1430
g60
(g99
S'"\x00\x00\x00'
tRp1431
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1432
I0
sg904
g1261
sS'block_loop.thisRepN'
p1433
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1434
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p1435
Nsg70
Vn
sS'block_loop.thisTrialN'
p1436
I0
sg39
F3.9164621819445529
sg34
g753
(S'\x07\xdf\x07\x04\x0c4+\x0e\x8e\x90'
tRp1437
sa(dp1438
S'trial_loop.thisTrialN'
p1439
I35
sg895
S'22-daim.png'
p1440
sS'block_loop.thisIndex'
p1441
g889
sg38
S'right'
p1442
sg59
g63
sS'trial_loop.thisN'
p1443
I35
sg33
S'22-daim.png'
p1444
sg64
g65
sS'trial_loop.thisIndex'
p1445
g60
(g99
S'#\x00\x00\x00'
tRp1446
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1447
I0
sg904
S'7-olives.png'
p1448
sS'block_loop.thisRepN'
p1449
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1450
I0
sg909
S'7-olives.png'
p1451
sg55
g11
sS'block_loop.thisTrial'
p1452
Nsg70
Vn
sS'block_loop.thisTrialN'
p1453
I0
sg39
F3.1336208236016319
sg34
g753
(S'\x07\xdf\x07\x04\x0c44\r\xda\xe0'
tRp1454
sa(dp1455
S'trial_loop.thisTrialN'
p1456
I36
sg895
g1112
sS'block_loop.thisIndex'
p1457
g889
sg38
S'left'
p1458
sg59
g63
sS'trial_loop.thisN'
p1459
I36
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1460
g60
(g99
S'$\x00\x00\x00'
tRp1461
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1462
I0
sg904
g1120
sS'block_loop.thisRepN'
p1463
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1464
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1465
Nsg70
Vn
sS'block_loop.thisTrialN'
p1466
I0
sg39
F1.8330985572174541
sg34
g753
(S'\x07\xdf\x07\x04\x0c5\x01\x01D8'
tRp1467
sa(dp1468
S'trial_loop.thisTrialN'
p1469
I37
sg895
g1142
sS'block_loop.thisIndex'
p1470
g889
sg38
S'right'
p1471
sg59
g63
sS'trial_loop.thisN'
p1472
I37
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1473
g60
(g99
S'%\x00\x00\x00'
tRp1474
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1475
I0
sg904
g1150
sS'block_loop.thisRepN'
p1476
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1477
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1478
Nsg70
Vn
sS'block_loop.thisTrialN'
p1479
I0
sg39
F1.3165081393326545
sg34
g753
(S'\x07\xdf\x07\x04\x0c5\x07\x0es8'
tRp1480
sa(dp1481
S'trial_loop.thisTrialN'
p1482
I38
sg895
S'7-olives.png'
p1483
sS'block_loop.thisIndex'
p1484
g889
sg38
S'right'
p1485
sg59
g63
sS'trial_loop.thisN'
p1486
I38
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p1487
g60
(g99
S'&\x00\x00\x00'
tRp1488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1489
I0
sg904
S'22-daim.png'
p1490
sS'block_loop.thisRepN'
p1491
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1492
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p1493
Nsg70
Vn
sS'block_loop.thisTrialN'
p1494
I0
sg39
F1.5999950963578158
sg34
g753
(S'\x07\xdf\x07\x04\x0c5\x0e\x04\x84@'
tRp1495
sa(dp1496
S'trial_loop.thisTrialN'
p1497
I39
sg895
g1236
sS'block_loop.thisIndex'
p1498
g889
sg38
S'left'
p1499
sg59
g63
sS'trial_loop.thisN'
p1500
I39
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p1501
g60
(g99
S"'\x00\x00\x00"
tRp1502
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1503
I0
sg904
g1244
sS'block_loop.thisRepN'
p1504
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1505
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p1506
Nsg70
Vn
sS'block_loop.thisTrialN'
p1507
I0
sg39
F1.1499892946649197
sg34
g753
(S'\x07\xdf\x07\x04\x0c5\x14\x0e!0'
tRp1508
sa(dp1509
S'trial_loop.thisTrialN'
p1510
I40
sg895
S'2-steamed_puddings.png'
p1511
sS'block_loop.thisIndex'
p1512
g889
sg38
S'left'
p1513
sg59
g63
sS'trial_loop.thisN'
p1514
I40
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1515
g60
(g99
S'(\x00\x00\x00'
tRp1516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1517
I0
sg904
S'20-fruit_pastilles.png'
p1518
sS'block_loop.thisRepN'
p1519
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1520
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p1521
Nsg70
Vn
sS'block_loop.thisTrialN'
p1522
I0
sg39
F1.2171409657385084
sg34
g753
(S'\x07\xdf\x07\x04\x0c5\x1b\x01\x92X'
tRp1523
sa(dp1524
S'trial_loop.thisTrialN'
p1525
I41
sg895
g1048
sS'block_loop.thisIndex'
p1526
g889
sg38
S'right'
p1527
sg59
g63
sS'trial_loop.thisN'
p1528
I41
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1529
g60
(g99
S')\x00\x00\x00'
tRp1530
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1531
I0
sg904
g1055
sS'block_loop.thisRepN'
p1532
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1533
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1534
Nsg70
Vn
sS'block_loop.thisTrialN'
p1535
I0
sg39
F1.1333391492808005
sg34
g753
(S'\x07\xdf\x07\x04\x0c5!\x05zX'
tRp1536
sa(dp1537
S'trial_loop.thisTrialN'
p1538
I42
sg895
g1315
sS'block_loop.thisIndex'
p1539
g889
sg38
S'right'
p1540
sg59
g63
sS'trial_loop.thisN'
p1541
I42
sg33
g944
sg64
g65
sS'trial_loop.thisIndex'
p1542
g60
(g99
S'*\x00\x00\x00'
tRp1543
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1544
I0
sg904
g1322
sS'block_loop.thisRepN'
p1545
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1546
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1547
Nsg70
Vn
sS'block_loop.thisTrialN'
p1548
I0
sg39
F1.0499167948883041
sg34
g753
(S"\x07\xdf\x07\x04\x0c5'\x07\xf3("
tRp1549
sa(dp1550
S'trial_loop.thisTrialN'
p1551
I43
sg895
S'45-chewy_nougat_redo.png'
p1552
sS'block_loop.thisIndex'
p1553
g889
sg38
S'right'
p1554
sg59
g63
sS'trial_loop.thisN'
p1555
I43
sg33
S'41-peanuts_redo.png'
p1556
sg64
g65
sS'trial_loop.thisIndex'
p1557
g60
(g99
S'+\x00\x00\x00'
tRp1558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1559
I0
sg904
S'41-peanuts_redo.png'
p1560
sS'block_loop.thisRepN'
p1561
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1562
I0
sg909
S'45-chewy_nougat_redo.png'
p1563
sg55
g11
sS'block_loop.thisTrial'
p1564
Nsg70
Vn
sS'block_loop.thisTrialN'
p1565
I0
sg39
F1.5333141178980441
sg34
g753
(S'\x07\xdf\x07\x04\x0c5-\t;H'
tRp1566
sa(dp1567
S'trial_loop.thisTrialN'
p1568
I44
sg895
S'46-pistachios.png'
p1569
sS'block_loop.thisIndex'
p1570
g889
sg38
S'left'
p1571
sg59
g63
sS'trial_loop.thisN'
p1572
I44
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p1573
g60
(g99
S',\x00\x00\x00'
tRp1574
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1575
I0
sg904
S'29-beans.png'
p1576
sS'block_loop.thisRepN'
p1577
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1578
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1579
Nsg70
Vn
sS'block_loop.thisTrialN'
p1580
I0
sg39
F1.0498321215345641
sg34
g753
(S'\x07\xdf\x07\x04\x0c54\x02\xa3\xc8'
tRp1581
sa(dp1582
S'trial_loop.thisTrialN'
p1583
I45
sg895
g1031
sS'block_loop.thisIndex'
p1584
g889
sg38
S'right'
p1585
sg59
g63
sS'trial_loop.thisN'
p1586
I45
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1587
g60
(g99
S'-\x00\x00\x00'
tRp1588
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1589
I0
sg904
g1039
sS'block_loop.thisRepN'
p1590
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1591
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p1592
Nsg70
Vn
sS'block_loop.thisTrialN'
p1593
I0
sg39
F1.2168535895089008
sg34
g753
(S'\x07\xdf\x07\x04\x0c5:\x03\xeb\xe8'
tRp1594
sa(dp1595
S'trial_loop.thisTrialN'
p1596
I46
sg895
g1063
sS'block_loop.thisIndex'
p1597
g889
sg38
S'left'
p1598
sg59
g63
sS'trial_loop.thisN'
p1599
I46
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p1600
g60
(g99
S'.\x00\x00\x00'
tRp1601
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1602
I0
sg904
g1071
sS'block_loop.thisRepN'
p1603
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1604
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p1605
Nsg70
Vn
sS'block_loop.thisTrialN'
p1606
I0
sg39
F0.99964077971344523
sg34
g753
(S'\x07\xdf\x07\x04\x0c6\x04\x07\xd0\x00'
tRp1607
sa(dp1608
S'trial_loop.thisTrialN'
p1609
I47
sg895
S'13-mccoys_steak_crisps.png'
p1610
sS'block_loop.thisIndex'
p1611
g889
sg38
S'left'
p1612
sg59
g63
sS'trial_loop.thisN'
p1613
I47
sg33
g1200
sg64
g65
sS'trial_loop.thisIndex'
p1614
g60
(g99
S'/\x00\x00\x00'
tRp1615
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1616
I0
sg904
S'3-ellas_strawberries_apples.png'
p1617
sS'block_loop.thisRepN'
p1618
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1619
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p1620
Nsg70
Vn
sS'block_loop.thisTrialN'
p1621
I0
sg39
F1.5665744953021203
sg34
g753
(S'\x07\xdf\x07\x04\x0c6\n\x08`\x88'
tRp1622
sa(dp1623
S'trial_loop.thisTrialN'
p1624
I48
sg895
S'18-mms.png'
p1625
sS'block_loop.thisIndex'
p1626
g889
sg38
S'left'
p1627
sg59
g63
sS'trial_loop.thisN'
p1628
I48
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p1629
g60
(g99
S'0\x00\x00\x00'
tRp1630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1631
I0
sg904
S'43-mrporky_pork_crackles_redo.png'
p1632
sS'block_loop.thisRepN'
p1633
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1634
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p1635
Nsg70
Vn
sS'block_loop.thisTrialN'
p1636
I0
sg39
F1.4999399874050141
sg34
g753
(S'\x07\xdf\x07\x04\x0c6\x11\x02B '
tRp1637
sa(dp1638
S'trial_loop.thisTrialN'
p1639
I49
sg895
S'16-skips_prawn.png'
p1640
sS'block_loop.thisIndex'
p1641
g889
sg38
S'right'
p1642
sg59
g63
sS'trial_loop.thisN'
p1643
I49
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p1644
g60
(g99
S'1\x00\x00\x00'
tRp1645
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1646
I0
sg904
S'42-mrkipling_lemon_slices.png'
p1647
sS'block_loop.thisRepN'
p1648
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1649
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p1650
Nsg70
Vn
sS'block_loop.thisTrialN'
p1651
I0
sg39
F1.4165076546705677
sg34
g753
(S'\x07\xdf\x07\x04\x0c6\x17\n5H'
tRp1652
sa(dp1653
S'trial_loop.thisTrialN'
p1654
I50
sg895
g1206
sS'block_loop.thisIndex'
p1655
g889
sg38
S'left'
p1656
sg59
g63
sS'trial_loop.thisN'
p1657
I50
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p1658
g60
(g99
S'2\x00\x00\x00'
tRp1659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1660
I0
sg904
g1213
sS'block_loop.thisRepN'
p1661
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1662
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1663
Nsg70
Vn
sS'block_loop.thisTrialN'
p1664
I0
sg39
F1.0001137530907727
sg34
g753
(S'\x07\xdf\x07\x04\x0c6\x1e\x01\xf0\x18'
tRp1665
sa(dp1666
S'trial_loop.thisTrialN'
p1667
I51
sg895
S'44-crunch.png'
p1668
sS'block_loop.thisIndex'
p1669
g889
sg38
S'left'
p1670
sg59
g63
sS'trial_loop.thisN'
p1671
I51
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p1672
g60
(g99
S'3\x00\x00\x00'
tRp1673
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1674
I0
sg904
S'26-walkers_smoky_bacon.png'
p1675
sS'block_loop.thisRepN'
p1676
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1677
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1678
Nsg70
Vn
sS'block_loop.thisTrialN'
p1679
I0
sg39
F1.6166067538542848
sg34
g753
(S'\x07\xdf\x07\x04\x0c6$\x02\x84\x88'
tRp1680
sa(dp1681
S'trial_loop.thisTrialN'
p1682
I52
sg895
g1483
sS'block_loop.thisIndex'
p1683
g889
sg38
S'right'
p1684
sg59
g63
sS'trial_loop.thisN'
p1685
I52
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p1686
g60
(g99
S'4\x00\x00\x00'
tRp1687
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1688
I0
sg904
g1490
sS'block_loop.thisRepN'
p1689
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1690
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p1691
Nsg70
Vn
sS'block_loop.thisTrialN'
p1692
I0
sg39
F1.116557574887338
sg34
g753
(S'\x07\xdf\x07\x04\x0c6*\x0c\\\x10'
tRp1693
sa(dp1694
S'trial_loop.thisTrialN'
p1695
I53
sg895
g1048
sS'block_loop.thisIndex'
p1696
g889
sg38
S'right'
p1697
sg59
g63
sS'trial_loop.thisN'
p1698
I53
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p1699
g60
(g99
S'5\x00\x00\x00'
tRp1700
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1701
I0
sg904
g1055
sS'block_loop.thisRepN'
p1702
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1703
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p1704
Nsg70
Vn
sS'block_loop.thisTrialN'
p1705
I0
sg39
F1.0497152323941918
sg34
g753
(S'\x07\xdf\x07\x04\x0c60\x0e\x9aH'
tRp1706
sa(dp1707
S'trial_loop.thisTrialN'
p1708
I54
sg895
g1283
sS'block_loop.thisIndex'
p1709
g889
sg38
S'right'
p1710
sg59
g63
sS'trial_loop.thisN'
p1711
I54
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p1712
g60
(g99
S'6\x00\x00\x00'
tRp1713
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1714
I0
sg904
g1291
sS'block_loop.thisRepN'
p1715
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1716
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p1717
Nsg70
Vn
sS'block_loop.thisTrialN'
p1718
I0
sg39
F1.1999964648157402
sg34
g753
(S'\x07\xdf\x07\x04\x0c67\x00\xa0('
tRp1719
sa(dp1720
S'trial_loop.thisTrialN'
p1721
I55
sg895
g1668
sS'block_loop.thisIndex'
p1722
g889
sg38
S'left'
p1723
sg59
g63
sS'trial_loop.thisN'
p1724
I55
sg33
g1183
sg64
g65
sS'trial_loop.thisIndex'
p1725
g60
(g99
S'7\x00\x00\x00'
tRp1726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1727
I0
sg904
g1675
sS'block_loop.thisRepN'
p1728
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1729
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1730
Nsg70
Vn
sS'block_loop.thisTrialN'
p1731
I0
sg39
F0.93333983351021743
sg34
g753
(S'\x07\xdf\x07\x04\x0c7\x01\x04I\xa8'
tRp1732
sa(dp1733
S'trial_loop.thisTrialN'
p1734
I56
sg895
g916
sS'block_loop.thisIndex'
p1735
g889
sg38
S'right'
p1736
sg59
g63
sS'trial_loop.thisN'
p1737
I56
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1738
g60
(g99
S'8\x00\x00\x00'
tRp1739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1740
I0
sg904
g924
sS'block_loop.thisRepN'
p1741
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1742
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1743
Nsg70
Vn
sS'block_loop.thisTrialN'
p1744
I0
sg39
F0.96674532450560946
sg34
g753
(S'\x07\xdf\x07\x04\x0c7\x07\x03\xa9\x80'
tRp1745
sa(dp1746
S'trial_loop.thisTrialN'
p1747
I57
sg895
g1014
sS'block_loop.thisIndex'
p1748
g889
sg38
S'left'
p1749
sg59
g63
sS'trial_loop.thisN'
p1750
I57
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1751
g60
(g99
S'9\x00\x00\x00'
tRp1752
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1753
I0
sg904
g1022
sS'block_loop.thisRepN'
p1754
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1755
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1756
Nsg70
Vn
sS'block_loop.thisTrialN'
p1757
I0
sg39
F1.7165846019370292
sg34
g753
(S'\x07\xdf\x07\x04\x0c7\r\x03\xc0\xf0'
tRp1758
sa(dp1759
S'trial_loop.thisTrialN'
p1760
I58
sg895
g916
sS'block_loop.thisIndex'
p1761
g889
sg38
S'right'
p1762
sg59
g63
sS'trial_loop.thisN'
p1763
I58
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p1764
g60
(g99
S':\x00\x00\x00'
tRp1765
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1766
I0
sg904
g924
sS'block_loop.thisRepN'
p1767
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1768
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p1769
Nsg70
Vn
sS'block_loop.thisTrialN'
p1770
I0
sg39
F0.96666863382506563
sg34
g753
(S'\x07\xdf\x07\x04\x0c7\x13\x0f\x07\xa8'
tRp1771
sa(dp1772
S'trial_loop.thisTrialN'
p1773
I59
sg895
g1142
sS'block_loop.thisIndex'
p1774
g889
sg38
S'right'
p1775
sg59
g63
sS'trial_loop.thisN'
p1776
I59
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1777
g60
(g99
S';\x00\x00\x00'
tRp1778
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1779
I0
sg904
g1150
sS'block_loop.thisRepN'
p1780
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1781
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1782
Nsg70
Vn
sS'block_loop.thisTrialN'
p1783
I0
sg39
F1.0166507155754516
sg34
g753
(S'\x07\xdf\x07\x04\x0c7\x19\x0f\x1f\x18'
tRp1784
sa(dp1785
S'trial_loop.thisTrialN'
p1786
I60
sg895
g950
sS'block_loop.thisIndex'
p1787
g889
sg38
S'right'
p1788
sg59
g63
sS'trial_loop.thisN'
p1789
I60
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p1790
g60
(g99
S'<\x00\x00\x00'
tRp1791
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1792
I0
sg904
g958
sS'block_loop.thisRepN'
p1793
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1794
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p1795
Nsg70
Vn
sS'block_loop.thisTrialN'
p1796
I0
sg39
F1.0170130719116059
sg34
g753
(S'\x07\xdf\x07\x04\x0c7 \x00\xab\xe0'
tRp1797
sa(dp1798
S'trial_loop.thisTrialN'
p1799
I61
sg895
S'4-corn.png'
p1800
sS'block_loop.thisIndex'
p1801
g889
sg38
S'right'
p1802
sg59
g63
sS'trial_loop.thisN'
p1803
I61
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1804
g60
(g99
S'=\x00\x00\x00'
tRp1805
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1806
I0
sg904
S'10-bounty_redo.png'
p1807
sS'block_loop.thisRepN'
p1808
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1809
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1810
Nsg70
Vn
sS'block_loop.thisTrialN'
p1811
I0
sg39
F0.96666435739371082
sg34
g753
(S'\x07\xdf\x07\x04\x0c7&\x01z\xe8'
tRp1812
sa(dp1813
S'trial_loop.thisTrialN'
p1814
I62
sg895
g1315
sS'block_loop.thisIndex'
p1815
g889
sg38
S'left'
p1816
sg59
g63
sS'trial_loop.thisN'
p1817
I62
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p1818
g60
(g99
S'>\x00\x00\x00'
tRp1819
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1820
I0
sg904
g1322
sS'block_loop.thisRepN'
p1821
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1822
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p1823
Nsg70
Vn
sS'block_loop.thisTrialN'
p1824
I0
sg39
F0.78334597731736721
sg34
g753
(S'\x07\xdf\x07\x04\x0c7,\x01S\xd8'
tRp1825
sa(dp1826
S'trial_loop.thisTrialN'
p1827
I63
sg895
g1097
sS'block_loop.thisIndex'
p1828
g889
sg38
S'right'
p1829
sg59
g63
sS'trial_loop.thisN'
p1830
I63
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p1831
g60
(g99
S'?\x00\x00\x00'
tRp1832
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1833
I0
sg904
g1104
sS'block_loop.thisRepN'
p1834
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1835
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p1836
Nsg70
Vn
sS'block_loop.thisTrialN'
p1837
I0
sg39
F1.3666430322527958
sg34
g753
(S'\x07\xdf\x07\x04\x0c71\r\xd3\x10'
tRp1838
sa(dp1839
S'trial_loop.thisTrialN'
p1840
I64
sg895
S'41-peanuts_redo.png'
p1841
sS'block_loop.thisIndex'
p1842
g889
sg38
S'left'
p1843
sg59
g63
sS'trial_loop.thisN'
p1844
I64
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p1845
g60
(g99
S'@\x00\x00\x00'
tRp1846
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1847
I0
sg904
S'45-chewy_nougat_redo.png'
p1848
sS'block_loop.thisRepN'
p1849
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1850
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p1851
Nsg70
Vn
sS'block_loop.thisTrialN'
p1852
I0
sg39
F1.1665607537015603
sg34
g753
(S'\x07\xdf\x07\x04\x0c78\x04\x9b\xb0'
tRp1853
sa(dp1854
S'trial_loop.thisTrialN'
p1855
I65
sg895
g1031
sS'block_loop.thisIndex'
p1856
g889
sg38
S'right'
p1857
sg59
g63
sS'trial_loop.thisN'
p1858
I65
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p1859
g60
(g99
S'A\x00\x00\x00'
tRp1860
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1861
I0
sg904
g1039
sS'block_loop.thisRepN'
p1862
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1863
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p1864
Nsg70
Vn
sS'block_loop.thisTrialN'
p1865
I0
sg39
F0.91702011376946757
sg34
g753
(S'\x07\xdf\x07\x04\x0c8\x02\x07\xcc\x18'
tRp1866
sa(dp1867
S'trial_loop.thisTrialN'
p1868
I66
sg895
g1483
sS'block_loop.thisIndex'
p1869
g889
sg38
S'right'
p1870
sg59
g63
sS'trial_loop.thisN'
p1871
I66
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p1872
g60
(g99
S'B\x00\x00\x00'
tRp1873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1874
I0
sg904
g1490
sS'block_loop.thisRepN'
p1875
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1876
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p1877
Nsg70
Vn
sS'block_loop.thisTrialN'
p1878
I0
sg39
F1.1333037974436593
sg34
g753
(S'\x07\xdf\x07\x04\x0c8\x08\x06\xedp'
tRp1879
sa(dp1880
S'trial_loop.thisTrialN'
p1881
I67
sg895
g1080
sS'block_loop.thisIndex'
p1882
g889
sg38
S'right'
p1883
sg59
g63
sS'trial_loop.thisN'
p1884
I67
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p1885
g60
(g99
S'C\x00\x00\x00'
tRp1886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1887
I0
sg904
g1088
sS'block_loop.thisRepN'
p1888
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1889
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1890
Nsg70
Vn
sS'block_loop.thisTrialN'
p1891
I0
sg39
F0.83325535972380749
sg34
g753
(S'\x07\xdf\x07\x04\x0c8\x0e\tf@'
tRp1892
sa(dp1893
S'trial_loop.thisTrialN'
p1894
I68
sg895
S'40-sardines.png'
p1895
sS'block_loop.thisIndex'
p1896
g889
sg38
S'left'
p1897
sg59
g63
sS'trial_loop.thisN'
p1898
I68
sg33
g1257
sg64
g65
sS'trial_loop.thisIndex'
p1899
g60
(g99
S'D\x00\x00\x00'
tRp1900
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1901
I0
sg904
S'5-pineapple.png'
p1902
sS'block_loop.thisRepN'
p1903
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1904
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p1905
Nsg70
Vn
sS'block_loop.thisTrialN'
p1906
I0
sg39
F1.3333122362682843
sg34
g753
(S'\x07\xdf\x07\x04\x0c8\x14\x07\x99P'
tRp1907
sa(dp1908
S'trial_loop.thisTrialN'
p1909
I69
sg895
g1300
sS'block_loop.thisIndex'
p1910
g889
sg38
S'left'
p1911
sg59
g63
sS'trial_loop.thisN'
p1912
I69
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p1913
g60
(g99
S'E\x00\x00\x00'
tRp1914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1915
I0
sg904
g1307
sS'block_loop.thisRepN'
p1916
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1917
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p1918
Nsg70
Vn
sS'block_loop.thisTrialN'
p1919
I0
sg39
F1.2998947712640074
sg34
g753
(S"\x07\xdf\x07\x04\x0c8\x1a\r'0"
tRp1920
sa(dp1921
S'trial_loop.thisTrialN'
p1922
I70
sg895
g1800
sS'block_loop.thisIndex'
p1923
g889
sg38
S'right'
p1924
sg59
g63
sS'trial_loop.thisN'
p1925
I70
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p1926
g60
(g99
S'F\x00\x00\x00'
tRp1927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1928
I0
sg904
g1807
sS'block_loop.thisRepN'
p1929
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1930
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p1931
Nsg70
Vn
sS'block_loop.thisTrialN'
p1932
I0
sg39
F0.9999800433179189
sg34
g753
(S'\x07\xdf\x07\x04\x0c8!\x02\xfd\xa0'
tRp1933
sa(dp1934
S'trial_loop.thisTrialN'
p1935
I71
sg895
g1253
sS'block_loop.thisIndex'
p1936
g889
sg38
S'right'
p1937
sg59
g63
sS'trial_loop.thisN'
p1938
I71
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p1939
g60
(g99
S'G\x00\x00\x00'
tRp1940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1941
I0
sg904
g1261
sS'block_loop.thisRepN'
p1942
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1943
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p1944
Nsg70
Vn
sS'block_loop.thisTrialN'
p1945
I0
sg39
F1.0332130515562312
sg34
g753
(S"\x07\xdf\x07\x04\x0c8'\x03S\x90"
tRp1946
sa(dp1947
S'trial_loop.thisTrialN'
p1948
I72
sg895
g1356
sS'block_loop.thisIndex'
p1949
g889
sg38
S'right'
p1950
sg59
g63
sS'trial_loop.thisN'
p1951
I72
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p1952
g60
(g99
S'H\x00\x00\x00'
tRp1953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1954
I0
sg904
g1363
sS'block_loop.thisRepN'
p1955
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1956
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p1957
Nsg70
Vn
sS'block_loop.thisTrialN'
p1958
I0
sg39
F0.78325075543216371
sg34
g753
(S'\x07\xdf\x07\x04\x0c8-\x04]0'
tRp1959
sa(dp1960
S'trial_loop.thisTrialN'
p1961
I73
sg895
g1371
sS'block_loop.thisIndex'
p1962
g889
sg38
S'left'
p1963
sg59
g63
sS'trial_loop.thisN'
p1964
I73
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p1965
g60
(g99
S'I\x00\x00\x00'
tRp1966
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1967
I0
sg904
g1379
sS'block_loop.thisRepN'
p1968
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1969
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p1970
Nsg70
Vn
sS'block_loop.thisTrialN'
p1971
I0
sg39
F0.85000015680270735
sg34
g753
(S'\x07\xdf\x07\x04\x0c83\x01\x9a('
tRp1972
sa(dp1973
S'trial_loop.thisTrialN'
p1974
I74
sg895
g1080
sS'block_loop.thisIndex'
p1975
g889
sg38
S'right'
p1976
sg59
g63
sS'trial_loop.thisN'
p1977
I74
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p1978
g60
(g99
S'J\x00\x00\x00'
tRp1979
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1980
I0
sg904
g1088
sS'block_loop.thisRepN'
p1981
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1982
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p1983
Nsg70
Vn
sS'block_loop.thisTrialN'
p1984
I0
sg39
F0.76643012295880908
sg34
g753
(S'\x07\xdf\x07\x04\x0c88\x0f\x0b\x90'
tRp1985
sa(dp1986
S'trial_loop.thisTrialN'
p1987
I75
sg895
g1172
sS'block_loop.thisIndex'
p1988
g889
sg38
S'right'
p1989
sg59
g63
sS'trial_loop.thisN'
p1990
I75
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p1991
g60
(g99
S'K\x00\x00\x00'
tRp1992
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p1993
I0
sg904
g1180
sS'block_loop.thisRepN'
p1994
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p1995
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p1996
Nsg70
Vn
sS'block_loop.thisTrialN'
p1997
I0
sg39
F0.86666911848715245
sg34
g753
(S'\x07\xdf\x07\x04\x0c9\x02\x0c\n\x08'
tRp1998
sa(dp1999
S'trial_loop.thisTrialN'
p2000
I76
sg895
g1206
sS'block_loop.thisIndex'
p2001
g889
sg38
S'left'
p2002
sg59
g63
sS'trial_loop.thisN'
p2003
I76
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2004
g60
(g99
S'L\x00\x00\x00'
tRp2005
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2006
I0
sg904
g1213
sS'block_loop.thisRepN'
p2007
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2008
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2009
Nsg70
Vn
sS'block_loop.thisTrialN'
p2010
I0
sg39
F0.96700362099818449
sg34
g753
(S'\x07\xdf\x07\x04\x0c9\x08\nw\xb0'
tRp2011
sa(dp2012
S'trial_loop.thisTrialN'
p2013
I77
sg895
g1841
sS'block_loop.thisIndex'
p2014
g889
sg38
S'left'
p2015
sg59
g63
sS'trial_loop.thisN'
p2016
I77
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2017
g60
(g99
S'M\x00\x00\x00'
tRp2018
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2019
I0
sg904
g1848
sS'block_loop.thisRepN'
p2020
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2021
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2022
Nsg70
Vn
sS'block_loop.thisTrialN'
p2023
I0
sg39
F0.93332842969175545
sg34
g753
(S'\x07\xdf\x07\x04\x0c9\x0e\n\x8f '
tRp2024
sa(dp2025
S'trial_loop.thisTrialN'
p2026
I78
sg895
S'23-crunchie_redo.png'
p2027
sS'block_loop.thisIndex'
p2028
g889
sg38
S'left'
p2029
sg59
g63
sS'trial_loop.thisN'
p2030
I78
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2031
g60
(g99
S'N\x00\x00\x00'
tRp2032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2033
I0
sg904
S'33-ambrosia_rice.png'
p2034
sS'block_loop.thisRepN'
p2035
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2036
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2037
Nsg70
Vn
sS'block_loop.thisTrialN'
p2038
I0
sg39
F0.9498519926892186
sg34
g753
(S'\x07\xdf\x07\x04\x0c9\x14\t\xee\xf8'
tRp2039
sa(dp2040
S'trial_loop.thisTrialN'
p2041
I79
sg895
g1283
sS'block_loop.thisIndex'
p2042
g889
sg38
S'right'
p2043
sg59
g63
sS'trial_loop.thisN'
p2044
I79
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p2045
g60
(g99
S'O\x00\x00\x00'
tRp2046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2047
I0
sg904
g1291
sS'block_loop.thisRepN'
p2048
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2049
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p2050
Nsg70
Vn
sS'block_loop.thisTrialN'
p2051
I0
sg39
F0.84989923300690862
sg34
g753
(S'\x07\xdf\x07\x04\x0c9\x1a\t\xcb\xd0'
tRp2052
sa(dp2053
S'trial_loop.thisTrialN'
p2054
I80
sg895
g1552
sS'block_loop.thisIndex'
p2055
g889
sg38
S'right'
p2056
sg59
g63
sS'trial_loop.thisN'
p2057
I80
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2058
g60
(g99
S'P\x00\x00\x00'
tRp2059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2060
I0
sg904
g1560
sS'block_loop.thisRepN'
p2061
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2062
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2063
Nsg70
Vn
sS'block_loop.thisTrialN'
p2064
I0
sg39
F1.066401869998117
sg34
g753
(S'\x07\xdf\x07\x04\x0c9 \x07\xfa\xf8'
tRp2065
sa(dp2066
S'trial_loop.thisTrialN'
p2067
I81
sg895
g2027
sS'block_loop.thisIndex'
p2068
g889
sg38
S'left'
p2069
sg59
g63
sS'trial_loop.thisN'
p2070
I81
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2071
g60
(g99
S'Q\x00\x00\x00'
tRp2072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2073
I0
sg904
g2034
sS'block_loop.thisRepN'
p2074
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2075
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2076
Nsg70
Vn
sS'block_loop.thisTrialN'
p2077
I0
sg39
F0.8499414271373098
sg34
g753
(S'\x07\xdf\x07\x04\x0c9&\t\x81\x98'
tRp2078
sa(dp2079
S'trial_loop.thisTrialN'
p2080
I82
sg895
g1221
sS'block_loop.thisIndex'
p2081
g889
sg38
S'right'
p2082
sg59
g63
sS'trial_loop.thisN'
p2083
I82
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p2084
g60
(g99
S'R\x00\x00\x00'
tRp2085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2086
I0
sg904
g1228
sS'block_loop.thisRepN'
p2087
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2088
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p2089
Nsg70
Vn
sS'block_loop.thisTrialN'
p2090
I0
sg39
F1.0997320957912962
sg34
g753
(S'\x07\xdf\x07\x04\x0c9,\x07\xb0\xc0'
tRp2091
sa(dp2092
S'trial_loop.thisTrialN'
p2093
I83
sg895
g2027
sS'block_loop.thisIndex'
p2094
g889
sg38
S'left'
p2095
sg59
g63
sS'trial_loop.thisN'
p2096
I83
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p2097
g60
(g99
S'S\x00\x00\x00'
tRp2098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2099
I0
sg904
g2034
sS'block_loop.thisRepN'
p2100
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2101
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2102
Nsg70
Vn
sS'block_loop.thisTrialN'
p2103
I0
sg39
F0.7165141833575035
sg34
g753
(S'\x07\xdf\x07\x04\x0c92\t\xb0x'
tRp2104
sa(dp2105
S'trial_loop.thisTrialN'
p2106
I84
sg895
g1610
sS'block_loop.thisIndex'
p2107
g889
sg38
S'left'
p2108
sg59
g63
sS'trial_loop.thisN'
p2109
I84
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p2110
g60
(g99
S'T\x00\x00\x00'
tRp2111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2112
I0
sg904
g1617
sS'block_loop.thisRepN'
p2113
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2114
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p2115
Nsg70
Vn
sS'block_loop.thisTrialN'
p2116
I0
sg39
F1.1832408341097107
sg34
g753
(S'\x07\xdf\x07\x04\x0c98\x05\xf7X'
tRp2117
sa(dp2118
S'trial_loop.thisTrialN'
p2119
I85
sg895
g1511
sS'block_loop.thisIndex'
p2120
g889
sg38
S'left'
p2121
sg59
g63
sS'trial_loop.thisN'
p2122
I85
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p2123
g60
(g99
S'U\x00\x00\x00'
tRp2124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2125
I0
sg904
g1518
sS'block_loop.thisRepN'
p2126
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2127
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p2128
Nsg70
Vn
sS'block_loop.thisTrialN'
p2129
I0
sg39
F0.96663983918369922
sg34
g753
(S"\x07\xdf\x07\x04\x0c:\x02\t'\xc0"
tRp2130
sa(dp2131
S'trial_loop.thisTrialN'
p2132
I86
sg895
g1097
sS'block_loop.thisIndex'
p2133
g889
sg38
S'right'
p2134
sg59
g63
sS'trial_loop.thisN'
p2135
I86
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2136
g60
(g99
S'V\x00\x00\x00'
tRp2137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2138
I0
sg904
g1104
sS'block_loop.thisRepN'
p2139
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2140
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2141
Nsg70
Vn
sS'block_loop.thisTrialN'
p2142
I0
sg39
F1.6998666038316514
sg34
g753
(S'\x07\xdf\x07\x04\x0c:\x08\t?0'
tRp2143
sa(dp2144
S'trial_loop.thisTrialN'
p2145
I87
sg895
g1253
sS'block_loop.thisIndex'
p2146
g889
sg38
S'right'
p2147
sg59
g63
sS'trial_loop.thisN'
p2148
I87
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p2149
g60
(g99
S'W\x00\x00\x00'
tRp2150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2151
I0
sg904
g1261
sS'block_loop.thisRepN'
p2152
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2153
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p2154
Nsg70
Vn
sS'block_loop.thisTrialN'
p2155
I0
sg39
F1.2670574755311463
sg34
g753
(S'\x07\xdf\x07\x04\x0c:\x0f\x05C\xa8'
tRp2156
sa(dp2157
S'trial_loop.thisTrialN'
p2158
I88
sg895
g967
sS'block_loop.thisIndex'
p2159
g889
sg38
S'left'
p2160
sg59
g63
sS'trial_loop.thisN'
p2161
I88
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2162
g60
(g99
S'X\x00\x00\x00'
tRp2163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2164
I0
sg904
g975
sS'block_loop.thisRepN'
p2165
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2166
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2167
Nsg70
Vn
sS'block_loop.thisTrialN'
p2168
I0
sg39
F0.89986677488923306
sg34
g753
(S'\x07\xdf\x07\x04\x0c:\x15\t\xdfX'
tRp2169
sa(dp2170
S'trial_loop.thisTrialN'
p2171
I89
sg895
g1300
sS'block_loop.thisIndex'
p2172
g889
sg38
S'left'
p2173
sg59
g63
sS'trial_loop.thisN'
p2174
I89
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2175
g60
(g99
S'Y\x00\x00\x00'
tRp2176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2177
I0
sg904
g1307
sS'block_loop.thisRepN'
p2178
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2179
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2180
Nsg70
Vn
sS'block_loop.thisTrialN'
p2181
I0
sg39
F0.76657523655103432
sg34
g753
(S'\x07\xdf\x07\x04\x0c:\x1b\x08\xca\x00'
tRp2182
sa(dp2183
S'trial_loop.thisTrialN'
p2184
I90
sg895
g1668
sS'block_loop.thisIndex'
p2185
g889
sg38
S'left'
p2186
sg59
g63
sS'trial_loop.thisN'
p2187
I90
sg33
g1183
sg64
g65
sS'trial_loop.thisIndex'
p2188
g60
(g99
S'Z\x00\x00\x00'
tRp2189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2190
I0
sg904
g1675
sS'block_loop.thisRepN'
p2191
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2192
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2193
Nsg70
Vn
sS'block_loop.thisTrialN'
p2194
I0
sg39
F0.78332516534828756
sg34
g753
(S'\x07\xdf\x07\x04\x0c:!\x05\xc8x'
tRp2195
sa(dp2196
S'trial_loop.thisTrialN'
p2197
I91
sg895
g997
sS'block_loop.thisIndex'
p2198
g889
sg38
S'right'
p2199
sg59
g63
sS'trial_loop.thisN'
p2200
I91
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p2201
g60
(g99
S'[\x00\x00\x00'
tRp2202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2203
I0
sg904
g1005
sS'block_loop.thisRepN'
p2204
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2205
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2206
Nsg70
Vn
sS'block_loop.thisTrialN'
p2207
I0
sg39
F0.76655870101330947
sg34
g753
(S"\x07\xdf\x07\x04\x0c:'\x02\xc6\xf0"
tRp2208
sa(dp2209
S'trial_loop.thisTrialN'
p2210
I92
sg895
g933
sS'block_loop.thisIndex'
p2211
g889
sg38
S'right'
p2212
sg59
g63
sS'trial_loop.thisN'
p2213
I92
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2214
g60
(g99
S'\\\x00\x00\x00'
tRp2215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2216
I0
sg904
g941
sS'block_loop.thisRepN'
p2217
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2218
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2219
Nsg70
Vn
sS'block_loop.thisTrialN'
p2220
I0
sg39
F1.2831998658912198
sg34
g753
(S'\x07\xdf\x07\x04\x0c:,\x0f\x07\xa8'
tRp2221
sa(dp2222
S'trial_loop.thisTrialN'
p2223
I93
sg895
g916
sS'block_loop.thisIndex'
p2224
g889
sg38
S'right'
p2225
sg59
g63
sS'trial_loop.thisN'
p2226
I93
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2227
g60
(g99
S']\x00\x00\x00'
tRp2228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2229
I0
sg904
g924
sS'block_loop.thisRepN'
p2230
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2231
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2232
Nsg70
Vn
sS'block_loop.thisTrialN'
p2233
I0
sg39
F1.0330194717353152
sg34
g753
(S'\x07\xdf\x07\x04\x0c:3\x04\x9f\x98'
tRp2234
sa(dp2235
S'trial_loop.thisTrialN'
p2236
I94
sg895
g950
sS'block_loop.thisIndex'
p2237
g889
sg38
S'right'
p2238
sg59
g63
sS'trial_loop.thisN'
p2239
I94
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2240
g60
(g99
S'^\x00\x00\x00'
tRp2241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2242
I0
sg904
g958
sS'block_loop.thisRepN'
p2243
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2244
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2245
Nsg70
Vn
sS'block_loop.thisTrialN'
p2246
I0
sg39
F0.96667547611650662
sg34
g753
(S'\x07\xdf\x07\x04\x0c:9\x05\xad '
tRp2247
sa(dp2248
S'trial_loop.thisTrialN'
p2249
I95
sg895
g896
sS'block_loop.thisIndex'
p2250
g889
sg38
S'left'
p2251
sg59
g63
sS'trial_loop.thisN'
p2252
I95
sg33
g910
sg64
g65
sS'trial_loop.thisIndex'
p2253
g60
(g99
S'_\x00\x00\x00'
tRp2254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2255
I0
sg904
g905
sS'block_loop.thisRepN'
p2256
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2257
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2258
Nsg70
Vn
sS'block_loop.thisTrialN'
p2259
I0
sg39
F0.76661286915168603
sg34
g753
(S'\x07\xdf\x07\x04\x0c;\x03\x05\xc4\x90'
tRp2260
sa(dp2261
S'trial_loop.thisTrialN'
p2262
I96
sg895
g1552
sS'block_loop.thisIndex'
p2263
g889
sg38
S'right'
p2264
sg59
g63
sS'trial_loop.thisN'
p2265
I96
sg33
g1563
sg64
g65
sS'trial_loop.thisIndex'
p2266
g60
(g99
S'`\x00\x00\x00'
tRp2267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2268
I0
sg904
g1560
sS'block_loop.thisRepN'
p2269
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2270
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2271
Nsg70
Vn
sS'block_loop.thisTrialN'
p2272
I0
sg39
F0.96656856531717494
sg34
g753
(S'\x07\xdf\x07\x04\x0c;\t\x02\x84\x88'
tRp2273
sa(dp2274
S'trial_loop.thisTrialN'
p2275
I97
sg895
g1668
sS'block_loop.thisIndex'
p2276
g889
sg38
S'left'
p2277
sg59
g63
sS'trial_loop.thisN'
p2278
I97
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2279
g60
(g99
S'a\x00\x00\x00'
tRp2280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2281
I0
sg904
g1675
sS'block_loop.thisRepN'
p2282
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2283
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2284
Nsg70
Vn
sS'block_loop.thisTrialN'
p2285
I0
sg39
F1.1332008779800162
sg34
g753
(S'\x07\xdf\x07\x04\x0c;\x0f\x02\x9b\xf8'
tRp2286
sa(dp2287
S'trial_loop.thisTrialN'
p2288
I98
sg895
g1236
sS'block_loop.thisIndex'
p2289
g889
sg38
S'left'
p2290
sg59
g63
sS'trial_loop.thisN'
p2291
I98
sg33
g1247
sg64
g65
sS'trial_loop.thisIndex'
p2292
g60
(g99
S'b\x00\x00\x00'
tRp2293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2294
I0
sg904
g1244
sS'block_loop.thisRepN'
p2295
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2296
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p2297
Nsg70
Vn
sS'block_loop.thisTrialN'
p2298
I0
sg39
F0.73336617633140122
sg34
g753
(S'\x07\xdf\x07\x04\x0c;\x15\x05\x14\xc8'
tRp2299
sa(dp2300
S'trial_loop.thisTrialN'
p2301
I99
sg895
g1221
sS'block_loop.thisIndex'
p2302
g889
sg38
S'right'
p2303
sg59
g63
sS'trial_loop.thisN'
p2304
I99
sg33
g1067
sg64
g65
sS'trial_loop.thisIndex'
p2305
g60
(g99
S'c\x00\x00\x00'
tRp2306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2307
I0
sg904
g1228
sS'block_loop.thisRepN'
p2308
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2309
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p2310
Nsg70
Vn
sS'block_loop.thisTrialN'
p2311
I0
sg39
F0.96643200458947831
sg34
g753
(S'\x07\xdf\x07\x04\x0c;\x1b\x01\x9a('
tRp2312
sa(dp2313
S'trial_loop.thisTrialN'
p2314
I100
sg895
g1189
sS'block_loop.thisIndex'
p2315
g889
sg38
S'right'
p2316
sg59
g63
sS'trial_loop.thisN'
p2317
I100
sg33
g1200
sg64
g65
sS'trial_loop.thisIndex'
p2318
g60
(g99
S'd\x00\x00\x00'
tRp2319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2320
I0
sg904
g1197
sS'block_loop.thisRepN'
p2321
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2322
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p2323
Nsg70
Vn
sS'block_loop.thisTrialN'
p2324
I0
sg39
F1.5832850809256342
sg34
g753
(S'\x07\xdf\x07\x04\x0c;!\x01\xb1\x98'
tRp2325
sa(dp2326
S'trial_loop.thisTrialN'
p2327
I101
sg895
g1356
sS'block_loop.thisIndex'
p2328
g889
sg38
S'right'
p2329
sg59
g63
sS'trial_loop.thisN'
p2330
I101
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p2331
g60
(g99
S'e\x00\x00\x00'
tRp2332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2333
I0
sg904
g1363
sS'block_loop.thisRepN'
p2334
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2335
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p2336
Nsg70
Vn
sS'block_loop.thisTrialN'
p2337
I0
sg39
F0.73333766678388201
sg34
g753
(S"\x07\xdf\x07\x04\x0c;'\x0b\x13\xf0"
tRp2338
sa(dp2339
S'trial_loop.thisTrialN'
p2340
I102
sg895
g1511
sS'block_loop.thisIndex'
p2341
g889
sg38
S'left'
p2342
sg59
g63
sS'trial_loop.thisN'
p2343
I102
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2344
g60
(g99
S'f\x00\x00\x00'
tRp2345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2346
I0
sg904
g1518
sS'block_loop.thisRepN'
p2347
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2348
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p2349
Nsg70
Vn
sS'block_loop.thisTrialN'
p2350
I0
sg39
F0.71665986714015162
sg34
g753
(S'\x07\xdf\x07\x04\x0c;-\x07Z\xd0'
tRp2351
sa(dp2352
S'trial_loop.thisTrialN'
p2353
I103
sg895
g1014
sS'block_loop.thisIndex'
p2354
g889
sg38
S'left'
p2355
sg59
g63
sS'trial_loop.thisN'
p2356
I103
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2357
g60
(g99
S'g\x00\x00\x00'
tRp2358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2359
I0
sg904
g1022
sS'block_loop.thisRepN'
p2360
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2361
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2362
Nsg70
Vn
sS'block_loop.thisTrialN'
p2363
I0
sg39
F1.2332183543321662
sg34
g753
(S'\x07\xdf\x07\x04\x0c;3\x03\xa1\xb0'
tRp2364
sa(dp2365
S'trial_loop.thisTrialN'
p2366
I104
sg895
g1356
sS'block_loop.thisIndex'
p2367
g889
sg38
S'right'
p2368
sg59
g63
sS'trial_loop.thisN'
p2369
I104
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p2370
g60
(g99
S'h\x00\x00\x00'
tRp2371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2372
I0
sg904
g1363
sS'block_loop.thisRepN'
p2373
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2374
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p2375
Nsg70
Vn
sS'block_loop.thisTrialN'
p2376
I0
sg39
F0.73367379433875612
sg34
g753
(S'\x07\xdf\x07\x04\x0c;9\x07\xc80'
tRp2377
sa(dp2378
S'trial_loop.thisTrialN'
p2379
I105
sg895
g896
sS'block_loop.thisIndex'
p2380
g889
sg38
S'left'
p2381
sg59
g63
sS'trial_loop.thisN'
p2382
I105
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2383
g60
(g99
S'i\x00\x00\x00'
tRp2384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2385
I0
sg904
g905
sS'block_loop.thisRepN'
p2386
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2387
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2388
Nsg70
Vn
sS'block_loop.thisTrialN'
p2389
I0
sg39
F0.79992826998022792
sg34
g753
(S'\x07\xdf\x07\x04\r\x00\x03\x04\x0f\x10'
tRp2390
sa(dp2391
S'trial_loop.thisTrialN'
p2392
I106
sg895
g1031
sS'block_loop.thisIndex'
p2393
g889
sg38
S'right'
p2394
sg59
g63
sS'trial_loop.thisN'
p2395
I106
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p2396
g60
(g99
S'j\x00\x00\x00'
tRp2397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2398
I0
sg904
g1039
sS'block_loop.thisRepN'
p2399
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2400
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p2401
Nsg70
Vn
sS'block_loop.thisTrialN'
p2402
I0
sg39
F0.73328806017343595
sg34
g753
(S'\x07\xdf\x07\x04\r\x00\t\x01\x86\xa0'
tRp2403
sa(dp2404
S'trial_loop.thisTrialN'
p2405
I107
sg895
g1315
sS'block_loop.thisIndex'
p2406
g889
sg38
S'left'
p2407
sg59
g63
sS'trial_loop.thisN'
p2408
I107
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2409
g60
(g99
S'k\x00\x00\x00'
tRp2410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2411
I0
sg904
g1322
sS'block_loop.thisRepN'
p2412
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2413
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2414
Nsg70
Vn
sS'block_loop.thisTrialN'
p2415
I0
sg39
F1.5832257810689043
sg34
g753
(S'\x07\xdf\x07\x04\r\x00\x0e\rN@'
tRp2416
sa(dp2417
S'trial_loop.thisTrialN'
p2418
I108
sg895
g1483
sS'block_loop.thisIndex'
p2419
g889
sg38
S'right'
p2420
sg59
g63
sS'trial_loop.thisN'
p2421
I108
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p2422
g60
(g99
S'l\x00\x00\x00'
tRp2423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2424
I0
sg904
g1490
sS'block_loop.thisRepN'
p2425
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2426
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p2427
Nsg70
Vn
sS'block_loop.thisTrialN'
p2428
I0
sg39
F0.88332125954002549
sg34
g753
(S'\x07\xdf\x07\x04\r\x00\x15\x07nX'
tRp2429
sa(dp2430
S'trial_loop.thisTrialN'
p2431
I109
sg895
g1625
sS'block_loop.thisIndex'
p2432
g889
sg38
S'left'
p2433
sg59
g63
sS'trial_loop.thisN'
p2434
I109
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p2435
g60
(g99
S'm\x00\x00\x00'
tRp2436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2437
I0
sg904
g1632
sS'block_loop.thisRepN'
p2438
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2439
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p2440
Nsg70
Vn
sS'block_loop.thisTrialN'
p2441
I0
sg39
F0.73336817199924553
sg34
g753
(S'\x07\xdf\x07\x04\r\x00\x1b\x06\x16\x98'
tRp2442
sa(dp2443
S'trial_loop.thisTrialN'
p2444
I110
sg895
g1800
sS'block_loop.thisIndex'
p2445
g889
sg38
S'right'
p2446
sg59
g63
sS'trial_loop.thisN'
p2447
I110
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2448
g60
(g99
S'n\x00\x00\x00'
tRp2449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2450
I0
sg904
g1807
sS'block_loop.thisRepN'
p2451
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2452
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2453
Nsg70
Vn
sS'block_loop.thisTrialN'
p2454
I0
sg39
F0.98326147502120875
sg34
g753
(S'\x07\xdf\x07\x04\r\x00!\x02\x9b\xf8'
tRp2455
sa(dp2456
S'trial_loop.thisTrialN'
p2457
I111
sg895
g1048
sS'block_loop.thisIndex'
p2458
g889
sg38
S'right'
p2459
sg59
g63
sS'trial_loop.thisN'
p2460
I111
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2461
g60
(g99
S'o\x00\x00\x00'
tRp2462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2463
I0
sg904
g1055
sS'block_loop.thisRepN'
p2464
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2465
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2466
Nsg70
Vn
sS'block_loop.thisTrialN'
p2467
I0
sg39
F0.7166604373305745
sg34
g753
(S"\x07\xdf\x07\x04\r\x00'\x02\xf1\xe8"
tRp2468
sa(dp2469
S'trial_loop.thisTrialN'
p2470
I112
sg895
g1236
sS'block_loop.thisIndex'
p2471
g889
sg38
S'left'
p2472
sg59
g63
sS'trial_loop.thisN'
p2473
I112
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p2474
g60
(g99
S'p\x00\x00\x00'
tRp2475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2476
I0
sg904
g1244
sS'block_loop.thisRepN'
p2477
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2478
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p2479
Nsg70
Vn
sS'block_loop.thisTrialN'
p2480
I0
sg39
F0.71654753952680039
sg34
g753
(S'\x07\xdf\x07\x04\r\x00,\x0e@p'
tRp2481
sa(dp2482
S'trial_loop.thisTrialN'
p2483
I113
sg895
g1315
sS'block_loop.thisIndex'
p2484
g889
sg38
S'left'
p2485
sg59
g63
sS'trial_loop.thisN'
p2486
I113
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2487
g60
(g99
S'q\x00\x00\x00'
tRp2488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2489
I0
sg904
g1322
sS'block_loop.thisRepN'
p2490
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2491
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2492
Nsg70
Vn
sS'block_loop.thisTrialN'
p2493
I0
sg39
F1.5498904235573718
sg34
g753
(S'\x07\xdf\x07\x04\r\x002\n\x87P'
tRp2494
sa(dp2495
S'trial_loop.thisTrialN'
p2496
I114
sg895
g1142
sS'block_loop.thisIndex'
p2497
g889
sg38
S'right'
p2498
sg59
g63
sS'trial_loop.thisN'
p2499
I114
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p2500
g60
(g99
S'r\x00\x00\x00'
tRp2501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2502
I0
sg904
g1150
sS'block_loop.thisRepN'
p2503
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2504
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2505
Nsg70
Vn
sS'block_loop.thisTrialN'
p2506
I0
sg39
F1.1170376756517726
sg34
g753
(S'\x07\xdf\x07\x04\r\x009\x04*h'
tRp2507
sa(dp2508
S'trial_loop.thisTrialN'
p2509
I115
sg895
g1031
sS'block_loop.thisIndex'
p2510
g889
sg38
S'right'
p2511
sg59
g63
sS'trial_loop.thisN'
p2512
I115
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2513
g60
(g99
S's\x00\x00\x00'
tRp2514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2515
I0
sg904
g1039
sS'block_loop.thisRepN'
p2516
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2517
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p2518
Nsg70
Vn
sS'block_loop.thisTrialN'
p2519
I0
sg39
F0.66670258869544341
sg34
g753
(S'\x07\xdf\x07\x04\r\x01\x03\x06h\xa0'
tRp2520
sa(dp2521
S'trial_loop.thisTrialN'
p2522
I116
sg895
g1080
sS'block_loop.thisIndex'
p2523
g889
sg38
S'right'
p2524
sg59
g63
sS'trial_loop.thisN'
p2525
I116
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2526
g60
(g99
S't\x00\x00\x00'
tRp2527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2528
I0
sg904
g1088
sS'block_loop.thisRepN'
p2529
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2530
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2531
Nsg70
Vn
sS'block_loop.thisTrialN'
p2532
I0
sg39
F0.78333457349799573
sg34
g753
(S'\x07\xdf\x07\x04\r\x01\t\x01\xf7\xe8'
tRp2533
sa(dp2534
S'trial_loop.thisTrialN'
p2535
I117
sg895
g1895
sS'block_loop.thisIndex'
p2536
g889
sg38
S'left'
p2537
sg59
g63
sS'trial_loop.thisN'
p2538
I117
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p2539
g60
(g99
S'u\x00\x00\x00'
tRp2540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2541
I0
sg904
g1902
sS'block_loop.thisRepN'
p2542
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2543
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p2544
Nsg70
Vn
sS'block_loop.thisTrialN'
p2545
I0
sg39
F1.1000126297285533
sg34
g753
(S'\x07\xdf\x07\x04\r\x01\x0e\x0e<\x88'
tRp2546
sa(dp2547
S'trial_loop.thisTrialN'
p2548
I118
sg895
g1569
sS'block_loop.thisIndex'
p2549
g889
sg38
S'left'
p2550
sg59
g63
sS'trial_loop.thisN'
p2551
I118
sg33
g1091
sg64
g65
sS'trial_loop.thisIndex'
p2552
g60
(g99
S'v\x00\x00\x00'
tRp2553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2554
I0
sg904
g1576
sS'block_loop.thisRepN'
p2555
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2556
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2557
Nsg70
Vn
sS'block_loop.thisTrialN'
p2558
I0
sg39
F0.79997559582807298
sg34
g753
(S'\x07\xdf\x07\x04\r\x01\x15\x00\xf6\x18'
tRp2559
sa(dp2560
S'trial_loop.thisTrialN'
p2561
I119
sg895
g1841
sS'block_loop.thisIndex'
p2562
g889
sg38
S'left'
p2563
sg59
g63
sS'trial_loop.thisN'
p2564
I119
sg33
g1563
sg64
g65
sS'trial_loop.thisIndex'
p2565
g60
(g99
S'w\x00\x00\x00'
tRp2566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2567
I0
sg904
g1848
sS'block_loop.thisRepN'
p2568
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2569
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2570
Nsg70
Vn
sS'block_loop.thisTrialN'
p2571
I0
sg39
F0.76663225564334425
sg34
g753
(S'\x07\xdf\x07\x04\r\x01\x1a\r\xb3\xd0'
tRp2572
sa(dp2573
S'trial_loop.thisTrialN'
p2574
I120
sg895
g1221
sS'block_loop.thisIndex'
p2575
g889
sg38
S'right'
p2576
sg59
g63
sS'trial_loop.thisN'
p2577
I120
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p2578
g60
(g99
S'x\x00\x00\x00'
tRp2579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2580
I0
sg904
g1228
sS'block_loop.thisRepN'
p2581
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2582
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p2583
Nsg70
Vn
sS'block_loop.thisTrialN'
p2584
I0
sg39
F0.85002809615798469
sg34
g753
(S'\x07\xdf\x07\x04\r\x01 \n\xb2H'
tRp2585
sa(dp2586
S'trial_loop.thisTrialN'
p2587
I121
sg895
g1283
sS'block_loop.thisIndex'
p2588
g889
sg38
S'right'
p2589
sg59
g63
sS'trial_loop.thisN'
p2590
I121
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p2591
g60
(g99
S'y\x00\x00\x00'
tRp2592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2593
I0
sg904
g1291
sS'block_loop.thisRepN'
p2594
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2595
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p2596
Nsg70
Vn
sS'block_loop.thisTrialN'
p2597
I0
sg39
F0.68333676873407967
sg34
g753
(S'\x07\xdf\x07\x04\r\x01&\x08\xe1p'
tRp2598
sa(dp2599
S'trial_loop.thisTrialN'
p2600
I122
sg895
g1112
sS'block_loop.thisIndex'
p2601
g889
sg38
S'left'
p2602
sg59
g63
sS'trial_loop.thisN'
p2603
I122
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2604
g60
(g99
S'z\x00\x00\x00'
tRp2605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2606
I0
sg904
g1120
sS'block_loop.thisRepN'
p2607
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2608
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2609
Nsg70
Vn
sS'block_loop.thisTrialN'
p2610
I0
sg39
F0.84989809262515337
sg34
g753
(S'\x07\xdf\x07\x04\r\x01,\x04\xaf8'
tRp2611
sa(dp2612
S'trial_loop.thisTrialN'
p2613
I123
sg895
g1895
sS'block_loop.thisIndex'
p2614
g889
sg38
S'left'
p2615
sg59
g63
sS'trial_loop.thisN'
p2616
I123
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p2617
g60
(g99
S'{\x00\x00\x00'
tRp2618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2619
I0
sg904
g1902
sS'block_loop.thisRepN'
p2620
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2621
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p2622
Nsg70
Vn
sS'block_loop.thisTrialN'
p2623
I0
sg39
F1.2499945119125186
sg34
g753
(S'\x07\xdf\x07\x04\r\x012\x02\xe2H'
tRp2624
sa(dp2625
S'trial_loop.thisTrialN'
p2626
I124
sg895
g1552
sS'block_loop.thisIndex'
p2627
g889
sg38
S'right'
p2628
sg59
g63
sS'trial_loop.thisN'
p2629
I124
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2630
g60
(g99
S'|\x00\x00\x00'
tRp2631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2632
I0
sg904
g1560
sS'block_loop.thisRepN'
p2633
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2634
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2635
Nsg70
Vn
sS'block_loop.thisTrialN'
p2636
I0
sg39
F0.91657251388915029
sg34
g753
(S'\x07\xdf\x07\x04\r\x018\x07?x'
tRp2637
sa(dp2638
S'trial_loop.thisTrialN'
p2639
I125
sg895
g1440
sS'block_loop.thisIndex'
p2640
g889
sg38
S'left'
p2641
sg59
g63
sS'trial_loop.thisN'
p2642
I125
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p2643
g60
(g99
S'}\x00\x00\x00'
tRp2644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2645
I0
sg904
g1448
sS'block_loop.thisRepN'
p2646
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2647
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p2648
Nsg70
Vn
sS'block_loop.thisTrialN'
p2649
I0
sg39
F0.84998419145722437
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x02\x06d\xb8'
tRp2650
sa(dp2651
S'trial_loop.thisTrialN'
p2652
I126
sg895
g1640
sS'block_loop.thisIndex'
p2653
g889
sg38
S'right'
p2654
sg59
g63
sS'trial_loop.thisN'
p2655
I126
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p2656
g60
(g99
S'~\x00\x00\x00'
tRp2657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2658
I0
sg904
g1647
sS'block_loop.thisRepN'
p2659
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2660
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p2661
Nsg70
Vn
sS'block_loop.thisTrialN'
p2662
I0
sg39
F0.95026538111414993
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x08\x04\x93\xe0'
tRp2663
sa(dp2664
S'trial_loop.thisTrialN'
p2665
I127
sg895
g1172
sS'block_loop.thisIndex'
p2666
g889
sg38
S'right'
p2667
sg59
g63
sS'trial_loop.thisN'
p2668
I127
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p2669
g60
(g99
S'\x7f\x00\x00\x00'
tRp2670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2671
I0
sg904
g1180
sS'block_loop.thisRepN'
p2672
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2673
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p2674
Nsg70
Vn
sS'block_loop.thisTrialN'
p2675
I0
sg39
F1.0498880002460282
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x0e\x04p\xb8'
tRp2676
sa(dp2677
S'trial_loop.thisTrialN'
p2678
I128
sg895
g1283
sS'block_loop.thisIndex'
p2679
g889
sg38
S'right'
p2680
sg59
g63
sS'trial_loop.thisN'
p2681
I128
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p2682
g60
(g99
S'\x80\x00\x00\x00'
tRp2683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2684
I0
sg904
g1291
sS'block_loop.thisRepN'
p2685
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2686
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p2687
Nsg70
Vn
sS'block_loop.thisTrialN'
p2688
I0
sg39
F0.69990651719672314
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x14\x05\xb8\xd8'
tRp2689
sa(dp2690
S'trial_loop.thisTrialN'
p2691
I129
sg895
g1356
sS'block_loop.thisIndex'
p2692
g889
sg38
S'right'
p2693
sg59
g63
sS'trial_loop.thisN'
p2694
I129
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p2695
g60
(g99
S'\x81\x00\x00\x00'
tRp2696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2697
I0
sg904
g1363
sS'block_loop.thisRepN'
p2698
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2699
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p2700
Nsg70
Vn
sS'block_loop.thisTrialN'
p2701
I0
sg39
F0.78331148076631507
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x1a\x01\x86\xa0'
tRp2702
sa(dp2703
S'trial_loop.thisTrialN'
p2704
I130
sg895
S'25-kitkat.png'
p2705
sS'block_loop.thisIndex'
p2706
g889
sg38
S'left'
p2707
sg59
g63
sS'trial_loop.thisN'
p2708
I130
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2709
g60
(g99
S'\x82\x00\x00\x00'
tRp2710
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2711
I0
sg904
S'31-hobnobs.png'
p2712
sS'block_loop.thisRepN'
p2713
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2714
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2715
Nsg70
Vn
sS'block_loop.thisTrialN'
p2716
I0
sg39
F1.3833302400471439
sg34
g753
(S'\x07\xdf\x07\x04\r\x02\x1f\x0e\x05\xd8'
tRp2717
sa(dp2718
S'trial_loop.thisTrialN'
p2719
I131
sg895
g1483
sS'block_loop.thisIndex'
p2720
g889
sg38
S'right'
p2721
sg59
g63
sS'trial_loop.thisN'
p2722
I131
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p2723
g60
(g99
S'\x83\x00\x00\x00'
tRp2724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2725
I0
sg904
g1490
sS'block_loop.thisRepN'
p2726
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2727
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p2728
Nsg70
Vn
sS'block_loop.thisTrialN'
p2729
I0
sg39
F1.0169976767565458
sg34
g753
(S'\x07\xdf\x07\x04\r\x02&\x05\t\x10'
tRp2730
sa(dp2731
S'trial_loop.thisTrialN'
p2732
I132
sg895
g1189
sS'block_loop.thisIndex'
p2733
g889
sg38
S'right'
p2734
sg59
g63
sS'trial_loop.thisN'
p2735
I132
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p2736
g60
(g99
S'\x84\x00\x00\x00'
tRp2737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2738
I0
sg904
g1197
sS'block_loop.thisRepN'
p2739
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2740
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p2741
Nsg70
Vn
sS'block_loop.thisTrialN'
p2742
I0
sg39
F2.2166332107144626
sg34
g753
(S'\x07\xdf\x07\x04\r\x02,\x05\xd8\x18'
tRp2743
sa(dp2744
S'trial_loop.thisTrialN'
p2745
I133
sg895
g1841
sS'block_loop.thisIndex'
p2746
g889
sg38
S'left'
p2747
sg59
g63
sS'trial_loop.thisN'
p2748
I133
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p2749
g60
(g99
S'\x85\x00\x00\x00'
tRp2750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2751
I0
sg904
g1848
sS'block_loop.thisRepN'
p2752
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2753
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p2754
Nsg70
Vn
sS'block_loop.thisTrialN'
p2755
I0
sg39
F0.89997169002072042
sg34
g753
(S'\x07\xdf\x07\x04\r\x023\t\xb8H'
tRp2756
sa(dp2757
S'trial_loop.thisTrialN'
p2758
I134
sg895
g1300
sS'block_loop.thisIndex'
p2759
g889
sg38
S'left'
p2760
sg59
g63
sS'trial_loop.thisN'
p2761
I134
sg33
g1153
sg64
g65
sS'trial_loop.thisIndex'
p2762
g60
(g99
S'\x86\x00\x00\x00'
tRp2763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2764
I0
sg904
g1307
sS'block_loop.thisRepN'
p2765
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2766
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p2767
Nsg70
Vn
sS'block_loop.thisTrialN'
p2768
I0
sg39
F0.84991918969080871
sg34
g753
(S'\x07\xdf\x07\x04\r\x029\x08\x9f\x08'
tRp2769
sa(dp2770
S'trial_loop.thisTrialN'
p2771
I135
sg895
g1371
sS'block_loop.thisIndex'
p2772
g889
sg38
S'left'
p2773
sg59
g63
sS'trial_loop.thisN'
p2774
I135
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p2775
g60
(g99
S'\x87\x00\x00\x00'
tRp2776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2777
I0
sg904
g1379
sS'block_loop.thisRepN'
p2778
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2779
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2780
Nsg70
Vn
sS'block_loop.thisTrialN'
p2781
I0
sg39
F0.93324888805636874
sg34
g753
(S'\x07\xdf\x07\x04\r\x03\x03\x06\xce0'
tRp2782
sa(dp2783
S'trial_loop.thisTrialN'
p2784
I136
sg895
g933
sS'block_loop.thisIndex'
p2785
g889
sg38
S'left'
p2786
sg59
g63
sS'trial_loop.thisN'
p2787
I136
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p2788
g60
(g99
S'\x88\x00\x00\x00'
tRp2789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2790
I0
sg904
g941
sS'block_loop.thisRepN'
p2791
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2792
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p2793
Nsg70
Vn
sS'block_loop.thisTrialN'
p2794
I0
sg39
F0.81699180379018799
sg34
g753
(S'\x07\xdf\x07\x04\r\x03\t\x06l\x88'
tRp2795
sa(dp2796
S'trial_loop.thisTrialN'
p2797
I137
sg895
g2705
sS'block_loop.thisIndex'
p2798
g889
sg38
S'left'
p2799
sg59
g63
sS'trial_loop.thisN'
p2800
I137
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2801
g60
(g99
S'\x89\x00\x00\x00'
tRp2802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2803
I0
sg904
g2712
sS'block_loop.thisRepN'
p2804
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2805
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2806
Nsg70
Vn
sS'block_loop.thisTrialN'
p2807
I0
sg39
F0.73332483748799859
sg34
g753
(S'\x07\xdf\x07\x04\r\x03\x0f\x04"\x98'
tRp2808
sa(dp2809
S'trial_loop.thisTrialN'
p2810
I138
sg895
g1569
sS'block_loop.thisIndex'
p2811
g889
sg38
S'left'
p2812
sg59
g63
sS'trial_loop.thisN'
p2813
I138
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p2814
g60
(g99
S'\x8a\x00\x00\x00'
tRp2815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2816
I0
sg904
g1576
sS'block_loop.thisRepN'
p2817
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2818
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p2819
Nsg70
Vn
sS'block_loop.thisTrialN'
p2820
I0
sg39
F0.68324468289756624
sg34
g753
(S'\x07\xdf\x07\x04\r\x03\x15\x00\xa7\xf8'
tRp2821
sa(dp2822
S'trial_loop.thisTrialN'
p2823
I139
sg895
g967
sS'block_loop.thisIndex'
p2824
g889
sg38
S'left'
p2825
sg59
g63
sS'trial_loop.thisN'
p2826
I139
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2827
g60
(g99
S'\x8b\x00\x00\x00'
tRp2828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2829
I0
sg904
g975
sS'block_loop.thisRepN'
p2830
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2831
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p2832
Nsg70
Vn
sS'block_loop.thisTrialN'
p2833
I0
sg39
F1.0666484775765639
sg34
g753
(S'\x07\xdf\x07\x04\r\x03\x1a\x0b}h'
tRp2834
sa(dp2835
S'trial_loop.thisTrialN'
p2836
I140
sg895
g1511
sS'block_loop.thisIndex'
p2837
g889
sg38
S'left'
p2838
sg59
g63
sS'trial_loop.thisN'
p2839
I140
sg33
g1035
sg64
g65
sS'trial_loop.thisIndex'
p2840
g60
(g99
S'\x8c\x00\x00\x00'
tRp2841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2842
I0
sg904
g1518
sS'block_loop.thisRepN'
p2843
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2844
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p2845
Nsg70
Vn
sS'block_loop.thisTrialN'
p2846
I0
sg39
F0.68334703217078641
sg34
g753
(S'\x07\xdf\x07\x04\r\x03 \r\x00 '
tRp2847
sa(dp2848
S'trial_loop.thisTrialN'
p2849
I141
sg895
g1800
sS'block_loop.thisIndex'
p2850
g889
sg38
S'right'
p2851
sg59
g63
sS'trial_loop.thisN'
p2852
I141
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2853
g60
(g99
S'\x8d\x00\x00\x00'
tRp2854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2855
I0
sg904
g1807
sS'block_loop.thisRepN'
p2856
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2857
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2858
Nsg70
Vn
sS'block_loop.thisTrialN'
p2859
I0
sg39
F1.0332789086087359
sg34
g753
(S'\x07\xdf\x07\x04\r\x03&\x08\xd1\xd0'
tRp2860
sa(dp2861
S'trial_loop.thisTrialN'
p2862
I142
sg895
S'8-liquorice_catherine_wheels.png'
p2863
sS'block_loop.thisIndex'
p2864
g889
sg38
S'right'
p2865
sg59
g63
sS'trial_loop.thisN'
p2866
I142
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p2867
g60
(g99
S'\x8e\x00\x00\x00'
tRp2868
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2869
I0
sg904
S'17-jacobs_mini_cheddars_redo.png'
p2870
sS'block_loop.thisRepN'
p2871
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2872
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p2873
Nsg70
Vn
sS'block_loop.thisTrialN'
p2874
I0
sg39
F0.96665551943442551
sg34
g753
(S'\x07\xdf\x07\x04\r\x03,\t\x9c\xf0'
tRp2875
sa(dp2876
S'trial_loop.thisTrialN'
p2877
I143
sg895
g1189
sS'block_loop.thisIndex'
p2878
g889
sg38
S'right'
p2879
sg59
g63
sS'trial_loop.thisN'
p2880
I143
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p2881
g60
(g99
S'\x8f\x00\x00\x00'
tRp2882
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2883
I0
sg904
g1197
sS'block_loop.thisRepN'
p2884
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2885
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p2886
Nsg70
Vn
sS'block_loop.thisTrialN'
p2887
I0
sg39
F1.9999421256206915
sg34
g753
(S'\x07\xdf\x07\x04\r\x032\t\xb4`'
tRp2888
sa(dp2889
S'trial_loop.thisTrialN'
p2890
I144
sg895
g1048
sS'block_loop.thisIndex'
p2891
g889
sg38
S'right'
p2892
sg59
g63
sS'trial_loop.thisN'
p2893
I144
sg33
g900
sg64
g65
sS'trial_loop.thisIndex'
p2894
g60
(g99
S'\x90\x00\x00\x00'
tRp2895
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2896
I0
sg904
g1055
sS'block_loop.thisRepN'
p2897
I0
sg907
g900
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2898
I0
sg909
g910
sg55
g11
sS'block_loop.thisTrial'
p2899
Nsg70
Vn
sS'block_loop.thisTrialN'
p2900
I0
sg39
F0.86667539058726106
sg34
g753
(S'\x07\xdf\x07\x04\r\x039\nA\x00'
tRp2901
sa(dp2902
S'trial_loop.thisTrialN'
p2903
I145
sg895
g1895
sS'block_loop.thisIndex'
p2904
g889
sg38
S'left'
p2905
sg59
g63
sS'trial_loop.thisN'
p2906
I145
sg33
g1263
sg64
g65
sS'trial_loop.thisIndex'
p2907
g60
(g99
S'\x91\x00\x00\x00'
tRp2908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2909
I0
sg904
g1902
sS'block_loop.thisRepN'
p2910
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2911
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p2912
Nsg70
Vn
sS'block_loop.thisTrialN'
p2913
I0
sg39
F0.86665343823642615
sg34
g753
(S'\x07\xdf\x07\x04\r\x04\x03\x08\xae\xa8'
tRp2914
sa(dp2915
S'trial_loop.thisTrialN'
p2916
I146
sg895
g1440
sS'block_loop.thisIndex'
p2917
g889
sg38
S'left'
p2918
sg59
g63
sS'trial_loop.thisN'
p2919
I146
sg33
g1451
sg64
g65
sS'trial_loop.thisIndex'
p2920
g60
(g99
S'\x92\x00\x00\x00'
tRp2921
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2922
I0
sg904
g1448
sS'block_loop.thisRepN'
p2923
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2924
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p2925
Nsg70
Vn
sS'block_loop.thisTrialN'
p2926
I0
sg39
F0.7333268331567524
sg34
g753
(S'\x07\xdf\x07\x04\r\x04\t\x07\x1cP'
tRp2927
sa(dp2928
S'trial_loop.thisTrialN'
p2929
I147
sg895
g997
sS'block_loop.thisIndex'
p2930
g889
sg38
S'right'
p2931
sg59
g63
sS'trial_loop.thisN'
p2932
I147
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p2933
g60
(g99
S'\x93\x00\x00\x00'
tRp2934
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2935
I0
sg904
g1005
sS'block_loop.thisRepN'
p2936
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2937
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p2938
Nsg70
Vn
sS'block_loop.thisTrialN'
p2939
I0
sg39
F0.7166735517221241
sg34
g753
(S'\x07\xdf\x07\x04\r\x04\x0f\x03\xa1\xb0'
tRp2940
sa(dp2941
S'trial_loop.thisTrialN'
p2942
I148
sg895
g1206
sS'block_loop.thisIndex'
p2943
g889
sg38
S'left'
p2944
sg59
g63
sS'trial_loop.thisN'
p2945
I148
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p2946
g60
(g99
S'\x94\x00\x00\x00'
tRp2947
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2948
I0
sg904
g1213
sS'block_loop.thisRepN'
p2949
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2950
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p2951
Nsg70
Vn
sS'block_loop.thisTrialN'
p2952
I0
sg39
F0.78330691923838458
sg34
g753
(S'\x07\xdf\x07\x04\r\x04\x14\x0f*\xd0'
tRp2953
sa(dp2954
S'trial_loop.thisTrialN'
p2955
I149
sg895
g1800
sS'block_loop.thisIndex'
p2956
g889
sg38
S'right'
p2957
sg59
g63
sS'trial_loop.thisN'
p2958
I149
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p2959
g60
(g99
S'\x95\x00\x00\x00'
tRp2960
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2961
I0
sg904
g1807
sS'block_loop.thisRepN'
p2962
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2963
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p2964
Nsg70
Vn
sS'block_loop.thisTrialN'
p2965
I0
sg39
F1.0498606310820833
sg34
g753
(S'\x07\xdf\x07\x04\r\x04\x1a\x0c)H'
tRp2966
sa(dp2967
S'trial_loop.thisTrialN'
p2968
I150
sg895
g2705
sS'block_loop.thisIndex'
p2969
g889
sg38
S'left'
p2970
sg59
g63
sS'trial_loop.thisN'
p2971
I150
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p2972
g60
(g99
S'\x96\x00\x00\x00'
tRp2973
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2974
I0
sg904
g2712
sS'block_loop.thisRepN'
p2975
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2976
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p2977
Nsg70
Vn
sS'block_loop.thisTrialN'
p2978
I0
sg39
F0.74996443434065441
sg34
g753
(S'\x07\xdf\x07\x04\r\x04 \rqh'
tRp2979
sa(dp2980
S'trial_loop.thisTrialN'
p2981
I151
sg895
g1063
sS'block_loop.thisIndex'
p2982
g889
sg38
S'left'
p2983
sg59
g63
sS'trial_loop.thisN'
p2984
I151
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p2985
g60
(g99
S'\x97\x00\x00\x00'
tRp2986
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p2987
I0
sg904
g1071
sS'block_loop.thisRepN'
p2988
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p2989
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p2990
Nsg70
Vn
sS'block_loop.thisTrialN'
p2991
I0
sg39
F0.86636178557637322
sg34
g753
(S'\x07\xdf\x07\x04\r\x04&\n5H'
tRp2992
sa(dp2993
S'trial_loop.thisTrialN'
p2994
I152
sg895
g967
sS'block_loop.thisIndex'
p2995
g889
sg38
S'left'
p2996
sg59
g63
sS'trial_loop.thisN'
p2997
I152
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p2998
g60
(g99
S'\x98\x00\x00\x00'
tRp2999
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3000
I0
sg904
g975
sS'block_loop.thisRepN'
p3001
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3002
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p3003
Nsg70
Vn
sS'block_loop.thisTrialN'
p3004
I0
sg39
F0.76667273919974832
sg34
g753
(S'\x07\xdf\x07\x04\r\x04,\x08\xa2\xf0'
tRp3005
sa(dp3006
S'trial_loop.thisTrialN'
p3007
I153
sg895
g2863
sS'block_loop.thisIndex'
p3008
g889
sg38
S'right'
p3009
sg59
g63
sS'trial_loop.thisN'
p3010
I153
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p3011
g60
(g99
S'\x99\x00\x00\x00'
tRp3012
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3013
I0
sg904
g2870
sS'block_loop.thisRepN'
p3014
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3015
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3016
Nsg70
Vn
sS'block_loop.thisTrialN'
p3017
I0
sg39
F1.0668186795683141
sg34
g753
(S'\x07\xdf\x07\x04\r\x042\x05\xa1h'
tRp3018
sa(dp3019
S'trial_loop.thisTrialN'
p3020
I154
sg895
g1625
sS'block_loop.thisIndex'
p3021
g889
sg38
S'left'
p3022
sg59
g63
sS'trial_loop.thisN'
p3023
I154
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p3024
g60
(g99
S'\x9a\x00\x00\x00'
tRp3025
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3026
I0
sg904
g1632
sS'block_loop.thisRepN'
p3027
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3028
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p3029
Nsg70
Vn
sS'block_loop.thisTrialN'
p3030
I0
sg39
F1.3832162018616145
sg34
g753
(S'\x07\xdf\x07\x04\r\x048\x07(\x08'
tRp3031
sa(dp3032
S'trial_loop.thisTrialN'
p3033
I155
sg895
g1112
sS'block_loop.thisIndex'
p3034
g889
sg38
S'left'
p3035
sg59
g63
sS'trial_loop.thisN'
p3036
I155
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3037
g60
(g99
S'\x9b\x00\x00\x00'
tRp3038
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3039
I0
sg904
g1120
sS'block_loop.thisRepN'
p3040
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3041
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3042
Nsg70
Vn
sS'block_loop.thisTrialN'
p3043
I0
sg39
F0.76658122355638625
sg34
g753
(S'\x07\xdf\x07\x04\r\x05\x02\rm\x80'
tRp3044
sa(dp3045
S'trial_loop.thisTrialN'
p3046
I156
sg895
g933
sS'block_loop.thisIndex'
p3047
g889
sg38
S'left'
p3048
sg59
g63
sS'trial_loop.thisN'
p3049
I156
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3050
g60
(g99
S'\x9c\x00\x00\x00'
tRp3051
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3052
I0
sg904
g941
sS'block_loop.thisRepN'
p3053
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3054
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3055
Nsg70
Vn
sS'block_loop.thisTrialN'
p3056
I0
sg39
F0.79991886183051975
sg34
g753
(S'\x07\xdf\x07\x04\r\x05\x08\nk\xf8'
tRp3057
sa(dp3058
S'trial_loop.thisTrialN'
p3059
I157
sg895
g1221
sS'block_loop.thisIndex'
p3060
g889
sg38
S'right'
p3061
sg59
g63
sS'trial_loop.thisN'
p3062
I157
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p3063
g60
(g99
S'\x9d\x00\x00\x00'
tRp3064
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3065
I0
sg904
g1228
sS'block_loop.thisRepN'
p3066
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3067
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p3068
Nsg70
Vn
sS'block_loop.thisTrialN'
p3069
I0
sg39
F0.98295015077292192
sg34
g753
(S'\x07\xdf\x07\x04\r\x05\x0e\x07\xe7p'
tRp3070
sa(dp3071
S'trial_loop.thisTrialN'
p3072
I158
sg895
g1371
sS'block_loop.thisIndex'
p3073
g889
sg38
S'left'
p3074
sg59
g63
sS'trial_loop.thisN'
p3075
I158
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p3076
g60
(g99
S'\x9e\x00\x00\x00'
tRp3077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3078
I0
sg904
g1379
sS'block_loop.thisRepN'
p3079
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3080
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3081
Nsg70
Vn
sS'block_loop.thisTrialN'
p3082
I0
sg39
F0.83335628351869673
sg34
g753
(S'\x07\xdf\x07\x04\r\x05\x14\x089x'
tRp3083
sa(dp3084
S'trial_loop.thisTrialN'
p3085
I159
sg895
g1236
sS'block_loop.thisIndex'
p3086
g889
sg38
S'left'
p3087
sg59
g63
sS'trial_loop.thisN'
p3088
I159
sg33
g1240
sg64
g65
sS'trial_loop.thisIndex'
p3089
g60
(g99
S'\x9f\x00\x00\x00'
tRp3090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3091
I0
sg904
g1244
sS'block_loop.thisRepN'
p3092
I0
sg907
g1240
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3093
I0
sg909
g1247
sg55
g11
sS'block_loop.thisTrial'
p3094
Nsg70
Vn
sS'block_loop.thisTrialN'
p3095
I0
sg39
F0.69990708738805552
sg34
g753
(S'\x07\xdf\x07\x04\r\x05\x1a\x06.\x08'
tRp3096
sa(dp3097
S'trial_loop.thisTrialN'
p3098
I160
sg895
g1253
sS'block_loop.thisIndex'
p3099
g889
sg38
S'right'
p3100
sg59
g63
sS'trial_loop.thisN'
p3101
I160
sg33
g1257
sg64
g65
sS'trial_loop.thisIndex'
p3102
g60
(g99
S'\xa0\x00\x00\x00'
tRp3103
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3104
I0
sg904
g1261
sS'block_loop.thisRepN'
p3105
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3106
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p3107
Nsg70
Vn
sS'block_loop.thisTrialN'
p3108
I0
sg39
F0.96661560606844432
sg34
g753
(S'\x07\xdf\x07\x04\r\x05 \x01\xfb\xd0'
tRp3109
sa(dp3110
S'trial_loop.thisTrialN'
p3111
I161
sg895
g1511
sS'block_loop.thisIndex'
p3112
g889
sg38
S'left'
p3113
sg59
g63
sS'trial_loop.thisN'
p3114
I161
sg33
g1042
sg64
g65
sS'trial_loop.thisIndex'
p3115
g60
(g99
S'\xa1\x00\x00\x00'
tRp3116
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3117
I0
sg904
g1518
sS'block_loop.thisRepN'
p3118
I0
sg907
g1035
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3119
I0
sg909
g1042
sg55
g11
sS'block_loop.thisTrial'
p3120
Nsg70
Vn
sS'block_loop.thisTrialN'
p3121
I0
sg39
F0.71662080906116898
sg34
g753
(S'\x07\xdf\x07\x04\r\x05&\x02\x13@'
tRp3122
sa(dp3123
S'trial_loop.thisTrialN'
p3124
I162
sg895
g1440
sS'block_loop.thisIndex'
p3125
g889
sg38
S'left'
p3126
sg59
g63
sS'trial_loop.thisN'
p3127
I162
sg33
g1451
sg64
g65
sS'trial_loop.thisIndex'
p3128
g60
(g99
S'\xa2\x00\x00\x00'
tRp3129
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3130
I0
sg904
g1448
sS'block_loop.thisRepN'
p3131
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3132
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p3133
Nsg70
Vn
sS'block_loop.thisTrialN'
p3134
I0
sg39
F0.78327840969177487
sg34
g753
(S'\x07\xdf\x07\x04\r\x05+\r\xa0H'
tRp3135
sa(dp3136
S'trial_loop.thisTrialN'
p3137
I163
sg895
g1895
sS'block_loop.thisIndex'
p3138
g889
sg38
S'left'
p3139
sg59
g63
sS'trial_loop.thisN'
p3140
I163
sg33
g1257
sg64
g65
sS'trial_loop.thisIndex'
p3141
g60
(g99
S'\xa3\x00\x00\x00'
tRp3142
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3143
I0
sg904
g1902
sS'block_loop.thisRepN'
p3144
I0
sg907
g1263
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3145
I0
sg909
g1257
sg55
g11
sS'block_loop.thisTrial'
p3146
Nsg70
Vn
sS'block_loop.thisTrialN'
p3147
I0
sg39
F0.71658859327362734
sg34
g753
(S'\x07\xdf\x07\x04\r\x051\n\x9e\xc0'
tRp3148
sa(dp3149
S'trial_loop.thisTrialN'
p3150
I164
sg895
g2027
sS'block_loop.thisIndex'
p3151
g889
sg38
S'left'
p3152
sg59
g63
sS'trial_loop.thisN'
p3153
I164
sg33
g1008
sg64
g65
sS'trial_loop.thisIndex'
p3154
g60
(g99
S'\xa4\x00\x00\x00'
tRp3155
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3156
I0
sg904
g2034
sS'block_loop.thisRepN'
p3157
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3158
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3159
Nsg70
Vn
sS'block_loop.thisTrialN'
p3160
I0
sg39
F0.6836880063474382
sg34
g753
(S'\x07\xdf\x07\x04\r\x057\x06\xe5\xa0'
tRp3161
sa(dp3162
S'trial_loop.thisTrialN'
p3163
I165
sg895
g1142
sS'block_loop.thisIndex'
p3164
g889
sg38
S'right'
p3165
sg59
g63
sS'trial_loop.thisN'
p3166
I165
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3167
g60
(g99
S'\xa5\x00\x00\x00'
tRp3168
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3169
I0
sg904
g1150
sS'block_loop.thisRepN'
p3170
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3171
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3172
Nsg70
Vn
sS'block_loop.thisTrialN'
p3173
I0
sg39
F1.0833265623159605
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\x01\x02x\xd0'
tRp3174
sa(dp3175
S'trial_loop.thisTrialN'
p3176
I166
sg895
g1014
sS'block_loop.thisIndex'
p3177
g889
sg38
S'left'
p3178
sg59
g63
sS'trial_loop.thisN'
p3179
I166
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3180
g60
(g99
S'\xa6\x00\x00\x00'
tRp3181
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3182
I0
sg904
g1022
sS'block_loop.thisRepN'
p3183
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3184
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3185
Nsg70
Vn
sS'block_loop.thisTrialN'
p3186
I0
sg39
F0.71668495554058609
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\x07\x04x\x88'
tRp3187
sa(dp3188
S'trial_loop.thisTrialN'
p3189
I167
sg895
g1063
sS'block_loop.thisIndex'
p3190
g889
sg38
S'left'
p3191
sg59
g63
sS'trial_loop.thisN'
p3192
I167
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p3193
g60
(g99
S'\xa7\x00\x00\x00'
tRp3194
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3195
I0
sg904
g1071
sS'block_loop.thisRepN'
p3196
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3197
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p3198
Nsg70
Vn
sS'block_loop.thisTrialN'
p3199
I0
sg39
F0.9496373158035567
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\r\x00\x84\xd0'
tRp3200
sa(dp3201
S'trial_loop.thisTrialN'
p3202
I168
sg895
g1640
sS'block_loop.thisIndex'
p3203
g889
sg38
S'right'
p3204
sg59
g63
sS'trial_loop.thisN'
p3205
I168
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3206
g60
(g99
S'\xa8\x00\x00\x00'
tRp3207
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3208
I0
sg904
g1647
sS'block_loop.thisRepN'
p3209
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3210
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3211
Nsg70
Vn
sS'block_loop.thisTrialN'
p3212
I0
sg39
F0.93308980478650483
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\x13\x00]\xc0'
tRp3213
sa(dp3214
S'trial_loop.thisTrialN'
p3215
I169
sg895
g1300
sS'block_loop.thisIndex'
p3216
g889
sg38
S'left'
p3217
sg59
g63
sS'trial_loop.thisN'
p3218
I169
sg33
g1146
sg64
g65
sS'trial_loop.thisIndex'
p3219
g60
(g99
S'\xa9\x00\x00\x00'
tRp3220
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3221
I0
sg904
g1307
sS'block_loop.thisRepN'
p3222
I0
sg907
g1146
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3223
I0
sg909
g1153
sg55
g11
sS'block_loop.thisTrial'
p3224
Nsg70
Vn
sS'block_loop.thisTrialN'
p3225
I0
sg39
F0.83334288403148093
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\x18\x0e\xff\xd8'
tRp3226
sa(dp3227
S'trial_loop.thisTrialN'
p3228
I170
sg895
g2863
sS'block_loop.thisIndex'
p3229
g889
sg38
S'right'
p3230
sg59
g63
sS'trial_loop.thisN'
p3231
I170
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p3232
g60
(g99
S'\xaa\x00\x00\x00'
tRp3233
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3234
I0
sg904
g2870
sS'block_loop.thisRepN'
p3235
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3236
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3237
Nsg70
Vn
sS'block_loop.thisTrialN'
p3238
I0
sg39
F0.78371175479969679
sg34
g753
(S'\x07\xdf\x07\x04\r\x06\x1e\x0c\xf4h'
tRp3239
sa(dp3240
S'trial_loop.thisTrialN'
p3241
I171
sg895
g1640
sS'block_loop.thisIndex'
p3242
g889
sg38
S'right'
p3243
sg59
g63
sS'trial_loop.thisN'
p3244
I171
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3245
g60
(g99
S'\xab\x00\x00\x00'
tRp3246
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3247
I0
sg904
g1647
sS'block_loop.thisRepN'
p3248
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3249
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3250
Nsg70
Vn
sS'block_loop.thisTrialN'
p3251
I0
sg39
F0.81650514583088807
sg34
g753
(S'\x07\xdf\x07\x04\r\x06$\n1`'
tRp3252
sa(dp3253
S'trial_loop.thisTrialN'
p3254
I172
sg895
g1610
sS'block_loop.thisIndex'
p3255
g889
sg38
S'right'
p3256
sg59
g63
sS'trial_loop.thisN'
p3257
I172
sg33
g1200
sg64
g65
sS'trial_loop.thisIndex'
p3258
g60
(g99
S'\xac\x00\x00\x00'
tRp3259
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3260
I0
sg904
g1617
sS'block_loop.thisRepN'
p3261
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3262
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3263
Nsg70
Vn
sS'block_loop.thisTrialN'
p3264
I0
sg39
F1.2832400643519577
sg34
g753
(S'\x07\xdf\x07\x04\r\x06*\x07\xe7p'
tRp3265
sa(dp3266
S'trial_loop.thisTrialN'
p3267
I173
sg895
g1172
sS'block_loop.thisIndex'
p3268
g889
sg38
S'right'
p3269
sg59
g63
sS'trial_loop.thisN'
p3270
I173
sg33
g1183
sg64
g65
sS'trial_loop.thisIndex'
p3271
g60
(g99
S'\xad\x00\x00\x00'
tRp3272
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3273
I0
sg904
g1180
sS'block_loop.thisRepN'
p3274
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3275
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p3276
Nsg70
Vn
sS'block_loop.thisTrialN'
p3277
I0
sg39
F0.88334634794136946
sg34
g753
(S'\x07\xdf\x07\x04\r\x060\x0c\xc1\xa0'
tRp3278
sa(dp3279
S'trial_loop.thisTrialN'
p3280
I174
sg895
g2863
sS'block_loop.thisIndex'
p3281
g889
sg38
S'right'
p3282
sg59
g63
sS'trial_loop.thisN'
p3283
I174
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p3284
g60
(g99
S'\xae\x00\x00\x00'
tRp3285
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3286
I0
sg904
g2870
sS'block_loop.thisRepN'
p3287
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3288
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3289
Nsg70
Vn
sS'block_loop.thisTrialN'
p3290
I0
sg39
F0.78333599897541717
sg34
g753
(S'\x07\xdf\x07\x04\r\x066\x0bi\xe0'
tRp3291
sa(dp3292
S'trial_loop.thisTrialN'
p3293
I175
sg895
g1063
sS'block_loop.thisIndex'
p3294
g889
sg38
S'left'
p3295
sg59
g63
sS'trial_loop.thisN'
p3296
I175
sg33
g1073
sg64
g65
sS'trial_loop.thisIndex'
p3297
g60
(g99
S'\xaf\x00\x00\x00'
tRp3298
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3299
I0
sg904
g1071
sS'block_loop.thisRepN'
p3300
I0
sg907
g1073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3301
I0
sg909
g1067
sg55
g11
sS'block_loop.thisTrial'
p3302
Nsg70
Vn
sS'block_loop.thisTrialN'
p3303
I0
sg39
F0.99970692186161614
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x00\x08\xa6\xd8'
tRp3304
sa(dp3305
S'trial_loop.thisTrialN'
p3306
I176
sg895
g997
sS'block_loop.thisIndex'
p3307
g889
sg38
S'right'
p3308
sg59
g63
sS'trial_loop.thisN'
p3309
I176
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3310
g60
(g99
S'\xb0\x00\x00\x00'
tRp3311
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3312
I0
sg904
g1005
sS'block_loop.thisRepN'
p3313
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3314
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3315
Nsg70
Vn
sS'block_loop.thisTrialN'
p3316
I0
sg39
F0.68329314912807604
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x06\t7`'
tRp3317
sa(dp3318
S'trial_loop.thisTrialN'
p3319
I177
sg895
g1569
sS'block_loop.thisIndex'
p3320
g889
sg38
S'left'
p3321
sg59
g63
sS'trial_loop.thisN'
p3322
I177
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3323
g60
(g99
S'\xb1\x00\x00\x00'
tRp3324
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3325
I0
sg904
g1576
sS'block_loop.thisRepN'
p3326
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3327
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3328
Nsg70
Vn
sS'block_loop.thisTrialN'
p3329
I0
sg39
F0.7499091258205226
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x0c\x04\xca\x90'
tRp3330
sa(dp3331
S'trial_loop.thisTrialN'
p3332
I178
sg895
g2863
sS'block_loop.thisIndex'
p3333
g889
sg38
S'right'
p3334
sg59
g63
sS'trial_loop.thisN'
p3335
I178
sg33
g1375
sg64
g65
sS'trial_loop.thisIndex'
p3336
g60
(g99
S'\xb2\x00\x00\x00'
tRp3337
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3338
I0
sg904
g2870
sS'block_loop.thisRepN'
p3339
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3340
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3341
Nsg70
Vn
sS'block_loop.thisTrialN'
p3342
I0
sg39
F0.79998044245166966
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x12\x01\x8a\x88'
tRp3343
sa(dp3344
S'trial_loop.thisTrialN'
p3345
I179
sg895
g2705
sS'block_loop.thisIndex'
p3346
g889
sg38
S'left'
p3347
sg59
g63
sS'trial_loop.thisN'
p3348
I179
sg33
g954
sg64
g65
sS'trial_loop.thisIndex'
p3349
g60
(g99
S'\xb3\x00\x00\x00'
tRp3350
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3351
I0
sg904
g2712
sS'block_loop.thisRepN'
p3352
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3353
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3354
Nsg70
Vn
sS'block_loop.thisTrialN'
p3355
I0
sg39
F0.73333823697612388
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x17\x0eH@'
tRp3356
sa(dp3357
S'trial_loop.thisTrialN'
p3358
I180
sg895
g1014
sS'block_loop.thisIndex'
p3359
g889
sg38
S'left'
p3360
sg59
g63
sS'trial_loop.thisN'
p3361
I180
sg33
g1018
sg64
g65
sS'trial_loop.thisIndex'
p3362
g60
(g99
S'\xb4\x00\x00\x00'
tRp3363
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3364
I0
sg904
g1022
sS'block_loop.thisRepN'
p3365
I0
sg907
g1018
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3366
I0
sg909
g1025
sg55
g11
sS'block_loop.thisTrial'
p3367
Nsg70
Vn
sS'block_loop.thisTrialN'
p3368
I0
sg39
F0.78323222422659455
sg34
g753
(S'\x07\xdf\x07\x04\r\x07\x1d\n\xcd\xa0'
tRp3369
sa(dp3370
S'trial_loop.thisTrialN'
p3371
I181
sg895
g1371
sS'block_loop.thisIndex'
p3372
g889
sg38
S'left'
p3373
sg59
g63
sS'trial_loop.thisN'
p3374
I181
sg33
g1382
sg64
g65
sS'trial_loop.thisIndex'
p3375
g60
(g99
S'\xb5\x00\x00\x00'
tRp3376
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3377
I0
sg904
g1379
sS'block_loop.thisRepN'
p3378
I0
sg907
g1375
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3379
I0
sg909
g1382
sg55
g11
sS'block_loop.thisTrial'
p3380
Nsg70
Vn
sS'block_loop.thisTrialN'
p3381
I0
sg39
F0.68368601067959389
sg34
g753
(S'\x07\xdf\x07\x04\r\x07#\x07\xcc\x18'
tRp3382
sa(dp3383
S'trial_loop.thisTrialN'
p3384
I182
sg895
g1112
sS'block_loop.thisIndex'
p3385
g889
sg38
S'left'
p3386
sg59
g63
sS'trial_loop.thisN'
p3387
I182
sg33
g1123
sg64
g65
sS'trial_loop.thisIndex'
p3388
g60
(g99
S'\xb6\x00\x00\x00'
tRp3389
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3390
I0
sg904
g1120
sS'block_loop.thisRepN'
p3391
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3392
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3393
Nsg70
Vn
sS'block_loop.thisTrialN'
p3394
I0
sg39
F0.78324305785463366
sg34
g753
(S'\x07\xdf\x07\x04\r\x07)\x03\x99\xe0'
tRp3395
sa(dp3396
S'trial_loop.thisTrialN'
p3397
I183
sg895
g933
sS'block_loop.thisIndex'
p3398
g889
sg38
S'left'
p3399
sg59
g63
sS'trial_loop.thisN'
p3400
I183
sg33
g937
sg64
g65
sS'trial_loop.thisIndex'
p3401
g60
(g99
S'\xb7\x00\x00\x00'
tRp3402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3403
I0
sg904
g941
sS'block_loop.thisRepN'
p3404
I0
sg907
g937
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3405
I0
sg909
g944
sg55
g11
sS'block_loop.thisTrial'
p3406
Nsg70
Vn
sS'block_loop.thisTrialN'
p3407
I0
sg39
F0.88331783839475975
sg34
g753
(S'\x07\xdf\x07\x04\r\x07/\x00\xd6\xd8'
tRp3408
sa(dp3409
S'trial_loop.thisTrialN'
p3410
I184
sg895
g1625
sS'block_loop.thisIndex'
p3411
g889
sg38
S'left'
p3412
sg59
g63
sS'trial_loop.thisN'
p3413
I184
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p3414
g60
(g99
S'\xb8\x00\x00\x00'
tRp3415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3416
I0
sg904
g1632
sS'block_loop.thisRepN'
p3417
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3418
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p3419
Nsg70
Vn
sS'block_loop.thisTrialN'
p3420
I0
sg39
F0.71657947021867585
sg34
g753
(S'\x07\xdf\x07\x04\r\x074\x0e\xc1X'
tRp3421
sa(dp3422
S'trial_loop.thisTrialN'
p3423
I185
sg895
g1841
sS'block_loop.thisIndex'
p3424
g889
sg38
S'left'
p3425
sg59
g63
sS'trial_loop.thisN'
p3426
I185
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3427
g60
(g99
S'\xb9\x00\x00\x00'
tRp3428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3429
I0
sg904
g1848
sS'block_loop.thisRepN'
p3430
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3431
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3432
Nsg70
Vn
sS'block_loop.thisTrialN'
p3433
I0
sg39
F0.86646470503910678
sg34
g753
(S'\x07\xdf\x07\x04\r\x07:\x0b\x0c '
tRp3434
sa(dp3435
S'trial_loop.thisTrialN'
p3436
I186
sg895
g1610
sS'block_loop.thisIndex'
p3437
g889
sg38
S'right'
p3438
sg59
g63
sS'trial_loop.thisN'
p3439
I186
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p3440
g60
(g99
S'\xba\x00\x00\x00'
tRp3441
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3442
I0
sg904
g1617
sS'block_loop.thisRepN'
p3443
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3444
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3445
Nsg70
Vn
sS'block_loop.thisTrialN'
p3446
I0
sg39
F1.6004643634942113
sg34
g753
(S'\x07\xdf\x07\x04\r\x08\x04\ty\xc8'
tRp3447
sa(dp3448
S'trial_loop.thisTrialN'
p3449
I187
sg895
g1552
sS'block_loop.thisIndex'
p3450
g889
sg38
S'right'
p3451
sg59
g63
sS'trial_loop.thisN'
p3452
I187
sg33
g1556
sg64
g65
sS'trial_loop.thisIndex'
p3453
g60
(g99
S'\xbb\x00\x00\x00'
tRp3454
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3455
I0
sg904
g1560
sS'block_loop.thisRepN'
p3456
I0
sg907
g1556
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3457
I0
sg909
g1563
sg55
g11
sS'block_loop.thisTrial'
p3458
Nsg70
Vn
sS'block_loop.thisTrialN'
p3459
I0
sg39
F0.93331930663589446
sg34
g753
(S'\x07\xdf\x07\x04\r\x08\x0b\x03\xd4x'
tRp3460
sa(dp3461
S'trial_loop.thisTrialN'
p3462
I188
sg895
g1097
sS'block_loop.thisIndex'
p3463
g889
sg38
S'right'
p3464
sg59
g63
sS'trial_loop.thisN'
p3465
I188
sg33
g977
sg64
g65
sS'trial_loop.thisIndex'
p3466
g60
(g99
S'\xbc\x00\x00\x00'
tRp3467
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3468
I0
sg904
g1104
sS'block_loop.thisRepN'
p3469
I0
sg907
g977
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3470
I0
sg909
g971
sg55
g11
sS'block_loop.thisTrial'
p3471
Nsg70
Vn
sS'block_loop.thisTrialN'
p3472
I0
sg39
F0.85000927985765884
sg34
g753
(S'\x07\xdf\x07\x04\r\x08\x11\x034P'
tRp3473
sa(dp3474
S'trial_loop.thisTrialN'
p3475
I189
sg895
g1440
sS'block_loop.thisIndex'
p3476
g889
sg38
S'left'
p3477
sg59
g63
sS'trial_loop.thisN'
p3478
I189
sg33
g1444
sg64
g65
sS'trial_loop.thisIndex'
p3479
g60
(g99
S'\xbd\x00\x00\x00'
tRp3480
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3481
I0
sg904
g1448
sS'block_loop.thisRepN'
p3482
I0
sg907
g1444
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3483
I0
sg909
g1451
sg55
g11
sS'block_loop.thisTrial'
p3484
Nsg70
Vn
sS'block_loop.thisTrialN'
p3485
I0
sg39
F0.70002426162409392
sg34
g753
(S'\x07\xdf\x07\x04\r\x08\x17\x01\xa1\xf8'
tRp3486
sa(dp3487
S'trial_loop.thisTrialN'
p3488
I190
sg895
g1610
sS'block_loop.thisIndex'
p3489
g889
sg38
S'right'
p3490
sg59
g63
sS'trial_loop.thisN'
p3491
I190
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p3492
g60
(g99
S'\xbe\x00\x00\x00'
tRp3493
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3494
I0
sg904
g1617
sS'block_loop.thisRepN'
p3495
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3496
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3497
Nsg70
Vn
sS'block_loop.thisTrialN'
p3498
I0
sg39
F0.89987333208500786
sg34
g753
(S'\x07\xdf\x07\x04\r\x08\x1c\x0c\xb2\x00'
tRp3499
sa(dp3500
S'trial_loop.thisTrialN'
p3501
I191
sg895
g1625
sS'block_loop.thisIndex'
p3502
g889
sg38
S'left'
p3503
sg59
g63
sS'trial_loop.thisN'
p3504
I191
sg33
g1293
sg64
g65
sS'trial_loop.thisIndex'
p3505
g60
(g99
S'\xbf\x00\x00\x00'
tRp3506
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3507
I0
sg904
g1632
sS'block_loop.thisRepN'
p3508
I0
sg907
g1293
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3509
I0
sg909
g1287
sg55
g11
sS'block_loop.thisTrial'
p3510
Nsg70
Vn
sS'block_loop.thisTrialN'
p3511
I0
sg39
F0.61658309093036223
sg34
g753
(S'\x07\xdf\x07\x04\r\x08"\x0b\x98\xc0'
tRp3512
sa(dp3513
S'trial_loop.thisTrialN'
p3514
I192
sg895
g1569
sS'block_loop.thisIndex'
p3515
g889
sg38
S'left'
p3516
sg59
g63
sS'trial_loop.thisN'
p3517
I192
sg33
g1084
sg64
g65
sS'trial_loop.thisIndex'
p3518
g60
(g99
S'\xc0\x00\x00\x00'
tRp3519
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3520
I0
sg904
g1576
sS'block_loop.thisRepN'
p3521
I0
sg907
g1084
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3522
I0
sg909
g1091
sg55
g11
sS'block_loop.thisTrial'
p3523
Nsg70
Vn
sS'block_loop.thisTrialN'
p3524
I0
sg39
F0.66677842408898869
sg34
g753
(S'\x07\xdf\x07\x04\r\x08(\x06tX'
tRp3525
sa(dp3526
S'trial_loop.thisTrialN'
p3527
I193
sg895
g1206
sS'block_loop.thisIndex'
p3528
g889
sg38
S'left'
p3529
sg59
g63
sS'trial_loop.thisN'
p3530
I193
sg33
g927
sg64
g65
sS'trial_loop.thisIndex'
p3531
g60
(g99
S'\xc1\x00\x00\x00'
tRp3532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3533
I0
sg904
g1213
sS'block_loop.thisRepN'
p3534
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3535
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3536
Nsg70
Vn
sS'block_loop.thisTrialN'
p3537
I0
sg39
F0.88332895711755555
sg34
g753
(S'\x07\xdf\x07\x04\r\x08.\x01\xc9\x08'
tRp3538
sa(dp3539
S'trial_loop.thisTrialN'
p3540
I194
sg895
g2027
sS'block_loop.thisIndex'
p3541
g889
sg38
S'left'
p3542
sg59
g63
sS'trial_loop.thisN'
p3543
I194
sg33
g1001
sg64
g65
sS'trial_loop.thisIndex'
p3544
g60
(g99
S'\xc2\x00\x00\x00'
tRp3545
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3546
I0
sg904
g2034
sS'block_loop.thisRepN'
p3547
I0
sg907
g1001
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3548
I0
sg909
g1008
sg55
g11
sS'block_loop.thisTrial'
p3549
Nsg70
Vn
sS'block_loop.thisTrialN'
p3550
I0
sg39
F0.60000279393534584
sg34
g753
(S'\x07\xdf\x07\x04\r\x084\x00qH'
tRp3551
sa(dp3552
S'trial_loop.thisTrialN'
p3553
I195
sg895
g1189
sS'block_loop.thisIndex'
p3554
g889
sg38
S'left'
p3555
sg59
g63
sS'trial_loop.thisN'
p3556
I195
sg33
g1193
sg64
g65
sS'trial_loop.thisIndex'
p3557
g60
(g99
S'\xc3\x00\x00\x00'
tRp3558
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3559
I0
sg904
g1197
sS'block_loop.thisRepN'
p3560
I0
sg907
g1193
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3561
I0
sg909
g1200
sg55
g11
sS'block_loop.thisTrial'
p3562
Nsg70
Vn
sS'block_loop.thisTrialN'
p3563
I0
sg39
F0.76665962480910821
sg34
g753
(S'\x07\xdf\x07\x04\r\x089\n\x16\x08'
tRp3564
sa(dp3565
S'trial_loop.thisTrialN'
p3566
I196
sg895
g916
sS'block_loop.thisIndex'
p3567
g889
sg38
S'right'
p3568
sg59
g63
sS'trial_loop.thisN'
p3569
I196
sg33
g920
sg64
g65
sS'trial_loop.thisIndex'
p3570
g60
(g99
S'\xc4\x00\x00\x00'
tRp3571
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3572
I0
sg904
g924
sS'block_loop.thisRepN'
p3573
I0
sg907
g920
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3574
I0
sg909
g927
sg55
g11
sS'block_loop.thisTrial'
p3575
Nsg70
Vn
sS'block_loop.thisTrialN'
p3576
I0
sg39
F0.78331946343860182
sg34
g753
(S'\x07\xdf\x07\x04\r\t\x03\x07\x8d\x98'
tRp3577
sa(dp3578
S'trial_loop.thisTrialN'
p3579
I197
sg895
g1640
sS'block_loop.thisIndex'
p3580
g889
sg38
S'right'
p3581
sg59
g63
sS'trial_loop.thisN'
p3582
I197
sg33
g1116
sg64
g65
sS'trial_loop.thisIndex'
p3583
g60
(g99
S'\xc5\x00\x00\x00'
tRp3584
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3585
I0
sg904
g1647
sS'block_loop.thisRepN'
p3586
I0
sg907
g1116
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3587
I0
sg909
g1123
sg55
g11
sS'block_loop.thisTrial'
p3588
Nsg70
Vn
sS'block_loop.thisTrialN'
p3589
I0
sg39
F0.81648746991231747
sg34
g753
(S'\x07\xdf\x07\x04\r\t\t\x04\xca\x90'
tRp3590
sa(dp3591
S'trial_loop.thisTrialN'
p3592
I198
sg895
g2705
sS'block_loop.thisIndex'
p3593
g889
sg38
S'left'
p3594
sg59
g63
sS'trial_loop.thisN'
p3595
I198
sg33
g961
sg64
g65
sS'trial_loop.thisIndex'
p3596
g60
(g99
S'\xc6\x00\x00\x00'
tRp3597
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3598
I0
sg904
g2712
sS'block_loop.thisRepN'
p3599
I0
sg907
g954
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3600
I0
sg909
g961
sg55
g11
sS'block_loop.thisTrial'
p3601
Nsg70
Vn
sS'block_loop.thisTrialN'
p3602
I0
sg39
F0.7336920404486591
sg34
g753
(S'\x07\xdf\x07\x04\r\t\x0f\x02\x80\xa0'
tRp3603
sa(dp3604
S'trial_loop.thisTrialN'
p3605
I199
sg895
g1668
sS'block_loop.thisIndex'
p3606
g889
sg38
S'left'
p3607
sg59
g63
sS'trial_loop.thisN'
p3608
I199
sg33
g1176
sg64
g65
sS'trial_loop.thisIndex'
p3609
g60
(g99
S'\xc7\x00\x00\x00'
tRp3610
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3611
I0
sg904
g1675
sS'block_loop.thisRepN'
p3612
I0
sg907
g1176
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3613
I0
sg909
g1183
sg55
g11
sS'block_loop.thisTrial'
p3614
Nsg70
Vn
sS'block_loop.thisTrialN'
p3615
I0
sg39
F1.2166343510953084
sg34
g753
(S'\x07\xdf\x07\x04\r\t\x14\x0eH@'
tRp3616
sa(dp3617
S'block_loop.thisRepN'
p3618
I0
sg55
g11
sg41
F102.76323505807522
sg56
g57
sS'block_loop.thisIndex'
p3619
g889
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3620
I0
sg40
S'space'
p3621
sg64
g65
sS'block_loop.thisTrial'
p3622
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3623
I0
sg70
Vn
sa(dp3624
S'block_loop.thisRepN'
p3625
I1
sg56
g57
sS'block_loop.thisIndex'
p3626
g60
(g99
S'\x00\x00\x00\x00'
tRp3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p3628
I1
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p3629
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p3630
I0
sg70
Vn
sa(dp3631
S'trial_loop.thisTrialN'
p3632
I0
sS'img_left'
p3633
S'19-caramello_redo.png'
p3634
sS'block_loop.thisIndex'
p3635
g3627
sg38
S'left'
p3636
sg59
g63
sS'trial_loop.thisN'
p3637
I0
sg33
S'19-caramello_redo.png'
p3638
sg64
g65
sS'trial_loop.thisIndex'
p3639
g60
(g99
S'\x00\x00\x00\x00'
tRp3640
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3641
I0
sS'img_right'
p3642
S'30-spaghetti_hoops.png'
p3643
sS'block_loop.thisRepN'
p3644
I1
sS'img_correct'
p3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3646
I1
sS'img_wrong'
p3647
S'30-spaghetti_hoops.png'
p3648
sg55
g11
sS'block_loop.thisTrial'
p3649
Nsg70
Vn
sS'block_loop.thisTrialN'
p3650
I0
sg39
F0.88318213295224268
sg34
g753
(S'\x07\xdf\x07\x04\r\r\t\x03\xef\xd0'
tRp3651
sa(dp3652
S'trial_loop.thisTrialN'
p3653
I1
sg3633
S'38-maltesers.png'
p3654
sS'block_loop.thisIndex'
p3655
g3627
sg38
S'left'
p3656
sg59
g63
sS'trial_loop.thisN'
p3657
I1
sg33
S'38-maltesers.png'
p3658
sg64
g65
sS'trial_loop.thisIndex'
p3659
g60
(g99
S'\x01\x00\x00\x00'
tRp3660
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3661
I0
sg3642
S'6-sour_patch_kids.png'
p3662
sS'block_loop.thisRepN'
p3663
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3664
I1
sg3647
S'6-sour_patch_kids.png'
p3665
sg55
g11
sS'block_loop.thisTrial'
p3666
Nsg70
Vn
sS'block_loop.thisTrialN'
p3667
I0
sg39
F0.7662835838891624
sg34
g753
(S'\x07\xdf\x07\x04\r\r\x0f\x02\x98\x10'
tRp3668
sa(dp3669
S'trial_loop.thisTrialN'
p3670
I2
sg3633
S'23-crunchie_redo.png'
p3671
sS'block_loop.thisIndex'
p3672
g3627
sg38
S'left'
p3673
sg59
g63
sS'trial_loop.thisN'
p3674
I2
sg33
S'23-crunchie_redo.png'
p3675
sg64
g65
sS'trial_loop.thisIndex'
p3676
g60
(g99
S'\x02\x00\x00\x00'
tRp3677
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3678
I0
sg3642
S'33-ambrosia_rice.png'
p3679
sS'block_loop.thisRepN'
p3680
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3681
I1
sg3647
S'33-ambrosia_rice.png'
p3682
sg55
g11
sS'block_loop.thisTrial'
p3683
Nsg70
Vn
sS'block_loop.thisTrialN'
p3684
I0
sg39
F0.66666495609388221
sg34
g753
(S'\x07\xdf\x07\x04\r\r\x14\x0e\x9e0'
tRp3685
sa(dp3686
S'trial_loop.thisTrialN'
p3687
I3
sg3633
S'44-crunch.png'
p3688
sS'block_loop.thisIndex'
p3689
g3627
sg38
S'left'
p3690
sg59
g63
sS'trial_loop.thisN'
p3691
I3
sg33
S'26-walkers_smoky_bacon.png'
p3692
sg64
g65
sS'trial_loop.thisIndex'
p3693
g60
(g99
S'\x03\x00\x00\x00'
tRp3694
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3695
I0
sg3642
S'26-walkers_smoky_bacon.png'
p3696
sS'block_loop.thisRepN'
p3697
I1
sg3645
S'44-crunch.png'
p3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3699
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p3700
Nsg70
Vn
sS'block_loop.thisTrialN'
p3701
I0
sg39
F0.86666512715146382
sg34
g753
(S'\x07\xdf\x07\x04\r\r\x1a\n-x'
tRp3702
sa(dp3703
S'trial_loop.thisTrialN'
p3704
I4
sg3633
S'16-skips_prawn.png'
p3705
sS'block_loop.thisIndex'
p3706
g3627
sg38
S'right'
p3707
sg59
g63
sS'trial_loop.thisN'
p3708
I4
sg33
S'42-mrkipling_lemon_slices.png'
p3709
sg64
g65
sS'trial_loop.thisIndex'
p3710
g60
(g99
S'\x04\x00\x00\x00'
tRp3711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3712
I0
sg3642
S'42-mrkipling_lemon_slices.png'
p3713
sS'block_loop.thisRepN'
p3714
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3715
I1
sg3647
S'16-skips_prawn.png'
p3716
sg55
g11
sS'block_loop.thisTrial'
p3717
Nsg70
Vn
sS'block_loop.thisTrialN'
p3718
I0
sg39
F0.81666422909984249
sg34
g753
(S'\x07\xdf\x07\x04\r\r \x08\x9b '
tRp3719
sa(dp3720
S'trial_loop.thisTrialN'
p3721
I5
sg3633
g3654
sS'block_loop.thisIndex'
p3722
g3627
sg38
S'left'
p3723
sg59
g63
sS'trial_loop.thisN'
p3724
I5
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p3725
g60
(g99
S'\x05\x00\x00\x00'
tRp3726
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3727
I0
sg3642
g3662
sS'block_loop.thisRepN'
p3728
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3729
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p3730
Nsg70
Vn
sS'block_loop.thisTrialN'
p3731
I0
sg39
F0.76677964999998949
sg34
g753
(S'\x07\xdf\x07\x04\r\r&\x06Q0'
tRp3732
sa(dp3733
S'trial_loop.thisTrialN'
p3734
I6
sg3633
g3634
sS'block_loop.thisIndex'
p3735
g3627
sg38
S'left'
p3736
sg59
g63
sS'trial_loop.thisN'
p3737
I6
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p3738
g60
(g99
S'\x06\x00\x00\x00'
tRp3739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3740
I0
sg3642
g3643
sS'block_loop.thisRepN'
p3741
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3742
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3743
Nsg70
Vn
sS'block_loop.thisTrialN'
p3744
I0
sg39
F0.68331567166933382
sg34
g753
(S'\x07\xdf\x07\x04\r\r,\x03S\x90'
tRp3745
sa(dp3746
S'trial_loop.thisTrialN'
p3747
I7
sg3633
S'7-olives.png'
p3748
sS'block_loop.thisIndex'
p3749
g3627
sg38
S'right'
p3750
sg59
g63
sS'trial_loop.thisN'
p3751
I7
sg33
S'22-daim.png'
p3752
sg64
g65
sS'trial_loop.thisIndex'
p3753
g60
(g99
S'\x07\x00\x00\x00'
tRp3754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3755
I0
sg3642
S'22-daim.png'
p3756
sS'block_loop.thisRepN'
p3757
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3758
I1
sg3647
S'7-olives.png'
p3759
sg55
g11
sS'block_loop.thisTrial'
p3760
Nsg70
Vn
sS'block_loop.thisTrialN'
p3761
I0
sg39
F0.99999258751813613
sg34
g753
(S'\x07\xdf\x07\x04\r\r1\x0e%\x18'
tRp3762
sa(dp3763
S'trial_loop.thisTrialN'
p3764
I8
sg3633
S'46-pistachios.png'
p3765
sS'block_loop.thisIndex'
p3766
g3627
sg38
S'left'
p3767
sg59
g63
sS'trial_loop.thisN'
p3768
I8
sg33
S'46-pistachios.png'
p3769
sg64
g65
sS'trial_loop.thisIndex'
p3770
g60
(g99
S'\x08\x00\x00\x00'
tRp3771
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3772
I0
sg3642
S'29-beans.png'
p3773
sS'block_loop.thisRepN'
p3774
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3775
I1
sg3647
S'29-beans.png'
p3776
sg55
g11
sS'block_loop.thisTrial'
p3777
Nsg70
Vn
sS'block_loop.thisTrialN'
p3778
I0
sg39
F0.61663953983315878
sg34
g753
(S'\x07\xdf\x07\x04\r\r7\x0e\xb5\xa0'
tRp3779
sa(dp3780
S'trial_loop.thisTrialN'
p3781
I9
sg3633
g3705
sS'block_loop.thisIndex'
p3782
g3627
sg38
S'right'
p3783
sg59
g63
sS'trial_loop.thisN'
p3784
I9
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p3785
g60
(g99
S'\t\x00\x00\x00'
tRp3786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3787
I0
sg3642
g3713
sS'block_loop.thisRepN'
p3788
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3789
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p3790
Nsg70
Vn
sS'block_loop.thisTrialN'
p3791
I0
sg39
F0.84969938108679344
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\x01\tV\xa0'
tRp3792
sa(dp3793
S'trial_loop.thisTrialN'
p3794
I10
sg3633
S'25-kitkat.png'
p3795
sS'block_loop.thisIndex'
p3796
g3627
sg38
S'left'
p3797
sg59
g63
sS'trial_loop.thisN'
p3798
I10
sg33
S'31-hobnobs.png'
p3799
sg64
g65
sS'trial_loop.thisIndex'
p3800
g60
(g99
S'\n\x00\x00\x00'
tRp3801
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3802
I0
sg3642
S'31-hobnobs.png'
p3803
sS'block_loop.thisRepN'
p3804
I1
sg3645
S'25-kitkat.png'
p3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3806
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p3807
Nsg70
Vn
sS'block_loop.thisTrialN'
p3808
I0
sg39
F0.63336837156566617
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\x07\x07\x85\xc8'
tRp3809
sa(dp3810
S'trial_loop.thisTrialN'
p3811
I11
sg3633
S'36-fig_rolls.png'
p3812
sS'block_loop.thisIndex'
p3813
g3627
sg38
S'left'
p3814
sg59
g63
sS'trial_loop.thisN'
p3815
I11
sg33
S'36-fig_rolls.png'
p3816
sg64
g65
sS'trial_loop.thisIndex'
p3817
g60
(g99
S'\x0b\x00\x00\x00'
tRp3818
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3819
I0
sg3642
S'34-hula_hoops_bbq_beef_redo.png'
p3820
sS'block_loop.thisRepN'
p3821
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3822
I1
sg3647
S'34-hula_hoops_bbq_beef_redo.png'
p3823
sg55
g11
sS'block_loop.thisTrial'
p3824
Nsg70
Vn
sS'block_loop.thisTrialN'
p3825
I0
sg39
F0.73335619798945118
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\r\x02\x9b\xf8'
tRp3826
sa(dp3827
S'trial_loop.thisTrialN'
p3828
I12
sg3633
g3748
sS'block_loop.thisIndex'
p3829
g3627
sg38
S'right'
p3830
sg59
g63
sS'trial_loop.thisN'
p3831
I12
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p3832
g60
(g99
S'\x0c\x00\x00\x00'
tRp3833
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3834
I0
sg3642
g3756
sS'block_loop.thisRepN'
p3835
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3836
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p3837
Nsg70
Vn
sS'block_loop.thisTrialN'
p3838
I0
sg39
F0.78322338626639976
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\x12\x0e)\x00'
tRp3839
sa(dp3840
S'trial_loop.thisTrialN'
p3841
I13
sg3633
S'41-peanuts_redo.png'
p3842
sS'block_loop.thisIndex'
p3843
g3627
sg38
S'left'
p3844
sg59
g63
sS'trial_loop.thisN'
p3845
I13
sg33
S'41-peanuts_redo.png'
p3846
sg64
g65
sS'trial_loop.thisIndex'
p3847
g60
(g99
S'\r\x00\x00\x00'
tRp3848
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3849
I0
sg3642
S'45-chewy_nougat_redo.png'
p3850
sS'block_loop.thisRepN'
p3851
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3852
I1
sg3647
S'45-chewy_nougat_redo.png'
p3853
sg55
g11
sS'block_loop.thisTrial'
p3854
Nsg70
Vn
sS'block_loop.thisTrialN'
p3855
I0
sg39
F0.8164911761532494
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\x18\x0bb\x10'
tRp3856
sa(dp3857
S'trial_loop.thisTrialN'
p3858
I14
sg3633
g3812
sS'block_loop.thisIndex'
p3859
g3627
sg38
S'left'
p3860
sg59
g63
sS'trial_loop.thisN'
p3861
I14
sg33
g3823
sg64
g65
sS'trial_loop.thisIndex'
p3862
g60
(g99
S'\x0e\x00\x00\x00'
tRp3863
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3864
I0
sg3642
g3820
sS'block_loop.thisRepN'
p3865
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3866
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p3867
Nsg70
Vn
sS'block_loop.thisTrialN'
p3868
I0
sg39
F0.7000025943689252
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e\x1e\t\x18 '
tRp3869
sa(dp3870
S'trial_loop.thisTrialN'
p3871
I15
sg3633
S'17-jacobs_mini_cheddars_redo.png'
p3872
sS'block_loop.thisIndex'
p3873
g3627
sg38
S'left'
p3874
sg59
g63
sS'trial_loop.thisN'
p3875
I15
sg33
S'17-jacobs_mini_cheddars_redo.png'
p3876
sg64
g65
sS'trial_loop.thisIndex'
p3877
g60
(g99
S'\x0f\x00\x00\x00'
tRp3878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3879
I0
sg3642
S'8-liquorice_catherine_wheels.png'
p3880
sS'block_loop.thisRepN'
p3881
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3882
I1
sg3647
S'8-liquorice_catherine_wheels.png'
p3883
sg55
g11
sS'block_loop.thisTrial'
p3884
Nsg70
Vn
sS'block_loop.thisTrialN'
p3885
I0
sg39
F0.6498879432274407
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e$\x05$h'
tRp3886
sa(dp3887
S'trial_loop.thisTrialN'
p3888
I16
sg3633
S'33-ambrosia_rice.png'
p3889
sS'block_loop.thisIndex'
p3890
g3627
sg38
S'right'
p3891
sg59
g63
sS'trial_loop.thisN'
p3892
I16
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p3893
g60
(g99
S'\x10\x00\x00\x00'
tRp3894
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3895
I0
sg3642
S'23-crunchie_redo.png'
p3896
sS'block_loop.thisRepN'
p3897
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3898
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p3899
Nsg70
Vn
sS'block_loop.thisTrialN'
p3900
I0
sg39
F0.68325836748044821
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e*\x00>\x80'
tRp3901
sa(dp3902
S'trial_loop.thisTrialN'
p3903
I17
sg3633
S'8-liquorice_catherine_wheels.png'
p3904
sS'block_loop.thisIndex'
p3905
g3627
sg38
S'right'
p3906
sg59
g63
sS'trial_loop.thisN'
p3907
I17
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p3908
g60
(g99
S'\x11\x00\x00\x00'
tRp3909
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3910
I0
sg3642
S'17-jacobs_mini_cheddars_redo.png'
p3911
sS'block_loop.thisRepN'
p3912
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3913
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p3914
Nsg70
Vn
sS'block_loop.thisTrialN'
p3915
I0
sg39
F0.8836177588245846
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e/\x0b\x10\x08'
tRp3916
sa(dp3917
S'trial_loop.thisTrialN'
p3918
I18
sg3633
S'18-mms.png'
p3919
sS'block_loop.thisIndex'
p3920
g3627
sg38
S'left'
p3921
sg59
g63
sS'trial_loop.thisN'
p3922
I18
sg33
S'43-mrporky_pork_crackles_redo.png'
p3923
sg64
g65
sS'trial_loop.thisIndex'
p3924
g60
(g99
S'\x12\x00\x00\x00'
tRp3925
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3926
I0
sg3642
S'43-mrporky_pork_crackles_redo.png'
p3927
sS'block_loop.thisRepN'
p3928
I1
sg3645
S'18-mms.png'
p3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3930
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p3931
Nsg70
Vn
sS'block_loop.thisTrialN'
p3932
I0
sg39
F0.68308731020078994
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e5\t\xf6\xc8'
tRp3933
sa(dp3934
S'trial_loop.thisTrialN'
p3935
I19
sg3633
S'50-polo.png'
p3936
sS'block_loop.thisIndex'
p3937
g3627
sg38
S'right'
p3938
sg59
g63
sS'trial_loop.thisN'
p3939
I19
sg33
S'48-twix.png'
p3940
sg64
g65
sS'trial_loop.thisIndex'
p3941
g60
(g99
S'\x13\x00\x00\x00'
tRp3942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3943
I0
sg3642
S'48-twix.png'
p3944
sS'block_loop.thisRepN'
p3945
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3946
I1
sg3647
S'50-polo.png'
p3947
sg55
g11
sS'block_loop.thisTrial'
p3948
Nsg70
Vn
sS'block_loop.thisTrialN'
p3949
I0
sg39
F0.99993385785182909
sg34
g753
(S'\x07\xdf\x07\x04\r\x0e;\x05\x89\xf8'
tRp3950
sa(dp3951
S'trial_loop.thisTrialN'
p3952
I20
sg3633
g3812
sS'block_loop.thisIndex'
p3953
g3627
sg38
S'left'
p3954
sg59
g63
sS'trial_loop.thisN'
p3955
I20
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p3956
g60
(g99
S'\x14\x00\x00\x00'
tRp3957
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3958
I0
sg3642
g3820
sS'block_loop.thisRepN'
p3959
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3960
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p3961
Nsg70
Vn
sS'block_loop.thisTrialN'
p3962
I0
sg39
F0.89997454097465379
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f\x05\x06\x1a\x80'
tRp3963
sa(dp3964
S'trial_loop.thisTrialN'
p3965
I21
sg3633
S'35-raisins.png'
p3966
sS'block_loop.thisIndex'
p3967
g3627
sg38
S'right'
p3968
sg59
g63
sS'trial_loop.thisN'
p3969
I21
sg33
S'49-yorkie.png'
p3970
sg64
g65
sS'trial_loop.thisIndex'
p3971
g60
(g99
S'\x15\x00\x00\x00'
tRp3972
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3973
I0
sg3642
S'49-yorkie.png'
p3974
sS'block_loop.thisRepN'
p3975
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3976
I1
sg3647
S'35-raisins.png'
p3977
sg55
g11
sS'block_loop.thisTrial'
p3978
Nsg70
Vn
sS'block_loop.thisTrialN'
p3979
I0
sg39
F0.81657271345648041
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f\x0b\x05\x01@'
tRp3980
sa(dp3981
S'trial_loop.thisTrialN'
p3982
I22
sg3633
S'30-spaghetti_hoops.png'
p3983
sS'block_loop.thisIndex'
p3984
g3627
sg38
S'right'
p3985
sg59
g63
sS'trial_loop.thisN'
p3986
I22
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p3987
g60
(g99
S'\x16\x00\x00\x00'
tRp3988
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p3989
I0
sg3642
S'19-caramello_redo.png'
p3990
sS'block_loop.thisRepN'
p3991
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p3992
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p3993
Nsg70
Vn
sS'block_loop.thisTrialN'
p3994
I0
sg39
F0.84999331451126636
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f\x11\x02\xb7P'
tRp3995
sa(dp3996
S'trial_loop.thisTrialN'
p3997
I23
sg3633
g3872
sS'block_loop.thisIndex'
p3998
g3627
sg38
S'left'
p3999
sg59
g63
sS'trial_loop.thisN'
p4000
I23
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4001
g60
(g99
S'\x17\x00\x00\x00'
tRp4002
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4003
I0
sg3642
g3880
sS'block_loop.thisRepN'
p4004
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4005
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4006
Nsg70
Vn
sS'block_loop.thisTrialN'
p4007
I0
sg39
F0.6333609590838023
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f\x17\x00\xe6x'
tRp4008
sa(dp4009
S'trial_loop.thisTrialN'
p4010
I24
sg3633
S'45-chewy_nougat_redo.png'
p4011
sS'block_loop.thisIndex'
p4012
g3627
sg38
S'right'
p4013
sg59
g63
sS'trial_loop.thisN'
p4014
I24
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p4015
g60
(g99
S'\x18\x00\x00\x00'
tRp4016
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4017
I0
sg3642
S'41-peanuts_redo.png'
p4018
sS'block_loop.thisRepN'
p4019
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4020
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p4021
Nsg70
Vn
sS'block_loop.thisTrialN'
p4022
I0
sg39
F0.88331042591289588
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f\x1c\x0bB\xd0'
tRp4023
sa(dp4024
S'trial_loop.thisTrialN'
p4025
I25
sg3633
S'5-pineapple.png'
p4026
sS'block_loop.thisIndex'
p4027
g3627
sg38
S'right'
p4028
sg59
g63
sS'trial_loop.thisN'
p4029
I25
sg33
S'40-sardines.png'
p4030
sg64
g65
sS'trial_loop.thisIndex'
p4031
g60
(g99
S'\x19\x00\x00\x00'
tRp4032
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4033
I0
sg3642
S'40-sardines.png'
p4034
sS'block_loop.thisRepN'
p4035
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4036
I1
sg3647
S'5-pineapple.png'
p4037
sg55
g11
sS'block_loop.thisTrial'
p4038
Nsg70
Vn
sS'block_loop.thisTrialN'
p4039
I0
sg39
F0.91661157196813292
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f"\t\xeb\x10'
tRp4040
sa(dp4041
S'trial_loop.thisTrialN'
p4042
I26
sg3633
g3795
sS'block_loop.thisIndex'
p4043
g3627
sg38
S'left'
p4044
sg59
g63
sS'trial_loop.thisN'
p4045
I26
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p4046
g60
(g99
S'\x1a\x00\x00\x00'
tRp4047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4048
I0
sg3642
g3803
sS'block_loop.thisRepN'
p4049
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4050
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4051
Nsg70
Vn
sS'block_loop.thisTrialN'
p4052
I0
sg39
F0.83323340737297258
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f(\t\x10P'
tRp4053
sa(dp4054
S'trial_loop.thisTrialN'
p4055
I27
sg3633
g3919
sS'block_loop.thisIndex'
p4056
g3627
sg38
S'left'
p4057
sg59
g63
sS'trial_loop.thisN'
p4058
I27
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p4059
g60
(g99
S'\x1b\x00\x00\x00'
tRp4060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4061
I0
sg3642
g3927
sS'block_loop.thisRepN'
p4062
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4063
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4064
Nsg70
Vn
sS'block_loop.thisTrialN'
p4065
I0
sg39
F0.71667782815438841
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f.\x07\x00\xf8'
tRp4066
sa(dp4067
S'trial_loop.thisTrialN'
p4068
I28
sg3633
S'27-hartleys_raspberries_jelly.png'
p4069
sS'block_loop.thisIndex'
p4070
g3627
sg38
S'right'
p4071
sg59
g63
sS'trial_loop.thisN'
p4072
I28
sg33
S'51-mars.png'
p4073
sg64
g65
sS'trial_loop.thisIndex'
p4074
g60
(g99
S'\x1c\x00\x00\x00'
tRp4075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4076
I0
sg3642
S'51-mars.png'
p4077
sS'block_loop.thisRepN'
p4078
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4079
I1
sg3647
S'27-hartleys_raspberries_jelly.png'
p4080
sg55
g11
sS'block_loop.thisTrial'
p4081
Nsg70
Vn
sS'block_loop.thisTrialN'
p4082
I0
sg39
F0.69997636558582599
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f4\x03K\xc0'
tRp4083
sa(dp4084
S'trial_loop.thisTrialN'
p4085
I29
sg3633
g3765
sS'block_loop.thisIndex'
p4086
g3627
sg38
S'left'
p4087
sg59
g63
sS'trial_loop.thisN'
p4088
I29
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4089
g60
(g99
S'\x1d\x00\x00\x00'
tRp4090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4091
I0
sg3642
g3773
sS'block_loop.thisRepN'
p4092
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4093
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p4094
Nsg70
Vn
sS'block_loop.thisTrialN'
p4095
I0
sg39
F0.68368515539259533
sg34
g753
(S'\x07\xdf\x07\x04\r\x0f9\x0e[\xc8'
tRp4096
sa(dp4097
S'trial_loop.thisTrialN'
p4098
I30
sg3633
S'13-mccoys_steak_crisps.png'
p4099
sS'block_loop.thisIndex'
p4100
g3627
sg38
S'right'
p4101
sg59
g63
sS'trial_loop.thisN'
p4102
I30
sg33
S'3-ellas_strawberries_apples.png'
p4103
sg64
g65
sS'trial_loop.thisIndex'
p4104
g60
(g99
S'\x1e\x00\x00\x00'
tRp4105
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4106
I0
sg3642
S'3-ellas_strawberries_apples.png'
p4107
sS'block_loop.thisRepN'
p4108
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4109
I1
sg3647
S'13-mccoys_steak_crisps.png'
p4110
sg55
g11
sS'block_loop.thisTrial'
p4111
Nsg70
Vn
sS'block_loop.thisTrialN'
p4112
I0
sg39
F0.96657825856254931
sg34
g753
(S'\x07\xdf\x07\x04\r\x10\x03\n)\x90'
tRp4113
sa(dp4114
S'trial_loop.thisTrialN'
p4115
I31
sg3633
S'6-sour_patch_kids.png'
p4116
sS'block_loop.thisIndex'
p4117
g3627
sg38
S'right'
p4118
sg59
g63
sS'trial_loop.thisN'
p4119
I31
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4120
g60
(g99
S'\x1f\x00\x00\x00'
tRp4121
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4122
I0
sg3642
S'38-maltesers.png'
p4123
sS'block_loop.thisRepN'
p4124
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4125
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4126
Nsg70
Vn
sS'block_loop.thisTrialN'
p4127
I0
sg39
F0.96649529578280635
sg34
g753
(S'\x07\xdf\x07\x04\r\x10\t\n\x06h'
tRp4128
sa(dp4129
S'trial_loop.thisTrialN'
p4130
I32
sg3633
S'48-twix.png'
p4131
sS'block_loop.thisIndex'
p4132
g3627
sg38
S'left'
p4133
sg59
g63
sS'trial_loop.thisN'
p4134
I32
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4135
g60
(g99
S' \x00\x00\x00'
tRp4136
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4137
I0
sg3642
S'50-polo.png'
p4138
sS'block_loop.thisRepN'
p4139
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4140
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p4141
Nsg70
Vn
sS'block_loop.thisTrialN'
p4142
I0
sg39
F0.74995616657179198
sg34
g753
(S'\x07\xdf\x07\x04\r\x10\x0f\n\x1d\xd8'
tRp4143
sa(dp4144
S'trial_loop.thisTrialN'
p4145
I33
sg3633
g3765
sS'block_loop.thisIndex'
p4146
g3627
sg38
S'left'
p4147
sg59
g63
sS'trial_loop.thisN'
p4148
I33
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4149
g60
(g99
S'!\x00\x00\x00'
tRp4150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4151
I0
sg3642
g3773
sS'block_loop.thisRepN'
p4152
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4153
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p4154
Nsg70
Vn
sS'block_loop.thisTrialN'
p4155
I0
sg39
F0.63330593565933668
sg34
g753
(S'\x07\xdf\x07\x04\r\x10\x15\x06\xdd\xd0'
tRp4156
sa(dp4157
S'trial_loop.thisTrialN'
p4158
I34
sg3633
S'40-sardines.png'
p4159
sS'block_loop.thisIndex'
p4160
g3627
sg38
S'left'
p4161
sg59
g63
sS'trial_loop.thisN'
p4162
I34
sg33
g4037
sg64
g65
sS'trial_loop.thisIndex'
p4163
g60
(g99
S'"\x00\x00\x00'
tRp4164
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4165
I0
sg3642
S'5-pineapple.png'
p4166
sS'block_loop.thisRepN'
p4167
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4168
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4169
Nsg70
Vn
sS'block_loop.thisTrialN'
p4170
I0
sg39
F0.78313671724572487
sg34
g753
(S'\x07\xdf\x07\x04\r\x10\x1b\x01\xb9h'
tRp4171
sa(dp4172
S'trial_loop.thisTrialN'
p4173
I35
sg3633
S'21-nakd_banana_crunch.png'
p4174
sS'block_loop.thisIndex'
p4175
g3627
sg38
S'right'
p4176
sg59
g63
sS'trial_loop.thisN'
p4177
I35
sg33
S'1-treacle_cookies.png'
p4178
sg64
g65
sS'trial_loop.thisIndex'
p4179
g60
(g99
S'#\x00\x00\x00'
tRp4180
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4181
I0
sg3642
S'1-treacle_cookies.png'
p4182
sS'block_loop.thisRepN'
p4183
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4184
I1
sg3647
S'21-nakd_banana_crunch.png'
p4185
sg55
g11
sS'block_loop.thisTrial'
p4186
Nsg70
Vn
sS'block_loop.thisTrialN'
p4187
I0
sg39
F0.76679361967762816
sg34
g753
(S'\x07\xdf\x07\x04\r\x10 \x0e8\xa0'
tRp4188
sa(dp4189
S'trial_loop.thisTrialN'
p4190
I36
sg3633
S'49-yorkie.png'
p4191
sS'block_loop.thisIndex'
p4192
g3627
sg38
S'left'
p4193
sg59
g63
sS'trial_loop.thisN'
p4194
I36
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4195
g60
(g99
S'$\x00\x00\x00'
tRp4196
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4197
I0
sg3642
S'35-raisins.png'
p4198
sS'block_loop.thisRepN'
p4199
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4200
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4201
Nsg70
Vn
sS'block_loop.thisTrialN'
p4202
I0
sg39
F0.74998980783766456
sg34
g753
(S'\x07\xdf\x07\x04\r\x10&\x0b7\x18'
tRp4203
sa(dp4204
S'trial_loop.thisTrialN'
p4205
I37
sg3633
S'43-mrporky_pork_crackles_redo.png'
p4206
sS'block_loop.thisIndex'
p4207
g3627
sg38
S'right'
p4208
sg59
g63
sS'trial_loop.thisN'
p4209
I37
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4210
g60
(g99
S'%\x00\x00\x00'
tRp4211
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4212
I0
sg3642
S'18-mms.png'
p4213
sS'block_loop.thisRepN'
p4214
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4215
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4216
Nsg70
Vn
sS'block_loop.thisTrialN'
p4217
I0
sg39
F0.76664907627673529
sg34
g753
(S'\x07\xdf\x07\x04\r\x10,\x07\xbcx'
tRp4218
sa(dp4219
S'trial_loop.thisTrialN'
p4220
I38
sg3633
S'1-treacle_cookies.png'
p4221
sS'block_loop.thisIndex'
p4222
g3627
sg38
S'left'
p4223
sg59
g63
sS'trial_loop.thisN'
p4224
I38
sg33
g4185
sg64
g65
sS'trial_loop.thisIndex'
p4225
g60
(g99
S'&\x00\x00\x00'
tRp4226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4227
I0
sg3642
S'21-nakd_banana_crunch.png'
p4228
sS'block_loop.thisRepN'
p4229
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4230
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p4231
Nsg70
Vn
sS'block_loop.thisTrialN'
p4232
I0
sg39
F0.68333933459325635
sg34
g753
(S'\x07\xdf\x07\x04\r\x102\x04\xba\xf0'
tRp4233
sa(dp4234
S'trial_loop.thisTrialN'
p4235
I39
sg3633
g3919
sS'block_loop.thisIndex'
p4236
g3627
sg38
S'left'
p4237
sg59
g63
sS'trial_loop.thisN'
p4238
I39
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p4239
g60
(g99
S"'\x00\x00\x00"
tRp4240
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4241
I0
sg3642
g3927
sS'block_loop.thisRepN'
p4242
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4243
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4244
Nsg70
Vn
sS'block_loop.thisTrialN'
p4245
I0
sg39
F0.63326345643417881
sg34
g753
(S'\x07\xdf\x07\x04\r\x108\x00\x88\xb8'
tRp4246
sa(dp4247
S'trial_loop.thisTrialN'
p4248
I40
sg3633
g4221
sS'block_loop.thisIndex'
p4249
g3627
sg38
S'left'
p4250
sg59
g63
sS'trial_loop.thisN'
p4251
I40
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p4252
g60
(g99
S'(\x00\x00\x00'
tRp4253
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4254
I0
sg3642
g4228
sS'block_loop.thisRepN'
p4255
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4256
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p4257
Nsg70
Vn
sS'block_loop.thisTrialN'
p4258
I0
sg39
F0.73329718322838744
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\x01\n\xa6\x90'
tRp4259
sa(dp4260
S'trial_loop.thisTrialN'
p4261
I41
sg3633
g3688
sS'block_loop.thisIndex'
p4262
g3627
sg38
S'left'
p4263
sg59
g63
sS'trial_loop.thisN'
p4264
I41
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4265
g60
(g99
S')\x00\x00\x00'
tRp4266
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4267
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4268
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4269
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4270
Nsg70
Vn
sS'block_loop.thisTrialN'
p4271
I0
sg39
F0.86670133427560359
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\x07\x06\xf1X'
tRp4272
sa(dp4273
S'trial_loop.thisTrialN'
p4274
I42
sg3633
g3812
sS'block_loop.thisIndex'
p4275
g3627
sg38
S'left'
p4276
sg59
g63
sS'trial_loop.thisN'
p4277
I42
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4278
g60
(g99
S'*\x00\x00\x00'
tRp4279
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4280
I0
sg3642
g3820
sS'block_loop.thisRepN'
p4281
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4282
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4283
Nsg70
Vn
sS'block_loop.thisTrialN'
p4284
I0
sg39
F0.94989960363182036
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\r\x05\x99\x98'
tRp4285
sa(dp4286
S'trial_loop.thisTrialN'
p4287
I43
sg3633
g3872
sS'block_loop.thisIndex'
p4288
g3627
sg38
S'left'
p4289
sg59
g63
sS'trial_loop.thisN'
p4290
I43
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4291
g60
(g99
S'+\x00\x00\x00'
tRp4292
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4293
I0
sg3642
g3880
sS'block_loop.thisRepN'
p4294
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4295
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4296
Nsg70
Vn
sS'block_loop.thisTrialN'
p4297
I0
sg39
F0.68330854428222665
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\x13\x057\xf0'
tRp4298
sa(dp4299
S'trial_loop.thisTrialN'
p4300
I44
sg3633
g3936
sS'block_loop.thisIndex'
p4301
g3627
sg38
S'right'
p4302
sg59
g63
sS'trial_loop.thisN'
p4303
I44
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4304
g60
(g99
S',\x00\x00\x00'
tRp4305
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4306
I0
sg3642
g3944
sS'block_loop.thisRepN'
p4307
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4308
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p4309
Nsg70
Vn
sS'block_loop.thisTrialN'
p4310
I0
sg39
F0.79990631763030251
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\x19\x01\x05\xb8'
tRp4311
sa(dp4312
S'trial_loop.thisTrialN'
p4313
I45
sg3633
g4206
sS'block_loop.thisIndex'
p4314
g3627
sg38
S'right'
p4315
sg59
g63
sS'trial_loop.thisN'
p4316
I45
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p4317
g60
(g99
S'-\x00\x00\x00'
tRp4318
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4319
I0
sg3642
g4213
sS'block_loop.thisRepN'
p4320
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4321
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4322
Nsg70
Vn
sS'block_loop.thisTrialN'
p4323
I0
sg39
F0.78331119567064889
sg34
g753
(S'\x07\xdf\x07\x04\r\x11\x1e\r\xc3p'
tRp4324
sa(dp4325
S'trial_loop.thisTrialN'
p4326
I46
sg3633
g4174
sS'block_loop.thisIndex'
p4327
g3627
sg38
S'right'
p4328
sg59
g63
sS'trial_loop.thisN'
p4329
I46
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p4330
g60
(g99
S'.\x00\x00\x00'
tRp4331
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4332
I0
sg3642
g4182
sS'block_loop.thisRepN'
p4333
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4334
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p4335
Nsg70
Vn
sS'block_loop.thisTrialN'
p4336
I0
sg39
F0.88320066415872134
sg34
g753
(S'\x07\xdf\x07\x04\r\x11$\n\xc1\xe8'
tRp4337
sa(dp4338
S'trial_loop.thisTrialN'
p4339
I47
sg3633
g3842
sS'block_loop.thisIndex'
p4340
g3627
sg38
S'left'
p4341
sg59
g63
sS'trial_loop.thisN'
p4342
I47
sg33
g3853
sg64
g65
sS'trial_loop.thisIndex'
p4343
g60
(g99
S'/\x00\x00\x00'
tRp4344
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4345
I0
sg3642
g3850
sS'block_loop.thisRepN'
p4346
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4347
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p4348
Nsg70
Vn
sS'block_loop.thisTrialN'
p4349
I0
sg39
F0.80004915045810776
sg34
g753
(S'\x07\xdf\x07\x04\r\x11*\t\xa8\xa8'
tRp4350
sa(dp4351
S'trial_loop.thisTrialN'
p4352
I48
sg3633
g4131
sS'block_loop.thisIndex'
p4353
g3627
sg38
S'left'
p4354
sg59
g63
sS'trial_loop.thisN'
p4355
I48
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4356
g60
(g99
S'0\x00\x00\x00'
tRp4357
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4358
I0
sg3642
g4138
sS'block_loop.thisRepN'
p4359
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4360
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p4361
Nsg70
Vn
sS'block_loop.thisTrialN'
p4362
I0
sg39
F0.73325612948156049
sg34
g753
(S'\x07\xdf\x07\x04\r\x110\x07 8'
tRp4363
sa(dp4364
S'trial_loop.thisTrialN'
p4365
I49
sg3633
g4206
sS'block_loop.thisIndex'
p4366
g3627
sg38
S'right'
p4367
sg59
g63
sS'trial_loop.thisN'
p4368
I49
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p4369
g60
(g99
S'1\x00\x00\x00'
tRp4370
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4371
I0
sg3642
g4213
sS'block_loop.thisRepN'
p4372
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4373
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4374
Nsg70
Vn
sS'block_loop.thisTrialN'
p4375
I0
sg39
F0.66645598111699655
sg34
g753
(S'\x07\xdf\x07\x04\r\x116\x03k\x00'
tRp4376
sa(dp4377
S'trial_loop.thisTrialN'
p4378
I50
sg3633
S'10-bounty_redo.png'
p4379
sS'block_loop.thisIndex'
p4380
g3627
sg38
S'left'
p4381
sg59
g63
sS'trial_loop.thisN'
p4382
I50
sg33
S'10-bounty_redo.png'
p4383
sg64
g65
sS'trial_loop.thisIndex'
p4384
g60
(g99
S'2\x00\x00\x00'
tRp4385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4386
I0
sg3642
S'4-corn.png'
p4387
sS'block_loop.thisRepN'
p4388
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4389
I1
sg3647
S'4-corn.png'
p4390
sg55
g11
sS'block_loop.thisTrial'
p4391
Nsg70
Vn
sS'block_loop.thisTrialN'
p4392
I0
sg39
F0.89997169001981092
sg34
g753
(S'\x07\xdf\x07\x04\r\x11;\x0e<\x88'
tRp4393
sa(dp4394
S'trial_loop.thisTrialN'
p4395
I51
sg3633
S'20-fruit_pastilles.png'
p4396
sS'block_loop.thisIndex'
p4397
g3627
sg38
S'right'
p4398
sg59
g63
sS'trial_loop.thisN'
p4399
I51
sg33
S'2-steamed_puddings.png'
p4400
sg64
g65
sS'trial_loop.thisIndex'
p4401
g60
(g99
S'3\x00\x00\x00'
tRp4402
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4403
I0
sg3642
S'2-steamed_puddings.png'
p4404
sS'block_loop.thisRepN'
p4405
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4406
I1
sg3647
S'20-fruit_pastilles.png'
p4407
sg55
g11
sS'block_loop.thisTrial'
p4408
Nsg70
Vn
sS'block_loop.thisTrialN'
p4409
I0
sg39
F1.0166165041191562
sg34
g753
(S'\x07\xdf\x07\x04\r\x12\x05\r#H'
tRp4410
sa(dp4411
S'trial_loop.thisTrialN'
p4412
I52
sg3633
g4116
sS'block_loop.thisIndex'
p4413
g3627
sg38
S'right'
p4414
sg59
g63
sS'trial_loop.thisN'
p4415
I52
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p4416
g60
(g99
S'4\x00\x00\x00'
tRp4417
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4418
I0
sg3642
g4123
sS'block_loop.thisRepN'
p4419
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4420
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p4421
Nsg70
Vn
sS'block_loop.thisTrialN'
p4422
I0
sg39
F0.86628110355923127
sg34
g753
(S'\x07\xdf\x07\x04\r\x12\x0b\r\xf2P'
tRp4423
sa(dp4424
S'trial_loop.thisTrialN'
p4425
I53
sg3633
g4379
sS'block_loop.thisIndex'
p4426
g3627
sg38
S'left'
p4427
sg59
g63
sS'trial_loop.thisN'
p4428
I53
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p4429
g60
(g99
S'5\x00\x00\x00'
tRp4430
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4431
I0
sg3642
g4387
sS'block_loop.thisRepN'
p4432
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4433
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p4434
Nsg70
Vn
sS'block_loop.thisTrialN'
p4435
I0
sg39
F0.80018599628238007
sg34
g753
(S'\x07\xdf\x07\x04\r\x12\x11\x0c_\xf8'
tRp4436
sa(dp4437
S'trial_loop.thisTrialN'
p4438
I54
sg3633
g4099
sS'block_loop.thisIndex'
p4439
g3627
sg38
S'right'
p4440
sg59
g63
sS'trial_loop.thisN'
p4441
I54
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p4442
g60
(g99
S'6\x00\x00\x00'
tRp4443
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4444
I0
sg3642
g4107
sS'block_loop.thisRepN'
p4445
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4446
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4447
Nsg70
Vn
sS'block_loop.thisTrialN'
p4448
I0
sg39
F0.94998912360824761
sg34
g753
(S'\x07\xdf\x07\x04\r\x12\x17\t\xd7\x88'
tRp4449
sa(dp4450
S'trial_loop.thisTrialN'
p4451
I55
sg3633
g3748
sS'block_loop.thisIndex'
p4452
g3627
sg38
S'right'
p4453
sg59
g63
sS'trial_loop.thisN'
p4454
I55
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p4455
g60
(g99
S'7\x00\x00\x00'
tRp4456
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4457
I0
sg3642
g3756
sS'block_loop.thisRepN'
p4458
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4459
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p4460
Nsg70
Vn
sS'block_loop.thisTrialN'
p4461
I0
sg39
F0.96661189982842188
sg34
g753
(S'\x07\xdf\x07\x04\r\x12\x1d\t\xb4`'
tRp4462
sa(dp4463
S'trial_loop.thisTrialN'
p4464
I56
sg3633
S'3-ellas_strawberries_apples.png'
p4465
sS'block_loop.thisIndex'
p4466
g3627
sg38
S'left'
p4467
sg59
g63
sS'trial_loop.thisN'
p4468
I56
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p4469
g60
(g99
S'8\x00\x00\x00'
tRp4470
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4471
I0
sg3642
S'13-mccoys_steak_crisps.png'
p4472
sS'block_loop.thisRepN'
p4473
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4474
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4475
Nsg70
Vn
sS'block_loop.thisTrialN'
p4476
I0
sg39
F0.66657999764447595
sg34
g753
(S'\x07\xdf\x07\x04\r\x12#\t\x8dP'
tRp4477
sa(dp4478
S'trial_loop.thisTrialN'
p4479
I57
sg3633
g3748
sS'block_loop.thisIndex'
p4480
g3627
sg38
S'right'
p4481
sg59
g63
sS'trial_loop.thisN'
p4482
I57
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p4483
g60
(g99
S'9\x00\x00\x00'
tRp4484
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4485
I0
sg3642
g3756
sS'block_loop.thisRepN'
p4486
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4487
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p4488
Nsg70
Vn
sS'block_loop.thisTrialN'
p4489
I0
sg39
F0.71659857161466789
sg34
g753
(S'\x07\xdf\x07\x04\r\x12)\x05 \x80'
tRp4490
sa(dp4491
S'trial_loop.thisTrialN'
p4492
I58
sg3633
g3919
sS'block_loop.thisIndex'
p4493
g3627
sg38
S'left'
p4494
sg59
g63
sS'trial_loop.thisN'
p4495
I58
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p4496
g60
(g99
S':\x00\x00\x00'
tRp4497
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4498
I0
sg3642
g3927
sS'block_loop.thisRepN'
p4499
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4500
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4501
Nsg70
Vn
sS'block_loop.thisTrialN'
p4502
I0
sg39
F0.74986636150060804
sg34
g753
(S'\x07\xdf\x07\x04\r\x12/\x01(\xe0'
tRp4503
sa(dp4504
S'trial_loop.thisTrialN'
p4505
I59
sg3633
g3966
sS'block_loop.thisIndex'
p4506
g3627
sg38
S'right'
p4507
sg59
g63
sS'trial_loop.thisN'
p4508
I59
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4509
g60
(g99
S';\x00\x00\x00'
tRp4510
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4511
I0
sg3642
g3974
sS'block_loop.thisRepN'
p4512
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4513
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4514
Nsg70
Vn
sS'block_loop.thisTrialN'
p4515
I0
sg39
F0.75036356799319037
sg34
g753
(S'\x07\xdf\x07\x04\r\x124\r/\x00'
tRp4516
sa(dp4517
S'trial_loop.thisTrialN'
p4518
I60
sg3633
g3983
sS'block_loop.thisIndex'
p4519
g3627
sg38
S'right'
p4520
sg59
g63
sS'trial_loop.thisN'
p4521
I60
sg33
g3648
sg64
g65
sS'trial_loop.thisIndex'
p4522
g60
(g99
S'<\x00\x00\x00'
tRp4523
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4524
I0
sg3642
g3990
sS'block_loop.thisRepN'
p4525
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4526
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4527
Nsg70
Vn
sS'block_loop.thisTrialN'
p4528
I0
sg39
F1.2833147593637477
sg34
g753
(S'\x07\xdf\x07\x04\r\x12:\t\xf2\xe0'
tRp4529
sa(dp4530
S'trial_loop.thisTrialN'
p4531
I61
sg3633
S'34-hula_hoops_bbq_beef_redo.png'
p4532
sS'block_loop.thisIndex'
p4533
g3627
sg38
S'right'
p4534
sg59
g63
sS'trial_loop.thisN'
p4535
I61
sg33
g3823
sg64
g65
sS'trial_loop.thisIndex'
p4536
g60
(g99
S'=\x00\x00\x00'
tRp4537
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4538
I0
sg3642
S'36-fig_rolls.png'
p4539
sS'block_loop.thisRepN'
p4540
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4541
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4542
Nsg70
Vn
sS'block_loop.thisTrialN'
p4543
I0
sg39
F0.84991434306812152
sg34
g753
(S'\x07\xdf\x07\x04\r\x13\x04\x0e\x8e\x90'
tRp4544
sa(dp4545
S'trial_loop.thisTrialN'
p4546
I62
sg3633
g4465
sS'block_loop.thisIndex'
p4547
g3627
sg38
S'left'
p4548
sg59
g63
sS'trial_loop.thisN'
p4549
I62
sg33
g4110
sg64
g65
sS'trial_loop.thisIndex'
p4550
g60
(g99
S'>\x00\x00\x00'
tRp4551
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4552
I0
sg3642
g4472
sS'block_loop.thisRepN'
p4553
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4554
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4555
Nsg70
Vn
sS'block_loop.thisTrialN'
p4556
I0
sg39
F0.74998039968704688
sg34
g753
(S'\x07\xdf\x07\x04\r\x13\n\x0c\xfc8'
tRp4557
sa(dp4558
S'trial_loop.thisTrialN'
p4559
I63
sg3633
g4174
sS'block_loop.thisIndex'
p4560
g3627
sg38
S'right'
p4561
sg59
g63
sS'trial_loop.thisN'
p4562
I63
sg33
g4185
sg64
g65
sS'trial_loop.thisIndex'
p4563
g60
(g99
S'?\x00\x00\x00'
tRp4564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4565
I0
sg3642
g4182
sS'block_loop.thisRepN'
p4566
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4567
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p4568
Nsg70
Vn
sS'block_loop.thisTrialN'
p4569
I0
sg39
F0.74989202009237488
sg34
g753
(S'\x07\xdf\x07\x04\r\x13\x10\t\x81\x98'
tRp4570
sa(dp4571
S'trial_loop.thisTrialN'
p4572
I64
sg3633
g4191
sS'block_loop.thisIndex'
p4573
g3627
sg38
S'left'
p4574
sg59
g63
sS'trial_loop.thisN'
p4575
I64
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p4576
g60
(g99
S'@\x00\x00\x00'
tRp4577
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4578
I0
sg3642
g4198
sS'block_loop.thisRepN'
p4579
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4580
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p4581
Nsg70
Vn
sS'block_loop.thisTrialN'
p4582
I0
sg39
F0.73324358528043376
sg34
g753
(S'\x07\xdf\x07\x04\r\x13\x16\x06Ex'
tRp4583
sa(dp4584
S'trial_loop.thisTrialN'
p4585
I65
sg3633
g4159
sS'block_loop.thisIndex'
p4586
g3627
sg38
S'left'
p4587
sg59
g63
sS'trial_loop.thisN'
p4588
I65
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p4589
g60
(g99
S'A\x00\x00\x00'
tRp4590
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4591
I0
sg3642
g4166
sS'block_loop.thisRepN'
p4592
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4593
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p4594
Nsg70
Vn
sS'block_loop.thisTrialN'
p4595
I0
sg39
F0.78366870538411604
sg34
g753
(S'\x07\xdf\x07\x04\r\x13\x1c\x02\xca\xd8'
tRp4596
sa(dp4597
S'trial_loop.thisTrialN'
p4598
I66
sg3633
g3795
sS'block_loop.thisIndex'
p4599
g3627
sg38
S'left'
p4600
sg59
g63
sS'trial_loop.thisN'
p4601
I66
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p4602
g60
(g99
S'B\x00\x00\x00'
tRp4603
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4604
I0
sg3642
g3803
sS'block_loop.thisRepN'
p4605
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4606
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4607
Nsg70
Vn
sS'block_loop.thisTrialN'
p4608
I0
sg39
F0.83334288403148093
sg34
g753
(S'\x07\xdf\x07\x04\r\x13"\x00\x03\xe8'
tRp4609
sa(dp4610
S'trial_loop.thisTrialN'
p4611
I67
sg3633
g4099
sS'block_loop.thisIndex'
p4612
g3627
sg38
S'right'
p4613
sg59
g63
sS'trial_loop.thisN'
p4614
I67
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p4615
g60
(g99
S'C\x00\x00\x00'
tRp4616
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4617
I0
sg3642
g4107
sS'block_loop.thisRepN'
p4618
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4619
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4620
Nsg70
Vn
sS'block_loop.thisTrialN'
p4621
I0
sg39
F0.91665775743331324
sg34
g753
(S"\x07\xdf\x07\x04\r\x13'\r:\xb8"
tRp4622
sa(dp4623
S'trial_loop.thisTrialN'
p4624
I68
sg3633
g4131
sS'block_loop.thisIndex'
p4625
g3627
sg38
S'left'
p4626
sg59
g63
sS'trial_loop.thisN'
p4627
I68
sg33
g3947
sg64
g65
sS'trial_loop.thisIndex'
p4628
g60
(g99
S'D\x00\x00\x00'
tRp4629
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4630
I0
sg3642
g4138
sS'block_loop.thisRepN'
p4631
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4632
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p4633
Nsg70
Vn
sS'block_loop.thisTrialN'
p4634
I0
sg39
F0.89990697334906145
sg34
g753
(S'\x07\xdf\x07\x04\r\x13-\x0c_\xf8'
tRp4635
sa(dp4636
S'trial_loop.thisTrialN'
p4637
I69
sg3633
S'31-hobnobs.png'
p4638
sS'block_loop.thisIndex'
p4639
g3627
sg38
S'right'
p4640
sg59
g63
sS'trial_loop.thisN'
p4641
I69
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p4642
g60
(g99
S'E\x00\x00\x00'
tRp4643
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4644
I0
sg3642
S'25-kitkat.png'
p4645
sS'block_loop.thisRepN'
p4646
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4647
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p4648
Nsg70
Vn
sS'block_loop.thisTrialN'
p4649
I0
sg39
F0.83333718212179519
sg34
g753
(S'\x07\xdf\x07\x04\r\x133\x0bF\xb8'
tRp4650
sa(dp4651
S'trial_loop.thisTrialN'
p4652
I70
sg3633
g3634
sS'block_loop.thisIndex'
p4653
g3627
sg38
S'left'
p4654
sg59
g63
sS'trial_loop.thisN'
p4655
I70
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p4656
g60
(g99
S'F\x00\x00\x00'
tRp4657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4658
I0
sg3642
g3643
sS'block_loop.thisRepN'
p4659
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4660
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p4661
Nsg70
Vn
sS'block_loop.thisTrialN'
p4662
I0
sg39
F0.71666528395417117
sg34
g753
(S'\x07\xdf\x07\x04\r\x139\t7`'
tRp4663
sa(dp4664
S'trial_loop.thisTrialN'
p4665
I71
sg3633
g3936
sS'block_loop.thisIndex'
p4666
g3627
sg38
S'right'
p4667
sg59
g63
sS'trial_loop.thisN'
p4668
I71
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p4669
g60
(g99
S'G\x00\x00\x00'
tRp4670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4671
I0
sg3642
g3944
sS'block_loop.thisRepN'
p4672
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4673
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p4674
Nsg70
Vn
sS'block_loop.thisTrialN'
p4675
I0
sg39
F0.85036051747101737
sg34
g753
(S'\x07\xdf\x07\x04\r\x14\x03\x05\x82('
tRp4676
sa(dp4677
S'trial_loop.thisTrialN'
p4678
I72
sg3633
S'22-daim.png'
p4679
sS'block_loop.thisIndex'
p4680
g3627
sg38
S'left'
p4681
sg59
g63
sS'trial_loop.thisN'
p4682
I72
sg33
g3759
sg64
g65
sS'trial_loop.thisIndex'
p4683
g60
(g99
S'H\x00\x00\x00'
tRp4684
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4685
I0
sg3642
S'7-olives.png'
p4686
sS'block_loop.thisRepN'
p4687
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4688
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p4689
Nsg70
Vn
sS'block_loop.thisTrialN'
p4690
I0
sg39
F0.74995074975868192
sg34
g753
(S'\x07\xdf\x07\x04\r\x14\t\x03\xb1P'
tRp4691
sa(dp4692
S'trial_loop.thisTrialN'
p4693
I73
sg3633
g4011
sS'block_loop.thisIndex'
p4694
g3627
sg38
S'right'
p4695
sg59
g63
sS'trial_loop.thisN'
p4696
I73
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p4697
g60
(g99
S'I\x00\x00\x00'
tRp4698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4699
I0
sg3642
g4018
sS'block_loop.thisRepN'
p4700
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4701
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p4702
Nsg70
Vn
sS'block_loop.thisTrialN'
p4703
I0
sg39
F0.94988050223491882
sg34
g753
(S'\x07\xdf\x07\x04\r\x14\x0f\x00qH'
tRp4704
sa(dp4705
S'trial_loop.thisTrialN'
p4706
I74
sg3633
g4679
sS'block_loop.thisIndex'
p4707
g3627
sg38
S'left'
p4708
sg59
g63
sS'trial_loop.thisN'
p4709
I74
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p4710
g60
(g99
S'J\x00\x00\x00'
tRp4711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4712
I0
sg3642
g4686
sS'block_loop.thisRepN'
p4713
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4714
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p4715
Nsg70
Vn
sS'block_loop.thisTrialN'
p4716
I0
sg39
F0.74999693522386224
sg34
g753
(S'\x07\xdf\x07\x04\r\x14\x15\x00\x0f\xa0'
tRp4717
sa(dp4718
S'trial_loop.thisTrialN'
p4719
I75
sg3633
g4221
sS'block_loop.thisIndex'
p4720
g3627
sg38
S'left'
p4721
sg59
g63
sS'trial_loop.thisN'
p4722
I75
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p4723
g60
(g99
S'K\x00\x00\x00'
tRp4724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4725
I0
sg3642
g4228
sS'block_loop.thisRepN'
p4726
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4727
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p4728
Nsg70
Vn
sS'block_loop.thisTrialN'
p4729
I0
sg39
F0.70000145398716995
sg34
g753
(S'\x07\xdf\x07\x04\r\x14\x1a\x0c\x15\xc0'
tRp4730
sa(dp4731
S'trial_loop.thisTrialN'
p4732
I76
sg3633
g3889
sS'block_loop.thisIndex'
p4733
g3627
sg38
S'right'
p4734
sg59
g63
sS'trial_loop.thisN'
p4735
I76
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4736
g60
(g99
S'L\x00\x00\x00'
tRp4737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4738
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4739
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4740
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4741
Nsg70
Vn
sS'block_loop.thisTrialN'
p4742
I0
sg39
F0.73333937735696964
sg34
g753
(S'\x07\xdf\x07\x04\r\x14 \x08"\x08'
tRp4743
sa(dp4744
S'trial_loop.thisTrialN'
p4745
I77
sg3633
g3688
sS'block_loop.thisIndex'
p4746
g3627
sg38
S'left'
p4747
sg59
g63
sS'trial_loop.thisN'
p4748
I77
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4749
g60
(g99
S'M\x00\x00\x00'
tRp4750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4751
I0
sg3642
g3696
sS'block_loop.thisRepN'
p4752
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4753
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4754
Nsg70
Vn
sS'block_loop.thisTrialN'
p4755
I0
sg39
F0.58369476310963364
sg34
g753
(S'\x07\xdf\x07\x04\r\x14&\x04h\xe8'
tRp4756
sa(dp4757
S'trial_loop.thisTrialN'
p4758
I78
sg3633
g3889
sS'block_loop.thisIndex'
p4759
g3627
sg38
S'right'
p4760
sg59
g63
sS'trial_loop.thisN'
p4761
I78
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4762
g60
(g99
S'N\x00\x00\x00'
tRp4763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4764
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4765
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4766
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4767
Nsg70
Vn
sS'block_loop.thisTrialN'
p4768
I0
sg39
F0.73327409049488779
sg34
g753
(S'\x07\xdf\x07\x04\r\x14+\r\xcf('
tRp4769
sa(dp4770
S'trial_loop.thisTrialN'
p4771
I79
sg3633
g3904
sS'block_loop.thisIndex'
p4772
g3627
sg38
S'right'
p4773
sg59
g63
sS'trial_loop.thisN'
p4774
I79
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p4775
g60
(g99
S'O\x00\x00\x00'
tRp4776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4777
I0
sg3642
g3911
sS'block_loop.thisRepN'
p4778
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4779
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p4780
Nsg70
Vn
sS'block_loop.thisTrialN'
p4781
I0
sg39
F0.83299848870865389
sg34
g753
(S'\x07\xdf\x07\x04\r\x141\nT\x88'
tRp4782
sa(dp4783
S'trial_loop.thisTrialN'
p4784
I80
sg3633
g4679
sS'block_loop.thisIndex'
p4785
g3627
sg38
S'left'
p4786
sg59
g63
sS'trial_loop.thisN'
p4787
I80
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p4788
g60
(g99
S'P\x00\x00\x00'
tRp4789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4790
I0
sg3642
g4686
sS'block_loop.thisRepN'
p4791
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4792
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p4793
Nsg70
Vn
sS'block_loop.thisTrialN'
p4794
I0
sg39
F0.71663962536149484
sg34
g753
(S'\x07\xdf\x07\x04\r\x147\x08I\x18'
tRp4795
sa(dp4796
S'trial_loop.thisTrialN'
p4797
I81
sg3633
g4532
sS'block_loop.thisIndex'
p4798
g3627
sg38
S'right'
p4799
sg59
g63
sS'trial_loop.thisN'
p4800
I81
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p4801
g60
(g99
S'Q\x00\x00\x00'
tRp4802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4803
I0
sg3642
g4539
sS'block_loop.thisRepN'
p4804
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4805
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p4806
Nsg70
Vn
sS'block_loop.thisTrialN'
p4807
I0
sg39
F0.83332093168064603
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\x01\x04\x8f\xf8'
tRp4808
sa(dp4809
S'trial_loop.thisTrialN'
p4810
I82
sg3633
S'4-corn.png'
p4811
sS'block_loop.thisIndex'
p4812
g3627
sg38
S'right'
p4813
sg59
g63
sS'trial_loop.thisN'
p4814
I82
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p4815
g60
(g99
S'R\x00\x00\x00'
tRp4816
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4817
I0
sg3642
S'10-bounty_redo.png'
p4818
sS'block_loop.thisRepN'
p4819
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4820
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p4821
Nsg70
Vn
sS'block_loop.thisTrialN'
p4822
I0
sg39
F1.0665603830766486
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\x07\x02\x84\x88'
tRp4823
sa(dp4824
S'trial_loop.thisTrialN'
p4825
I83
sg3633
S'51-mars.png'
p4826
sS'block_loop.thisIndex'
p4827
g3627
sg38
S'left'
p4828
sg59
g63
sS'trial_loop.thisN'
p4829
I83
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p4830
g60
(g99
S'S\x00\x00\x00'
tRp4831
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4832
I0
sg3642
S'27-hartleys_raspberries_jelly.png'
p4833
sS'block_loop.thisRepN'
p4834
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4835
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p4836
Nsg70
Vn
sS'block_loop.thisTrialN'
p4837
I0
sg39
F0.68338209891317092
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\r\x04\x07@'
tRp4838
sa(dp4839
S'trial_loop.thisTrialN'
p4840
I84
sg3633
g3765
sS'block_loop.thisIndex'
p4841
g3627
sg38
S'left'
p4842
sg59
g63
sS'trial_loop.thisN'
p4843
I84
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p4844
g60
(g99
S'T\x00\x00\x00'
tRp4845
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4846
I0
sg3642
g3773
sS'block_loop.thisRepN'
p4847
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4848
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p4849
Nsg70
Vn
sS'block_loop.thisTrialN'
p4850
I0
sg39
F0.63326545210293261
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\x12\x0e\xdc\xb0'
tRp4851
sa(dp4852
S'trial_loop.thisTrialN'
p4853
I85
sg3633
S'2-steamed_puddings.png'
p4854
sS'block_loop.thisIndex'
p4855
g3627
sg38
S'left'
p4856
sg59
g63
sS'trial_loop.thisN'
p4857
I85
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p4858
g60
(g99
S'U\x00\x00\x00'
tRp4859
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4860
I0
sg3642
S'20-fruit_pastilles.png'
p4861
sS'block_loop.thisRepN'
p4862
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4863
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p4864
Nsg70
Vn
sS'block_loop.thisTrialN'
p4865
I0
sg39
F0.71659857161466789
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\x18\t\xb8H'
tRp4866
sa(dp4867
S'trial_loop.thisTrialN'
p4868
I86
sg3633
g4069
sS'block_loop.thisIndex'
p4869
g3627
sg38
S'right'
p4870
sg59
g63
sS'trial_loop.thisN'
p4871
I86
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p4872
g60
(g99
S'V\x00\x00\x00'
tRp4873
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4874
I0
sg3642
g4077
sS'block_loop.thisRepN'
p4875
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4876
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p4877
Nsg70
Vn
sS'block_loop.thisTrialN'
p4878
I0
sg39
F0.81659552109340439
sg34
g753
(S'\x07\xdf\x07\x04\r\x15\x1e\x05\xff('
tRp4879
sa(dp4880
S'trial_loop.thisTrialN'
p4881
I87
sg3633
g4396
sS'block_loop.thisIndex'
p4882
g3627
sg38
S'right'
p4883
sg59
g63
sS'trial_loop.thisN'
p4884
I87
sg33
g4407
sg64
g65
sS'trial_loop.thisIndex'
p4885
g60
(g99
S'W\x00\x00\x00'
tRp4886
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4887
I0
sg3642
g4404
sS'block_loop.thisRepN'
p4888
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4889
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p4890
Nsg70
Vn
sS'block_loop.thisTrialN'
p4891
I0
sg39
F0.74994191179848713
sg34
g753
(S'\x07\xdf\x07\x04\r\x15$\x03\xb58'
tRp4892
sa(dp4893
S'trial_loop.thisTrialN'
p4894
I88
sg3633
S'42-mrkipling_lemon_slices.png'
p4895
sS'block_loop.thisIndex'
p4896
g3627
sg38
S'left'
p4897
sg59
g63
sS'trial_loop.thisN'
p4898
I88
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p4899
g60
(g99
S'X\x00\x00\x00'
tRp4900
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4901
I0
sg3642
S'16-skips_prawn.png'
p4902
sS'block_loop.thisRepN'
p4903
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4904
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4905
Nsg70
Vn
sS'block_loop.thisTrialN'
p4906
I0
sg39
F0.78322538193515356
sg34
g753
(S'\x07\xdf\x07\x04\r\x15*\x00y\x18'
tRp4907
sa(dp4908
S'trial_loop.thisTrialN'
p4909
I89
sg3633
g4465
sS'block_loop.thisIndex'
p4910
g3627
sg38
S'left'
p4911
sg59
g63
sS'trial_loop.thisN'
p4912
I89
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p4913
g60
(g99
S'Y\x00\x00\x00'
tRp4914
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4915
I0
sg3642
g4472
sS'block_loop.thisRepN'
p4916
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4917
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p4918
Nsg70
Vn
sS'block_loop.thisTrialN'
p4919
I0
sg39
F0.83370524036854476
sg34
g753
(S'\x07\xdf\x07\x04\r\x15/\x0c\xf8P'
tRp4920
sa(dp4921
S'trial_loop.thisTrialN'
p4922
I90
sg3633
g4069
sS'block_loop.thisIndex'
p4923
g3627
sg38
S'right'
p4924
sg59
g63
sS'trial_loop.thisN'
p4925
I90
sg33
g4080
sg64
g65
sS'trial_loop.thisIndex'
p4926
g60
(g99
S'Z\x00\x00\x00'
tRp4927
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4928
I0
sg3642
g4077
sS'block_loop.thisRepN'
p4929
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4930
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p4931
Nsg70
Vn
sS'block_loop.thisTrialN'
p4932
I0
sg39
F0.70005704760296794
sg34
g753
(S'\x07\xdf\x07\x04\r\x155\n\xe8\xf8'
tRp4933
sa(dp4934
S'trial_loop.thisTrialN'
p4935
I91
sg3633
g4379
sS'block_loop.thisIndex'
p4936
g3627
sg38
S'left'
p4937
sg59
g63
sS'trial_loop.thisN'
p4938
I91
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p4939
g60
(g99
S'[\x00\x00\x00'
tRp4940
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4941
I0
sg3642
g4387
sS'block_loop.thisRepN'
p4942
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4943
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p4944
Nsg70
Vn
sS'block_loop.thisTrialN'
p4945
I0
sg39
F0.91653003466399241
sg34
g753
(S'\x07\xdf\x07\x04\r\x15;\x06\xb6\xc0'
tRp4946
sa(dp4947
S'trial_loop.thisTrialN'
p4948
I92
sg3633
g3889
sS'block_loop.thisIndex'
p4949
g3627
sg38
S'right'
p4950
sg59
g63
sS'trial_loop.thisN'
p4951
I92
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p4952
g60
(g99
S'\\\x00\x00\x00'
tRp4953
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4954
I0
sg3642
g3896
sS'block_loop.thisRepN'
p4955
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4956
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p4957
Nsg70
Vn
sS'block_loop.thisTrialN'
p4958
I0
sg39
F0.85000243756621785
sg34
g753
(S'\x07\xdf\x07\x04\r\x16\x05\x06\x1a\x80'
tRp4959
sa(dp4960
S'trial_loop.thisTrialN'
p4961
I93
sg3633
S'26-walkers_smoky_bacon.png'
p4962
sS'block_loop.thisIndex'
p4963
g3627
sg38
S'right'
p4964
sg59
g63
sS'trial_loop.thisN'
p4965
I93
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p4966
g60
(g99
S']\x00\x00\x00'
tRp4967
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4968
I0
sg3642
S'44-crunch.png'
p4969
sS'block_loop.thisRepN'
p4970
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4971
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p4972
Nsg70
Vn
sS'block_loop.thisTrialN'
p4973
I0
sg39
F0.8997353458789803
sg34
g753
(S'\x07\xdf\x07\x04\r\x16\x0b\x04I\xa8'
tRp4974
sa(dp4975
S'trial_loop.thisTrialN'
p4976
I94
sg3633
g4206
sS'block_loop.thisIndex'
p4977
g3627
sg38
S'right'
p4978
sg59
g63
sS'trial_loop.thisN'
p4979
I94
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p4980
g60
(g99
S'^\x00\x00\x00'
tRp4981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4982
I0
sg3642
g4213
sS'block_loop.thisRepN'
p4983
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4984
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p4985
Nsg70
Vn
sS'block_loop.thisTrialN'
p4986
I0
sg39
F1.2166337809048855
sg34
g753
(S'\x07\xdf\x07\x04\r\x16\x11\x030h'
tRp4987
sa(dp4988
S'trial_loop.thisTrialN'
p4989
I95
sg3633
g4895
sS'block_loop.thisIndex'
p4990
g3627
sg38
S'left'
p4991
sg59
g63
sS'trial_loop.thisN'
p4992
I95
sg33
g3716
sg64
g65
sS'trial_loop.thisIndex'
p4993
g60
(g99
S'_\x00\x00\x00'
tRp4994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p4995
I0
sg3642
g4902
sS'block_loop.thisRepN'
p4996
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p4997
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p4998
Nsg70
Vn
sS'block_loop.thisTrialN'
p4999
I0
sg39
F1.1332587523593247
sg34
g753
(S'\x07\xdf\x07\x04\r\x16\x17\x07\x14\x80'
tRp5000
sa(dp5001
S'trial_loop.thisTrialN'
p5002
I96
sg3633
g4854
sS'block_loop.thisIndex'
p5003
g3627
sg38
S'left'
p5004
sg59
g63
sS'trial_loop.thisN'
p5005
I96
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5006
g60
(g99
S'`\x00\x00\x00'
tRp5007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5008
I0
sg3642
g4861
sS'block_loop.thisRepN'
p5009
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5010
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5011
Nsg70
Vn
sS'block_loop.thisTrialN'
p5012
I0
sg39
F0.66667094309832464
sg34
g753
(S'\x07\xdf\x07\x04\r\x16\x1d\t\x8dP'
tRp5013
sa(dp5014
S'trial_loop.thisTrialN'
p5015
I97
sg3633
g3904
sS'block_loop.thisIndex'
p5016
g3627
sg38
S'right'
p5017
sg59
g63
sS'trial_loop.thisN'
p5018
I97
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5019
g60
(g99
S'a\x00\x00\x00'
tRp5020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5021
I0
sg3642
g3911
sS'block_loop.thisRepN'
p5022
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5023
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5024
Nsg70
Vn
sS'block_loop.thisTrialN'
p5025
I0
sg39
F0.91659018980863038
sg34
g753
(S'\x07\xdf\x07\x04\r\x16#\x04\xe2\x00'
tRp5026
sa(dp5027
S'trial_loop.thisTrialN'
p5028
I98
sg3633
g3654
sS'block_loop.thisIndex'
p5029
g3627
sg38
S'left'
p5030
sg59
g63
sS'trial_loop.thisN'
p5031
I98
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5032
g60
(g99
S'b\x00\x00\x00'
tRp5033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5034
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5035
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5036
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5037
Nsg70
Vn
sS'block_loop.thisTrialN'
p5038
I0
sg39
F0.88294949505234399
sg34
g753
(S'\x07\xdf\x07\x04\r\x16)\x04E\xc0'
tRp5039
sa(dp5040
S'trial_loop.thisTrialN'
p5041
I99
sg3633
g3904
sS'block_loop.thisIndex'
p5042
g3627
sg38
S'right'
p5043
sg59
g63
sS'trial_loop.thisN'
p5044
I99
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5045
g60
(g99
S'c\x00\x00\x00'
tRp5046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5047
I0
sg3642
g3911
sS'block_loop.thisRepN'
p5048
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5049
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5050
Nsg70
Vn
sS'block_loop.thisTrialN'
p5051
I0
sg39
F0.8666323411725898
sg34
g753
(S'\x07\xdf\x07\x04\r\x16/\x02\xee\x00'
tRp5052
sa(dp5053
S'trial_loop.thisTrialN'
p5054
I100
sg3633
g4191
sS'block_loop.thisIndex'
p5055
g3627
sg38
S'left'
p5056
sg59
g63
sS'trial_loop.thisN'
p5057
I100
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5058
g60
(g99
S'd\x00\x00\x00'
tRp5059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5060
I0
sg3642
g4198
sS'block_loop.thisRepN'
p5061
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5062
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5063
Nsg70
Vn
sS'block_loop.thisTrialN'
p5064
I0
sg39
F0.71655580729475332
sg34
g753
(S'\x07\xdf\x07\x04\r\x165\x01[\xa8'
tRp5065
sa(dp5066
S'trial_loop.thisTrialN'
p5067
I101
sg3633
g3688
sS'block_loop.thisIndex'
p5068
g3627
sg38
S'left'
p5069
sg59
g63
sS'trial_loop.thisN'
p5070
I101
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5071
g60
(g99
S'e\x00\x00\x00'
tRp5072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5073
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5074
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5075
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5076
Nsg70
Vn
sS'block_loop.thisTrialN'
p5077
I0
sg39
F0.83368528368555417
sg34
g753
(S'\x07\xdf\x07\x04\r\x16:\x0c\xe4\xc8'
tRp5078
sa(dp5079
S'trial_loop.thisTrialN'
p5080
I102
sg3633
g4026
sS'block_loop.thisIndex'
p5081
g3627
sg38
S'right'
p5082
sg59
g63
sS'trial_loop.thisN'
p5083
I102
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5084
g60
(g99
S'f\x00\x00\x00'
tRp5085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5086
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5087
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5088
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5089
Nsg70
Vn
sS'block_loop.thisTrialN'
p5090
I0
sg39
F1.0833698968272074
sg34
g753
(S'\x07\xdf\x07\x04\r\x17\x04\n\xd9X'
tRp5091
sa(dp5092
S'trial_loop.thisTrialN'
p5093
I103
sg3633
g4396
sS'block_loop.thisIndex'
p5094
g3627
sg38
S'right'
p5095
sg59
g63
sS'trial_loop.thisN'
p5096
I103
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5097
g60
(g99
S'g\x00\x00\x00'
tRp5098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5099
I0
sg3642
g4404
sS'block_loop.thisRepN'
p5100
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5101
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5102
Nsg70
Vn
sS'block_loop.thisTrialN'
p5103
I0
sg39
F1.1666528395362548
sg34
g753
(S'\x07\xdf\x07\x04\r\x17\n\x0c\x9a\x90'
tRp5104
sa(dp5105
S'trial_loop.thisTrialN'
p5106
I104
sg3633
g3688
sS'block_loop.thisIndex'
p5107
g3627
sg38
S'left'
p5108
sg59
g63
sS'trial_loop.thisN'
p5109
I104
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5110
g60
(g99
S'h\x00\x00\x00'
tRp5111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5112
I0
sg3642
g3696
sS'block_loop.thisRepN'
p5113
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5114
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5115
Nsg70
Vn
sS'block_loop.thisTrialN'
p5116
I0
sg39
F0.75000919432841329
sg34
g753
(S'\x07\xdf\x07\x04\r\x17\x11\x00J8'
tRp5117
sa(dp5118
S'trial_loop.thisTrialN'
p5119
I105
sg3633
g4221
sS'block_loop.thisIndex'
p5120
g3627
sg38
S'left'
p5121
sg59
g63
sS'trial_loop.thisN'
p5122
I105
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p5123
g60
(g99
S'i\x00\x00\x00'
tRp5124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5125
I0
sg3642
g4228
sS'block_loop.thisRepN'
p5126
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5127
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p5128
Nsg70
Vn
sS'block_loop.thisTrialN'
p5129
I0
sg39
F0.8665439615779178
sg34
g753
(S'\x07\xdf\x07\x04\r\x17\x16\x0cPX'
tRp5130
sa(dp5131
S'trial_loop.thisTrialN'
p5132
I106
sg3633
g4026
sS'block_loop.thisIndex'
p5133
g3627
sg38
S'right'
p5134
sg59
g63
sS'trial_loop.thisN'
p5135
I106
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p5136
g60
(g99
S'j\x00\x00\x00'
tRp5137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5138
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5139
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5140
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5141
Nsg70
Vn
sS'block_loop.thisTrialN'
p5142
I0
sg39
F0.79985813649636839
sg34
g753
(S'\x07\xdf\x07\x04\r\x17\x1c\n\xbe\x00'
tRp5143
sa(dp5144
S'trial_loop.thisTrialN'
p5145
I107
sg3633
g4465
sS'block_loop.thisIndex'
p5146
g3627
sg38
S'left'
p5147
sg59
g63
sS'trial_loop.thisN'
p5148
I107
sg33
g4110
sg64
g65
sS'trial_loop.thisIndex'
p5149
g60
(g99
S'k\x00\x00\x00'
tRp5150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5151
I0
sg3642
g4472
sS'block_loop.thisRepN'
p5152
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5153
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5154
Nsg70
Vn
sS'block_loop.thisTrialN'
p5155
I0
sg39
F0.71660455861911032
sg34
g753
(S'\x07\xdf\x07\x04\r\x17"\x085\x90'
tRp5156
sa(dp5157
S'trial_loop.thisTrialN'
p5158
I108
sg3633
g3983
sS'block_loop.thisIndex'
p5159
g3627
sg38
S'right'
p5160
sg59
g63
sS'trial_loop.thisN'
p5161
I108
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5162
g60
(g99
S'l\x00\x00\x00'
tRp5163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5164
I0
sg3642
g3990
sS'block_loop.thisRepN'
p5165
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5166
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5167
Nsg70
Vn
sS'block_loop.thisTrialN'
p5168
I0
sg39
F0.76654929286360129
sg34
g753
(S'\x07\xdf\x07\x04\r\x17(\x04\x80X'
tRp5169
sa(dp5170
S'trial_loop.thisTrialN'
p5171
I109
sg3633
g4379
sS'block_loop.thisIndex'
p5172
g3627
sg38
S'left'
p5173
sg59
g63
sS'trial_loop.thisN'
p5174
I109
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p5175
g60
(g99
S'm\x00\x00\x00'
tRp5176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5177
I0
sg3642
g4387
sS'block_loop.thisRepN'
p5178
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5179
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p5180
Nsg70
Vn
sS'block_loop.thisTrialN'
p5181
I0
sg39
F0.76653874433122837
sg34
g753
(S'\x07\xdf\x07\x04\r\x17.\x01~\xd0'
tRp5182
sa(dp5183
S'trial_loop.thisTrialN'
p5184
I110
sg3633
g4116
sS'block_loop.thisIndex'
p5185
g3627
sg38
S'right'
p5186
sg59
g63
sS'trial_loop.thisN'
p5187
I110
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5188
g60
(g99
S'n\x00\x00\x00'
tRp5189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5190
I0
sg3642
g4123
sS'block_loop.thisRepN'
p5191
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5192
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5193
Nsg70
Vn
sS'block_loop.thisTrialN'
p5194
I0
sg39
F0.71637277600621019
sg34
g753
(S'\x07\xdf\x07\x04\r\x173\r\x81\x08'
tRp5195
sa(dp5196
S'trial_loop.thisTrialN'
p5197
I111
sg3633
g4895
sS'block_loop.thisIndex'
p5198
g3627
sg38
S'left'
p5199
sg59
g63
sS'trial_loop.thisN'
p5200
I111
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5201
g60
(g99
S'o\x00\x00\x00'
tRp5202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5203
I0
sg3642
g4902
sS'block_loop.thisRepN'
p5204
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5205
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5206
Nsg70
Vn
sS'block_loop.thisTrialN'
p5207
I0
sg39
F0.69988028841362393
sg34
g753
(S'\x07\xdf\x07\x04\r\x179\t\xcb\xd0'
tRp5208
sa(dp5209
S'trial_loop.thisTrialN'
p5210
I112
sg3633
g4811
sS'block_loop.thisIndex'
p5211
g3627
sg38
S'right'
p5212
sg59
g63
sS'trial_loop.thisN'
p5213
I112
sg33
g4390
sg64
g65
sS'trial_loop.thisIndex'
p5214
g60
(g99
S'p\x00\x00\x00'
tRp5215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5216
I0
sg3642
g4818
sS'block_loop.thisRepN'
p5217
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5218
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p5219
Nsg70
Vn
sS'block_loop.thisTrialN'
p5220
I0
sg39
F0.91665975310206704
sg34
g753
(S'\x07\xdf\x07\x04\r\x18\x03\x05\xd8\x18'
tRp5221
sa(dp5222
S'trial_loop.thisTrialN'
p5223
I113
sg3633
g4465
sS'block_loop.thisIndex'
p5224
g3627
sg38
S'left'
p5225
sg59
g63
sS'trial_loop.thisN'
p5226
I113
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p5227
g60
(g99
S'q\x00\x00\x00'
tRp5228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5229
I0
sg3642
g4472
sS'block_loop.thisRepN'
p5230
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5231
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5232
Nsg70
Vn
sS'block_loop.thisTrialN'
p5233
I0
sg39
F0.7333091572372723
sg34
g753
(S'\x07\xdf\x07\x04\r\x18\t\x04\xf9p'
tRp5234
sa(dp5235
S'trial_loop.thisTrialN'
p5236
I114
sg3633
g4811
sS'block_loop.thisIndex'
p5237
g3627
sg38
S'right'
p5238
sg59
g63
sS'trial_loop.thisN'
p5239
I114
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p5240
g60
(g99
S'r\x00\x00\x00'
tRp5241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5242
I0
sg3642
g4818
sS'block_loop.thisRepN'
p5243
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5244
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p5245
Nsg70
Vn
sS'block_loop.thisTrialN'
p5246
I0
sg39
F0.78328753274672636
sg34
g753
(S'\x07\xdf\x07\x04\r\x18\x0f\x01~\xd0'
tRp5247
sa(dp5248
S'trial_loop.thisTrialN'
p5249
I115
sg3633
g3842
sS'block_loop.thisIndex'
p5250
g3627
sg38
S'left'
p5251
sg59
g63
sS'trial_loop.thisN'
p5252
I115
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p5253
g60
(g99
S's\x00\x00\x00'
tRp5254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5255
I0
sg3642
g3850
sS'block_loop.thisRepN'
p5256
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5257
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p5258
Nsg70
Vn
sS'block_loop.thisTrialN'
p5259
I0
sg39
F0.96671681495899975
sg34
g753
(S'\x07\xdf\x07\x04\r\x18\x14\r\xbf\x88'
tRp5260
sa(dp5261
S'trial_loop.thisTrialN'
p5262
I116
sg3633
g3919
sS'block_loop.thisIndex'
p5263
g3627
sg38
S'left'
p5264
sg59
g63
sS'trial_loop.thisN'
p5265
I116
sg33
g3929
sg64
g65
sS'trial_loop.thisIndex'
p5266
g60
(g99
S't\x00\x00\x00'
tRp5267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5268
I0
sg3642
g3927
sS'block_loop.thisRepN'
p5269
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5270
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5271
Nsg70
Vn
sS'block_loop.thisTrialN'
p5272
I0
sg39
F0.66653181651145132
sg34
g753
(S'\x07\xdf\x07\x04\r\x18\x1a\r\xd6\xf8'
tRp5273
sa(dp5274
S'trial_loop.thisTrialN'
p5275
I117
sg3633
g3634
sS'block_loop.thisIndex'
p5276
g3627
sg38
S'left'
p5277
sg59
g63
sS'trial_loop.thisN'
p5278
I117
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5279
g60
(g99
S'u\x00\x00\x00'
tRp5280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5281
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5282
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5283
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5284
Nsg70
Vn
sS'block_loop.thisTrialN'
p5285
I0
sg39
F1.0833108820652342
sg34
g753
(S'\x07\xdf\x07\x04\r\x18 \t+\xa8'
tRp5286
sa(dp5287
S'trial_loop.thisTrialN'
p5288
I118
sg3633
S'29-beans.png'
p5289
sS'block_loop.thisIndex'
p5290
g3627
sg38
S'right'
p5291
sg59
g63
sS'trial_loop.thisN'
p5292
I118
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5293
g60
(g99
S'v\x00\x00\x00'
tRp5294
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5295
I0
sg3642
S'46-pistachios.png'
p5296
sS'block_loop.thisRepN'
p5297
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5298
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p5299
Nsg70
Vn
sS'block_loop.thisTrialN'
p5300
I0
sg39
F1.1336476225742445
sg34
g753
(S'\x07\xdf\x07\x04\r\x18&\x0b+`'
tRp5301
sa(dp5302
S'trial_loop.thisTrialN'
p5303
I119
sg3633
g4069
sS'block_loop.thisIndex'
p5304
g3627
sg38
S'right'
p5305
sg59
g63
sS'trial_loop.thisN'
p5306
I119
sg33
g4080
sg64
g65
sS'trial_loop.thisIndex'
p5307
g60
(g99
S'w\x00\x00\x00'
tRp5308
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5309
I0
sg3642
g4077
sS'block_loop.thisRepN'
p5310
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5311
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p5312
Nsg70
Vn
sS'block_loop.thisTrialN'
p5313
I0
sg39
F1.0499002593505793
sg34
g753
(S'\x07\xdf\x07\x04\r\x18,\r\xa40'
tRp5314
sa(dp5315
S'trial_loop.thisTrialN'
p5316
I120
sg3633
g4854
sS'block_loop.thisIndex'
p5317
g3627
sg38
S'left'
p5318
sg59
g63
sS'trial_loop.thisN'
p5319
I120
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5320
g60
(g99
S'x\x00\x00\x00'
tRp5321
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5322
I0
sg3642
g4861
sS'block_loop.thisRepN'
p5323
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5324
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5325
Nsg70
Vn
sS'block_loop.thisTrialN'
p5326
I0
sg39
F0.68330654861438234
sg34
g753
(S'\x07\xdf\x07\x04\r\x182\x0e\xecP'
tRp5327
sa(dp5328
S'trial_loop.thisTrialN'
p5329
I121
sg3633
g3654
sS'block_loop.thisIndex'
p5330
g3627
sg38
S'left'
p5331
sg59
g63
sS'trial_loop.thisN'
p5332
I121
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5333
g60
(g99
S'y\x00\x00\x00'
tRp5334
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5335
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5336
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5337
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5338
Nsg70
Vn
sS'block_loop.thisTrialN'
p5339
I0
sg39
F0.81629132423131523
sg34
g753
(S'\x07\xdf\x07\x04\r\x188\n\x7f\x80'
tRp5340
sa(dp5341
S'trial_loop.thisTrialN'
p5342
I122
sg3633
g3889
sS'block_loop.thisIndex'
p5343
g3627
sg38
S'right'
p5344
sg59
g63
sS'trial_loop.thisN'
p5345
I122
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5346
g60
(g99
S'z\x00\x00\x00'
tRp5347
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5348
I0
sg3642
g3896
sS'block_loop.thisRepN'
p5349
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5350
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5351
Nsg70
Vn
sS'block_loop.thisTrialN'
p5352
I0
sg39
F0.70003167410686729
sg34
g753
(S'\x07\xdf\x07\x04\r\x19\x02\x085\x90'
tRp5353
sa(dp5354
S'trial_loop.thisTrialN'
p5355
I123
sg3633
g3872
sS'block_loop.thisIndex'
p5356
g3627
sg38
S'left'
p5357
sg59
g63
sS'trial_loop.thisN'
p5358
I123
sg33
g3883
sg64
g65
sS'trial_loop.thisIndex'
p5359
g60
(g99
S'{\x00\x00\x00'
tRp5360
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5361
I0
sg3642
g3880
sS'block_loop.thisRepN'
p5362
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5363
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5364
Nsg70
Vn
sS'block_loop.thisTrialN'
p5365
I0
sg39
F0.68325494633518247
sg34
g753
(S'\x07\xdf\x07\x04\r\x19\x08\x04A\xd8'
tRp5366
sa(dp5367
S'trial_loop.thisTrialN'
p5368
I124
sg3633
g3966
sS'block_loop.thisIndex'
p5369
g3627
sg38
S'right'
p5370
sg59
g63
sS'trial_loop.thisN'
p5371
I124
sg33
g3977
sg64
g65
sS'trial_loop.thisIndex'
p5372
g60
(g99
S'|\x00\x00\x00'
tRp5373
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5374
I0
sg3642
g3974
sS'block_loop.thisRepN'
p5375
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5376
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5377
Nsg70
Vn
sS'block_loop.thisTrialN'
p5378
I0
sg39
F0.83333148021301895
sg34
g753
(S'\x07\xdf\x07\x04\r\x19\r\x0f\x13`'
tRp5379
sa(dp5380
S'trial_loop.thisTrialN'
p5381
I125
sg3633
g4638
sS'block_loop.thisIndex'
p5382
g3627
sg38
S'right'
p5383
sg59
g63
sS'trial_loop.thisN'
p5384
I125
sg33
g3799
sg64
g65
sS'trial_loop.thisIndex'
p5385
g60
(g99
S'}\x00\x00\x00'
tRp5386
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5387
I0
sg3642
g4645
sS'block_loop.thisRepN'
p5388
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5389
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5390
Nsg70
Vn
sS'block_loop.thisTrialN'
p5391
I0
sg39
F0.85001811781694414
sg34
g753
(S'\x07\xdf\x07\x04\r\x19\x13\r\x07\xf0'
tRp5392
sa(dp5393
S'trial_loop.thisTrialN'
p5394
I126
sg3633
g3671
sS'block_loop.thisIndex'
p5395
g3627
sg38
S'left'
p5396
sg59
g63
sS'trial_loop.thisN'
p5397
I126
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p5398
g60
(g99
S'~\x00\x00\x00'
tRp5399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5400
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5401
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5402
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5403
Nsg70
Vn
sS'block_loop.thisTrialN'
p5404
I0
sg39
F1.2499657172702427
sg34
g753
(S'\x07\xdf\x07\x04\r\x19\x19\x0b7\x18'
tRp5405
sa(dp5406
S'trial_loop.thisTrialN'
p5407
I127
sg3633
g4206
sS'block_loop.thisIndex'
p5408
g3627
sg38
S'right'
p5409
sg59
g63
sS'trial_loop.thisN'
p5410
I127
sg33
g3923
sg64
g65
sS'trial_loop.thisIndex'
p5411
g60
(g99
S'\x7f\x00\x00\x00'
tRp5412
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5413
I0
sg3642
g4213
sS'block_loop.thisRepN'
p5414
I1
sg3645
g3929
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5415
I1
sg3647
g3923
sg55
g11
sS'block_loop.thisTrial'
p5416
Nsg70
Vn
sS'block_loop.thisTrialN'
p5417
I0
sg39
F0.86670218956169265
sg34
g753
(S'\x07\xdf\x07\x04\r\x19 \x00U\xf0'
tRp5418
sa(dp5419
S'trial_loop.thisTrialN'
p5420
I128
sg3633
g4191
sS'block_loop.thisIndex'
p5421
g3627
sg38
S'left'
p5422
sg59
g63
sS'trial_loop.thisN'
p5423
I128
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5424
g60
(g99
S'\x80\x00\x00\x00'
tRp5425
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5426
I0
sg3642
g4198
sS'block_loop.thisRepN'
p5427
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5428
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5429
Nsg70
Vn
sS'block_loop.thisTrialN'
p5430
I0
sg39
F0.63333986201996595
sg34
g753
(S'\x07\xdf\x07\x04\r\x19%\x0e\x05\xd8'
tRp5431
sa(dp5432
S'trial_loop.thisTrialN'
p5433
I129
sg3633
g4099
sS'block_loop.thisIndex'
p5434
g3627
sg38
S'right'
p5435
sg59
g63
sS'trial_loop.thisN'
p5436
I129
sg33
g4110
sg64
g65
sS'trial_loop.thisIndex'
p5437
g60
(g99
S'\x81\x00\x00\x00'
tRp5438
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5439
I0
sg3642
g4107
sS'block_loop.thisRepN'
p5440
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5441
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p5442
Nsg70
Vn
sS'block_loop.thisTrialN'
p5443
I0
sg39
F0.81659780185691488
sg34
g753
(S'\x07\xdf\x07\x04\r\x19+\t\x1c\x08'
tRp5444
sa(dp5445
S'trial_loop.thisTrialN'
p5446
I130
sg3633
g3654
sS'block_loop.thisIndex'
p5447
g3627
sg38
S'left'
p5448
sg59
g63
sS'trial_loop.thisN'
p5449
I130
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5450
g60
(g99
S'\x82\x00\x00\x00'
tRp5451
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5452
I0
sg3642
g3662
sS'block_loop.thisRepN'
p5453
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5454
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5455
Nsg70
Vn
sS'block_loop.thisTrialN'
p5456
I0
sg39
F0.71665844166273018
sg34
g753
(S'\x07\xdf\x07\x04\r\x191\x06\xd2\x18'
tRp5457
sa(dp5458
S'trial_loop.thisTrialN'
p5459
I131
sg3633
g5289
sS'block_loop.thisIndex'
p5460
g3627
sg38
S'right'
p5461
sg59
g63
sS'trial_loop.thisN'
p5462
I131
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5463
g60
(g99
S'\x83\x00\x00\x00'
tRp5464
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5465
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5466
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5467
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p5468
Nsg70
Vn
sS'block_loop.thisTrialN'
p5469
I0
sg39
F0.91651235874542181
sg34
g753
(S'\x07\xdf\x07\x04\r\x197\x02\xde`'
tRp5470
sa(dp5471
S'trial_loop.thisTrialN'
p5472
I132
sg3633
g4811
sS'block_loop.thisIndex'
p5473
g3627
sg38
S'right'
p5474
sg59
g63
sS'trial_loop.thisN'
p5475
I132
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p5476
g60
(g99
S'\x84\x00\x00\x00'
tRp5477
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5478
I0
sg3642
g4818
sS'block_loop.thisRepN'
p5479
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5480
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p5481
Nsg70
Vn
sS'block_loop.thisTrialN'
p5482
I0
sg39
F2.5665913159355114
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a\x01\x02>8'
tRp5483
sa(dp5484
S'trial_loop.thisTrialN'
p5485
I133
sg3633
g3936
sS'block_loop.thisIndex'
p5486
g3627
sg38
S'right'
p5487
sg59
g63
sS'trial_loop.thisN'
p5488
I133
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p5489
g60
(g99
S'\x85\x00\x00\x00'
tRp5490
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5491
I0
sg3642
g3944
sS'block_loop.thisRepN'
p5492
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5493
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p5494
Nsg70
Vn
sS'block_loop.thisTrialN'
p5495
I0
sg39
F1.0333233835008286
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a\x08\x0bZ@'
tRp5496
sa(dp5497
S'trial_loop.thisTrialN'
p5498
I134
sg3633
g3904
sS'block_loop.thisIndex'
p5499
g3627
sg38
S'right'
p5500
sg59
g63
sS'trial_loop.thisN'
p5501
I134
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5502
g60
(g99
S'\x86\x00\x00\x00'
tRp5503
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5504
I0
sg3642
g3911
sS'block_loop.thisRepN'
p5505
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5506
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5507
Nsg70
Vn
sS'block_loop.thisTrialN'
p5508
I0
sg39
F0.9333404037015498
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a\x0e\x0cg\xc8'
tRp5509
sa(dp5510
S'trial_loop.thisTrialN'
p5511
I135
sg3633
g5289
sS'block_loop.thisIndex'
p5512
g3627
sg38
S'right'
p5513
sg59
g63
sS'trial_loop.thisN'
p5514
I135
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5515
g60
(g99
S'\x87\x00\x00\x00'
tRp5516
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5517
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5518
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5519
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p5520
Nsg70
Vn
sS'block_loop.thisTrialN'
p5521
I0
sg39
F0.78374368549157225
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a\x14\x0b\xc7\xa0'
tRp5522
sa(dp5523
S'trial_loop.thisTrialN'
p5524
I136
sg3633
g3842
sS'block_loop.thisIndex'
p5525
g3627
sg38
S'left'
p5526
sg59
g63
sS'trial_loop.thisN'
p5527
I136
sg33
g3853
sg64
g65
sS'trial_loop.thisIndex'
p5528
g60
(g99
S'\x88\x00\x00\x00'
tRp5529
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5530
I0
sg3642
g3850
sS'block_loop.thisRepN'
p5531
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5532
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p5533
Nsg70
Vn
sS'block_loop.thisTrialN'
p5534
I0
sg39
F0.73327038425395585
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a\x1a\t\x04\x98'
tRp5535
sa(dp5536
S'trial_loop.thisTrialN'
p5537
I137
sg3633
g4679
sS'block_loop.thisIndex'
p5538
g3627
sg38
S'left'
p5539
sg59
g63
sS'trial_loop.thisN'
p5540
I137
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p5541
g60
(g99
S'\x89\x00\x00\x00'
tRp5542
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5543
I0
sg3642
g4686
sS'block_loop.thisRepN'
p5544
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5545
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p5546
Nsg70
Vn
sS'block_loop.thisTrialN'
p5547
I0
sg39
F0.95003987060135842
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a \x05\x89\xf8'
tRp5548
sa(dp5549
S'trial_loop.thisTrialN'
p5550
I138
sg3633
g4221
sS'block_loop.thisIndex'
p5551
g3627
sg38
S'left'
p5552
sg59
g63
sS'trial_loop.thisN'
p5553
I138
sg33
g4185
sg64
g65
sS'trial_loop.thisIndex'
p5554
g60
(g99
S'\x8a\x00\x00\x00'
tRp5555
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5556
I0
sg3642
g4228
sS'block_loop.thisRepN'
p5557
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5558
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p5559
Nsg70
Vn
sS'block_loop.thisTrialN'
p5560
I0
sg39
F0.70000772608727857
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a&\x05(P'
tRp5561
sa(dp5562
S'trial_loop.thisTrialN'
p5563
I139
sg3633
g4895
sS'block_loop.thisIndex'
p5564
g3627
sg38
S'left'
p5565
sg59
g63
sS'trial_loop.thisN'
p5566
I139
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5567
g60
(g99
S'\x8b\x00\x00\x00'
tRp5568
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5569
I0
sg3642
g4902
sS'block_loop.thisRepN'
p5570
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5571
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5572
Nsg70
Vn
sS'block_loop.thisTrialN'
p5573
I0
sg39
F0.66648278009142814
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a,\x010\xb0'
tRp5574
sa(dp5575
S'trial_loop.thisTrialN'
p5576
I140
sg3633
g4191
sS'block_loop.thisIndex'
p5577
g3627
sg38
S'left'
p5578
sg59
g63
sS'trial_loop.thisN'
p5579
I140
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5580
g60
(g99
S'\x8c\x00\x00\x00'
tRp5581
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5582
I0
sg3642
g4198
sS'block_loop.thisRepN'
p5583
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5584
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5585
Nsg70
Vn
sS'block_loop.thisTrialN'
p5586
I0
sg39
F0.63322781950228091
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a1\x0b\xc7\xa0'
tRp5587
sa(dp5588
S'trial_loop.thisTrialN'
p5589
I141
sg3633
g4026
sS'block_loop.thisIndex'
p5590
g3627
sg38
S'right'
p5591
sg59
g63
sS'trial_loop.thisN'
p5592
I141
sg33
g4037
sg64
g65
sS'trial_loop.thisIndex'
p5593
g60
(g99
S'\x8d\x00\x00\x00'
tRp5594
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5595
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5596
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5597
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5598
Nsg70
Vn
sS'block_loop.thisTrialN'
p5599
I0
sg39
F0.96699079170139157
sg34
g753
(S'\x07\xdf\x07\x04\r\x1a7\x06\xa38'
tRp5600
sa(dp5601
S'trial_loop.thisTrialN'
p5602
I142
sg3633
g3812
sS'block_loop.thisIndex'
p5603
g3627
sg38
S'left'
p5604
sg59
g63
sS'trial_loop.thisN'
p5605
I142
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5606
g60
(g99
S'\x8e\x00\x00\x00'
tRp5607
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5608
I0
sg3642
g3820
sS'block_loop.thisRepN'
p5609
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5610
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5611
Nsg70
Vn
sS'block_loop.thisTrialN'
p5612
I0
sg39
F0.6498791052672459
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x01\x06\xba\xa8'
tRp5613
sa(dp5614
S'trial_loop.thisTrialN'
p5615
I143
sg3633
g4679
sS'block_loop.thisIndex'
p5616
g3627
sg38
S'left'
p5617
sg59
g63
sS'trial_loop.thisN'
p5618
I143
sg33
g3759
sg64
g65
sS'trial_loop.thisIndex'
p5619
g60
(g99
S'\x8f\x00\x00\x00'
tRp5620
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5621
I0
sg3642
g4686
sS'block_loop.thisRepN'
p5622
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5623
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p5624
Nsg70
Vn
sS'block_loop.thisTrialN'
p5625
I0
sg39
F0.66665839889810741
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x07\x01\xd4\xc0'
tRp5626
sa(dp5627
S'trial_loop.thisTrialN'
p5628
I144
sg3633
g3983
sS'block_loop.thisIndex'
p5629
g3627
sg38
S'right'
p5630
sg59
g63
sS'trial_loop.thisN'
p5631
I144
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5632
g60
(g99
S'\x90\x00\x00\x00'
tRp5633
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5634
I0
sg3642
g3990
sS'block_loop.thisRepN'
p5635
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5636
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5637
Nsg70
Vn
sS'block_loop.thisTrialN'
p5638
I0
sg39
F0.66666267533037171
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x0c\x0c\xa6H'
tRp5639
sa(dp5640
S'trial_loop.thisTrialN'
p5641
I145
sg3633
g4011
sS'block_loop.thisIndex'
p5642
g3627
sg38
S'right'
p5643
sg59
g63
sS'trial_loop.thisN'
p5644
I145
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p5645
g60
(g99
S'\x91\x00\x00\x00'
tRp5646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5647
I0
sg3642
g4018
sS'block_loop.thisRepN'
p5648
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5649
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p5650
Nsg70
Vn
sS'block_loop.thisTrialN'
p5651
I0
sg39
F0.88332952730888792
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x12\x07\xfa\xf8'
tRp5652
sa(dp5653
S'trial_loop.thisTrialN'
p5654
I146
sg3633
g5289
sS'block_loop.thisIndex'
p5655
g3627
sg38
S'right'
p5656
sg59
g63
sS'trial_loop.thisN'
p5657
I146
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p5658
g60
(g99
S'\x92\x00\x00\x00'
tRp5659
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5660
I0
sg3642
g5296
sS'block_loop.thisRepN'
p5661
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5662
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p5663
Nsg70
Vn
sS'block_loop.thisTrialN'
p5664
I0
sg39
F0.76654273566782649
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x18\x06\xa7 '
tRp5665
sa(dp5666
S'trial_loop.thisTrialN'
p5667
I147
sg3633
g4854
sS'block_loop.thisIndex'
p5668
g3627
sg38
S'left'
p5669
sg59
g63
sS'trial_loop.thisN'
p5670
I147
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5671
g60
(g99
S'\x93\x00\x00\x00'
tRp5672
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5673
I0
sg3642
g4861
sS'block_loop.thisRepN'
p5674
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5675
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5676
Nsg70
Vn
sS'block_loop.thisTrialN'
p5677
I0
sg39
F0.61702242304363608
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b\x1e\x03\xa5\x98'
tRp5678
sa(dp5679
S'trial_loop.thisTrialN'
p5680
I148
sg3633
g4638
sS'block_loop.thisIndex'
p5681
g3627
sg38
S'right'
p5682
sg59
g63
sS'trial_loop.thisN'
p5683
I148
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5684
g60
(g99
S'\x94\x00\x00\x00'
tRp5685
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5686
I0
sg3642
g4645
sS'block_loop.thisRepN'
p5687
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5688
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5689
Nsg70
Vn
sS'block_loop.thisTrialN'
p5690
I0
sg39
F0.91666688048826472
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b#\r\x84\xf0'
tRp5691
sa(dp5692
S'trial_loop.thisTrialN'
p5693
I149
sg3633
g4011
sS'block_loop.thisIndex'
p5694
g3627
sg38
S'right'
p5695
sg59
g63
sS'trial_loop.thisN'
p5696
I149
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p5697
g60
(g99
S'\x95\x00\x00\x00'
tRp5698
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5699
I0
sg3642
g4018
sS'block_loop.thisRepN'
p5700
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5701
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p5702
Nsg70
Vn
sS'block_loop.thisTrialN'
p5703
I0
sg39
F0.86658045379772375
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b)\x0c\xe4\xc8'
tRp5704
sa(dp5705
S'trial_loop.thisTrialN'
p5706
I150
sg3633
g4174
sS'block_loop.thisIndex'
p5707
g3627
sg38
S'right'
p5708
sg59
g63
sS'trial_loop.thisN'
p5709
I150
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p5710
g60
(g99
S'\x96\x00\x00\x00'
tRp5711
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5712
I0
sg3642
g4182
sS'block_loop.thisRepN'
p5713
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5714
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p5715
Nsg70
Vn
sS'block_loop.thisTrialN'
p5716
I0
sg39
F0.71657034716281487
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b/\x0bRp'
tRp5717
sa(dp5718
S'trial_loop.thisTrialN'
p5719
I151
sg3633
g3795
sS'block_loop.thisIndex'
p5720
g3627
sg38
S'left'
p5721
sg59
g63
sS'trial_loop.thisN'
p5722
I151
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5723
g60
(g99
S'\x97\x00\x00\x00'
tRp5724
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5725
I0
sg3642
g3803
sS'block_loop.thisRepN'
p5726
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5727
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5728
Nsg70
Vn
sS'block_loop.thisTrialN'
p5729
I0
sg39
F0.69991735082476225
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b5\x07^\xb8'
tRp5730
sa(dp5731
S'trial_loop.thisTrialN'
p5732
I152
sg3633
g4396
sS'block_loop.thisIndex'
p5733
g3627
sg38
S'right'
p5734
sg59
g63
sS'trial_loop.thisN'
p5735
I152
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5736
g60
(g99
S'\x98\x00\x00\x00'
tRp5737
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5738
I0
sg3642
g4404
sS'block_loop.thisRepN'
p5739
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5740
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5741
Nsg70
Vn
sS'block_loop.thisTrialN'
p5742
I0
sg39
F0.71660398842868744
sg34
g753
(S'\x07\xdf\x07\x04\r\x1b;\x03k\x00'
tRp5743
sa(dp5744
S'trial_loop.thisTrialN'
p5745
I153
sg3633
g4826
sS'block_loop.thisIndex'
p5746
g3627
sg38
S'left'
p5747
sg59
g63
sS'trial_loop.thisN'
p5748
I153
sg33
g4080
sg64
g65
sS'trial_loop.thisIndex'
p5749
g60
(g99
S'\x99\x00\x00\x00'
tRp5750
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5751
I0
sg3642
g4833
sS'block_loop.thisRepN'
p5752
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5753
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p5754
Nsg70
Vn
sS'block_loop.thisTrialN'
p5755
I0
sg39
F0.7169991307437158
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c\x04\x0e\xf4 '
tRp5756
sa(dp5757
S'trial_loop.thisTrialN'
p5758
I154
sg3633
g4116
sS'block_loop.thisIndex'
p5759
g3627
sg38
S'right'
p5760
sg59
g63
sS'trial_loop.thisN'
p5761
I154
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p5762
g60
(g99
S'\x9a\x00\x00\x00'
tRp5763
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5764
I0
sg3642
g4123
sS'block_loop.thisRepN'
p5765
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5766
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p5767
Nsg70
Vn
sS'block_loop.thisTrialN'
p5768
I0
sg39
F0.68297868882837065
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c\n\x0b\x00h'
tRp5769
sa(dp5770
S'trial_loop.thisTrialN'
p5771
I155
sg3633
g4011
sS'block_loop.thisIndex'
p5772
g3627
sg38
S'right'
p5773
sg59
g63
sS'trial_loop.thisN'
p5774
I155
sg33
g3846
sg64
g65
sS'trial_loop.thisIndex'
p5775
g60
(g99
S'\x9b\x00\x00\x00'
tRp5776
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5777
I0
sg3642
g4018
sS'block_loop.thisRepN'
p5778
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5779
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p5780
Nsg70
Vn
sS'block_loop.thisTrialN'
p5781
I0
sg39
F1.1830965758035745
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c\x10\x06\xce0'
tRp5782
sa(dp5783
S'trial_loop.thisTrialN'
p5784
I156
sg3633
g4532
sS'block_loop.thisIndex'
p5785
g3627
sg38
S'right'
p5786
sg59
g63
sS'trial_loop.thisN'
p5787
I156
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5788
g60
(g99
S'\x9c\x00\x00\x00'
tRp5789
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5790
I0
sg3642
g4539
sS'block_loop.thisRepN'
p5791
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5792
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5793
Nsg70
Vn
sS'block_loop.thisTrialN'
p5794
I0
sg39
F1.1666961740475017
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c\x16\t\xfe\x98'
tRp5795
sa(dp5796
S'trial_loop.thisTrialN'
p5797
I157
sg3633
g4638
sS'block_loop.thisIndex'
p5798
g3627
sg38
S'right'
p5799
sg59
g63
sS'trial_loop.thisN'
p5800
I157
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p5801
g60
(g99
S'\x9d\x00\x00\x00'
tRp5802
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5803
I0
sg3642
g4645
sS'block_loop.thisRepN'
p5804
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5805
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p5806
Nsg70
Vn
sS'block_loop.thisTrialN'
p5807
I0
sg39
F1.0165777311358397
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c\x1c\x0c\xf0\x80'
tRp5808
sa(dp5809
S'trial_loop.thisTrialN'
p5810
I158
sg3633
g4131
sS'block_loop.thisIndex'
p5811
g3627
sg38
S'left'
p5812
sg59
g63
sS'trial_loop.thisN'
p5813
I158
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p5814
g60
(g99
S'\x9e\x00\x00\x00'
tRp5815
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5816
I0
sg3642
g4138
sS'block_loop.thisRepN'
p5817
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5818
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p5819
Nsg70
Vn
sS'block_loop.thisTrialN'
p5820
I0
sg39
F0.85029038398624834
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c"\r\xbf\x88'
tRp5821
sa(dp5822
S'trial_loop.thisTrialN'
p5823
I159
sg3633
g3705
sS'block_loop.thisIndex'
p5824
g3627
sg38
S'right'
p5825
sg59
g63
sS'trial_loop.thisN'
p5826
I159
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p5827
g60
(g99
S'\x9f\x00\x00\x00'
tRp5828
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5829
I0
sg3642
g3713
sS'block_loop.thisRepN'
p5830
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5831
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p5832
Nsg70
Vn
sS'block_loop.thisTrialN'
p5833
I0
sg39
F0.81655418225091125
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c(\x0b\xee\xb0'
tRp5834
sa(dp5835
S'trial_loop.thisTrialN'
p5836
I160
sg3633
g3671
sS'block_loop.thisIndex'
p5837
g3627
sg38
S'left'
p5838
sg59
g63
sS'trial_loop.thisN'
p5839
I160
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5840
g60
(g99
S'\xa0\x00\x00\x00'
tRp5841
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5842
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5843
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5844
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5845
Nsg70
Vn
sS'block_loop.thisTrialN'
p5846
I0
sg39
F0.76662170711188082
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c.\t\xa4\xc0'
tRp5847
sa(dp5848
S'trial_loop.thisTrialN'
p5849
I161
sg3633
g4396
sS'block_loop.thisIndex'
p5850
g3627
sg38
S'right'
p5851
sg59
g63
sS'trial_loop.thisN'
p5852
I161
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p5853
g60
(g99
S'\xa1\x00\x00\x00'
tRp5854
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5855
I0
sg3642
g4404
sS'block_loop.thisRepN'
p5856
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5857
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p5858
Nsg70
Vn
sS'block_loop.thisTrialN'
p5859
I0
sg39
F0.76671037180130952
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c4\x06\xa7 '
tRp5860
sa(dp5861
S'trial_loop.thisTrialN'
p5862
I162
sg3633
g3634
sS'block_loop.thisIndex'
p5863
g3627
sg38
S'left'
p5864
sg59
g63
sS'trial_loop.thisN'
p5865
I162
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5866
g60
(g99
S'\xa2\x00\x00\x00'
tRp5867
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5868
I0
sg3642
g3643
sS'block_loop.thisRepN'
p5869
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5870
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5871
Nsg70
Vn
sS'block_loop.thisTrialN'
p5872
I0
sg39
F0.83314246191912389
sg34
g753
(S'\x07\xdf\x07\x04\r\x1c:\x03\xa5\x98'
tRp5873
sa(dp5874
S'trial_loop.thisTrialN'
p5875
I163
sg3633
g3671
sS'block_loop.thisIndex'
p5876
g3627
sg38
S'left'
p5877
sg59
g63
sS'trial_loop.thisN'
p5878
I163
sg33
g3675
sg64
g65
sS'trial_loop.thisIndex'
p5879
g60
(g99
S'\xa3\x00\x00\x00'
tRp5880
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5881
I0
sg3642
g3679
sS'block_loop.thisRepN'
p5882
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5883
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p5884
Nsg70
Vn
sS'block_loop.thisTrialN'
p5885
I0
sg39
F0.73327637125930778
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d\x04\x01\x96@'
tRp5886
sa(dp5887
S'trial_loop.thisTrialN'
p5888
I164
sg3633
g3872
sS'block_loop.thisIndex'
p5889
g3627
sg38
S'left'
p5890
sg59
g63
sS'trial_loop.thisN'
p5891
I164
sg33
g3876
sg64
g65
sS'trial_loop.thisIndex'
p5892
g60
(g99
S'\xa4\x00\x00\x00'
tRp5893
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5894
I0
sg3642
g3880
sS'block_loop.thisRepN'
p5895
I1
sg3645
g3876
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5896
I1
sg3647
g3883
sg55
g11
sS'block_loop.thisTrial'
p5897
Nsg70
Vn
sS'block_loop.thisTrialN'
p5898
I0
sg39
F0.7666775858224355
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d\t\r]\xe0'
tRp5899
sa(dp5900
S'trial_loop.thisTrialN'
p5901
I165
sg3633
g3983
sS'block_loop.thisIndex'
p5902
g3627
sg38
S'right'
p5903
sg59
g63
sS'trial_loop.thisN'
p5904
I165
sg33
g3638
sg64
g65
sS'trial_loop.thisIndex'
p5905
g60
(g99
S'\xa5\x00\x00\x00'
tRp5906
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5907
I0
sg3642
g3990
sS'block_loop.thisRepN'
p5908
I1
sg3645
g3638
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5909
I1
sg3647
g3648
sg55
g11
sS'block_loop.thisTrial'
p5910
Nsg70
Vn
sS'block_loop.thisTrialN'
p5911
I0
sg39
F0.73339896230936574
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d\x0f\n`@'
tRp5912
sa(dp5913
S'trial_loop.thisTrialN'
p5914
I166
sg3633
g3966
sS'block_loop.thisIndex'
p5915
g3627
sg38
S'right'
p5916
sg59
g63
sS'trial_loop.thisN'
p5917
I166
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p5918
g60
(g99
S'\xa6\x00\x00\x00'
tRp5919
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5920
I0
sg3642
g3974
sS'block_loop.thisRepN'
p5921
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5922
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p5923
Nsg70
Vn
sS'block_loop.thisTrialN'
p5924
I0
sg39
F0.83328329907999432
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d\x15\x06\xa7 '
tRp5925
sa(dp5926
S'trial_loop.thisTrialN'
p5927
I167
sg3633
g4026
sS'block_loop.thisIndex'
p5928
g3627
sg38
S'right'
p5929
sg59
g63
sS'trial_loop.thisN'
p5930
I167
sg33
g4037
sg64
g65
sS'trial_loop.thisIndex'
p5931
g60
(g99
S'\xa7\x00\x00\x00'
tRp5932
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5933
I0
sg3642
g4034
sS'block_loop.thisRepN'
p5934
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5935
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p5936
Nsg70
Vn
sS'block_loop.thisTrialN'
p5937
I0
sg39
F1.0833202902158519
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d\x1b\x04\x9b\xb0'
tRp5938
sa(dp5939
S'trial_loop.thisTrialN'
p5940
I168
sg3633
g4532
sS'block_loop.thisIndex'
p5941
g3627
sg38
S'right'
p5942
sg59
g63
sS'trial_loop.thisN'
p5943
I168
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p5944
g60
(g99
S'\xa8\x00\x00\x00'
tRp5945
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5946
I0
sg3642
g4539
sS'block_loop.thisRepN'
p5947
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5948
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p5949
Nsg70
Vn
sS'block_loop.thisTrialN'
p5950
I0
sg39
F0.99995980153926212
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d!\x06\\\xe8'
tRp5951
sa(dp5952
S'trial_loop.thisTrialN'
p5953
I169
sg3633
g4379
sS'block_loop.thisIndex'
p5954
g3627
sg38
S'left'
p5955
sg59
g63
sS'trial_loop.thisN'
p5956
I169
sg33
g4383
sg64
g65
sS'trial_loop.thisIndex'
p5957
g60
(g99
S'\xa9\x00\x00\x00'
tRp5958
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5959
I0
sg3642
g4387
sS'block_loop.thisRepN'
p5960
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5961
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p5962
Nsg70
Vn
sS'block_loop.thisTrialN'
p5963
I0
sg39
F1.2500016392987163
sg34
g753
(S"\x07\xdf\x07\x04\r\x1d'\x06\xedp"
tRp5964
sa(dp5965
S'trial_loop.thisTrialN'
p5966
I170
sg3633
g4826
sS'block_loop.thisIndex'
p5967
g3627
sg38
S'left'
p5968
sg59
g63
sS'trial_loop.thisN'
p5969
I170
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p5970
g60
(g99
S'\xaa\x00\x00\x00'
tRp5971
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5972
I0
sg3642
g4833
sS'block_loop.thisRepN'
p5973
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5974
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p5975
Nsg70
Vn
sS'block_loop.thisTrialN'
p5976
I0
sg39
F1.0999601721632644
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d-\x0bN\x88'
tRp5977
sa(dp5978
S'trial_loop.thisTrialN'
p5979
I171
sg3633
g4962
sS'block_loop.thisIndex'
p5980
g3627
sg38
S'right'
p5981
sg59
g63
sS'trial_loop.thisN'
p5982
I171
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p5983
g60
(g99
S'\xab\x00\x00\x00'
tRp5984
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5985
I0
sg3642
g4969
sS'block_loop.thisRepN'
p5986
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p5987
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p5988
Nsg70
Vn
sS'block_loop.thisTrialN'
p5989
I0
sg39
F1.0499852177999855
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d3\rN@'
tRp5990
sa(dp5991
S'trial_loop.thisTrialN'
p5992
I172
sg3633
g4069
sS'block_loop.thisIndex'
p5993
g3627
sg38
S'right'
p5994
sg59
g63
sS'trial_loop.thisN'
p5995
I172
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p5996
g60
(g99
S'\xac\x00\x00\x00'
tRp5997
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p5998
I0
sg3642
g4077
sS'block_loop.thisRepN'
p5999
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6000
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p6001
Nsg70
Vn
sS'block_loop.thisTrialN'
p6002
I0
sg39
F0.73331457405220135
sg34
g753
(S'\x07\xdf\x07\x04\r\x1d9\x0e\x96`'
tRp6003
sa(dp6004
S'trial_loop.thisTrialN'
p6005
I173
sg3633
g3705
sS'block_loop.thisIndex'
p6006
g3627
sg38
S'right'
p6007
sg59
g63
sS'trial_loop.thisN'
p6008
I173
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6009
g60
(g99
S'\xad\x00\x00\x00'
tRp6010
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6011
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6012
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6013
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6014
Nsg70
Vn
sS'block_loop.thisTrialN'
p6015
I0
sg39
F0.91647814729003585
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e\x03\x0b\x1b\xc0'
tRp6016
sa(dp6017
S'trial_loop.thisTrialN'
p6018
I174
sg3633
g5289
sS'block_loop.thisIndex'
p6019
g3627
sg38
S'right'
p6020
sg59
g63
sS'trial_loop.thisN'
p6021
I174
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p6022
g60
(g99
S'\xae\x00\x00\x00'
tRp6023
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6024
I0
sg3642
g5296
sS'block_loop.thisRepN'
p6025
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6026
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p6027
Nsg70
Vn
sS'block_loop.thisTrialN'
p6028
I0
sg39
F1.0501722404251268
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e\t\n=\x18'
tRp6029
sa(dp6030
S'trial_loop.thisTrialN'
p6031
I175
sg3633
g4159
sS'block_loop.thisIndex'
p6032
g3627
sg38
S'left'
p6033
sg59
g63
sS'trial_loop.thisN'
p6034
I175
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p6035
g60
(g99
S'\xaf\x00\x00\x00'
tRp6036
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6037
I0
sg3642
g4166
sS'block_loop.thisRepN'
p6038
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6039
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p6040
Nsg70
Vn
sS'block_loop.thisTrialN'
p6041
I0
sg39
F0.96653406876521331
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e\x0f\x0b\x858'
tRp6042
sa(dp6043
S'trial_loop.thisTrialN'
p6044
I176
sg3633
g3936
sS'block_loop.thisIndex'
p6045
g3627
sg38
S'right'
p6046
sg59
g63
sS'trial_loop.thisN'
p6047
I176
sg33
g3947
sg64
g65
sS'trial_loop.thisIndex'
p6048
g60
(g99
S'\xb0\x00\x00\x00'
tRp6049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6050
I0
sg3642
g3944
sS'block_loop.thisRepN'
p6051
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6052
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p6053
Nsg70
Vn
sS'block_loop.thisTrialN'
p6054
I0
sg39
F1.0165492215901395
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e\x15\x0b\x9c\xa8'
tRp6055
sa(dp6056
S'trial_loop.thisTrialN'
p6057
I177
sg3633
g4159
sS'block_loop.thisIndex'
p6058
g3627
sg38
S'left'
p6059
sg59
g63
sS'trial_loop.thisN'
p6060
I177
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p6061
g60
(g99
S'\xb1\x00\x00\x00'
tRp6062
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6063
I0
sg3642
g4166
sS'block_loop.thisRepN'
p6064
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6065
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p6066
Nsg70
Vn
sS'block_loop.thisTrialN'
p6067
I0
sg39
F0.78329408994250116
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e\x1b\x0c-0'
tRp6068
sa(dp6069
S'trial_loop.thisTrialN'
p6070
I178
sg3633
g3671
sS'block_loop.thisIndex'
p6071
g3627
sg38
S'left'
p6072
sg59
g63
sS'trial_loop.thisN'
p6073
I178
sg33
g3682
sg64
g65
sS'trial_loop.thisIndex'
p6074
g60
(g99
S'\xb2\x00\x00\x00'
tRp6075
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6076
I0
sg3642
g3679
sS'block_loop.thisRepN'
p6077
I1
sg3645
g3675
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6078
I1
sg3647
g3682
sg55
g11
sS'block_loop.thisTrial'
p6079
Nsg70
Vn
sS'block_loop.thisTrialN'
p6080
I0
sg39
F0.63326317133942212
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e!\tj('
tRp6081
sa(dp6082
S'trial_loop.thisTrialN'
p6083
I179
sg3633
g4826
sS'block_loop.thisIndex'
p6084
g3627
sg38
S'left'
p6085
sg59
g63
sS'trial_loop.thisN'
p6086
I179
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p6087
g60
(g99
S'\xb3\x00\x00\x00'
tRp6088
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6089
I0
sg3642
g4833
sS'block_loop.thisRepN'
p6090
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6091
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p6092
Nsg70
Vn
sS'block_loop.thisTrialN'
p6093
I0
sg39
F0.79997245977847342
sg34
g753
(S"\x07\xdf\x07\x04\r\x1e'\x04\x84@"
tRp6094
sa(dp6095
S'trial_loop.thisTrialN'
p6096
I180
sg3633
g4174
sS'block_loop.thisIndex'
p6097
g3627
sg38
S'right'
p6098
sg59
g63
sS'trial_loop.thisN'
p6099
I180
sg33
g4178
sg64
g65
sS'trial_loop.thisIndex'
p6100
g60
(g99
S'\xb4\x00\x00\x00'
tRp6101
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6102
I0
sg3642
g4182
sS'block_loop.thisRepN'
p6103
I1
sg3645
g4178
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6104
I1
sg3647
g4185
sg55
g11
sS'block_loop.thisTrial'
p6105
Nsg70
Vn
sS'block_loop.thisTrialN'
p6106
I0
sg39
F1.2666840004703772
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e-\x01\xc18'
tRp6107
sa(dp6108
S'trial_loop.thisTrialN'
p6109
I181
sg3633
g4895
sS'block_loop.thisIndex'
p6110
g3627
sg38
S'left'
p6111
sg59
g63
sS'trial_loop.thisN'
p6112
I181
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6113
g60
(g99
S'\xb5\x00\x00\x00'
tRp6114
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6115
I0
sg3642
g4902
sS'block_loop.thisRepN'
p6116
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6117
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6118
Nsg70
Vn
sS'block_loop.thisTrialN'
p6119
I0
sg39
F0.76662085182579176
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e3\x06\\\xe8'
tRp6120
sa(dp6121
S'trial_loop.thisTrialN'
p6122
I182
sg3633
g3966
sS'block_loop.thisIndex'
p6123
g3627
sg38
S'right'
p6124
sg59
g63
sS'trial_loop.thisN'
p6125
I182
sg33
g3970
sg64
g65
sS'trial_loop.thisIndex'
p6126
g60
(g99
S'\xb6\x00\x00\x00'
tRp6127
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6128
I0
sg3642
g3974
sS'block_loop.thisRepN'
p6129
I1
sg3645
g3970
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6130
I1
sg3647
g3977
sg55
g11
sS'block_loop.thisTrial'
p6131
Nsg70
Vn
sS'block_loop.thisTrialN'
p6132
I0
sg39
F1.0166167892148223
sg34
g753
(S'\x07\xdf\x07\x04\r\x1e9\x03[`'
tRp6133
sa(dp6134
S'trial_loop.thisTrialN'
p6135
I183
sg3633
g3705
sS'block_loop.thisIndex'
p6136
g3627
sg38
S'right'
p6137
sg59
g63
sS'trial_loop.thisN'
p6138
I183
sg33
g3709
sg64
g65
sS'trial_loop.thisIndex'
p6139
g60
(g99
S'\xb7\x00\x00\x00'
tRp6140
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6141
I0
sg3642
g3713
sS'block_loop.thisRepN'
p6142
I1
sg3645
g3709
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6143
I1
sg3647
g3716
sg55
g11
sS'block_loop.thisTrial'
p6144
Nsg70
Vn
sS'block_loop.thisTrialN'
p6145
I0
sg39
F0.81655133129606838
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f\x03\x04*h'
tRp6146
sa(dp6147
S'trial_loop.thisTrialN'
p6148
I184
sg3633
g3842
sS'block_loop.thisIndex'
p6149
g3627
sg38
S'left'
p6150
sg59
g63
sS'trial_loop.thisN'
p6151
I184
sg33
g3853
sg64
g65
sS'trial_loop.thisIndex'
p6152
g60
(g99
S'\xb8\x00\x00\x00'
tRp6153
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6154
I0
sg3642
g3850
sS'block_loop.thisRepN'
p6155
I1
sg3645
g3846
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6156
I1
sg3647
g3853
sg55
g11
sS'block_loop.thisTrial'
p6157
Nsg70
Vn
sS'block_loop.thisTrialN'
p6158
I0
sg39
F1.3999840916731046
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f\t\x01\xe0x'
tRp6159
sa(dp6160
S'trial_loop.thisTrialN'
p6161
I185
sg3633
g4099
sS'block_loop.thisIndex'
p6162
g3627
sg38
S'right'
p6163
sg59
g63
sS'trial_loop.thisN'
p6164
I185
sg33
g4103
sg64
g65
sS'trial_loop.thisIndex'
p6165
g60
(g99
S'\xb9\x00\x00\x00'
tRp6166
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6167
I0
sg3642
g4107
sS'block_loop.thisRepN'
p6168
I1
sg3645
g4103
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6169
I1
sg3647
g4110
sg55
g11
sS'block_loop.thisTrial'
p6170
Nsg70
Vn
sS'block_loop.thisTrialN'
p6171
I0
sg39
F0.81666052285891055
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f\x0f\x08dp'
tRp6172
sa(dp6173
S'trial_loop.thisTrialN'
p6174
I186
sg3633
g4962
sS'block_loop.thisIndex'
p6175
g3627
sg38
S'right'
p6176
sg59
g63
sS'trial_loop.thisN'
p6177
I186
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6178
g60
(g99
S'\xba\x00\x00\x00'
tRp6179
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6180
I0
sg3642
g4969
sS'block_loop.thisRepN'
p6181
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6182
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6183
Nsg70
Vn
sS'block_loop.thisTrialN'
p6184
I0
sg39
F0.91657080331697216
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f\x15\x06\x1a\x80'
tRp6185
sa(dp6186
S'trial_loop.thisTrialN'
p6187
I187
sg3633
g4854
sS'block_loop.thisIndex'
p6188
g3627
sg38
S'left'
p6189
sg59
g63
sS'trial_loop.thisN'
p6190
I187
sg33
g4400
sg64
g65
sS'trial_loop.thisIndex'
p6191
g60
(g99
S'\xbb\x00\x00\x00'
tRp6192
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6193
I0
sg3642
g4861
sS'block_loop.thisRepN'
p6194
I1
sg3645
g4400
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6195
I1
sg3647
g4407
sg55
g11
sS'block_loop.thisTrial'
p6196
Nsg70
Vn
sS'block_loop.thisTrialN'
p6197
I0
sg39
F0.78325503186351852
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f\x1b\x05zX'
tRp6198
sa(dp6199
S'trial_loop.thisTrialN'
p6200
I188
sg3633
g4962
sS'block_loop.thisIndex'
p6201
g3627
sg38
S'right'
p6202
sg59
g63
sS'trial_loop.thisN'
p6203
I188
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6204
g60
(g99
S'\xbc\x00\x00\x00'
tRp6205
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6206
I0
sg3642
g4969
sS'block_loop.thisRepN'
p6207
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6208
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6209
Nsg70
Vn
sS'block_loop.thisTrialN'
p6210
I0
sg39
F1.0166629746800027
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f!\x02\xb7P'
tRp6211
sa(dp6212
S'trial_loop.thisTrialN'
p6213
I189
sg3633
g4826
sS'block_loop.thisIndex'
p6214
g3627
sg38
S'left'
p6215
sg59
g63
sS'trial_loop.thisN'
p6216
I189
sg33
g4073
sg64
g65
sS'trial_loop.thisIndex'
p6217
g60
(g99
S'\xbd\x00\x00\x00'
tRp6218
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6219
I0
sg3642
g4833
sS'block_loop.thisRepN'
p6220
I1
sg3645
g4073
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6221
I1
sg3647
g4080
sg55
g11
sS'block_loop.thisTrial'
p6222
Nsg70
Vn
sS'block_loop.thisTrialN'
p6223
I0
sg39
F0.74999836070128367
sg34
g753
(S"\x07\xdf\x07\x04\r\x1f'\x03G\xd8"
tRp6224
sa(dp6225
S'trial_loop.thisTrialN'
p6226
I190
sg3633
g4811
sS'block_loop.thisIndex'
p6227
g3627
sg38
S'right'
p6228
sg59
g63
sS'trial_loop.thisN'
p6229
I190
sg33
g4390
sg64
g65
sS'trial_loop.thisIndex'
p6230
g60
(g99
S'\xbe\x00\x00\x00'
tRp6231
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6232
I0
sg3642
g4818
sS'block_loop.thisRepN'
p6233
I1
sg3645
g4383
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6234
I1
sg3647
g4390
sg55
g11
sS'block_loop.thisTrial'
p6235
Nsg70
Vn
sS'block_loop.thisTrialN'
p6236
I0
sg39
F1.0166467242388535
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f-\x00\x0b\xb8'
tRp6237
sa(dp6238
S'trial_loop.thisTrialN'
p6239
I191
sg3633
g4159
sS'block_loop.thisIndex'
p6240
g3627
sg38
S'left'
p6241
sg59
g63
sS'trial_loop.thisN'
p6242
I191
sg33
g4030
sg64
g65
sS'trial_loop.thisIndex'
p6243
g60
(g99
S'\xbf\x00\x00\x00'
tRp6244
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6245
I0
sg3642
g4166
sS'block_loop.thisRepN'
p6246
I1
sg3645
g4030
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6247
I1
sg3647
g4037
sg55
g11
sS'block_loop.thisTrial'
p6248
Nsg70
Vn
sS'block_loop.thisTrialN'
p6249
I0
sg39
F0.83359120218210592
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f3\x00\xda\xc0'
tRp6250
sa(dp6251
S'trial_loop.thisTrialN'
p6252
I192
sg3633
g3765
sS'block_loop.thisIndex'
p6253
g3627
sg38
S'left'
p6254
sg59
g63
sS'trial_loop.thisN'
p6255
I192
sg33
g3769
sg64
g65
sS'trial_loop.thisIndex'
p6256
g60
(g99
S'\xc0\x00\x00\x00'
tRp6257
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6258
I0
sg3642
g3773
sS'block_loop.thisRepN'
p6259
I1
sg3645
g3769
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6260
I1
sg3647
g3776
sg55
g11
sS'block_loop.thisTrial'
p6261
Nsg70
Vn
sS'block_loop.thisTrialN'
p6262
I0
sg39
F0.74998068478180357
sg34
g753
(S'\x07\xdf\x07\x04\r\x1f8\x0e\r\xa8'
tRp6263
sa(dp6264
S'trial_loop.thisTrialN'
p6265
I193
sg3633
g4962
sS'block_loop.thisIndex'
p6266
g3627
sg38
S'right'
p6267
sg59
g63
sS'trial_loop.thisN'
p6268
I193
sg33
g3698
sg64
g65
sS'trial_loop.thisIndex'
p6269
g60
(g99
S'\xc1\x00\x00\x00'
tRp6270
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6271
I0
sg3642
g4969
sS'block_loop.thisRepN'
p6272
I1
sg3645
g3698
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6273
I1
sg3647
g3692
sg55
g11
sS'block_loop.thisTrial'
p6274
Nsg70
Vn
sS'block_loop.thisTrialN'
p6275
I0
sg39
F0.78332345477610943
sg34
g753
(S'\x07\xdf\x07\x04\r \x02\n\xd1\x88'
tRp6276
sa(dp6277
S'trial_loop.thisTrialN'
p6278
I194
sg3633
g4116
sS'block_loop.thisIndex'
p6279
g3627
sg38
S'right'
p6280
sg59
g63
sS'trial_loop.thisN'
p6281
I194
sg33
g3658
sg64
g65
sS'trial_loop.thisIndex'
p6282
g60
(g99
S'\xc2\x00\x00\x00'
tRp6283
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6284
I0
sg3642
g4123
sS'block_loop.thisRepN'
p6285
I1
sg3645
g3658
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6286
I1
sg3647
g3665
sg55
g11
sS'block_loop.thisTrial'
p6287
Nsg70
Vn
sS'block_loop.thisTrialN'
p6288
I0
sg39
F0.64976107574420894
sg34
g753
(S'\x07\xdf\x07\x04\r \x08\x08\x0e\x80'
tRp6289
sa(dp6290
S'trial_loop.thisTrialN'
p6291
I195
sg3633
g4532
sS'block_loop.thisIndex'
p6292
g3627
sg38
S'right'
p6293
sg59
g63
sS'trial_loop.thisN'
p6294
I195
sg33
g3816
sg64
g65
sS'trial_loop.thisIndex'
p6295
g60
(g99
S'\xc3\x00\x00\x00'
tRp6296
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6297
I0
sg3642
g4539
sS'block_loop.thisRepN'
p6298
I1
sg3645
g3816
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6299
I1
sg3647
g3823
sg55
g11
sS'block_loop.thisTrial'
p6300
Nsg70
Vn
sS'block_loop.thisTrialN'
p6301
I0
sg39
F1.0999028679743788
sg34
g753
(S'\x07\xdf\x07\x04\r \x0e\x03$\xb0'
tRp6302
sa(dp6303
S'trial_loop.thisTrialN'
p6304
I196
sg3633
g4638
sS'block_loop.thisIndex'
p6305
g3627
sg38
S'right'
p6306
sg59
g63
sS'trial_loop.thisN'
p6307
I196
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p6308
g60
(g99
S'\xc4\x00\x00\x00'
tRp6309
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6310
I0
sg3642
g4645
sS'block_loop.thisRepN'
p6311
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6312
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p6313
Nsg70
Vn
sS'block_loop.thisTrialN'
p6314
I0
sg39
F1.283211554805348
sg34
g753
(S'\x07\xdf\x07\x04\r \x14\x05$h'
tRp6315
sa(dp6316
S'trial_loop.thisTrialN'
p6317
I197
sg3633
g4131
sS'block_loop.thisIndex'
p6318
g3627
sg38
S'left'
p6319
sg59
g63
sS'trial_loop.thisN'
p6320
I197
sg33
g3940
sg64
g65
sS'trial_loop.thisIndex'
p6321
g60
(g99
S'\xc5\x00\x00\x00'
tRp6322
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6323
I0
sg3642
g4138
sS'block_loop.thisRepN'
p6324
I1
sg3645
g3940
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6325
I1
sg3647
g3947
sg55
g11
sS'block_loop.thisTrial'
p6326
Nsg70
Vn
sS'block_loop.thisTrialN'
p6327
I0
sg39
F0.75007476628616132
sg34
g753
(S'\x07\xdf\x07\x04\r \x1a\t\xfe\x98'
tRp6328
sa(dp6329
S'trial_loop.thisTrialN'
p6330
I198
sg3633
g3748
sS'block_loop.thisIndex'
p6331
g3627
sg38
S'right'
p6332
sg59
g63
sS'trial_loop.thisN'
p6333
I198
sg33
g3752
sg64
g65
sS'trial_loop.thisIndex'
p6334
g60
(g99
S'\xc6\x00\x00\x00'
tRp6335
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6336
I0
sg3642
g3756
sS'block_loop.thisRepN'
p6337
I1
sg3645
g3752
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6338
I1
sg3647
g3759
sg55
g11
sS'block_loop.thisTrial'
p6339
Nsg70
Vn
sS'block_loop.thisTrialN'
p6340
I0
sg39
F0.84998818279291299
sg34
g753
(S'\x07\xdf\x07\x04\r  \x06\xc2x'
tRp6341
sa(dp6342
S'trial_loop.thisTrialN'
p6343
I199
sg3633
g3795
sS'block_loop.thisIndex'
p6344
g3627
sg38
S'left'
p6345
sg59
g63
sS'trial_loop.thisN'
p6346
I199
sg33
g3805
sg64
g65
sS'trial_loop.thisIndex'
p6347
g60
(g99
S'\xc7\x00\x00\x00'
tRp6348
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6349
I0
sg3642
g3803
sS'block_loop.thisRepN'
p6350
I1
sg3645
g3805
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6351
I1
sg3647
g3799
sg55
g11
sS'block_loop.thisTrial'
p6352
Nsg70
Vn
sS'block_loop.thisTrialN'
p6353
I0
sg39
F0.86660696767557965
sg34
g753
(S'\x07\xdf\x07\x04\r &\x04\xf1\xa0'
tRp6354
sa(dp6355
S'block_loop.thisRepN'
p6356
I1
sg55
g11
sg41
F321.08865414128286
sg56
g57
sS'block_loop.thisIndex'
p6357
g3627
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6358
I1
sg40
S'space'
p6359
sg64
g65
sS'block_loop.thisTrial'
p6360
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6361
I0
sg70
Vn
sa(dp6362
S'block_loop.thisRepN'
p6363
I2
sg56
g57
sS'block_loop.thisIndex'
p6364
g60
(g99
S'\x00\x00\x00\x00'
tRp6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p6366
I2
sg37
Nsg55
g11
sg64
g65
sS'block_loop.thisTrial'
p6367
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p6368
I0
sg70
Vn
sa(dp6369
S'trial_loop.thisTrialN'
p6370
I0
sS'img_left'
p6371
S'36-fig_rolls.png'
p6372
sS'block_loop.thisIndex'
p6373
g6365
sg38
S'left'
p6374
sg59
g63
sS'trial_loop.thisN'
p6375
I0
sg33
S'36-fig_rolls.png'
p6376
sg64
g65
sS'trial_loop.thisIndex'
p6377
g60
(g99
S'\x00\x00\x00\x00'
tRp6378
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6379
I0
sS'img_right'
p6380
S'34-hula_hoops_bbq_beef_redo.png'
p6381
sS'block_loop.thisRepN'
p6382
I2
sS'img_correct'
p6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6384
I2
sS'img_wrong'
p6385
S'34-hula_hoops_bbq_beef_redo.png'
p6386
sg55
g11
sS'block_loop.thisTrial'
p6387
Nsg70
Vn
sS'block_loop.thisTrialN'
p6388
I0
sg39
F0.7998447370082431
sg34
g753
(S'\x07\xdf\x07\x04\r&4\x0c\xb9\xd0'
tRp6389
sa(dp6390
S'trial_loop.thisTrialN'
p6391
I1
sg6371
S'42-mrkipling_lemon_slices.png'
p6392
sS'block_loop.thisIndex'
p6393
g6365
sg38
S'left'
p6394
sg59
g63
sS'trial_loop.thisN'
p6395
I1
sg33
S'42-mrkipling_lemon_slices.png'
p6396
sg64
g65
sS'trial_loop.thisIndex'
p6397
g60
(g99
S'\x01\x00\x00\x00'
tRp6398
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6399
I0
sg6380
S'16-skips_prawn.png'
p6400
sS'block_loop.thisRepN'
p6401
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6402
I2
sg6385
S'16-skips_prawn.png'
p6403
sg55
g11
sS'block_loop.thisTrial'
p6404
Nsg70
Vn
sS'block_loop.thisTrialN'
p6405
I0
sg39
F0.88318270314448455
sg34
g753
(S'\x07\xdf\x07\x04\r&:\n1`'
tRp6406
sa(dp6407
S'trial_loop.thisTrialN'
p6408
I2
sg6371
S'25-kitkat.png'
p6409
sS'block_loop.thisIndex'
p6410
g6365
sg38
S'left'
p6411
sg59
g63
sS'trial_loop.thisN'
p6412
I2
sg33
S'25-kitkat.png'
p6413
sg64
g65
sS'trial_loop.thisIndex'
p6414
g60
(g99
S'\x02\x00\x00\x00'
tRp6415
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6416
I0
sg6380
S'31-hobnobs.png'
p6417
sS'block_loop.thisRepN'
p6418
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6419
I2
sg6385
S'31-hobnobs.png'
p6420
sg55
g11
sS'block_loop.thisTrial'
p6421
Nsg70
Vn
sS'block_loop.thisTrialN'
p6422
I0
sg39
F0.78327584383259818
sg34
g753
(S"\x07\xdf\x07\x04\r'\x04\x08\xdd\x88"
tRp6423
sa(dp6424
S'trial_loop.thisTrialN'
p6425
I3
sg6371
S'35-raisins.png'
p6426
sS'block_loop.thisIndex'
p6427
g6365
sg38
S'right'
p6428
sg59
g63
sS'trial_loop.thisN'
p6429
I3
sg33
S'49-yorkie.png'
p6430
sg64
g65
sS'trial_loop.thisIndex'
p6431
g60
(g99
S'\x03\x00\x00\x00'
tRp6432
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6433
I0
sg6380
S'49-yorkie.png'
p6434
sS'block_loop.thisRepN'
p6435
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6436
I2
sg6385
S'35-raisins.png'
p6437
sg55
g11
sS'block_loop.thisTrial'
p6438
Nsg70
Vn
sS'block_loop.thisTrialN'
p6439
I0
sg39
F0.8165576033970865
sg34
g753
(S"\x07\xdf\x07\x04\r'\n\x06\x16\x98"
tRp6440
sa(dp6441
S'trial_loop.thisTrialN'
p6442
I4
sg6371
S'6-sour_patch_kids.png'
p6443
sS'block_loop.thisIndex'
p6444
g6365
sg38
S'right'
p6445
sg59
g63
sS'trial_loop.thisN'
p6446
I4
sg33
S'38-maltesers.png'
p6447
sg64
g65
sS'trial_loop.thisIndex'
p6448
g60
(g99
S'\x04\x00\x00\x00'
tRp6449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6450
I0
sg6380
S'38-maltesers.png'
p6451
sS'block_loop.thisRepN'
p6452
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6453
I2
sg6385
S'6-sour_patch_kids.png'
p6454
sg55
g11
sS'block_loop.thisTrial'
p6455
Nsg70
Vn
sS'block_loop.thisTrialN'
p6456
I0
sg39
F0.88307864329908625
sg34
g753
(S"\x07\xdf\x07\x04\r'\x10\x03\xcc\xa8"
tRp6457
sa(dp6458
S'trial_loop.thisTrialN'
p6459
I5
sg6371
S'31-hobnobs.png'
p6460
sS'block_loop.thisIndex'
p6461
g6365
sg38
S'right'
p6462
sg59
g63
sS'trial_loop.thisN'
p6463
I5
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p6464
g60
(g99
S'\x05\x00\x00\x00'
tRp6465
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6466
I0
sg6380
S'25-kitkat.png'
p6467
sS'block_loop.thisRepN'
p6468
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6469
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p6470
Nsg70
Vn
sS'block_loop.thisTrialN'
p6471
I0
sg39
F0.75028744750306942
sg34
g753
(S"\x07\xdf\x07\x04\r'\x16\x02x\xd0"
tRp6472
sa(dp6473
S'trial_loop.thisTrialN'
p6474
I6
sg6371
S'33-ambrosia_rice.png'
p6475
sS'block_loop.thisIndex'
p6476
g6365
sg38
S'right'
p6477
sg59
g63
sS'trial_loop.thisN'
p6478
I6
sg33
S'23-crunchie_redo.png'
p6479
sg64
g65
sS'trial_loop.thisIndex'
p6480
g60
(g99
S'\x06\x00\x00\x00'
tRp6481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6482
I0
sg6380
S'23-crunchie_redo.png'
p6483
sS'block_loop.thisRepN'
p6484
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6485
I2
sg6385
S'33-ambrosia_rice.png'
p6486
sg55
g11
sS'block_loop.thisTrial'
p6487
Nsg70
Vn
sS'block_loop.thisTrialN'
p6488
I0
sg39
F0.88331555763033975
sg34
g753
(S"\x07\xdf\x07\x04\r'\x1b\x0e{\x08"
tRp6489
sa(dp6490
S'trial_loop.thisTrialN'
p6491
I7
sg6371
S'29-beans.png'
p6492
sS'block_loop.thisIndex'
p6493
g6365
sg38
S'right'
p6494
sg59
g63
sS'trial_loop.thisN'
p6495
I7
sg33
S'46-pistachios.png'
p6496
sg64
g65
sS'trial_loop.thisIndex'
p6497
g60
(g99
S'\x07\x00\x00\x00'
tRp6498
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6499
I0
sg6380
S'46-pistachios.png'
p6500
sS'block_loop.thisRepN'
p6501
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6502
I2
sg6385
S'29-beans.png'
p6503
sg55
g11
sS'block_loop.thisTrial'
p6504
Nsg70
Vn
sS'block_loop.thisTrialN'
p6505
I0
sg39
F0.84999531018002017
sg34
g753
(S"\x07\xdf\x07\x04\r'!\r'0"
tRp6506
sa(dp6507
S'trial_loop.thisTrialN'
p6508
I8
sg6371
S'40-sardines.png'
p6509
sS'block_loop.thisIndex'
p6510
g6365
sg38
S'left'
p6511
sg59
g63
sS'trial_loop.thisN'
p6512
I8
sg33
S'5-pineapple.png'
p6513
sg64
g65
sS'trial_loop.thisIndex'
p6514
g60
(g99
S'\x08\x00\x00\x00'
tRp6515
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6516
I0
sg6380
S'5-pineapple.png'
p6517
sS'block_loop.thisRepN'
p6518
I2
sg6383
S'40-sardines.png'
p6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6520
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6521
Nsg70
Vn
sS'block_loop.thisTrialN'
p6522
I0
sg39
F0.91666545501175278
sg34
g753
(S"\x07\xdf\x07\x04\r''\x0bVX"
tRp6523
sa(dp6524
S'trial_loop.thisTrialN'
p6525
I9
sg6371
S'27-hartleys_raspberries_jelly.png'
p6526
sS'block_loop.thisIndex'
p6527
g6365
sg38
S'right'
p6528
sg59
g63
sS'trial_loop.thisN'
p6529
I9
sg33
S'51-mars.png'
p6530
sg64
g65
sS'trial_loop.thisIndex'
p6531
g60
(g99
S'\t\x00\x00\x00'
tRp6532
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6533
I0
sg6380
S'51-mars.png'
p6534
sS'block_loop.thisRepN'
p6535
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6536
I2
sg6385
S'27-hartleys_raspberries_jelly.png'
p6537
sg55
g11
sS'block_loop.thisTrial'
p6538
Nsg70
Vn
sS'block_loop.thisTrialN'
p6539
I0
sg39
F0.61666320275617181
sg34
g753
(S"\x07\xdf\x07\x04\r'-\n\xb60"
tRp6540
sa(dp6541
S'trial_loop.thisTrialN'
p6542
I10
sg6371
S'44-crunch.png'
p6543
sS'block_loop.thisIndex'
p6544
g6365
sg38
S'left'
p6545
sg59
g63
sS'trial_loop.thisN'
p6546
I10
sg33
S'44-crunch.png'
p6547
sg64
g65
sS'trial_loop.thisIndex'
p6548
g60
(g99
S'\n\x00\x00\x00'
tRp6549
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6550
I0
sg6380
S'26-walkers_smoky_bacon.png'
p6551
sS'block_loop.thisRepN'
p6552
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6553
I2
sg6385
S'26-walkers_smoky_bacon.png'
p6554
sg55
g11
sS'block_loop.thisTrial'
p6555
Nsg70
Vn
sS'block_loop.thisTrialN'
p6556
I0
sg39
F0.61663269754171779
sg34
g753
(S"\x07\xdf\x07\x04\r'3\x05SH"
tRp6557
sa(dp6558
S'trial_loop.thisTrialN'
p6559
I11
sg6371
g6372
sS'block_loop.thisIndex'
p6560
g6365
sg38
S'left'
p6561
sg59
g63
sS'trial_loop.thisN'
p6562
I11
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6563
g60
(g99
S'\x0b\x00\x00\x00'
tRp6564
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6565
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6566
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6567
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6568
Nsg70
Vn
sS'block_loop.thisTrialN'
p6569
I0
sg39
F0.80038071648414189
sg34
g753
(S"\x07\xdf\x07\x04\r'8\x0f6\x88"
tRp6570
sa(dp6571
S'trial_loop.thisTrialN'
p6572
I12
sg6371
S'17-jacobs_mini_cheddars_redo.png'
p6573
sS'block_loop.thisIndex'
p6574
g6365
sg38
S'left'
p6575
sg59
g63
sS'trial_loop.thisN'
p6576
I12
sg33
S'17-jacobs_mini_cheddars_redo.png'
p6577
sg64
g65
sS'trial_loop.thisIndex'
p6578
g60
(g99
S'\x0c\x00\x00\x00'
tRp6579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6580
I0
sg6380
S'8-liquorice_catherine_wheels.png'
p6581
sS'block_loop.thisRepN'
p6582
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6583
I2
sg6385
S'8-liquorice_catherine_wheels.png'
p6584
sg55
g11
sS'block_loop.thisTrial'
p6585
Nsg70
Vn
sS'block_loop.thisTrialN'
p6586
I0
sg39
F0.61651324254125939
sg34
g753
(S'\x07\xdf\x07\x04\r(\x02\x0c\xae\x18'
tRp6587
sa(dp6588
S'trial_loop.thisTrialN'
p6589
I13
sg6371
S'4-corn.png'
p6590
sS'block_loop.thisIndex'
p6591
g6365
sg38
S'right'
p6592
sg59
g63
sS'trial_loop.thisN'
p6593
I13
sg33
S'10-bounty_redo.png'
p6594
sg64
g65
sS'trial_loop.thisIndex'
p6595
g60
(g99
S'\r\x00\x00\x00'
tRp6596
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6597
I0
sg6380
S'10-bounty_redo.png'
p6598
sS'block_loop.thisRepN'
p6599
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6600
I2
sg6385
S'4-corn.png'
p6601
sg55
g11
sS'block_loop.thisTrial'
p6602
Nsg70
Vn
sS'block_loop.thisTrialN'
p6603
I0
sg39
F0.71668438535016321
sg34
g753
(S'\x07\xdf\x07\x04\r(\x08\x07K0'
tRp6604
sa(dp6605
S'trial_loop.thisTrialN'
p6606
I14
sg6371
S'1-treacle_cookies.png'
p6607
sS'block_loop.thisIndex'
p6608
g6365
sg38
S'left'
p6609
sg59
g63
sS'trial_loop.thisN'
p6610
I14
sg33
S'1-treacle_cookies.png'
p6611
sg64
g65
sS'trial_loop.thisIndex'
p6612
g60
(g99
S'\x0e\x00\x00\x00'
tRp6613
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6614
I0
sg6380
S'21-nakd_banana_crunch.png'
p6615
sS'block_loop.thisRepN'
p6616
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6617
I2
sg6385
S'21-nakd_banana_crunch.png'
p6618
sg55
g11
sS'block_loop.thisTrial'
p6619
Nsg70
Vn
sS'block_loop.thisTrialN'
p6620
I0
sg39
F0.63328882993118896
sg34
g753
(S'\x07\xdf\x07\x04\r(\x0e\x03\x95\xf8'
tRp6621
sa(dp6622
S'trial_loop.thisTrialN'
p6623
I15
sg6371
S'45-chewy_nougat_redo.png'
p6624
sS'block_loop.thisIndex'
p6625
g6365
sg38
S'right'
p6626
sg59
g63
sS'trial_loop.thisN'
p6627
I15
sg33
S'41-peanuts_redo.png'
p6628
sg64
g65
sS'trial_loop.thisIndex'
p6629
g60
(g99
S'\x0f\x00\x00\x00'
tRp6630
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6631
I0
sg6380
S'41-peanuts_redo.png'
p6632
sS'block_loop.thisRepN'
p6633
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6634
I2
sg6385
S'45-chewy_nougat_redo.png'
p6635
sg55
g11
sS'block_loop.thisTrial'
p6636
Nsg70
Vn
sS'block_loop.thisTrialN'
p6637
I0
sg39
F0.73332027596188709
sg34
g753
(S'\x07\xdf\x07\x04\r(\x13\r\xb3\xd0'
tRp6638
sa(dp6639
S'trial_loop.thisTrialN'
p6640
I16
sg6371
S'23-crunchie_redo.png'
p6641
sS'block_loop.thisIndex'
p6642
g6365
sg38
S'left'
p6643
sg59
g63
sS'trial_loop.thisN'
p6644
I16
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p6645
g60
(g99
S'\x10\x00\x00\x00'
tRp6646
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6647
I0
sg6380
S'33-ambrosia_rice.png'
p6648
sS'block_loop.thisRepN'
p6649
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6650
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p6651
Nsg70
Vn
sS'block_loop.thisTrialN'
p6652
I0
sg39
F0.88332297011220362
sg34
g753
(S'\x07\xdf\x07\x04\r(\x19\n90'
tRp6653
sa(dp6654
S'trial_loop.thisTrialN'
p6655
I17
sg6371
S'2-steamed_puddings.png'
p6656
sS'block_loop.thisIndex'
p6657
g6365
sg38
S'left'
p6658
sg59
g63
sS'trial_loop.thisN'
p6659
I17
sg33
S'2-steamed_puddings.png'
p6660
sg64
g65
sS'trial_loop.thisIndex'
p6661
g60
(g99
S'\x11\x00\x00\x00'
tRp6662
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6663
I0
sg6380
S'20-fruit_pastilles.png'
p6664
sS'block_loop.thisRepN'
p6665
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6666
I2
sg6385
S'20-fruit_pastilles.png'
p6667
sg55
g11
sS'block_loop.thisTrial'
p6668
Nsg70
Vn
sS'block_loop.thisTrialN'
p6669
I0
sg39
F0.75033534354042786
sg34
g753
(S'\x07\xdf\x07\x04\r(\x1f\x08\xe1p'
tRp6670
sa(dp6671
S'trial_loop.thisTrialN'
p6672
I18
sg6371
S'41-peanuts_redo.png'
p6673
sS'block_loop.thisIndex'
p6674
g6365
sg38
S'left'
p6675
sg59
g63
sS'trial_loop.thisN'
p6676
I18
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p6677
g60
(g99
S'\x12\x00\x00\x00'
tRp6678
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6679
I0
sg6380
S'45-chewy_nougat_redo.png'
p6680
sS'block_loop.thisRepN'
p6681
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6682
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p6683
Nsg70
Vn
sS'block_loop.thisTrialN'
p6684
I0
sg39
F0.71665302484871063
sg34
g753
(S'\x07\xdf\x07\x04\r(%\x05\xa5P'
tRp6685
sa(dp6686
S'trial_loop.thisTrialN'
p6687
I19
sg6371
S'5-pineapple.png'
p6688
sS'block_loop.thisIndex'
p6689
g6365
sg38
S'right'
p6690
sg59
g63
sS'trial_loop.thisN'
p6691
I19
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p6692
g60
(g99
S'\x13\x00\x00\x00'
tRp6693
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6694
I0
sg6380
S'40-sardines.png'
p6695
sS'block_loop.thisRepN'
p6696
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6697
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6698
Nsg70
Vn
sS'block_loop.thisTrialN'
p6699
I0
sg39
F0.83321002954471624
sg34
g753
(S'\x07\xdf\x07\x04\r(+\x01\xad\xb0'
tRp6700
sa(dp6701
S'trial_loop.thisTrialN'
p6702
I20
sg6371
g6590
sS'block_loop.thisIndex'
p6703
g6365
sg38
S'right'
p6704
sg59
g63
sS'trial_loop.thisN'
p6705
I20
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p6706
g60
(g99
S'\x14\x00\x00\x00'
tRp6707
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6708
I0
sg6380
g6598
sS'block_loop.thisRepN'
p6709
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6710
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6711
Nsg70
Vn
sS'block_loop.thisTrialN'
p6712
I0
sg39
F0.90000076975775301
sg34
g753
(S'\x07\xdf\x07\x04\r(0\x0e\xe4\x80'
tRp6713
sa(dp6714
S'trial_loop.thisTrialN'
p6715
I21
sg6371
S'22-daim.png'
p6716
sS'block_loop.thisIndex'
p6717
g6365
sg38
S'left'
p6718
sg59
g63
sS'trial_loop.thisN'
p6719
I21
sg33
S'22-daim.png'
p6720
sg64
g65
sS'trial_loop.thisIndex'
p6721
g60
(g99
S'\x15\x00\x00\x00'
tRp6722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6723
I0
sg6380
S'7-olives.png'
p6724
sS'block_loop.thisRepN'
p6725
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6726
I2
sg6385
S'7-olives.png'
p6727
sg55
g11
sS'block_loop.thisTrial'
p6728
Nsg70
Vn
sS'block_loop.thisTrialN'
p6729
I0
sg39
F0.81660236338393588
sg34
g753
(S'\x07\xdf\x07\x04\r(6\x0e\t\xc0'
tRp6730
sa(dp6731
S'trial_loop.thisTrialN'
p6732
I22
sg6371
S'18-mms.png'
p6733
sS'block_loop.thisIndex'
p6734
g6365
sg38
S'left'
p6735
sg59
g63
sS'trial_loop.thisN'
p6736
I22
sg33
S'18-mms.png'
p6737
sg64
g65
sS'trial_loop.thisIndex'
p6738
g60
(g99
S'\x16\x00\x00\x00'
tRp6739
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6740
I0
sg6380
S'43-mrporky_pork_crackles_redo.png'
p6741
sS'block_loop.thisRepN'
p6742
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6743
I2
sg6385
S'43-mrporky_pork_crackles_redo.png'
p6744
sg55
g11
sS'block_loop.thisTrial'
p6745
Nsg70
Vn
sS'block_loop.thisTrialN'
p6746
I0
sg39
F0.73334850041283062
sg34
g753
(S'\x07\xdf\x07\x04\r)\x00\x0b\xbf\xd0'
tRp6747
sa(dp6748
S'trial_loop.thisTrialN'
p6749
I23
sg6371
g6392
sS'block_loop.thisIndex'
p6750
g6365
sg38
S'left'
p6751
sg59
g63
sS'trial_loop.thisN'
p6752
I23
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p6753
g60
(g99
S'\x17\x00\x00\x00'
tRp6754
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6755
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6756
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6757
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6758
Nsg70
Vn
sS'block_loop.thisTrialN'
p6759
I0
sg39
F0.90024053504566837
sg34
g753
(S'\x07\xdf\x07\x04\r)\x06\x08\x06\xb0'
tRp6760
sa(dp6761
S'trial_loop.thisTrialN'
p6762
I24
sg6371
S'49-yorkie.png'
p6763
sS'block_loop.thisIndex'
p6764
g6365
sg38
S'left'
p6765
sg59
g63
sS'trial_loop.thisN'
p6766
I24
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p6767
g60
(g99
S'\x18\x00\x00\x00'
tRp6768
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6769
I0
sg6380
S'35-raisins.png'
p6770
sS'block_loop.thisRepN'
p6771
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6772
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6773
Nsg70
Vn
sS'block_loop.thisTrialN'
p6774
I0
sg39
F0.71658602741445065
sg34
g753
(S'\x07\xdf\x07\x04\r)\x0c\x07+\xf0'
tRp6775
sa(dp6776
S'trial_loop.thisTrialN'
p6777
I25
sg6371
S'46-pistachios.png'
p6778
sS'block_loop.thisIndex'
p6779
g6365
sg38
S'left'
p6780
sg59
g63
sS'trial_loop.thisN'
p6781
I25
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6782
g60
(g99
S'\x19\x00\x00\x00'
tRp6783
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6784
I0
sg6380
S'29-beans.png'
p6785
sS'block_loop.thisRepN'
p6786
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6787
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6788
Nsg70
Vn
sS'block_loop.thisTrialN'
p6789
I0
sg39
F0.7665780875049677
sg34
g753
(S'\x07\xdf\x07\x04\r)\x12\x034P'
tRp6790
sa(dp6791
S'trial_loop.thisTrialN'
p6792
I26
sg6371
g6372
sS'block_loop.thisIndex'
p6793
g6365
sg38
S'left'
p6794
sg59
g63
sS'trial_loop.thisN'
p6795
I26
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p6796
g60
(g99
S'\x1a\x00\x00\x00'
tRp6797
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6798
I0
sg6380
g6381
sS'block_loop.thisRepN'
p6799
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6800
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p6801
Nsg70
Vn
sS'block_loop.thisTrialN'
p6802
I0
sg39
F0.6498856624639302
sg34
g753
(S'\x07\xdf\x07\x04\r)\x18\x006\xb0'
tRp6803
sa(dp6804
S'trial_loop.thisTrialN'
p6805
I27
sg6371
S'38-maltesers.png'
p6806
sS'block_loop.thisIndex'
p6807
g6365
sg38
S'left'
p6808
sg59
g63
sS'trial_loop.thisN'
p6809
I27
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p6810
g60
(g99
S'\x1b\x00\x00\x00'
tRp6811
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6812
I0
sg6380
S'6-sour_patch_kids.png'
p6813
sS'block_loop.thisRepN'
p6814
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6815
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p6816
Nsg70
Vn
sS'block_loop.thisTrialN'
p6817
I0
sg39
F0.88299710599494574
sg34
g753
(S'\x07\xdf\x07\x04\r)\x1d\n\x8f '
tRp6818
sa(dp6819
S'trial_loop.thisTrialN'
p6820
I28
sg6371
g6392
sS'block_loop.thisIndex'
p6821
g6365
sg38
S'left'
p6822
sg59
g63
sS'trial_loop.thisN'
p6823
I28
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p6824
g60
(g99
S'\x1c\x00\x00\x00'
tRp6825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6826
I0
sg6380
g6400
sS'block_loop.thisRepN'
p6827
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6828
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p6829
Nsg70
Vn
sS'block_loop.thisTrialN'
p6830
I0
sg39
F0.78324362804414704
sg34
g753
(S'\x07\xdf\x07\x04\r)#\tu\xe0'
tRp6831
sa(dp6832
S'trial_loop.thisTrialN'
p6833
I29
sg6371
S'3-ellas_strawberries_apples.png'
p6834
sS'block_loop.thisIndex'
p6835
g6365
sg38
S'left'
p6836
sg59
g63
sS'trial_loop.thisN'
p6837
I29
sg33
S'3-ellas_strawberries_apples.png'
p6838
sg64
g65
sS'trial_loop.thisIndex'
p6839
g60
(g99
S'\x1d\x00\x00\x00'
tRp6840
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6841
I0
sg6380
S'13-mccoys_steak_crisps.png'
p6842
sS'block_loop.thisRepN'
p6843
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6844
I2
sg6385
S'13-mccoys_steak_crisps.png'
p6845
sg55
g11
sS'block_loop.thisTrial'
p6846
Nsg70
Vn
sS'block_loop.thisTrialN'
p6847
I0
sg39
F0.70039944725795067
sg34
g753
(S'\x07\xdf\x07\x04\r))\x06\xb2\xd8'
tRp6848
sa(dp6849
S'trial_loop.thisTrialN'
p6850
I30
sg6371
g6656
sS'block_loop.thisIndex'
p6851
g6365
sg38
S'left'
p6852
sg59
g63
sS'trial_loop.thisN'
p6853
I30
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p6854
g60
(g99
S'\x1e\x00\x00\x00'
tRp6855
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6856
I0
sg6380
g6664
sS'block_loop.thisRepN'
p6857
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6858
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p6859
Nsg70
Vn
sS'block_loop.thisTrialN'
p6860
I0
sg39
F0.6832786092581955
sg34
g753
(S'\x07\xdf\x07\x04\r)/\x02\x80\xa0'
tRp6861
sa(dp6862
S'trial_loop.thisTrialN'
p6863
I31
sg6371
g6778
sS'block_loop.thisIndex'
p6864
g6365
sg38
S'left'
p6865
sg59
g63
sS'trial_loop.thisN'
p6866
I31
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p6867
g60
(g99
S'\x1f\x00\x00\x00'
tRp6868
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6869
I0
sg6380
g6785
sS'block_loop.thisRepN'
p6870
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6871
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6872
Nsg70
Vn
sS'block_loop.thisTrialN'
p6873
I0
sg39
F0.69994443489304103
sg34
g753
(S'\x07\xdf\x07\x04\r)4\r\x90\xa8'
tRp6874
sa(dp6875
S'trial_loop.thisTrialN'
p6876
I32
sg6371
g6624
sS'block_loop.thisIndex'
p6877
g6365
sg38
S'right'
p6878
sg59
g63
sS'trial_loop.thisN'
p6879
I32
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p6880
g60
(g99
S' \x00\x00\x00'
tRp6881
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6882
I0
sg6380
g6632
sS'block_loop.thisRepN'
p6883
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6884
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p6885
Nsg70
Vn
sS'block_loop.thisTrialN'
p6886
I0
sg39
F0.99994298090678058
sg34
g753
(S'\x07\xdf\x07\x04\r):\t^p'
tRp6887
sa(dp6888
S'trial_loop.thisTrialN'
p6889
I33
sg6371
g6492
sS'block_loop.thisIndex'
p6890
g6365
sg38
S'right'
p6891
sg59
g63
sS'trial_loop.thisN'
p6892
I33
sg33
g6503
sg64
g65
sS'trial_loop.thisIndex'
p6893
g60
(g99
S'!\x00\x00\x00'
tRp6894
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6895
I0
sg6380
g6500
sS'block_loop.thisRepN'
p6896
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6897
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p6898
Nsg70
Vn
sS'block_loop.thisTrialN'
p6899
I0
sg39
F0.93331873644638108
sg34
g753
(S'\x07\xdf\x07\x04\r*\x04\t\xf2\xe0'
tRp6900
sa(dp6901
S'trial_loop.thisTrialN'
p6902
I34
sg6371
S'13-mccoys_steak_crisps.png'
p6903
sS'block_loop.thisIndex'
p6904
g6365
sg38
S'right'
p6905
sg59
g63
sS'trial_loop.thisN'
p6906
I34
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p6907
g60
(g99
S'"\x00\x00\x00'
tRp6908
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6909
I0
sg6380
S'3-ellas_strawberries_apples.png'
p6910
sS'block_loop.thisRepN'
p6911
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6912
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p6913
Nsg70
Vn
sS'block_loop.thisTrialN'
p6914
I0
sg39
F0.83326220201342949
sg34
g753
(S'\x07\xdf\x07\x04\r*\n\tR\xb8'
tRp6915
sa(dp6916
S'trial_loop.thisTrialN'
p6917
I35
sg6371
g6716
sS'block_loop.thisIndex'
p6918
g6365
sg38
S'left'
p6919
sg59
g63
sS'trial_loop.thisN'
p6920
I35
sg33
g6720
sg64
g65
sS'trial_loop.thisIndex'
p6921
g60
(g99
S'#\x00\x00\x00'
tRp6922
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6923
I0
sg6380
g6724
sS'block_loop.thisRepN'
p6924
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6925
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p6926
Nsg70
Vn
sS'block_loop.thisTrialN'
p6927
I0
sg39
F0.68365835641816375
sg34
g753
(S'\x07\xdf\x07\x04\r*\x10\x07GH'
tRp6928
sa(dp6929
S'trial_loop.thisTrialN'
p6930
I36
sg6371
g6763
sS'block_loop.thisIndex'
p6931
g6365
sg38
S'left'
p6932
sg59
g63
sS'trial_loop.thisN'
p6933
I36
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p6934
g60
(g99
S'$\x00\x00\x00'
tRp6935
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6936
I0
sg6380
g6770
sS'block_loop.thisRepN'
p6937
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6938
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p6939
Nsg70
Vn
sS'block_loop.thisTrialN'
p6940
I0
sg39
F0.63326089057591162
sg34
g753
(S'\x07\xdf\x07\x04\r*\x16\x03\x15\x10'
tRp6941
sa(dp6942
S'trial_loop.thisTrialN'
p6943
I37
sg6371
S'48-twix.png'
p6944
sS'block_loop.thisIndex'
p6945
g6365
sg38
S'left'
p6946
sg59
g63
sS'trial_loop.thisN'
p6947
I37
sg33
S'48-twix.png'
p6948
sg64
g65
sS'trial_loop.thisIndex'
p6949
g60
(g99
S'%\x00\x00\x00'
tRp6950
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6951
I0
sg6380
S'50-polo.png'
p6952
sS'block_loop.thisRepN'
p6953
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6954
I2
sg6385
S'50-polo.png'
p6955
sg55
g11
sS'block_loop.thisTrial'
p6956
Nsg70
Vn
sS'block_loop.thisTrialN'
p6957
I0
sg39
F0.76665990990295541
sg34
g753
(S'\x07\xdf\x07\x04\r*\x1b\r2\xe8'
tRp6958
sa(dp6959
S'trial_loop.thisTrialN'
p6960
I38
sg6371
g6509
sS'block_loop.thisIndex'
p6961
g6365
sg38
S'left'
p6962
sg59
g63
sS'trial_loop.thisN'
p6963
I38
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p6964
g60
(g99
S'&\x00\x00\x00'
tRp6965
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6966
I0
sg6380
g6517
sS'block_loop.thisRepN'
p6967
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6968
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p6969
Nsg70
Vn
sS'block_loop.thisTrialN'
p6970
I0
sg39
F0.78325303619567421
sg34
g753
(S'\x07\xdf\x07\x04\r*!\n1`'
tRp6971
sa(dp6972
S'trial_loop.thisTrialN'
p6973
I39
sg6371
g6944
sS'block_loop.thisIndex'
p6974
g6365
sg38
S'left'
p6975
sg59
g63
sS'trial_loop.thisN'
p6976
I39
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p6977
g60
(g99
S"'\x00\x00\x00"
tRp6978
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6979
I0
sg6380
g6952
sS'block_loop.thisRepN'
p6980
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6981
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p6982
Nsg70
Vn
sS'block_loop.thisTrialN'
p6983
I0
sg39
F0.6832053397247364
sg34
g753
(S"\x07\xdf\x07\x04\r*'\x07nX"
tRp6984
sa(dp6985
S'trial_loop.thisTrialN'
p6986
I40
sg6371
g6590
sS'block_loop.thisIndex'
p6987
g6365
sg38
S'right'
p6988
sg59
g63
sS'trial_loop.thisN'
p6989
I40
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p6990
g60
(g99
S'(\x00\x00\x00'
tRp6991
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p6992
I0
sg6380
g6598
sS'block_loop.thisRepN'
p6993
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p6994
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p6995
Nsg70
Vn
sS'block_loop.thisTrialN'
p6996
I0
sg39
F0.91665747233855654
sg34
g753
(S'\x07\xdf\x07\x04\r*-\x02\xfd\xa0'
tRp6997
sa(dp6998
S'trial_loop.thisTrialN'
p6999
I41
sg6371
g6475
sS'block_loop.thisIndex'
p7000
g6365
sg38
S'right'
p7001
sg59
g63
sS'trial_loop.thisN'
p7002
I41
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7003
g60
(g99
S')\x00\x00\x00'
tRp7004
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7005
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7006
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7007
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7008
Nsg70
Vn
sS'block_loop.thisTrialN'
p7009
I0
sg39
F0.68346363621640194
sg34
g753
(S'\x07\xdf\x07\x04\r*3\x02]x'
tRp7010
sa(dp7011
S'trial_loop.thisTrialN'
p7012
I42
sg6371
S'30-spaghetti_hoops.png'
p7013
sS'block_loop.thisIndex'
p7014
g6365
sg38
S'right'
p7015
sg59
g63
sS'trial_loop.thisN'
p7016
I42
sg33
S'30-spaghetti_hoops.png'
p7017
sg64
g65
sS'trial_loop.thisIndex'
p7018
g60
(g99
S'*\x00\x00\x00'
tRp7019
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7020
I0
sg6380
S'19-caramello_redo.png'
p7021
sS'block_loop.thisRepN'
p7022
I2
sg6383
S'19-caramello_redo.png'
p7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7024
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p7025
Nsg70
Vn
sS'block_loop.thisTrialN'
p7026
I0
sg39
F0.94999282984827005
sg34
g753
(S'\x07\xdf\x07\x04\r*8\r2\xe8'
tRp7027
sa(dp7028
S'trial_loop.thisTrialN'
p7029
I43
sg6371
S'43-mrporky_pork_crackles_redo.png'
p7030
sS'block_loop.thisIndex'
p7031
g6365
sg38
S'right'
p7032
sg59
g63
sS'trial_loop.thisN'
p7033
I43
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p7034
g60
(g99
S'+\x00\x00\x00'
tRp7035
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7036
I0
sg6380
S'18-mms.png'
p7037
sS'block_loop.thisRepN'
p7038
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7039
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p7040
Nsg70
Vn
sS'block_loop.thisTrialN'
p7041
I0
sg39
F0.7833417008860124
sg34
g753
(S'\x07\xdf\x07\x04\r+\x02\r\x0b\xd8'
tRp7042
sa(dp7043
S'trial_loop.thisTrialN'
p7044
I44
sg6371
g6834
sS'block_loop.thisIndex'
p7045
g6365
sg38
S'left'
p7046
sg59
g63
sS'trial_loop.thisN'
p7047
I44
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7048
g60
(g99
S',\x00\x00\x00'
tRp7049
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7050
I0
sg6380
g6842
sS'block_loop.thisRepN'
p7051
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7052
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7053
Nsg70
Vn
sS'block_loop.thisTrialN'
p7054
I0
sg39
F0.64989991723632556
sg34
g753
(S'\x07\xdf\x07\x04\r+\x08\n\x0e8'
tRp7055
sa(dp7056
S'trial_loop.thisTrialN'
p7057
I45
sg6371
S'16-skips_prawn.png'
p7058
sS'block_loop.thisIndex'
p7059
g6365
sg38
S'right'
p7060
sg59
g63
sS'trial_loop.thisN'
p7061
I45
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7062
g60
(g99
S'-\x00\x00\x00'
tRp7063
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7064
I0
sg6380
S'42-mrkipling_lemon_slices.png'
p7065
sS'block_loop.thisRepN'
p7066
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7067
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7068
Nsg70
Vn
sS'block_loop.thisTrialN'
p7069
I0
sg39
F0.99989508486760315
sg34
g753
(S'\x07\xdf\x07\x04\r+\x0e\x05b\xe8'
tRp7070
sa(dp7071
S'trial_loop.thisTrialN'
p7072
I46
sg6371
g6834
sS'block_loop.thisIndex'
p7073
g6365
sg38
S'left'
p7074
sg59
g63
sS'trial_loop.thisN'
p7075
I46
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7076
g60
(g99
S'.\x00\x00\x00'
tRp7077
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7078
I0
sg6380
g6842
sS'block_loop.thisRepN'
p7079
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7080
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7081
Nsg70
Vn
sS'block_loop.thisTrialN'
p7082
I0
sg39
F0.91666659539259854
sg34
g753
(S'\x07\xdf\x07\x04\r+\x14\x05\xb4\xf0'
tRp7083
sa(dp7084
S'trial_loop.thisTrialN'
p7085
I47
sg6371
g6944
sS'block_loop.thisIndex'
p7086
g6365
sg38
S'left'
p7087
sg59
g63
sS'trial_loop.thisN'
p7088
I47
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7089
g60
(g99
S'/\x00\x00\x00'
tRp7090
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7091
I0
sg6380
g6952
sS'block_loop.thisRepN'
p7092
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7093
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7094
Nsg70
Vn
sS'block_loop.thisTrialN'
p7095
I0
sg39
F1.2166508866321237
sg34
g753
(S'\x07\xdf\x07\x04\r+\x1a\x05\x14\xc8'
tRp7096
sa(dp7097
S'trial_loop.thisTrialN'
p7098
I48
sg6371
S'20-fruit_pastilles.png'
p7099
sS'block_loop.thisIndex'
p7100
g6365
sg38
S'right'
p7101
sg59
g63
sS'trial_loop.thisN'
p7102
I48
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p7103
g60
(g99
S'0\x00\x00\x00'
tRp7104
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7105
I0
sg6380
S'2-steamed_puddings.png'
p7106
sS'block_loop.thisRepN'
p7107
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7108
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p7109
Nsg70
Vn
sS'block_loop.thisTrialN'
p7110
I0
sg39
F0.78335453018189583
sg34
g753
(S'\x07\xdf\x07\x04\r+ \x08\xbeH'
tRp7111
sa(dp7112
S'trial_loop.thisTrialN'
p7113
I49
sg6371
g6509
sS'block_loop.thisIndex'
p7114
g6365
sg38
S'left'
p7115
sg59
g63
sS'trial_loop.thisN'
p7116
I49
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7117
g60
(g99
S'1\x00\x00\x00'
tRp7118
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7119
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7120
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7121
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7122
Nsg70
Vn
sS'block_loop.thisTrialN'
p7123
I0
sg39
F0.74992594645300414
sg34
g753
(S'\x07\xdf\x07\x04\r+&\x05\xfb@'
tRp7124
sa(dp7125
S'trial_loop.thisTrialN'
p7126
I50
sg6371
g6944
sS'block_loop.thisIndex'
p7127
g6365
sg38
S'left'
p7128
sg59
g63
sS'trial_loop.thisN'
p7129
I50
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7130
g60
(g99
S'2\x00\x00\x00'
tRp7131
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7132
I0
sg6380
g6952
sS'block_loop.thisRepN'
p7133
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7134
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7135
Nsg70
Vn
sS'block_loop.thisTrialN'
p7136
I0
sg39
F0.76655356929404661
sg34
g753
(S'\x07\xdf\x07\x04\r+,\x02\xbf '
tRp7137
sa(dp7138
S'trial_loop.thisTrialN'
p7139
I51
sg6371
g6573
sS'block_loop.thisIndex'
p7140
g6365
sg38
S'left'
p7141
sg59
g63
sS'trial_loop.thisN'
p7142
I51
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7143
g60
(g99
S'3\x00\x00\x00'
tRp7144
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7145
I0
sg6380
g6581
sS'block_loop.thisRepN'
p7146
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7147
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7148
Nsg70
Vn
sS'block_loop.thisTrialN'
p7149
I0
sg39
F0.65001367032891721
sg34
g753
(S'\x07\xdf\x07\x04\r+1\x0e\xff\xd8'
tRp7150
sa(dp7151
S'trial_loop.thisTrialN'
p7152
I52
sg6371
g6543
sS'block_loop.thisIndex'
p7153
g6365
sg38
S'left'
p7154
sg59
g63
sS'trial_loop.thisN'
p7155
I52
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p7156
g60
(g99
S'4\x00\x00\x00'
tRp7157
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7158
I0
sg6380
g6551
sS'block_loop.thisRepN'
p7159
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7160
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p7161
Nsg70
Vn
sS'block_loop.thisTrialN'
p7162
I0
sg39
F0.74996785548501066
sg34
g753
(S'\x07\xdf\x07\x04\r+7\n\x19\xf0'
tRp7163
sa(dp7164
S'trial_loop.thisTrialN'
p7165
I53
sg6371
g6834
sS'block_loop.thisIndex'
p7166
g6365
sg38
S'left'
p7167
sg59
g63
sS'trial_loop.thisN'
p7168
I53
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7169
g60
(g99
S'5\x00\x00\x00'
tRp7170
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7171
I0
sg6380
g6842
sS'block_loop.thisRepN'
p7172
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7173
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7174
Nsg70
Vn
sS'block_loop.thisTrialN'
p7175
I0
sg39
F0.66710514349324512
sg34
g753
(S'\x07\xdf\x07\x04\r,\x01\x06\xd9\xe8'
tRp7176
sa(dp7177
S'trial_loop.thisTrialN'
p7178
I54
sg6371
S'34-hula_hoops_bbq_beef_redo.png'
p7179
sS'block_loop.thisIndex'
p7180
g6365
sg38
S'right'
p7181
sg59
g63
sS'trial_loop.thisN'
p7182
I54
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7183
g60
(g99
S'6\x00\x00\x00'
tRp7184
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7185
I0
sg6380
S'36-fig_rolls.png'
p7186
sS'block_loop.thisRepN'
p7187
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7188
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7189
Nsg70
Vn
sS'block_loop.thisTrialN'
p7190
I0
sg39
F0.8332217184597539
sg34
g753
(S'\x07\xdf\x07\x04\r,\x07\x02.\x98'
tRp7191
sa(dp7192
S'trial_loop.thisTrialN'
p7193
I55
sg6371
g6903
sS'block_loop.thisIndex'
p7194
g6365
sg38
S'right'
p7195
sg59
g63
sS'trial_loop.thisN'
p7196
I55
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7197
g60
(g99
S'7\x00\x00\x00'
tRp7198
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7199
I0
sg6380
g6910
sS'block_loop.thisRepN'
p7200
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7201
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7202
Nsg70
Vn
sS'block_loop.thisTrialN'
p7203
I0
sg39
F0.75005081826566311
sg34
g753
(S'\x07\xdf\x07\x04\r,\r\x00#('
tRp7204
sa(dp7205
S'trial_loop.thisTrialN'
p7206
I56
sg6371
S'50-polo.png'
p7207
sS'block_loop.thisIndex'
p7208
g6365
sg38
S'right'
p7209
sg59
g63
sS'trial_loop.thisN'
p7210
I56
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7211
g60
(g99
S'8\x00\x00\x00'
tRp7212
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7213
I0
sg6380
S'48-twix.png'
p7214
sS'block_loop.thisRepN'
p7215
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7216
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7217
Nsg70
Vn
sS'block_loop.thisTrialN'
p7218
I0
sg39
F0.74983329042697733
sg34
g753
(S'\x07\xdf\x07\x04\r,\x12\x0c%`'
tRp7219
sa(dp7220
S'trial_loop.thisTrialN'
p7221
I57
sg6371
g6372
sS'block_loop.thisIndex'
p7222
g6365
sg38
S'left'
p7223
sg59
g63
sS'trial_loop.thisN'
p7224
I57
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7225
g60
(g99
S'9\x00\x00\x00'
tRp7226
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7227
I0
sg6380
g6381
sS'block_loop.thisRepN'
p7228
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7229
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7230
Nsg70
Vn
sS'block_loop.thisTrialN'
p7231
I0
sg39
F0.65003562267702364
sg34
g753
(S'\x07\xdf\x07\x04\r,\x18\x08\xe9@'
tRp7232
sa(dp7233
S'trial_loop.thisTrialN'
p7234
I58
sg6371
g6806
sS'block_loop.thisIndex'
p7235
g6365
sg38
S'left'
p7236
sg59
g63
sS'trial_loop.thisN'
p7237
I58
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7238
g60
(g99
S':\x00\x00\x00'
tRp7239
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7240
I0
sg6380
g6813
sS'block_loop.thisRepN'
p7241
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7242
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7243
Nsg70
Vn
sS'block_loop.thisTrialN'
p7244
I0
sg39
F0.81612539867091982
sg34
g753
(S'\x07\xdf\x07\x04\r,\x1e\x03\xffp'
tRp7245
sa(dp7246
S'trial_loop.thisTrialN'
p7247
I59
sg6371
g6716
sS'block_loop.thisIndex'
p7248
g6365
sg38
S'left'
p7249
sg59
g63
sS'trial_loop.thisN'
p7250
I59
sg33
g6727
sg64
g65
sS'trial_loop.thisIndex'
p7251
g60
(g99
S';\x00\x00\x00'
tRp7252
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7253
I0
sg6380
g6724
sS'block_loop.thisRepN'
p7254
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7255
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p7256
Nsg70
Vn
sS'block_loop.thisTrialN'
p7257
I0
sg39
F1.0669270158450672
sg34
g753
(S'\x07\xdf\x07\x04\r,$\x01\xb5\x80'
tRp7258
sa(dp7259
S'trial_loop.thisTrialN'
p7260
I60
sg6371
g6492
sS'block_loop.thisIndex'
p7261
g6365
sg38
S'right'
p7262
sg59
g63
sS'trial_loop.thisN'
p7263
I60
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7264
g60
(g99
S'<\x00\x00\x00'
tRp7265
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7266
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7267
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7268
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7269
Nsg70
Vn
sS'block_loop.thisTrialN'
p7270
I0
sg39
F0.98329853743234708
sg34
g753
(S'\x07\xdf\x07\x04\r,*\x03< '
tRp7271
sa(dp7272
S'trial_loop.thisTrialN'
p7273
I61
sg6371
g6573
sS'block_loop.thisIndex'
p7274
g6365
sg38
S'left'
p7275
sg59
g63
sS'trial_loop.thisN'
p7276
I61
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7277
g60
(g99
S'=\x00\x00\x00'
tRp7278
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7279
I0
sg6380
g6581
sS'block_loop.thisRepN'
p7280
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7281
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7282
Nsg70
Vn
sS'block_loop.thisTrialN'
p7283
I0
sg39
F0.6499786035856232
sg34
g753
(S'\x07\xdf\x07\x04\r,0\x03\x92\x10'
tRp7284
sa(dp7285
S'trial_loop.thisTrialN'
p7286
I62
sg6371
g6492
sS'block_loop.thisIndex'
p7287
g6365
sg38
S'right'
p7288
sg59
g63
sS'trial_loop.thisN'
p7289
I62
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7290
g60
(g99
S'>\x00\x00\x00'
tRp7291
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7292
I0
sg6380
g6500
sS'block_loop.thisRepN'
p7293
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7294
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7295
Nsg70
Vn
sS'block_loop.thisTrialN'
p7296
I0
sg39
F0.75002145343387383
sg34
g753
(S'\x07\xdf\x07\x04\r,5\r\xea\x80'
tRp7297
sa(dp7298
S'trial_loop.thisTrialN'
p7299
I63
sg6371
g6763
sS'block_loop.thisIndex'
p7300
g6365
sg38
S'left'
p7301
sg59
g63
sS'trial_loop.thisN'
p7302
I63
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7303
g60
(g99
S'?\x00\x00\x00'
tRp7304
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7305
I0
sg6380
g6770
sS'block_loop.thisRepN'
p7306
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7307
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7308
Nsg70
Vn
sS'block_loop.thisTrialN'
p7309
I0
sg39
F0.71656920678105962
sg34
g753
(S'\x07\xdf\x07\x04\r,;\n\xae`'
tRp7310
sa(dp7311
S'trial_loop.thisTrialN'
p7312
I64
sg6371
g7058
sS'block_loop.thisIndex'
p7313
g6365
sg38
S'right'
p7314
sg59
g63
sS'trial_loop.thisN'
p7315
I64
sg33
g6403
sg64
g65
sS'trial_loop.thisIndex'
p7316
g60
(g99
S'@\x00\x00\x00'
tRp7317
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7318
I0
sg6380
g7065
sS'block_loop.thisRepN'
p7319
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7320
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7321
Nsg70
Vn
sS'block_loop.thisTrialN'
p7322
I0
sg39
F0.84987699556040752
sg34
g753
(S'\x07\xdf\x07\x04\r-\x05\x06\xb6\xc0'
tRp7323
sa(dp7324
S'trial_loop.thisTrialN'
p7325
I65
sg6371
g6475
sS'block_loop.thisIndex'
p7326
g6365
sg38
S'right'
p7327
sg59
g63
sS'trial_loop.thisN'
p7328
I65
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p7329
g60
(g99
S'A\x00\x00\x00'
tRp7330
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7331
I0
sg6380
g6483
sS'block_loop.thisRepN'
p7332
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7333
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p7334
Nsg70
Vn
sS'block_loop.thisTrialN'
p7335
I0
sg39
F0.73379495991139265
sg34
g753
(S'\x07\xdf\x07\x04\r-\x0b\x05$h'
tRp7336
sa(dp7337
S'trial_loop.thisTrialN'
p7338
I66
sg6371
g6426
sS'block_loop.thisIndex'
p7339
g6365
sg38
S'right'
p7340
sg59
g63
sS'trial_loop.thisN'
p7341
I66
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7342
g60
(g99
S'B\x00\x00\x00'
tRp7343
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7344
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7345
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7346
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7347
Nsg70
Vn
sS'block_loop.thisTrialN'
p7348
I0
sg39
F0.69991906139875937
sg34
g753
(S'\x07\xdf\x07\x04\r-\x11\x01o0'
tRp7349
sa(dp7350
S'trial_loop.thisTrialN'
p7351
I67
sg6371
g6607
sS'block_loop.thisIndex'
p7352
g6365
sg38
S'left'
p7353
sg59
g63
sS'trial_loop.thisN'
p7354
I67
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p7355
g60
(g99
S'C\x00\x00\x00'
tRp7356
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7357
I0
sg6380
g6615
sS'block_loop.thisRepN'
p7358
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7359
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7360
Nsg70
Vn
sS'block_loop.thisTrialN'
p7361
I0
sg39
F0.64998002906213515
sg34
g753
(S'\x07\xdf\x07\x04\r-\x16\x0c\xb9\xd0'
tRp7362
sa(dp7363
S'trial_loop.thisTrialN'
p7364
I68
sg6371
S'10-bounty_redo.png'
p7365
sS'block_loop.thisIndex'
p7366
g6365
sg38
S'left'
p7367
sg59
g63
sS'trial_loop.thisN'
p7368
I68
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p7369
g60
(g99
S'D\x00\x00\x00'
tRp7370
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7371
I0
sg6380
S'4-corn.png'
p7372
sS'block_loop.thisRepN'
p7373
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7374
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7375
Nsg70
Vn
sS'block_loop.thisTrialN'
p7376
I0
sg39
F0.74993278874353564
sg34
g753
(S'\x07\xdf\x07\x04\r-\x1c\x07\xd3\xe8'
tRp7377
sa(dp7378
S'trial_loop.thisTrialN'
p7379
I69
sg6371
S'8-liquorice_catherine_wheels.png'
p7380
sS'block_loop.thisIndex'
p7381
g6365
sg38
S'right'
p7382
sg59
g63
sS'trial_loop.thisN'
p7383
I69
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7384
g60
(g99
S'E\x00\x00\x00'
tRp7385
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7386
I0
sg6380
S'17-jacobs_mini_cheddars_redo.png'
p7387
sS'block_loop.thisRepN'
p7388
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7389
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7390
Nsg70
Vn
sS'block_loop.thisTrialN'
p7391
I0
sg39
F0.75006393265721272
sg34
g753
(S'\x07\xdf\x07\x04\r-"\x04\x93\xe0'
tRp7392
sa(dp7393
S'trial_loop.thisTrialN'
p7394
I70
sg6371
g6944
sS'block_loop.thisIndex'
p7395
g6365
sg38
S'left'
p7396
sg59
g63
sS'trial_loop.thisN'
p7397
I70
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7398
g60
(g99
S'F\x00\x00\x00'
tRp7399
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7400
I0
sg6380
g6952
sS'block_loop.thisRepN'
p7401
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7402
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7403
Nsg70
Vn
sS'block_loop.thisTrialN'
p7404
I0
sg39
F0.81658354708451952
sg34
g753
(S'\x07\xdf\x07\x04\r-(\x01W\xc0'
tRp7405
sa(dp7406
S'trial_loop.thisTrialN'
p7407
I71
sg6371
S'21-nakd_banana_crunch.png'
p7408
sS'block_loop.thisIndex'
p7409
g6365
sg38
S'right'
p7410
sg59
g63
sS'trial_loop.thisN'
p7411
I71
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7412
g60
(g99
S'G\x00\x00\x00'
tRp7413
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7414
I0
sg6380
S'1-treacle_cookies.png'
p7415
sS'block_loop.thisRepN'
p7416
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7417
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7418
Nsg70
Vn
sS'block_loop.thisTrialN'
p7419
I0
sg39
F0.71668153439532034
sg34
g753
(S'\x07\xdf\x07\x04\r--\x0e\x11\x90'
tRp7420
sa(dp7421
S'trial_loop.thisTrialN'
p7422
I72
sg6371
S'19-caramello_redo.png'
p7423
sS'block_loop.thisIndex'
p7424
g6365
sg38
S'left'
p7425
sg59
g63
sS'trial_loop.thisN'
p7426
I72
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p7427
g60
(g99
S'H\x00\x00\x00'
tRp7428
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7429
I0
sg6380
S'30-spaghetti_hoops.png'
p7430
sS'block_loop.thisRepN'
p7431
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7432
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p7433
Nsg70
Vn
sS'block_loop.thisTrialN'
p7434
I0
sg39
F0.81654905053255789
sg34
g753
(S'\x07\xdf\x07\x04\r-3\n\\X'
tRp7435
sa(dp7436
S'trial_loop.thisTrialN'
p7437
I73
sg6371
g6392
sS'block_loop.thisIndex'
p7438
g6365
sg38
S'left'
p7439
sg59
g63
sS'trial_loop.thisN'
p7440
I73
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7441
g60
(g99
S'I\x00\x00\x00'
tRp7442
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7443
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7444
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7445
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7446
Nsg70
Vn
sS'block_loop.thisTrialN'
p7447
I0
sg39
F0.91647073480635299
sg34
g753
(S'\x07\xdf\x07\x04\r-9\x08\x12h'
tRp7448
sa(dp7449
S'trial_loop.thisTrialN'
p7450
I74
sg6371
g7099
sS'block_loop.thisIndex'
p7451
g6365
sg38
S'right'
p7452
sg59
g63
sS'trial_loop.thisN'
p7453
I74
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p7454
g60
(g99
S'J\x00\x00\x00'
tRp7455
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7456
I0
sg6380
g7106
sS'block_loop.thisRepN'
p7457
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7458
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p7459
Nsg70
Vn
sS'block_loop.thisTrialN'
p7460
I0
sg39
F0.88325796834760695
sg34
g753
(S'\x07\xdf\x07\x04\r.\x03\x077\xa8'
tRp7461
sa(dp7462
S'trial_loop.thisTrialN'
p7463
I75
sg6371
g6607
sS'block_loop.thisIndex'
p7464
g6365
sg38
S'left'
p7465
sg59
g63
sS'trial_loop.thisN'
p7466
I75
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p7467
g60
(g99
S'K\x00\x00\x00'
tRp7468
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7469
I0
sg6380
g6615
sS'block_loop.thisRepN'
p7470
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7471
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7472
Nsg70
Vn
sS'block_loop.thisTrialN'
p7473
I0
sg39
F0.6505721723442548
sg34
g753
(S'\x07\xdf\x07\x04\r.\t\x06\x1eh'
tRp7474
sa(dp7475
S'trial_loop.thisTrialN'
p7476
I76
sg6371
g6426
sS'block_loop.thisIndex'
p7477
g6365
sg38
S'right'
p7478
sg59
g63
sS'trial_loop.thisN'
p7479
I76
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7480
g60
(g99
S'L\x00\x00\x00'
tRp7481
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7482
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7483
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7484
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7485
Nsg70
Vn
sS'block_loop.thisTrialN'
p7486
I0
sg39
F0.85003693411817949
sg34
g753
(S'\x07\xdf\x07\x04\r.\x0f\x014\x98'
tRp7487
sa(dp7488
S'trial_loop.thisTrialN'
p7489
I77
sg6371
g6624
sS'block_loop.thisIndex'
p7490
g6365
sg38
S'right'
p7491
sg59
g63
sS'trial_loop.thisN'
p7492
I77
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7493
g60
(g99
S'M\x00\x00\x00'
tRp7494
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7495
I0
sg6380
g6632
sS'block_loop.thisRepN'
p7496
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7497
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p7498
Nsg70
Vn
sS'block_loop.thisTrialN'
p7499
I0
sg39
F0.88367791396922257
sg34
g753
(S'\x07\xdf\x07\x04\r.\x14\x0e\xa6\x00'
tRp7500
sa(dp7501
S'trial_loop.thisTrialN'
p7502
I78
sg6371
g7013
sS'block_loop.thisIndex'
p7503
g6365
sg38
S'right'
p7504
sg59
g63
sS'trial_loop.thisN'
p7505
I78
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p7506
g60
(g99
S'N\x00\x00\x00'
tRp7507
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7508
I0
sg6380
g7021
sS'block_loop.thisRepN'
p7509
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7510
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p7511
Nsg70
Vn
sS'block_loop.thisTrialN'
p7512
I0
sg39
F0.74999436936559505
sg34
g753
(S'\x07\xdf\x07\x04\r.\x1a\rR('
tRp7513
sa(dp7514
S'trial_loop.thisTrialN'
p7515
I79
sg6371
g7380
sS'block_loop.thisIndex'
p7516
g6365
sg38
S'right'
p7517
sg59
g63
sS'trial_loop.thisN'
p7518
I79
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7519
g60
(g99
S'O\x00\x00\x00'
tRp7520
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7521
I0
sg6380
g7387
sS'block_loop.thisRepN'
p7522
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7523
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7524
Nsg70
Vn
sS'block_loop.thisTrialN'
p7525
I0
sg39
F0.70000943666127569
sg34
g753
(S'\x07\xdf\x07\x04\r. \n\x12 '
tRp7526
sa(dp7527
S'trial_loop.thisTrialN'
p7528
I80
sg6371
g6656
sS'block_loop.thisIndex'
p7529
g6365
sg38
S'left'
p7530
sg59
g63
sS'trial_loop.thisN'
p7531
I80
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p7532
g60
(g99
S'P\x00\x00\x00'
tRp7533
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7534
I0
sg6380
g6664
sS'block_loop.thisRepN'
p7535
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7536
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p7537
Nsg70
Vn
sS'block_loop.thisTrialN'
p7538
I0
sg39
F0.6832144627787784
sg34
g753
(S'\x07\xdf\x07\x04\r.&\x06\x1eh'
tRp7539
sa(dp7540
S'trial_loop.thisTrialN'
p7541
I81
sg6371
g6443
sS'block_loop.thisIndex'
p7542
g6365
sg38
S'right'
p7543
sg59
g63
sS'trial_loop.thisN'
p7544
I81
sg33
g6454
sg64
g65
sS'trial_loop.thisIndex'
p7545
g60
(g99
S'Q\x00\x00\x00'
tRp7546
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7547
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7548
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7549
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7550
Nsg70
Vn
sS'block_loop.thisTrialN'
p7551
I0
sg39
F0.81634606256011466
sg34
g753
(S'\x07\xdf\x07\x04\r.,\x01\xb1\x98'
tRp7552
sa(dp7553
S'trial_loop.thisTrialN'
p7554
I82
sg6371
g6409
sS'block_loop.thisIndex'
p7555
g6365
sg38
S'left'
p7556
sg59
g63
sS'trial_loop.thisN'
p7557
I82
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7558
g60
(g99
S'R\x00\x00\x00'
tRp7559
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7560
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7561
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7562
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7563
Nsg70
Vn
sS'block_loop.thisTrialN'
p7564
I0
sg39
F0.68315715859171178
sg34
g753
(S'\x07\xdf\x07\x04\r.1\x0e\xa9\xe8'
tRp7565
sa(dp7566
S'trial_loop.thisTrialN'
p7567
I83
sg6371
g6624
sS'block_loop.thisIndex'
p7568
g6365
sg38
S'right'
p7569
sg59
g63
sS'trial_loop.thisN'
p7570
I83
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7571
g60
(g99
S'S\x00\x00\x00'
tRp7572
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7573
I0
sg6380
g6632
sS'block_loop.thisRepN'
p7574
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7575
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p7576
Nsg70
Vn
sS'block_loop.thisTrialN'
p7577
I0
sg39
F0.85040584765010863
sg34
g753
(S'\x07\xdf\x07\x04\r.7\nw\xb0'
tRp7578
sa(dp7579
S'trial_loop.thisTrialN'
p7580
I84
sg6371
g6426
sS'block_loop.thisIndex'
p7581
g6365
sg38
S'right'
p7582
sg59
g63
sS'trial_loop.thisN'
p7583
I84
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p7584
g60
(g99
S'T\x00\x00\x00'
tRp7585
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7586
I0
sg6380
g6434
sS'block_loop.thisRepN'
p7587
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7588
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p7589
Nsg70
Vn
sS'block_loop.thisTrialN'
p7590
I0
sg39
F0.66666552628521458
sg34
g753
(S'\x07\xdf\x07\x04\r/\x01\x08\xa6\xd8'
tRp7591
sa(dp7592
S'trial_loop.thisTrialN'
p7593
I85
sg6371
g6778
sS'block_loop.thisIndex'
p7594
g6365
sg38
S'left'
p7595
sg59
g63
sS'trial_loop.thisN'
p7596
I85
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7597
g60
(g99
S'U\x00\x00\x00'
tRp7598
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7599
I0
sg6380
g6785
sS'block_loop.thisRepN'
p7600
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7601
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7602
Nsg70
Vn
sS'block_loop.thisTrialN'
p7603
I0
sg39
F0.63336381003864517
sg34
g753
(S'\x07\xdf\x07\x04\r/\x07\x03\xfb\x88'
tRp7604
sa(dp7605
S'trial_loop.thisTrialN'
p7606
I86
sg6371
g6443
sS'block_loop.thisIndex'
p7607
g6365
sg38
S'right'
p7608
sg59
g63
sS'trial_loop.thisN'
p7609
I86
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7610
g60
(g99
S'V\x00\x00\x00'
tRp7611
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7612
I0
sg6380
g6451
sS'block_loop.thisRepN'
p7613
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7614
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7615
Nsg70
Vn
sS'block_loop.thisTrialN'
p7616
I0
sg39
F0.81640792827784026
sg34
g753
(S'\x07\xdf\x07\x04\r/\x0c\x0e\x19`'
tRp7617
sa(dp7618
S'trial_loop.thisTrialN'
p7619
I87
sg6371
g6509
sS'block_loop.thisIndex'
p7620
g6365
sg38
S'left'
p7621
sg59
g63
sS'trial_loop.thisN'
p7622
I87
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p7623
g60
(g99
S'W\x00\x00\x00'
tRp7624
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7625
I0
sg6380
g6517
sS'block_loop.thisRepN'
p7626
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7627
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p7628
Nsg70
Vn
sS'block_loop.thisTrialN'
p7629
I0
sg39
F0.74998809726457694
sg34
g753
(S'\x07\xdf\x07\x04\r/\x12\x0b\xcfp'
tRp7630
sa(dp7631
S'trial_loop.thisTrialN'
p7632
I88
sg6371
g7030
sS'block_loop.thisIndex'
p7633
g6365
sg38
S'right'
p7634
sg59
g63
sS'trial_loop.thisN'
p7635
I88
sg33
g6744
sg64
g65
sS'trial_loop.thisIndex'
p7636
g60
(g99
S'X\x00\x00\x00'
tRp7637
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7638
I0
sg6380
g7037
sS'block_loop.thisRepN'
p7639
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7640
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p7641
Nsg70
Vn
sS'block_loop.thisTrialN'
p7642
I0
sg39
F0.69991564025076514
sg34
g753
(S'\x07\xdf\x07\x04\r/\x18\x08\x8fh'
tRp7643
sa(dp7644
S'trial_loop.thisTrialN'
p7645
I89
sg6371
g6409
sS'block_loop.thisIndex'
p7646
g6365
sg38
S'left'
p7647
sg59
g63
sS'trial_loop.thisN'
p7648
I89
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7649
g60
(g99
S'Y\x00\x00\x00'
tRp7650
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7651
I0
sg6380
g6417
sS'block_loop.thisRepN'
p7652
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7653
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7654
Nsg70
Vn
sS'block_loop.thisTrialN'
p7655
I0
sg39
F0.66708148056932259
sg34
g753
(S'\x07\xdf\x07\x04\r/\x1e\x04\x9b\xb0'
tRp7656
sa(dp7657
S'trial_loop.thisTrialN'
p7658
I90
sg6371
g7030
sS'block_loop.thisIndex'
p7659
g6365
sg38
S'right'
p7660
sg59
g63
sS'trial_loop.thisN'
p7661
I90
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p7662
g60
(g99
S'Z\x00\x00\x00'
tRp7663
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7664
I0
sg6380
g7037
sS'block_loop.thisRepN'
p7665
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7666
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p7667
Nsg70
Vn
sS'block_loop.thisTrialN'
p7668
I0
sg39
F0.63322753440479573
sg34
g753
(S'\x07\xdf\x07\x04\r/#\x0f2\xa0'
tRp7669
sa(dp7670
S'trial_loop.thisTrialN'
p7671
I91
sg6371
g6656
sS'block_loop.thisIndex'
p7672
g6365
sg38
S'left'
p7673
sg59
g63
sS'trial_loop.thisN'
p7674
I91
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p7675
g60
(g99
S'[\x00\x00\x00'
tRp7676
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7677
I0
sg6380
g6664
sS'block_loop.thisRepN'
p7678
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7679
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p7680
Nsg70
Vn
sS'block_loop.thisTrialN'
p7681
I0
sg39
F0.73333053939859383
sg34
g753
(S'\x07\xdf\x07\x04\r/)\n\x0e8'
tRp7682
sa(dp7683
S'trial_loop.thisTrialN'
p7684
I92
sg6371
S'7-olives.png'
p7685
sS'block_loop.thisIndex'
p7686
g6365
sg38
S'right'
p7687
sg59
g63
sS'trial_loop.thisN'
p7688
I92
sg33
g6727
sg64
g65
sS'trial_loop.thisIndex'
p7689
g60
(g99
S'\\\x00\x00\x00'
tRp7690
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7691
I0
sg6380
S'22-daim.png'
p7692
sS'block_loop.thisRepN'
p7693
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7694
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p7695
Nsg70
Vn
sS'block_loop.thisTrialN'
p7696
I0
sg39
F1.0166450136657659
sg34
g753
(S'\x07\xdf\x07\x04\r//\x06\x93\x98'
tRp7697
sa(dp7698
S'trial_loop.thisTrialN'
p7699
I93
sg6371
S'51-mars.png'
p7700
sS'block_loop.thisIndex'
p7701
g6365
sg38
S'left'
p7702
sg59
g63
sS'trial_loop.thisN'
p7703
I93
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7704
g60
(g99
S']\x00\x00\x00'
tRp7705
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7706
I0
sg6380
S'27-hartleys_raspberries_jelly.png'
p7707
sS'block_loop.thisRepN'
p7708
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7709
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7710
Nsg70
Vn
sS'block_loop.thisTrialN'
p7711
I0
sg39
F0.88330586438496539
sg34
g753
(S'\x07\xdf\x07\x04\r/5\x07b\xa0'
tRp7712
sa(dp7713
S'trial_loop.thisTrialN'
p7714
I94
sg6371
g6673
sS'block_loop.thisIndex'
p7715
g6365
sg38
S'left'
p7716
sg59
g63
sS'trial_loop.thisN'
p7717
I94
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p7718
g60
(g99
S'^\x00\x00\x00'
tRp7719
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7720
I0
sg6380
g6680
sS'block_loop.thisRepN'
p7721
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7722
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p7723
Nsg70
Vn
sS'block_loop.thisTrialN'
p7724
I0
sg39
F0.80000610104252701
sg34
g753
(S'\x07\xdf\x07\x04\r/;\x06\n\xe0'
tRp7725
sa(dp7726
S'trial_loop.thisTrialN'
p7727
I95
sg6371
g6806
sS'block_loop.thisIndex'
p7728
g6365
sg38
S'left'
p7729
sg59
g63
sS'trial_loop.thisN'
p7730
I95
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p7731
g60
(g99
S'_\x00\x00\x00'
tRp7732
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7733
I0
sg6380
g6813
sS'block_loop.thisRepN'
p7734
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7735
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p7736
Nsg70
Vn
sS'block_loop.thisTrialN'
p7737
I0
sg39
F0.88307607743990957
sg34
g753
(S'\x07\xdf\x07\x04\r0\x05\x03\x86X'
tRp7738
sa(dp7739
S'trial_loop.thisTrialN'
p7740
I96
sg6371
g7423
sS'block_loop.thisIndex'
p7741
g6365
sg38
S'left'
p7742
sg59
g63
sS'trial_loop.thisN'
p7743
I96
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p7744
g60
(g99
S'`\x00\x00\x00'
tRp7745
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7746
I0
sg6380
g7430
sS'block_loop.thisRepN'
p7747
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7748
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p7749
Nsg70
Vn
sS'block_loop.thisTrialN'
p7750
I0
sg39
F0.69990651719672314
sg34
g753
(S'\x07\xdf\x07\x04\r0\x0b\x02.\x98'
tRp7751
sa(dp7752
S'trial_loop.thisTrialN'
p7753
I97
sg6371
g6392
sS'block_loop.thisIndex'
p7754
g6365
sg38
S'left'
p7755
sg59
g63
sS'trial_loop.thisN'
p7756
I97
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7757
g60
(g99
S'a\x00\x00\x00'
tRp7758
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7759
I0
sg6380
g6400
sS'block_loop.thisRepN'
p7760
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7761
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7762
Nsg70
Vn
sS'block_loop.thisTrialN'
p7763
I0
sg39
F0.81654249333769258
sg34
g753
(S'\x07\xdf\x07\x04\r0\x10\r} '
tRp7764
sa(dp7765
S'trial_loop.thisTrialN'
p7766
I98
sg6371
S'26-walkers_smoky_bacon.png'
p7767
sS'block_loop.thisIndex'
p7768
g6365
sg38
S'right'
p7769
sg59
g63
sS'trial_loop.thisN'
p7770
I98
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p7771
g60
(g99
S'b\x00\x00\x00'
tRp7772
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7773
I0
sg6380
S'44-crunch.png'
p7774
sS'block_loop.thisRepN'
p7775
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7776
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p7777
Nsg70
Vn
sS'block_loop.thisTrialN'
p7778
I0
sg39
F0.76659262737484823
sg34
g753
(S'\x07\xdf\x07\x04\r0\x16\x0b30'
tRp7779
sa(dp7780
S'trial_loop.thisTrialN'
p7781
I99
sg6371
g6778
sS'block_loop.thisIndex'
p7782
g6365
sg38
S'left'
p7783
sg59
g63
sS'trial_loop.thisN'
p7784
I99
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p7785
g60
(g99
S'c\x00\x00\x00'
tRp7786
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7787
I0
sg6380
g6785
sS'block_loop.thisRepN'
p7788
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7789
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p7790
Nsg70
Vn
sS'block_loop.thisTrialN'
p7791
I0
sg39
F0.74997612325387308
sg34
g753
(S'\x07\xdf\x07\x04\r0\x1c\x07\xf7\x10'
tRp7792
sa(dp7793
S'trial_loop.thisTrialN'
p7794
I100
sg6371
g6903
sS'block_loop.thisIndex'
p7795
g6365
sg38
S'right'
p7796
sg59
g63
sS'trial_loop.thisN'
p7797
I100
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7798
g60
(g99
S'd\x00\x00\x00'
tRp7799
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7800
I0
sg6380
g6910
sS'block_loop.thisRepN'
p7801
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7802
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7803
Nsg70
Vn
sS'block_loop.thisTrialN'
p7804
I0
sg39
F0.99987541328118823
sg34
g753
(S'\x07\xdf\x07\x04\r0"\x04\xb7\x08'
tRp7805
sa(dp7806
S'trial_loop.thisTrialN'
p7807
I101
sg6371
g7380
sS'block_loop.thisIndex'
p7808
g6365
sg38
S'right'
p7809
sg59
g63
sS'trial_loop.thisN'
p7810
I101
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p7811
g60
(g99
S'e\x00\x00\x00'
tRp7812
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7813
I0
sg6380
g7387
sS'block_loop.thisRepN'
p7814
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7815
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p7816
Nsg70
Vn
sS'block_loop.thisTrialN'
p7817
I0
sg39
F1.30034807305492
sg34
g753
(S'\x07\xdf\x07\x04\r0(\x05G\x90'
tRp7818
sa(dp7819
S'trial_loop.thisTrialN'
p7820
I102
sg6371
g6460
sS'block_loop.thisIndex'
p7821
g6365
sg38
S'right'
p7822
sg59
g63
sS'trial_loop.thisN'
p7823
I102
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p7824
g60
(g99
S'f\x00\x00\x00'
tRp7825
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7826
I0
sg6380
g6467
sS'block_loop.thisRepN'
p7827
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7828
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p7829
Nsg70
Vn
sS'block_loop.thisTrialN'
p7830
I0
sg39
F1.3999396167801024
sg34
g753
(S'\x07\xdf\x07\x04\r0.\n`@'
tRp7831
sa(dp7832
S'trial_loop.thisTrialN'
p7833
I103
sg6371
g6903
sS'block_loop.thisIndex'
p7834
g6365
sg38
S'right'
p7835
sg59
g63
sS'trial_loop.thisN'
p7836
I103
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p7837
g60
(g99
S'g\x00\x00\x00'
tRp7838
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7839
I0
sg6380
g6910
sS'block_loop.thisRepN'
p7840
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7841
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p7842
Nsg70
Vn
sS'block_loop.thisTrialN'
p7843
I0
sg39
F0.73333652640212676
sg34
g753
(S'\x07\xdf\x07\x04\r05\x01\xa1\xf8'
tRp7844
sa(dp7845
S'trial_loop.thisTrialN'
p7846
I104
sg6371
g7700
sS'block_loop.thisIndex'
p7847
g6365
sg38
S'left'
p7848
sg59
g63
sS'trial_loop.thisN'
p7849
I104
sg33
g6537
sg64
g65
sS'trial_loop.thisIndex'
p7850
g60
(g99
S'h\x00\x00\x00'
tRp7851
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7852
I0
sg6380
g7707
sS'block_loop.thisRepN'
p7853
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7854
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7855
Nsg70
Vn
sS'block_loop.thisTrialN'
p7856
I0
sg39
F1.1833072613517288
sg34
g753
(S'\x07\xdf\x07\x04\r0:\ri\x98'
tRp7857
sa(dp7858
S'trial_loop.thisTrialN'
p7859
I105
sg6371
g7408
sS'block_loop.thisIndex'
p7860
g6365
sg38
S'right'
p7861
sg59
g63
sS'trial_loop.thisN'
p7862
I105
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p7863
g60
(g99
S'i\x00\x00\x00'
tRp7864
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7865
I0
sg6380
g7415
sS'block_loop.thisRepN'
p7866
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7867
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7868
Nsg70
Vn
sS'block_loop.thisTrialN'
p7869
I0
sg39
F0.81659580618907057
sg34
g753
(S'\x07\xdf\x07\x04\r1\x05\x01W\xc0'
tRp7870
sa(dp7871
S'trial_loop.thisTrialN'
p7872
I106
sg6371
g7207
sS'block_loop.thisIndex'
p7873
g6365
sg38
S'right'
p7874
sg59
g63
sS'trial_loop.thisN'
p7875
I106
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7876
g60
(g99
S'j\x00\x00\x00'
tRp7877
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7878
I0
sg6380
g7214
sS'block_loop.thisRepN'
p7879
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7880
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7881
Nsg70
Vn
sS'block_loop.thisTrialN'
p7882
I0
sg39
F0.88366280390800966
sg34
g753
(S'\x07\xdf\x07\x04\r1\n\x0eP\x10'
tRp7883
sa(dp7884
S'trial_loop.thisTrialN'
p7885
I107
sg6371
g6526
sS'block_loop.thisIndex'
p7886
g6365
sg38
S'right'
p7887
sg59
g63
sS'trial_loop.thisN'
p7888
I107
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7889
g60
(g99
S'k\x00\x00\x00'
tRp7890
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7891
I0
sg6380
g6534
sS'block_loop.thisRepN'
p7892
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7893
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7894
Nsg70
Vn
sS'block_loop.thisTrialN'
p7895
I0
sg39
F0.74994989447077387
sg34
g753
(S'\x07\xdf\x07\x04\r1\x10\r6\xd0'
tRp7896
sa(dp7897
S'trial_loop.thisTrialN'
p7898
I108
sg6371
g7767
sS'block_loop.thisIndex'
p7899
g6365
sg38
S'right'
p7900
sg59
g63
sS'trial_loop.thisN'
p7901
I108
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p7902
g60
(g99
S'l\x00\x00\x00'
tRp7903
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7904
I0
sg6380
g7774
sS'block_loop.thisRepN'
p7905
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7906
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p7907
Nsg70
Vn
sS'block_loop.thisTrialN'
p7908
I0
sg39
F0.96656457397875783
sg34
g753
(S'\x07\xdf\x07\x04\r1\x16\t\xbc0'
tRp7909
sa(dp7910
S'trial_loop.thisTrialN'
p7911
I109
sg6371
g7179
sS'block_loop.thisIndex'
p7912
g6365
sg38
S'right'
p7913
sg59
g63
sS'trial_loop.thisN'
p7914
I109
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p7915
g60
(g99
S'm\x00\x00\x00'
tRp7916
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7917
I0
sg6380
g7186
sS'block_loop.thisRepN'
p7918
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7919
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p7920
Nsg70
Vn
sS'block_loop.thisTrialN'
p7921
I0
sg39
F0.86657218603068031
sg34
g753
(S'\x07\xdf\x07\x04\r1\x1c\t\xd3\xa0'
tRp7922
sa(dp7923
S'trial_loop.thisTrialN'
p7924
I110
sg6371
g7058
sS'block_loop.thisIndex'
p7925
g6365
sg38
S'right'
p7926
sg59
g63
sS'trial_loop.thisN'
p7927
I110
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p7928
g60
(g99
S'n\x00\x00\x00'
tRp7929
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7930
I0
sg6380
g7065
sS'block_loop.thisRepN'
p7931
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7932
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p7933
Nsg70
Vn
sS'block_loop.thisTrialN'
p7934
I0
sg39
F0.74981761017625104
sg34
g753
(S'\x07\xdf\x07\x04\r1"\x08AH'
tRp7935
sa(dp7936
S'trial_loop.thisTrialN'
p7937
I111
sg6371
g7408
sS'block_loop.thisIndex'
p7938
g6365
sg38
S'right'
p7939
sg59
g63
sS'trial_loop.thisN'
p7940
I111
sg33
g6618
sg64
g65
sS'trial_loop.thisIndex'
p7941
g60
(g99
S'o\x00\x00\x00'
tRp7942
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7943
I0
sg6380
g7415
sS'block_loop.thisRepN'
p7944
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7945
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p7946
Nsg70
Vn
sS'block_loop.thisTrialN'
p7947
I0
sg39
F0.68322672188514844
sg34
g753
(S'\x07\xdf\x07\x04\r1(\x05\x05('
tRp7948
sa(dp7949
S'trial_loop.thisTrialN'
p7950
I112
sg6371
g7700
sS'block_loop.thisIndex'
p7951
g6365
sg38
S'left'
p7952
sg59
g63
sS'trial_loop.thisN'
p7953
I112
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p7954
g60
(g99
S'p\x00\x00\x00'
tRp7955
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7956
I0
sg6380
g7707
sS'block_loop.thisRepN'
p7957
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7958
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p7959
Nsg70
Vn
sS'block_loop.thisTrialN'
p7960
I0
sg39
F0.83370267450845859
sg34
g753
(S'\x07\xdf\x07\x04\r1.\x00\x94p'
tRp7961
sa(dp7962
S'trial_loop.thisTrialN'
p7963
I113
sg6371
g7685
sS'block_loop.thisIndex'
p7964
g6365
sg38
S'right'
p7965
sg59
g63
sS'trial_loop.thisN'
p7966
I113
sg33
g6727
sg64
g65
sS'trial_loop.thisIndex'
p7967
g60
(g99
S'q\x00\x00\x00'
tRp7968
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7969
I0
sg6380
g7692
sS'block_loop.thisRepN'
p7970
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7971
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p7972
Nsg70
Vn
sS'block_loop.thisTrialN'
p7973
I0
sg39
F0.95002447544538882
sg34
g753
(S'\x07\xdf\x07\x04\r13\r\xcb@'
tRp7974
sa(dp7975
S'trial_loop.thisTrialN'
p7976
I114
sg6371
g7207
sS'block_loop.thisIndex'
p7977
g6365
sg38
S'right'
p7978
sg59
g63
sS'trial_loop.thisN'
p7979
I114
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p7980
g60
(g99
S'r\x00\x00\x00'
tRp7981
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7982
I0
sg6380
g7214
sS'block_loop.thisRepN'
p7983
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7984
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p7985
Nsg70
Vn
sS'block_loop.thisTrialN'
p7986
I0
sg39
F0.63326744777077693
sg34
g753
(S'\x07\xdf\x07\x04\r19\r\xa40'
tRp7987
sa(dp7988
S'trial_loop.thisTrialN'
p7989
I115
sg6371
g7365
sS'block_loop.thisIndex'
p7990
g6365
sg38
S'left'
p7991
sg59
g63
sS'trial_loop.thisN'
p7992
I115
sg33
g6601
sg64
g65
sS'trial_loop.thisIndex'
p7993
g60
(g99
S's\x00\x00\x00'
tRp7994
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p7995
I0
sg6380
g7372
sS'block_loop.thisRepN'
p7996
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p7997
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p7998
Nsg70
Vn
sS'block_loop.thisTrialN'
p7999
I0
sg39
F0.76658664036949631
sg34
g753
(S'\x07\xdf\x07\x04\r2\x03\x08\x7f\xc8'
tRp8000
sa(dp8001
S'trial_loop.thisTrialN'
p8002
I116
sg6371
g6733
sS'block_loop.thisIndex'
p8003
g6365
sg38
S'left'
p8004
sg59
g63
sS'trial_loop.thisN'
p8005
I116
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p8006
g60
(g99
S't\x00\x00\x00'
tRp8007
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8008
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8009
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8010
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p8011
Nsg70
Vn
sS'block_loop.thisTrialN'
p8012
I0
sg39
F0.76660659705157741
sg34
g753
(S'\x07\xdf\x07\x04\r2\t\x05~@'
tRp8013
sa(dp8014
S'trial_loop.thisTrialN'
p8015
I117
sg6371
g7380
sS'block_loop.thisIndex'
p8016
g6365
sg38
S'right'
p8017
sg59
g63
sS'trial_loop.thisN'
p8018
I117
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8019
g60
(g99
S'u\x00\x00\x00'
tRp8020
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8021
I0
sg6380
g7387
sS'block_loop.thisRepN'
p8022
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8023
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8024
Nsg70
Vn
sS'block_loop.thisTrialN'
p8025
I0
sg39
F0.73328863036476832
sg34
g753
(S'\x07\xdf\x07\x04\r2\x0f\x02|\xb8'
tRp8026
sa(dp8027
S'trial_loop.thisTrialN'
p8028
I118
sg6371
g6409
sS'block_loop.thisIndex'
p8029
g6365
sg38
S'left'
p8030
sg59
g63
sS'trial_loop.thisN'
p8031
I118
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8032
g60
(g99
S'v\x00\x00\x00'
tRp8033
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8034
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8035
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8036
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8037
Nsg70
Vn
sS'block_loop.thisTrialN'
p8038
I0
sg39
F0.70002397652933723
sg34
g753
(S'\x07\xdf\x07\x04\r2\x14\x0e\t\xc0'
tRp8039
sa(dp8040
S'trial_loop.thisTrialN'
p8041
I119
sg6371
g6903
sS'block_loop.thisIndex'
p8042
g6365
sg38
S'right'
p8043
sg59
g63
sS'trial_loop.thisN'
p8044
I119
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p8045
g60
(g99
S'w\x00\x00\x00'
tRp8046
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8047
I0
sg6380
g6910
sS'block_loop.thisRepN'
p8048
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8049
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p8050
Nsg70
Vn
sS'block_loop.thisTrialN'
p8051
I0
sg39
F0.81660435905178019
sg34
g753
(S'\x07\xdf\x07\x04\r2\x1a\n\x16\x08'
tRp8052
sa(dp8053
S'trial_loop.thisTrialN'
p8054
I120
sg6371
g7365
sS'block_loop.thisIndex'
p8055
g6365
sg38
S'left'
p8056
sg59
g63
sS'trial_loop.thisN'
p8057
I120
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8058
g60
(g99
S'x\x00\x00\x00'
tRp8059
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8060
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8061
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8062
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8063
Nsg70
Vn
sS'block_loop.thisTrialN'
p8064
I0
sg39
F0.69992818445280136
sg34
g753
(S'\x07\xdf\x07\x04\r2 \x07\xcc\x18'
tRp8065
sa(dp8066
S'trial_loop.thisTrialN'
p8067
I121
sg6371
g7058
sS'block_loop.thisIndex'
p8068
g6365
sg38
S'right'
p8069
sg59
g63
sS'trial_loop.thisN'
p8070
I121
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8071
g60
(g99
S'y\x00\x00\x00'
tRp8072
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8073
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8074
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8075
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8076
Nsg70
Vn
sS'block_loop.thisTrialN'
p8077
I0
sg39
F0.71632088863043464
sg34
g753
(S'\x07\xdf\x07\x04\r2&\x03\x99\xe0'
tRp8078
sa(dp8079
S'trial_loop.thisTrialN'
p8080
I122
sg6371
g6673
sS'block_loop.thisIndex'
p8081
g6365
sg38
S'left'
p8082
sg59
g63
sS'trial_loop.thisN'
p8083
I122
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p8084
g60
(g99
S'z\x00\x00\x00'
tRp8085
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8086
I0
sg6380
g6680
sS'block_loop.thisRepN'
p8087
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8088
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p8089
Nsg70
Vn
sS'block_loop.thisTrialN'
p8090
I0
sg39
F0.90001017790746118
sg34
g753
(S'\x07\xdf\x07\x04\r2+\x0f#\x00'
tRp8091
sa(dp8092
S'trial_loop.thisTrialN'
p8093
I123
sg6371
g7423
sS'block_loop.thisIndex'
p8094
g6365
sg38
S'left'
p8095
sg59
g63
sS'trial_loop.thisN'
p8096
I123
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p8097
g60
(g99
S'{\x00\x00\x00'
tRp8098
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8099
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8100
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8101
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8102
Nsg70
Vn
sS'block_loop.thisTrialN'
p8103
I0
sg39
F0.96666407229895412
sg34
g753
(S'\x07\xdf\x07\x04\r21\x0e\t\xc0'
tRp8104
sa(dp8105
S'trial_loop.thisTrialN'
p8106
I124
sg6371
g7365
sS'block_loop.thisIndex'
p8107
g6365
sg38
S'left'
p8108
sg59
g63
sS'trial_loop.thisN'
p8109
I124
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8110
g60
(g99
S'|\x00\x00\x00'
tRp8111
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8112
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8113
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8114
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8115
Nsg70
Vn
sS'block_loop.thisTrialN'
p8116
I0
sg39
F0.80046453455179289
sg34
g753
(S'\x07\xdf\x07\x04\r27\x0e!0'
tRp8117
sa(dp8118
S'trial_loop.thisTrialN'
p8119
I125
sg6371
g6372
sS'block_loop.thisIndex'
p8120
g6365
sg38
S'left'
p8121
sg59
g63
sS'trial_loop.thisN'
p8122
I125
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8123
g60
(g99
S'}\x00\x00\x00'
tRp8124
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8125
I0
sg6380
g6381
sS'block_loop.thisRepN'
p8126
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8127
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8128
Nsg70
Vn
sS'block_loop.thisTrialN'
p8129
I0
sg39
F0.69992618878495705
sg34
g753
(S'\x07\xdf\x07\x04\r3\x01\x0b\x9c\xa8'
tRp8130
sa(dp8131
S'trial_loop.thisTrialN'
p8132
I126
sg6371
g7767
sS'block_loop.thisIndex'
p8133
g6365
sg38
S'right'
p8134
sg59
g63
sS'trial_loop.thisN'
p8135
I126
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8136
g60
(g99
S'~\x00\x00\x00'
tRp8137
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8138
I0
sg6380
g7774
sS'block_loop.thisRepN'
p8139
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8140
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8141
Nsg70
Vn
sS'block_loop.thisTrialN'
p8142
I0
sg39
F0.79994680118761607
sg34
g753
(S'\x07\xdf\x07\x04\r3\x07\x07jp'
tRp8143
sa(dp8144
S'trial_loop.thisTrialN'
p8145
I127
sg6371
g6656
sS'block_loop.thisIndex'
p8146
g6365
sg38
S'left'
p8147
sg59
g63
sS'trial_loop.thisN'
p8148
I127
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p8149
g60
(g99
S'\x7f\x00\x00\x00'
tRp8150
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8151
I0
sg6380
g6664
sS'block_loop.thisRepN'
p8152
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8153
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p8154
Nsg70
Vn
sS'block_loop.thisTrialN'
p8155
I0
sg39
F0.63332902839283634
sg34
g753
(S'\x07\xdf\x07\x04\r3\r\x04\xe2\x00'
tRp8156
sa(dp8157
S'trial_loop.thisTrialN'
p8158
I128
sg6371
g7767
sS'block_loop.thisIndex'
p8159
g6365
sg38
S'right'
p8160
sg59
g63
sS'trial_loop.thisN'
p8161
I128
sg33
g6554
sg64
g65
sS'trial_loop.thisIndex'
p8162
g60
(g99
S'\x80\x00\x00\x00'
tRp8163
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8164
I0
sg6380
g7774
sS'block_loop.thisRepN'
p8165
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8166
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8167
Nsg70
Vn
sS'block_loop.thisTrialN'
p8168
I0
sg39
F0.63334841488358506
sg34
g753
(S'\x07\xdf\x07\x04\r3\x12\x0f>X'
tRp8169
sa(dp8170
S'trial_loop.thisTrialN'
p8171
I129
sg6371
g6526
sS'block_loop.thisIndex'
p8172
g6365
sg38
S'right'
p8173
sg59
g63
sS'trial_loop.thisN'
p8174
I129
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8175
g60
(g99
S'\x81\x00\x00\x00'
tRp8176
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8177
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8178
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8179
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8180
Nsg70
Vn
sS'block_loop.thisTrialN'
p8181
I0
sg39
F0.89990896901872475
sg34
g753
(S'\x07\xdf\x07\x04\r3\x18\n\x16\x08'
tRp8182
sa(dp8183
S'trial_loop.thisTrialN'
p8184
I130
sg6371
g6733
sS'block_loop.thisIndex'
p8185
g6365
sg38
S'left'
p8186
sg59
g63
sS'trial_loop.thisN'
p8187
I130
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p8188
g60
(g99
S'\x82\x00\x00\x00'
tRp8189
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8190
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8191
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8192
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p8193
Nsg70
Vn
sS'block_loop.thisTrialN'
p8194
I0
sg39
F0.70036865694601147
sg34
g753
(S'\x07\xdf\x07\x04\r3\x1e\x08\xfc\xc8'
tRp8195
sa(dp8196
S'trial_loop.thisTrialN'
p8197
I131
sg6371
g6688
sS'block_loop.thisIndex'
p8198
g6365
sg38
S'right'
p8199
sg59
g63
sS'trial_loop.thisN'
p8200
I131
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8201
g60
(g99
S'\x83\x00\x00\x00'
tRp8202
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8203
I0
sg6380
g6695
sS'block_loop.thisRepN'
p8204
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8205
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8206
Nsg70
Vn
sS'block_loop.thisTrialN'
p8207
I0
sg39
F0.79999640779715264
sg34
g753
(S'\x07\xdf\x07\x04\r3$\x05\t\x10'
tRp8208
sa(dp8209
S'trial_loop.thisTrialN'
p8210
I132
sg6371
g7179
sS'block_loop.thisIndex'
p8211
g6365
sg38
S'right'
p8212
sg59
g63
sS'trial_loop.thisN'
p8213
I132
sg33
g6386
sg64
g65
sS'trial_loop.thisIndex'
p8214
g60
(g99
S'\x84\x00\x00\x00'
tRp8215
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8216
I0
sg6380
g7186
sS'block_loop.thisRepN'
p8217
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8218
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8219
Nsg70
Vn
sS'block_loop.thisTrialN'
p8220
I0
sg39
F0.71658146588742966
sg34
g753
(S'\x07\xdf\x07\x04\r3*\x02\x84\x88'
tRp8221
sa(dp8222
S'trial_loop.thisTrialN'
p8223
I133
sg6371
g7013
sS'block_loop.thisIndex'
p8224
g6365
sg38
S'right'
p8225
sg59
g63
sS'trial_loop.thisN'
p8226
I133
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p8227
g60
(g99
S'\x85\x00\x00\x00'
tRp8228
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8229
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8230
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8231
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8232
Nsg70
Vn
sS'block_loop.thisTrialN'
p8233
I0
sg39
F0.85000186737488548
sg34
g753
(S'\x07\xdf\x07\x04\r3/\r\xd3\x10'
tRp8234
sa(dp8235
S'trial_loop.thisTrialN'
p8236
I134
sg6371
g6673
sS'block_loop.thisIndex'
p8237
g6365
sg38
S'left'
p8238
sg59
g63
sS'trial_loop.thisN'
p8239
I134
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p8240
g60
(g99
S'\x86\x00\x00\x00'
tRp8241
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8242
I0
sg6380
g6680
sS'block_loop.thisRepN'
p8243
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8244
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p8245
Nsg70
Vn
sS'block_loop.thisTrialN'
p8246
I0
sg39
F0.79990717291730107
sg34
g753
(S'\x07\xdf\x07\x04\r35\x0c\x028'
tRp8247
sa(dp8248
S'trial_loop.thisTrialN'
p8249
I135
sg6371
g6607
sS'block_loop.thisIndex'
p8250
g6365
sg38
S'left'
p8251
sg59
g63
sS'trial_loop.thisN'
p8252
I135
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p8253
g60
(g99
S'\x87\x00\x00\x00'
tRp8254
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8255
I0
sg6380
g6615
sS'block_loop.thisRepN'
p8256
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8257
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8258
Nsg70
Vn
sS'block_loop.thisTrialN'
p8259
I0
sg39
F0.71666100752190687
sg34
g753
(S'\x07\xdf\x07\x04\r3;\ty\xc8'
tRp8260
sa(dp8261
S'trial_loop.thisTrialN'
p8262
I136
sg6371
g7423
sS'block_loop.thisIndex'
p8263
g6365
sg38
S'left'
p8264
sg59
g63
sS'trial_loop.thisN'
p8265
I136
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p8266
g60
(g99
S'\x88\x00\x00\x00'
tRp8267
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8268
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8269
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8270
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8271
Nsg70
Vn
sS'block_loop.thisTrialN'
p8272
I0
sg39
F0.76700059898576001
sg34
g753
(S'\x07\xdf\x07\x04\r4\x05\x05\xc4\x90'
tRp8273
sa(dp8274
S'trial_loop.thisTrialN'
p8275
I137
sg6371
g6641
sS'block_loop.thisIndex'
p8276
g6365
sg38
S'left'
p8277
sg59
g63
sS'trial_loop.thisN'
p8278
I137
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8279
g60
(g99
S'\x89\x00\x00\x00'
tRp8280
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8281
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8282
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8283
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8284
Nsg70
Vn
sS'block_loop.thisTrialN'
p8285
I0
sg39
F0.66671057136773015
sg34
g753
(S'\x07\xdf\x07\x04\r4\x0b\x02\xc3\x08'
tRp8286
sa(dp8287
S'trial_loop.thisTrialN'
p8288
I138
sg6371
g6806
sS'block_loop.thisIndex'
p8289
g6365
sg38
S'left'
p8290
sg59
g63
sS'trial_loop.thisN'
p8291
I138
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8292
g60
(g99
S'\x8a\x00\x00\x00'
tRp8293
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8294
I0
sg6380
g6813
sS'block_loop.thisRepN'
p8295
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8296
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8297
Nsg70
Vn
sS'block_loop.thisTrialN'
p8298
I0
sg39
F0.89952779638042557
sg34
g753
(S'\x07\xdf\x07\x04\r4\x10\rY\xf8'
tRp8299
sa(dp8300
S'trial_loop.thisTrialN'
p8301
I139
sg6371
g7099
sS'block_loop.thisIndex'
p8302
g6365
sg38
S'right'
p8303
sg59
g63
sS'trial_loop.thisN'
p8304
I139
sg33
g6660
sg64
g65
sS'trial_loop.thisIndex'
p8305
g60
(g99
S'\x8b\x00\x00\x00'
tRp8306
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8307
I0
sg6380
g7106
sS'block_loop.thisRepN'
p8308
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8309
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p8310
Nsg70
Vn
sS'block_loop.thisTrialN'
p8311
I0
sg39
F0.78332744611361704
sg34
g753
(S'\x07\xdf\x07\x04\r4\x16\x0c@\xb8'
tRp8312
sa(dp8313
S'trial_loop.thisTrialN'
p8314
I140
sg6371
g6641
sS'block_loop.thisIndex'
p8315
g6365
sg38
S'left'
p8316
sg59
g63
sS'trial_loop.thisN'
p8317
I140
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p8318
g60
(g99
S'\x8c\x00\x00\x00'
tRp8319
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8320
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8321
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8322
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8323
Nsg70
Vn
sS'block_loop.thisTrialN'
p8324
I0
sg39
F0.69999062035822135
sg34
g753
(S'\x07\xdf\x07\x04\r4\x1c\t}\xb0'
tRp8325
sa(dp8326
S'trial_loop.thisTrialN'
p8327
I141
sg6371
g6590
sS'block_loop.thisIndex'
p8328
g6365
sg38
S'right'
p8329
sg59
g63
sS'trial_loop.thisN'
p8330
I141
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8331
g60
(g99
S'\x8d\x00\x00\x00'
tRp8332
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8333
I0
sg6380
g6598
sS'block_loop.thisRepN'
p8334
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8335
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8336
Nsg70
Vn
sS'block_loop.thisTrialN'
p8337
I0
sg39
F0.9166651699160866
sg34
g753
(S'\x07\xdf\x07\x04\r4"\x05\x86\x10'
tRp8338
sa(dp8339
S'trial_loop.thisTrialN'
p8340
I142
sg6371
g6426
sS'block_loop.thisIndex'
p8341
g6365
sg38
S'right'
p8342
sg59
g63
sS'trial_loop.thisN'
p8343
I142
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8344
g60
(g99
S'\x8e\x00\x00\x00'
tRp8345
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8346
I0
sg6380
g6434
sS'block_loop.thisRepN'
p8347
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8348
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8349
Nsg70
Vn
sS'block_loop.thisTrialN'
p8350
I0
sg39
F0.81704312097281218
sg34
g753
(S'\x07\xdf\x07\x04\r4(\x04\xabP'
tRp8351
sa(dp8352
S'trial_loop.thisTrialN'
p8353
I143
sg6371
g6409
sS'block_loop.thisIndex'
p8354
g6365
sg38
S'left'
p8355
sg59
g63
sS'trial_loop.thisN'
p8356
I143
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8357
g60
(g99
S'\x8f\x00\x00\x00'
tRp8358
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8359
I0
sg6380
g6417
sS'block_loop.thisRepN'
p8360
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8361
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8362
Nsg70
Vn
sS'block_loop.thisTrialN'
p8363
I0
sg39
F0.70000516022810189
sg34
g753
(S'\x07\xdf\x07\x04\r4.\x02a`'
tRp8364
sa(dp8365
S'trial_loop.thisTrialN'
p8366
I144
sg6371
g6716
sS'block_loop.thisIndex'
p8367
g6365
sg38
S'left'
p8368
sg59
g63
sS'trial_loop.thisN'
p8369
I144
sg33
g6720
sg64
g65
sS'trial_loop.thisIndex'
p8370
g60
(g99
S'\x90\x00\x00\x00'
tRp8371
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8372
I0
sg6380
g6724
sS'block_loop.thisRepN'
p8373
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8374
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p8375
Nsg70
Vn
sS'block_loop.thisTrialN'
p8376
I0
sg39
F0.6832364151305228
sg34
g753
(S'\x07\xdf\x07\x04\r43\r\xaf\xe8'
tRp8377
sa(dp8378
S'trial_loop.thisTrialN'
p8379
I145
sg6371
g7013
sS'block_loop.thisIndex'
p8380
g6365
sg38
S'right'
p8381
sg59
g63
sS'trial_loop.thisN'
p8382
I145
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p8383
g60
(g99
S'\x91\x00\x00\x00'
tRp8384
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8385
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8386
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8387
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8388
Nsg70
Vn
sS'block_loop.thisTrialN'
p8389
I0
sg39
F0.74989629652372969
sg34
g753
(S'\x07\xdf\x07\x04\r49\t?0'
tRp8390
sa(dp8391
S'trial_loop.thisTrialN'
p8392
I146
sg6371
g7685
sS'block_loop.thisIndex'
p8393
g6365
sg38
S'right'
p8394
sg59
g63
sS'trial_loop.thisN'
p8395
I146
sg33
g6727
sg64
g65
sS'trial_loop.thisIndex'
p8396
g60
(g99
S'\x92\x00\x00\x00'
tRp8397
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8398
I0
sg6380
g7692
sS'block_loop.thisRepN'
p8399
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8400
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p8401
Nsg70
Vn
sS'block_loop.thisTrialN'
p8402
I0
sg39
F0.7998932032387529
sg34
g753
(S'\x07\xdf\x07\x04\r5\x03\x06\x03\x10'
tRp8403
sa(dp8404
S'trial_loop.thisTrialN'
p8405
I147
sg6371
g7767
sS'block_loop.thisIndex'
p8406
g6365
sg38
S'right'
p8407
sg59
g63
sS'trial_loop.thisN'
p8408
I147
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8409
g60
(g99
S'\x93\x00\x00\x00'
tRp8410
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8411
I0
sg6380
g7774
sS'block_loop.thisRepN'
p8412
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8413
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8414
Nsg70
Vn
sS'block_loop.thisTrialN'
p8415
I0
sg39
F0.683373831143399
sg34
g753
(S'\x07\xdf\x07\x04\r5\t\x03z\xa0'
tRp8416
sa(dp8417
S'trial_loop.thisTrialN'
p8418
I148
sg6371
g7408
sS'block_loop.thisIndex'
p8419
g6365
sg38
S'right'
p8420
sg59
g63
sS'trial_loop.thisN'
p8421
I148
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p8422
g60
(g99
S'\x94\x00\x00\x00'
tRp8423
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8424
I0
sg6380
g7415
sS'block_loop.thisRepN'
p8425
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8426
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p8427
Nsg70
Vn
sS'block_loop.thisTrialN'
p8428
I0
sg39
F0.70038405210107157
sg34
g753
(S'\x07\xdf\x07\x04\r5\x0e\x0eP\x10'
tRp8429
sa(dp8430
S'trial_loop.thisTrialN'
p8431
I149
sg6371
g6688
sS'block_loop.thisIndex'
p8432
g6365
sg38
S'right'
p8433
sg59
g63
sS'trial_loop.thisN'
p8434
I149
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8435
g60
(g99
S'\x95\x00\x00\x00'
tRp8436
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8437
I0
sg6380
g6695
sS'block_loop.thisRepN'
p8438
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8439
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8440
Nsg70
Vn
sS'block_loop.thisTrialN'
p8441
I0
sg39
F0.69993417145815329
sg34
g753
(S'\x07\xdf\x07\x04\r5\x14\n\\X'
tRp8442
sa(dp8443
S'trial_loop.thisTrialN'
p8444
I150
sg6371
g6460
sS'block_loop.thisIndex'
p8445
g6365
sg38
S'right'
p8446
sg59
g63
sS'trial_loop.thisN'
p8447
I150
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8448
g60
(g99
S'\x96\x00\x00\x00'
tRp8449
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8450
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8451
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8452
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8453
Nsg70
Vn
sS'block_loop.thisTrialN'
p8454
I0
sg39
F0.83332007639364747
sg34
g753
(S'\x07\xdf\x07\x04\r5\x1a\x06* '
tRp8455
sa(dp8456
S'trial_loop.thisTrialN'
p8457
I151
sg6371
g6624
sS'block_loop.thisIndex'
p8458
g6365
sg38
S'right'
p8459
sg59
g63
sS'trial_loop.thisN'
p8460
I151
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p8461
g60
(g99
S'\x97\x00\x00\x00'
tRp8462
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8463
I0
sg6380
g6632
sS'block_loop.thisRepN'
p8464
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8465
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p8466
Nsg70
Vn
sS'block_loop.thisTrialN'
p8467
I0
sg39
F1.0165118740824255
sg34
g753
(S'\x07\xdf\x07\x04\r5 \x04\x1e\xb0'
tRp8468
sa(dp8469
S'trial_loop.thisTrialN'
p8470
I152
sg6371
g6778
sS'block_loop.thisIndex'
p8471
g6365
sg38
S'left'
p8472
sg59
g63
sS'trial_loop.thisN'
p8473
I152
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8474
g60
(g99
S'\x98\x00\x00\x00'
tRp8475
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8476
I0
sg6380
g6785
sS'block_loop.thisRepN'
p8477
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8478
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8479
Nsg70
Vn
sS'block_loop.thisTrialN'
p8480
I0
sg39
F0.649992003072839
sg34
g753
(S'\x07\xdf\x07\x04\r5&\x04\xed\xb8'
tRp8481
sa(dp8482
S'trial_loop.thisTrialN'
p8483
I153
sg6371
g6543
sS'block_loop.thisIndex'
p8484
g6365
sg38
S'left'
p8485
sg59
g63
sS'trial_loop.thisN'
p8486
I153
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p8487
g60
(g99
S'\x99\x00\x00\x00'
tRp8488
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8489
I0
sg6380
g6551
sS'block_loop.thisRepN'
p8490
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8491
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8492
Nsg70
Vn
sS'block_loop.thisTrialN'
p8493
I0
sg39
F0.71668467044401041
sg34
g753
(S'\x07\xdf\x07\x04\r5,\x00\x03\xe8'
tRp8494
sa(dp8495
S'trial_loop.thisTrialN'
p8496
I154
sg6371
g6733
sS'block_loop.thisIndex'
p8497
g6365
sg38
S'left'
p8498
sg59
g63
sS'trial_loop.thisN'
p8499
I154
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p8500
g60
(g99
S'\x9a\x00\x00\x00'
tRp8501
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8502
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8503
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8504
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p8505
Nsg70
Vn
sS'block_loop.thisTrialN'
p8506
I0
sg39
F0.60003272895846749
sg34
g753
(S'\x07\xdf\x07\x04\r51\x0b\x8d\x08'
tRp8507
sa(dp8508
S'trial_loop.thisTrialN'
p8509
I155
sg6371
g7380
sS'block_loop.thisIndex'
p8510
g6365
sg38
S'right'
p8511
sg59
g63
sS'trial_loop.thisN'
p8512
I155
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8513
g60
(g99
S'\x9b\x00\x00\x00'
tRp8514
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8515
I0
sg6380
g7387
sS'block_loop.thisRepN'
p8516
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8517
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8518
Nsg70
Vn
sS'block_loop.thisTrialN'
p8519
I0
sg39
F0.69995270266372245
sg34
g753
(S'\x07\xdf\x07\x04\r57\x05\xef\x88'
tRp8520
sa(dp8521
S'trial_loop.thisTrialN'
p8522
I156
sg6371
g6460
sS'block_loop.thisIndex'
p8523
g6365
sg38
S'right'
p8524
sg59
g63
sS'trial_loop.thisN'
p8525
I156
sg33
g6420
sg64
g65
sS'trial_loop.thisIndex'
p8526
g60
(g99
S'\x9c\x00\x00\x00'
tRp8527
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8528
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8529
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8530
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8531
Nsg70
Vn
sS'block_loop.thisTrialN'
p8532
I0
sg39
F0.81666793534168391
sg34
g753
(S'\x07\xdf\x07\x04\r6\x01\x01\xfb\xd0'
tRp8533
sa(dp8534
S'trial_loop.thisTrialN'
p8535
I157
sg6371
g7030
sS'block_loop.thisIndex'
p8536
g6365
sg38
S'right'
p8537
sg59
g63
sS'trial_loop.thisN'
p8538
I157
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p8539
g60
(g99
S'\x9d\x00\x00\x00'
tRp8540
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8541
I0
sg6380
g7037
sS'block_loop.thisRepN'
p8542
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8543
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p8544
Nsg70
Vn
sS'block_loop.thisTrialN'
p8545
I0
sg39
F0.61650041324537597
sg34
g753
(S'\x07\xdf\x07\x04\r6\x06\x0e\xf4 '
tRp8546
sa(dp8547
S'trial_loop.thisTrialN'
p8548
I158
sg6371
g6443
sS'block_loop.thisIndex'
p8549
g6365
sg38
S'right'
p8550
sg59
g63
sS'trial_loop.thisN'
p8551
I158
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8552
g60
(g99
S'\x9e\x00\x00\x00'
tRp8553
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8554
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8555
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8556
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8557
Nsg70
Vn
sS'block_loop.thisTrialN'
p8558
I0
sg39
F0.69974258730326255
sg34
g753
(S'\x07\xdf\x07\x04\r6\x0c\t\x918'
tRp8559
sa(dp8560
S'trial_loop.thisTrialN'
p8561
I159
sg6371
g6526
sS'block_loop.thisIndex'
p8562
g6365
sg38
S'right'
p8563
sg59
g63
sS'trial_loop.thisN'
p8564
I159
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8565
g60
(g99
S'\x9f\x00\x00\x00'
tRp8566
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8567
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8568
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8569
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8570
Nsg70
Vn
sS'block_loop.thisTrialN'
p8571
I0
sg39
F0.63326545210293261
sg34
g753
(S'\x07\xdf\x07\x04\r6\x12\x05_\x00'
tRp8572
sa(dp8573
S'trial_loop.thisTrialN'
p8574
I160
sg6371
g7423
sS'block_loop.thisIndex'
p8575
g6365
sg38
S'left'
p8576
sg59
g63
sS'trial_loop.thisN'
p8577
I160
sg33
g7017
sg64
g65
sS'trial_loop.thisIndex'
p8578
g60
(g99
S'\xa0\x00\x00\x00'
tRp8579
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8580
I0
sg6380
g7430
sS'block_loop.thisRepN'
p8581
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8582
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8583
Nsg70
Vn
sS'block_loop.thisTrialN'
p8584
I0
sg39
F1.1667320960750658
sg34
g753
(S'\x07\xdf\x07\x04\r6\x18\x00y\x18'
tRp8585
sa(dp8586
S'trial_loop.thisTrialN'
p8587
I161
sg6371
g6641
sS'block_loop.thisIndex'
p8588
g6365
sg38
S'left'
p8589
sg59
g63
sS'trial_loop.thisN'
p8590
I161
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8591
g60
(g99
S'\xa1\x00\x00\x00'
tRp8592
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8593
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8594
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8595
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8596
Nsg70
Vn
sS'block_loop.thisTrialN'
p8597
I0
sg39
F0.66655148809877574
sg34
g753
(S'\x07\xdf\x07\x04\r6\x1e\x03k\x00'
tRp8598
sa(dp8599
S'trial_loop.thisTrialN'
p8600
I162
sg6371
g6716
sS'block_loop.thisIndex'
p8601
g6365
sg38
S'left'
p8602
sg59
g63
sS'trial_loop.thisN'
p8603
I162
sg33
g6720
sg64
g65
sS'trial_loop.thisIndex'
p8604
g60
(g99
S'\xa2\x00\x00\x00'
tRp8605
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8606
I0
sg6380
g6724
sS'block_loop.thisRepN'
p8607
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8608
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p8609
Nsg70
Vn
sS'block_loop.thisTrialN'
p8610
I0
sg39
F0.73326097610333818
sg34
g753
(S'\x07\xdf\x07\x04\r6#\x0e\x01\xf0'
tRp8611
sa(dp8612
S'trial_loop.thisTrialN'
p8613
I163
sg6371
g6763
sS'block_loop.thisIndex'
p8614
g6365
sg38
S'left'
p8615
sg59
g63
sS'trial_loop.thisN'
p8616
I163
sg33
g6430
sg64
g65
sS'trial_loop.thisIndex'
p8617
g60
(g99
S'\xa3\x00\x00\x00'
tRp8618
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8619
I0
sg6380
g6770
sS'block_loop.thisRepN'
p8620
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8621
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8622
Nsg70
Vn
sS'block_loop.thisTrialN'
p8623
I0
sg39
F0.64998744154399901
sg34
g753
(S'\x07\xdf\x07\x04\r6)\n\x87P'
tRp8624
sa(dp8625
S'trial_loop.thisTrialN'
p8626
I164
sg6371
g6509
sS'block_loop.thisIndex'
p8627
g6365
sg38
S'left'
p8628
sg59
g63
sS'trial_loop.thisN'
p8629
I164
sg33
g6519
sg64
g65
sS'trial_loop.thisIndex'
p8630
g60
(g99
S'\xa4\x00\x00\x00'
tRp8631
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8632
I0
sg6380
g6517
sS'block_loop.thisRepN'
p8633
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8634
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8635
Nsg70
Vn
sS'block_loop.thisTrialN'
p8636
I0
sg39
F0.66666552628521458
sg34
g753
(S'\x07\xdf\x07\x04\r6/\x05\x9d\x80'
tRp8637
sa(dp8638
S'trial_loop.thisTrialN'
p8639
I165
sg6371
g7365
sS'block_loop.thisIndex'
p8640
g6365
sg38
S'left'
p8641
sg59
g63
sS'trial_loop.thisN'
p8642
I165
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8643
g60
(g99
S'\xa5\x00\x00\x00'
tRp8644
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8645
I0
sg6380
g7372
sS'block_loop.thisRepN'
p8646
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8647
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8648
Nsg70
Vn
sS'block_loop.thisTrialN'
p8649
I0
sg39
F0.61666519842583511
sg34
g753
(S'\x07\xdf\x07\x04\r65\x010\xb0'
tRp8650
sa(dp8651
S'trial_loop.thisTrialN'
p8652
I166
sg6371
g6543
sS'block_loop.thisIndex'
p8653
g6365
sg38
S'left'
p8654
sg59
g63
sS'trial_loop.thisN'
p8655
I166
sg33
g6554
sg64
g65
sS'trial_loop.thisIndex'
p8656
g60
(g99
S'\xa6\x00\x00\x00'
tRp8657
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8658
I0
sg6380
g6551
sS'block_loop.thisRepN'
p8659
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8660
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p8661
Nsg70
Vn
sS'block_loop.thisTrialN'
p8662
I0
sg39
F0.61703297157509951
sg34
g753
(S'\x07\xdf\x07\x04\r6:\x0b\x10\x08'
tRp8663
sa(dp8664
S'trial_loop.thisTrialN'
p8665
I167
sg6371
g7013
sS'block_loop.thisIndex'
p8666
g6365
sg38
S'right'
p8667
sg59
g63
sS'trial_loop.thisN'
p8668
I167
sg33
g7023
sg64
g65
sS'trial_loop.thisIndex'
p8669
g60
(g99
S'\xa7\x00\x00\x00'
tRp8670
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8671
I0
sg6380
g7021
sS'block_loop.thisRepN'
p8672
I2
sg6383
g7023
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8673
I2
sg6385
g7017
sg55
g11
sS'block_loop.thisTrial'
p8674
Nsg70
Vn
sS'block_loop.thisTrialN'
p8675
I0
sg39
F0.83330211537941068
sg34
g753
(S'\x07\xdf\x07\x04\r7\x04\x05\xad '
tRp8676
sa(dp8677
S'trial_loop.thisTrialN'
p8678
I168
sg6371
g7058
sS'block_loop.thisIndex'
p8679
g6365
sg38
S'right'
p8680
sg59
g63
sS'trial_loop.thisN'
p8681
I168
sg33
g6396
sg64
g65
sS'trial_loop.thisIndex'
p8682
g60
(g99
S'\xa8\x00\x00\x00'
tRp8683
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8684
I0
sg6380
g7065
sS'block_loop.thisRepN'
p8685
I2
sg6383
g6396
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8686
I2
sg6385
g6403
sg55
g11
sS'block_loop.thisTrial'
p8687
Nsg70
Vn
sS'block_loop.thisTrialN'
p8688
I0
sg39
F0.89987162151192024
sg34
g753
(S'\x07\xdf\x07\x04\r7\n\x03\xa1\xb0'
tRp8689
sa(dp8690
S'trial_loop.thisTrialN'
p8691
I169
sg6371
g7700
sS'block_loop.thisIndex'
p8692
g6365
sg38
S'left'
p8693
sg59
g63
sS'trial_loop.thisN'
p8694
I169
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8695
g60
(g99
S'\xa9\x00\x00\x00'
tRp8696
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8697
I0
sg6380
g7707
sS'block_loop.thisRepN'
p8698
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8699
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8700
Nsg70
Vn
sS'block_loop.thisTrialN'
p8701
I0
sg39
F0.63321413491939893
sg34
g753
(S'\x07\xdf\x07\x04\r7\x10\x02\x88p'
tRp8702
sa(dp8703
S'trial_loop.thisTrialN'
p8704
I170
sg6371
g6688
sS'block_loop.thisIndex'
p8705
g6365
sg38
S'right'
p8706
sg59
g63
sS'trial_loop.thisN'
p8707
I170
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8708
g60
(g99
S'\xaa\x00\x00\x00'
tRp8709
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8710
I0
sg6380
g6695
sS'block_loop.thisRepN'
p8711
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8712
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8713
Nsg70
Vn
sS'block_loop.thisTrialN'
p8714
I0
sg39
F0.89994146990102308
sg34
g753
(S'\x07\xdf\x07\x04\r7\x15\x0c\xe0\xe0'
tRp8715
sa(dp8716
S'trial_loop.thisTrialN'
p8717
I171
sg6371
g6526
sS'block_loop.thisIndex'
p8718
g6365
sg38
S'right'
p8719
sg59
g63
sS'trial_loop.thisN'
p8720
I171
sg33
g6530
sg64
g65
sS'trial_loop.thisIndex'
p8721
g60
(g99
S'\xab\x00\x00\x00'
tRp8722
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8723
I0
sg6380
g6534
sS'block_loop.thisRepN'
p8724
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8725
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8726
Nsg70
Vn
sS'block_loop.thisTrialN'
p8727
I0
sg39
F0.68336841433119844
sg34
g753
(S'\x07\xdf\x07\x04\r7\x1b\x0b\xc7\xa0'
tRp8728
sa(dp8729
S'trial_loop.thisTrialN'
p8730
I172
sg6371
g7685
sS'block_loop.thisIndex'
p8731
g6365
sg38
S'right'
p8732
sg59
g63
sS'trial_loop.thisN'
p8733
I172
sg33
g6720
sg64
g65
sS'trial_loop.thisIndex'
p8734
g60
(g99
S'\xac\x00\x00\x00'
tRp8735
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8736
I0
sg6380
g7692
sS'block_loop.thisRepN'
p8737
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8738
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p8739
Nsg70
Vn
sS'block_loop.thisTrialN'
p8740
I0
sg39
F0.78361824348758091
sg34
g753
(S'\x07\xdf\x07\x04\r7!\x07\x99P'
tRp8741
sa(dp8742
S'trial_loop.thisTrialN'
p8743
I173
sg6371
g6590
sS'block_loop.thisIndex'
p8744
g6365
sg38
S'right'
p8745
sg59
g63
sS'trial_loop.thisN'
p8746
I173
sg33
g6594
sg64
g65
sS'trial_loop.thisIndex'
p8747
g60
(g99
S'\xad\x00\x00\x00'
tRp8748
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8749
I0
sg6380
g6598
sS'block_loop.thisRepN'
p8750
I2
sg6383
g6594
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8751
I2
sg6385
g6601
sg55
g11
sS'block_loop.thisTrial'
p8752
Nsg70
Vn
sS'block_loop.thisTrialN'
p8753
I0
sg39
F0.78331176586107176
sg34
g753
(S"\x07\xdf\x07\x04\r7'\x04\x97\xc8"
tRp8754
sa(dp8755
S'trial_loop.thisTrialN'
p8756
I174
sg6371
g7099
sS'block_loop.thisIndex'
p8757
g6365
sg38
S'right'
p8758
sg59
g63
sS'trial_loop.thisN'
p8759
I174
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p8760
g60
(g99
S'\xae\x00\x00\x00'
tRp8761
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8762
I0
sg6380
g7106
sS'block_loop.thisRepN'
p8763
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8764
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p8765
Nsg70
Vn
sS'block_loop.thisTrialN'
p8766
I0
sg39
F0.88326538082947081
sg34
g753
(S'\x07\xdf\x07\x04\r7-\x01\xd4\xc0'
tRp8767
sa(dp8768
S'trial_loop.thisTrialN'
p8769
I175
sg6371
g6475
sS'block_loop.thisIndex'
p8770
g6365
sg38
S'right'
p8771
sg59
g63
sS'trial_loop.thisN'
p8772
I175
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8773
g60
(g99
S'\xaf\x00\x00\x00'
tRp8774
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8775
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8776
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8777
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8778
Nsg70
Vn
sS'block_loop.thisTrialN'
p8779
I0
sg39
F0.84999588037135254
sg34
g753
(S'\x07\xdf\x07\x04\r73\x00\xbb\x80'
tRp8780
sa(dp8781
S'trial_loop.thisTrialN'
p8782
I176
sg6371
g6733
sS'block_loop.thisIndex'
p8783
g6365
sg38
S'left'
p8784
sg59
g63
sS'trial_loop.thisN'
p8785
I176
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p8786
g60
(g99
S'\xb0\x00\x00\x00'
tRp8787
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8788
I0
sg6380
g6741
sS'block_loop.thisRepN'
p8789
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8790
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p8791
Nsg70
Vn
sS'block_loop.thisTrialN'
p8792
I0
sg39
F0.78334882827221008
sg34
g753
(S'\x07\xdf\x07\x04\r78\x0e,\xe8'
tRp8793
sa(dp8794
S'trial_loop.thisTrialN'
p8795
I177
sg6371
g7207
sS'block_loop.thisIndex'
p8796
g6365
sg38
S'right'
p8797
sg59
g63
sS'trial_loop.thisN'
p8798
I177
sg33
g6948
sg64
g65
sS'trial_loop.thisIndex'
p8799
g60
(g99
S'\xb1\x00\x00\x00'
tRp8800
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8801
I0
sg6380
g7214
sS'block_loop.thisRepN'
p8802
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8803
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p8804
Nsg70
Vn
sS'block_loop.thisTrialN'
p8805
I0
sg39
F0.63332475195966254
sg34
g753
(S'\x07\xdf\x07\x04\r8\x02\x0bi\xe0'
tRp8806
sa(dp8807
S'trial_loop.thisTrialN'
p8808
I178
sg6371
g6443
sS'block_loop.thisIndex'
p8809
g6365
sg38
S'right'
p8810
sg59
g63
sS'trial_loop.thisN'
p8811
I178
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8812
g60
(g99
S'\xb2\x00\x00\x00'
tRp8813
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8814
I0
sg6380
g6451
sS'block_loop.thisRepN'
p8815
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8816
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8817
Nsg70
Vn
sS'block_loop.thisTrialN'
p8818
I0
sg39
F0.64954982000563177
sg34
g753
(S'\x07\xdf\x07\x04\r8\x08\x06A\x90'
tRp8819
sa(dp8820
S'trial_loop.thisTrialN'
p8821
I179
sg6371
g7179
sS'block_loop.thisIndex'
p8822
g6365
sg38
S'right'
p8823
sg59
g63
sS'trial_loop.thisN'
p8824
I179
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8825
g60
(g99
S'\xb3\x00\x00\x00'
tRp8826
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8827
I0
sg6380
g7186
sS'block_loop.thisRepN'
p8828
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8829
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8830
Nsg70
Vn
sS'block_loop.thisTrialN'
p8831
I0
sg39
F0.89997682173816429
sg34
g753
(S'\x07\xdf\x07\x04\r8\x0e\x01[\xa8'
tRp8832
sa(dp8833
S'trial_loop.thisTrialN'
p8834
I180
sg6371
g6460
sS'block_loop.thisIndex'
p8835
g6365
sg38
S'right'
p8836
sg59
g63
sS'trial_loop.thisN'
p8837
I180
sg33
g6413
sg64
g65
sS'trial_loop.thisIndex'
p8838
g60
(g99
S'\xb4\x00\x00\x00'
tRp8839
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8840
I0
sg6380
g6467
sS'block_loop.thisRepN'
p8841
I2
sg6383
g6413
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8842
I2
sg6385
g6420
sg55
g11
sS'block_loop.thisTrial'
p8843
Nsg70
Vn
sS'block_loop.thisTrialN'
p8844
I0
sg39
F0.69990138547836978
sg34
g753
(S'\x07\xdf\x07\x04\r8\x14\x00Bh'
tRp8845
sa(dp8846
S'trial_loop.thisTrialN'
p8847
I181
sg6371
g7179
sS'block_loop.thisIndex'
p8848
g6365
sg38
S'right'
p8849
sg59
g63
sS'trial_loop.thisN'
p8850
I181
sg33
g6376
sg64
g65
sS'trial_loop.thisIndex'
p8851
g60
(g99
S'\xb5\x00\x00\x00'
tRp8852
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8853
I0
sg6380
g7186
sS'block_loop.thisRepN'
p8854
I2
sg6383
g6376
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8855
I2
sg6385
g6386
sg55
g11
sS'block_loop.thisTrial'
p8856
Nsg70
Vn
sS'block_loop.thisTrialN'
p8857
I0
sg39
F0.91659817248000763
sg34
g753
(S'\x07\xdf\x07\x04\r8\x19\x0b\x90\xf0'
tRp8858
sa(dp8859
S'trial_loop.thisTrialN'
p8860
I182
sg6371
g6673
sS'block_loop.thisIndex'
p8861
g6365
sg38
S'left'
p8862
sg59
g63
sS'trial_loop.thisN'
p8863
I182
sg33
g6628
sg64
g65
sS'trial_loop.thisIndex'
p8864
g60
(g99
S'\xb6\x00\x00\x00'
tRp8865
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8866
I0
sg6380
g6680
sS'block_loop.thisRepN'
p8867
I2
sg6383
g6628
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8868
I2
sg6385
g6635
sg55
g11
sS'block_loop.thisTrial'
p8869
Nsg70
Vn
sS'block_loop.thisTrialN'
p8870
I0
sg39
F0.79981423179378908
sg34
g753
(S'\x07\xdf\x07\x04\r8\x1f\n\xb2H'
tRp8871
sa(dp8872
S'trial_loop.thisTrialN'
p8873
I183
sg6371
g6763
sS'block_loop.thisIndex'
p8874
g6365
sg38
S'left'
p8875
sg59
g63
sS'trial_loop.thisN'
p8876
I183
sg33
g6437
sg64
g65
sS'trial_loop.thisIndex'
p8877
g60
(g99
S'\xb7\x00\x00\x00'
tRp8878
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8879
I0
sg6380
g6770
sS'block_loop.thisRepN'
p8880
I2
sg6383
g6430
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8881
I2
sg6385
g6437
sg55
g11
sS'block_loop.thisTrial'
p8882
Nsg70
Vn
sS'block_loop.thisTrialN'
p8883
I0
sg39
F0.98323011451975617
sg34
g753
(S'\x07\xdf\x07\x04\r8%\x08-\xc0'
tRp8884
sa(dp8885
S'trial_loop.thisTrialN'
p8886
I184
sg6371
g6688
sS'block_loop.thisIndex'
p8887
g6365
sg38
S'right'
p8888
sg59
g63
sS'trial_loop.thisN'
p8889
I184
sg33
g6513
sg64
g65
sS'trial_loop.thisIndex'
p8890
g60
(g99
S'\xb8\x00\x00\x00'
tRp8891
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8892
I0
sg6380
g6695
sS'block_loop.thisRepN'
p8893
I2
sg6383
g6519
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8894
I2
sg6385
g6513
sg55
g11
sS'block_loop.thisTrial'
p8895
Nsg70
Vn
sS'block_loop.thisTrialN'
p8896
I0
sg39
F0.83359148727686261
sg34
g753
(S'\x07\xdf\x07\x04\r8+\x08\x7f\xc8'
tRp8897
sa(dp8898
S'trial_loop.thisTrialN'
p8899
I185
sg6371
g7700
sS'block_loop.thisIndex'
p8900
g6365
sg38
S'left'
p8901
sg59
g63
sS'trial_loop.thisN'
p8902
I185
sg33
g6537
sg64
g65
sS'trial_loop.thisIndex'
p8903
g60
(g99
S'\xb9\x00\x00\x00'
tRp8904
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8905
I0
sg6380
g7707
sS'block_loop.thisRepN'
p8906
I2
sg6383
g6530
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8907
I2
sg6385
g6537
sg55
g11
sS'block_loop.thisTrial'
p8908
Nsg70
Vn
sS'block_loop.thisTrialN'
p8909
I0
sg39
F0.68322101997364371
sg34
g753
(S'\x07\xdf\x07\x04\r81\x06tX'
tRp8910
sa(dp8911
S'trial_loop.thisTrialN'
p8912
I186
sg6371
g6573
sS'block_loop.thisIndex'
p8913
g6365
sg38
S'left'
p8914
sg59
g63
sS'trial_loop.thisN'
p8915
I186
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p8916
g60
(g99
S'\xba\x00\x00\x00'
tRp8917
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8918
I0
sg6380
g6581
sS'block_loop.thisRepN'
p8919
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8920
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p8921
Nsg70
Vn
sS'block_loop.thisTrialN'
p8922
I0
sg39
F0.66642119947027822
sg34
g753
(S'\x07\xdf\x07\x04\r87\x02\x03\xa0'
tRp8923
sa(dp8924
S'trial_loop.thisTrialN'
p8925
I187
sg6371
g7207
sS'block_loop.thisIndex'
p8926
g6365
sg38
S'right'
p8927
sg59
g63
sS'trial_loop.thisN'
p8928
I187
sg33
g6955
sg64
g65
sS'trial_loop.thisIndex'
p8929
g60
(g99
S'\xbb\x00\x00\x00'
tRp8930
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8931
I0
sg6380
g7214
sS'block_loop.thisRepN'
p8932
I2
sg6383
g6948
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8933
I2
sg6385
g6955
sg55
g11
sS'block_loop.thisTrial'
p8934
Nsg70
Vn
sS'block_loop.thisTrialN'
p8935
I0
sg39
F0.88331840858518262
sg34
g753
(S'\x07\xdf\x07\x04\r9\x00\x0c\xd9\x10'
tRp8936
sa(dp8937
S'trial_loop.thisTrialN'
p8938
I188
sg6371
g6641
sS'block_loop.thisIndex'
p8939
g6365
sg38
S'left'
p8940
sg59
g63
sS'trial_loop.thisN'
p8941
I188
sg33
g6486
sg64
g65
sS'trial_loop.thisIndex'
p8942
g60
(g99
S'\xbc\x00\x00\x00'
tRp8943
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8944
I0
sg6380
g6648
sS'block_loop.thisRepN'
p8945
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8946
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8947
Nsg70
Vn
sS'block_loop.thisTrialN'
p8948
I0
sg39
F0.71656008372701763
sg34
g753
(S'\x07\xdf\x07\x04\r9\x06\x0b\x81P'
tRp8949
sa(dp8950
S'trial_loop.thisTrialN'
p8951
I189
sg6371
g6806
sS'block_loop.thisIndex'
p8952
g6365
sg38
S'left'
p8953
sg59
g63
sS'trial_loop.thisN'
p8954
I189
sg33
g6447
sg64
g65
sS'trial_loop.thisIndex'
p8955
g60
(g99
S'\xbd\x00\x00\x00'
tRp8956
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8957
I0
sg6380
g6813
sS'block_loop.thisRepN'
p8958
I2
sg6383
g6447
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8959
I2
sg6385
g6454
sg55
g11
sS'block_loop.thisTrial'
p8960
Nsg70
Vn
sS'block_loop.thisTrialN'
p8961
I0
sg39
F0.89974503912526416
sg34
g753
(S'\x07\xdf\x07\x04\r9\x0c\x07\xcc\x18'
tRp8962
sa(dp8963
S'trial_loop.thisTrialN'
p8964
I190
sg6371
g6475
sS'block_loop.thisIndex'
p8965
g6365
sg38
S'right'
p8966
sg59
g63
sS'trial_loop.thisN'
p8967
I190
sg33
g6479
sg64
g65
sS'trial_loop.thisIndex'
p8968
g60
(g99
S'\xbe\x00\x00\x00'
tRp8969
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8970
I0
sg6380
g6483
sS'block_loop.thisRepN'
p8971
I2
sg6383
g6479
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8972
I2
sg6385
g6486
sg55
g11
sS'block_loop.thisTrial'
p8973
Nsg70
Vn
sS'block_loop.thisTrialN'
p8974
I0
sg39
F0.73357401092471264
sg34
g753
(S'\x07\xdf\x07\x04\r9\x12\x06\xb2\xd8'
tRp8975
sa(dp8976
S'trial_loop.thisTrialN'
p8977
I191
sg6371
g7685
sS'block_loop.thisIndex'
p8978
g6365
sg38
S'right'
p8979
sg59
g63
sS'trial_loop.thisN'
p8980
I191
sg33
g6720
sg64
g65
sS'trial_loop.thisIndex'
p8981
g60
(g99
S'\xbf\x00\x00\x00'
tRp8982
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8983
I0
sg6380
g7692
sS'block_loop.thisRepN'
p8984
I2
sg6383
g6720
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8985
I2
sg6385
g6727
sg55
g11
sS'block_loop.thisTrial'
p8986
Nsg70
Vn
sS'block_loop.thisTrialN'
p8987
I0
sg39
F0.94985826478841773
sg34
g753
(S'\x07\xdf\x07\x04\r9\x18\x0388'
tRp8988
sa(dp8989
S'trial_loop.thisTrialN'
p8990
I192
sg6371
g6492
sS'block_loop.thisIndex'
p8991
g6365
sg38
S'right'
p8992
sg59
g63
sS'trial_loop.thisN'
p8993
I192
sg33
g6496
sg64
g65
sS'trial_loop.thisIndex'
p8994
g60
(g99
S'\xc0\x00\x00\x00'
tRp8995
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p8996
I0
sg6380
g6500
sS'block_loop.thisRepN'
p8997
I2
sg6383
g6496
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p8998
I2
sg6385
g6503
sg55
g11
sS'block_loop.thisTrial'
p8999
Nsg70
Vn
sS'block_loop.thisTrialN'
p9000
I0
sg39
F0.94990901178243803
sg34
g753
(S'\x07\xdf\x07\x04\r9\x1e\x02\xd6\x90'
tRp9001
sa(dp9002
S'trial_loop.thisTrialN'
p9003
I193
sg6371
g6834
sS'block_loop.thisIndex'
p9004
g6365
sg38
S'left'
p9005
sg59
g63
sS'trial_loop.thisN'
p9006
I193
sg33
g6838
sg64
g65
sS'trial_loop.thisIndex'
p9007
g60
(g99
S'\xc1\x00\x00\x00'
tRp9008
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9009
I0
sg6380
g6842
sS'block_loop.thisRepN'
p9010
I2
sg6383
g6838
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9011
I2
sg6385
g6845
sg55
g11
sS'block_loop.thisTrial'
p9012
Nsg70
Vn
sS'block_loop.thisTrialN'
p9013
I0
sg39
F0.81668618145158689
sg34
g753
(S'\x07\xdf\x07\x04\r9$\x02\xaf\x80'
tRp9014
sa(dp9015
S'trial_loop.thisTrialN'
p9016
I194
sg6371
g6607
sS'block_loop.thisIndex'
p9017
g6365
sg38
S'left'
p9018
sg59
g63
sS'trial_loop.thisN'
p9019
I194
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p9020
g60
(g99
S'\xc2\x00\x00\x00'
tRp9021
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9022
I0
sg6380
g6615
sS'block_loop.thisRepN'
p9023
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9024
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p9025
Nsg70
Vn
sS'block_loop.thisTrialN'
p9026
I0
sg39
F0.64998943721366231
sg34
g753
(S'\x07\xdf\x07\x04\r9*\x00e\x90'
tRp9027
sa(dp9028
S'trial_loop.thisTrialN'
p9029
I195
sg6371
g6543
sS'block_loop.thisIndex'
p9030
g6365
sg38
S'left'
p9031
sg59
g63
sS'trial_loop.thisN'
p9032
I195
sg33
g6547
sg64
g65
sS'trial_loop.thisIndex'
p9033
g60
(g99
S'\xc3\x00\x00\x00'
tRp9034
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9035
I0
sg6380
g6551
sS'block_loop.thisRepN'
p9036
I2
sg6383
g6547
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9037
I2
sg6385
g6554
sg55
g11
sS'block_loop.thisTrial'
p9038
Nsg70
Vn
sS'block_loop.thisTrialN'
p9039
I0
sg39
F0.58324573775280442
sg34
g753
(S'\x07\xdf\x07\x04\r9/\n\xc1\xe8'
tRp9040
sa(dp9041
S'trial_loop.thisTrialN'
p9042
I196
sg6371
g6573
sS'block_loop.thisIndex'
p9043
g6365
sg38
S'left'
p9044
sg59
g63
sS'trial_loop.thisN'
p9045
I196
sg33
g6577
sg64
g65
sS'trial_loop.thisIndex'
p9046
g60
(g99
S'\xc4\x00\x00\x00'
tRp9047
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9048
I0
sg6380
g6581
sS'block_loop.thisRepN'
p9049
I2
sg6383
g6577
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9050
I2
sg6385
g6584
sg55
g11
sS'block_loop.thisTrial'
p9051
Nsg70
Vn
sS'block_loop.thisTrialN'
p9052
I0
sg39
F0.6670700767517701
sg34
g753
(S'\x07\xdf\x07\x04\r95\x04\xe5\xe8'
tRp9053
sa(dp9054
S'trial_loop.thisTrialN'
p9055
I197
sg6371
g7408
sS'block_loop.thisIndex'
p9056
g6365
sg38
S'right'
p9057
sg59
g63
sS'trial_loop.thisN'
p9058
I197
sg33
g6611
sg64
g65
sS'trial_loop.thisIndex'
p9059
g60
(g99
S'\xc5\x00\x00\x00'
tRp9060
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9061
I0
sg6380
g7415
sS'block_loop.thisRepN'
p9062
I2
sg6383
g6611
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9063
I2
sg6385
g6618
sg55
g11
sS'block_loop.thisTrial'
p9064
Nsg70
Vn
sS'block_loop.thisTrialN'
p9065
I0
sg39
F0.69993559693466523
sg34
g753
(S'\x07\xdf\x07\x04\r9;\x00u0'
tRp9066
sa(dp9067
S'trial_loop.thisTrialN'
p9068
I198
sg6371
g7030
sS'block_loop.thisIndex'
p9069
g6365
sg38
S'right'
p9070
sg59
g63
sS'trial_loop.thisN'
p9071
I198
sg33
g6737
sg64
g65
sS'trial_loop.thisIndex'
p9072
g60
(g99
S'\xc6\x00\x00\x00'
tRp9073
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9074
I0
sg6380
g7037
sS'block_loop.thisRepN'
p9075
I2
sg6383
g6737
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9076
I2
sg6385
g6744
sg55
g11
sS'block_loop.thisTrial'
p9077
Nsg70
Vn
sS'block_loop.thisTrialN'
p9078
I0
sg39
F0.86667653096992581
sg34
g753
(S'\x07\xdf\x07\x04\r:\x04\x0b\x858'
tRp9079
sa(dp9080
S'trial_loop.thisTrialN'
p9081
I199
sg6371
g7099
sS'block_loop.thisIndex'
p9082
g6365
sg38
S'right'
p9083
sg59
g63
sS'trial_loop.thisN'
p9084
I199
sg33
g6667
sg64
g65
sS'trial_loop.thisIndex'
p9085
g60
(g99
S'\xc7\x00\x00\x00'
tRp9086
sg66
g67
sg68
g69
sS'trial_loop.thisRepN'
p9087
I0
sg6380
g7106
sS'block_loop.thisRepN'
p9088
I2
sg6383
g6660
sg56
g57
sg58
Vy
sS'block_loop.thisN'
p9089
I2
sg6385
g6667
sg55
g11
sS'block_loop.thisTrial'
p9090
Nsg70
Vn
sS'block_loop.thisTrialN'
p9091
I0
sg39
F0.84997991502314107
sg34
g753
(S'\x07\xdf\x07\x04\r:\n\t\xf2\xe0'
tRp9092
sa(dp9093
S'block_loop.thisRepN'
p9094
I2
sg56
g57
sS'block_loop.thisIndex'
p9095
g6365
sg58
Vy
sg59
g63
sS'block_loop.thisN'
p9096
I2
sg55
g11
sg64
g65
sS'block_loop.thisTrial'
p9097
Nsg66
g67
sg68
g69
sS'block_loop.thisTrialN'
p9098
I0
sg70
Vn
sa(dp9099
g64
g65
sg43
I21
sg56
g57
sg58
Vy
sg42
I579
sg59
g63
sg55
g11
sg66
g67
sg68
g69
sg70
Vn
sa(dp9100
g64
g65
sg43
I21
sg55
g11
sg56
g57
sg45
F1.6399999999999999
sg42
I579
sg49
F0.01
sg58
Vy
sg59
g63
sg44
I00
sg48
I25
sg47
g625
sg51
F30.789999999999999
sg46
F0.21999999999999892
sg66
g67
sg68
g69
sg50
I0
sg70
Vn
sasS'loops'
p9101
(lp9102
g1
(cpsychopy.data
TrialHandler
p9103
g3
NtRp9104
(dp9105
S'origin'
p9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9107
sS'thisTrial'
p9108
(lp9109
sS'_exp'
p9110
I78430544
sg10
S'bdm_loop1'
p9111
sg6
S'C:\\DATA\\bdm\\tor\\inferring_intentions_task\\task_code\\infer_design1.py'
p9112
sS'thisRepN'
p9113
I1
sg52
I01
sg53
g54
sS'data'
p9114
g1
(cpsychopy.data
DataHandler
p9115
c__builtin__
dict
p9116
(dp9117
S'ran'
p9118
cnumpy.ma.core
_mareconstruct
p9119
(cnumpy.ma.core
MaskedArray
p9120
g93
(I0
tp9121
S'b'
tRp9122
(I1
(I40
I1
tg61
(S'f4'
I0
I1
tRp9123
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg19
g9119
(g9120
g93
g9121
S'b'
tRp9124
(I1
(I40
I1
tg9123
I00
S'\xecQ8>\x8f\xc2u=\xecQ8>\xd7\xa3p?\n\xd7#=\x00\x00\x00\x00\xaeG\xe1>\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7\xa3<\x00\x00\x00\x00\\\x8f\xc2>R\xb8\x9e?\x8f\xc2u=\x00\x00\x00\x00\x00\x00\x00\x00)\\\x0f>\xaeGa>\xcd\xcc\xcc=\n\xd7#=\x00\x00\x00\x00\n\xd7\xa3<\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\n\xd7\xa3<\n\xd7\xa3=\x00\x00\x00\x00\xecQ8>\n\xd7#>\x8f\xc2u?333?\x00\x00\x00\x00\x14\xae\x87?\x00\x00\x00\x00\xd7\xa3p?\xb8\x1e\x05?\n\xd7\xa3=\x00\x00\x00\x00\x00\x00\x00\x00'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg20
g9119
(g9120
g93
g9121
S'b'
tRp9125
(I1
(I40
I1
tg9123
I00
S'\xbaI\x84@\xdd$\x82@T\xe3\xa5@\x0e-b@\xbaI\x84@b\x100@\x87\x16\xb1@u\x93h@/\xdd<@\xbaID@\xa8\xc6[@\x98n\xa6@\xaa\xf1:Au\x938@!\xb0Z@!\xb0J@D\x8b\x80@B`5@\xee|7@\x87\x16a@\xa8\xc6{@D\x8b\x80@b\x10@@\x87\x16\x91@\xee|\xd7@\xfe\xd4\xa4@\x96C\x03@\x0e-b@\xbaId@\xdd$\x9a@d;\xbb@T\xe3\x85@D\x8b\x80@\xd5x\x1fA\xc9vF@\xdb\xf9^@/\xdd\\@\xbaIT@\xfc\xa9y@w\xbe\x93@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbsS'order'
p9126
g9119
(g9120
g93
g9121
S'b'
tRp9127
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x0cB\x00\x00\x08B\x00\x00\x1cB\x00\x00\xb8A\x00\x00\x00A\x00\x00\xf0A\x00\x00 A\x00\x00@A\x00\x00\xe0A\x00\x00\xc0A\x00\x00\x04B\x00\x00\x88A\x00\x00\x00\x00\x00\x00\x00B\x00\x00\x80A\x00\x00\x80@\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0@\x00\x00\x14B\x00\x00\xc0@\x00\x00\xa0@\x00\x00\xa8A\x00\x00\x98A\x00\x00\x80?\x00\x00pA\x00\x00\xa0A\x00\x000A\x00\x00\x18B\x00\x00\x10B\x00\x00`A\x00\x00\xc8A\x00\x00\x90A\x00\x00@@\x00\x00\x10A\x00\x00\xb0A\x00\x00\xe8A\x00\x00\xf8A\x00\x00PA\x00\x00\x00@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg21
g9119
(g9120
g93
g9121
S'b'
tRp9128
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00@\x00\x00\xc0?\x9a\x99\x99?33\xb3?\x00\x00\xc0?33\xb3?33\xb3?33\xb3?33\xf3?\xcd\xcc\xcc?33\xf3?\x00\x00\xc0?33\xf3?\x00\x00\x80?\x00\x00\x80?\x00\x00\xc0?33\xf3?\x00\x00\xc0?\xcd\xcc\x8c?33\xf3?ff\xa6?\xcd\xcc\xcc?\x00\x00\x00@33\xf3?ff\xa6?\x9a\x99\xd9?\xcd\xcc\x8c?\x9a\x99\xd9?\x00\x00\xc0?ff\xa6?\xcd\xcc\x8c?\x00\x00\x80?\x9a\x99\x99?\x9a\x99\x99?\xcd\xcc\xcc?\x00\x00\x00@33\xf3?ff\xa6?ff\xe6?\x9a\x99\xd9?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9129
(dp9130
S'isNumeric'
p9131
(dp9132
g9118
I01
sg19
I01
sg20
I01
sg9126
I01
sg21
I01
ssS'trials'
p9133
g9104
sS'dataTypes'
p9134
(lp9135
g9118
ag9126
ag19
ag20
ag21
asS'dataShape'
p9136
(lp9137
I40
aI1
asbsS'method'
p9138
Vrandom
p9139
sS'sequenceIndices'
p9140
g92
(g93
(I0
tS'b'
tRp9141
(I1
(I40
I1
tg99
I01
S'\x0c\x00\x00\x00\x18\x00\x00\x00\'\x00\x00\x00!\x00\x00\x00\x0f\x00\x00\x00\x15\x00\x00\x00\x14\x00\x00\x00\x12\x00\x00\x00\x04\x00\x00\x00"\x00\x00\x00\x06\x00\x00\x00\x1b\x00\x00\x00\x07\x00\x00\x00&\x00\x00\x00\x1e\x00\x00\x00\x19\x00\x00\x00\x0e\x00\x00\x00\x0b\x00\x00\x00 \x00\x00\x00\x17\x00\x00\x00\x1a\x00\x00\x00\x16\x00\x00\x00#\x00\x00\x00\x03\x00\x00\x00\t\x00\x00\x00\x1f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x08\x00\x00\x00$\x00\x00\x00\x05\x00\x00\x00%\x00\x00\x00\r\x00\x00\x00\n\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x13\x00\x00\x00\x1c\x00\x00\x00\x02\x00\x00\x00'
tbsS'finished'
p9142
I01
sS'nReps'
p9143
I1
sS'nRemaining'
p9144
I-1
sS'trialList'
p9145
(lp9146
g1
(cpsychopy.data
TrialType
p9147
g9116
(dp9148
g79
g348
stRp9149
ag1
(g9147
g9116
(dp9150
g79
g341
stRp9151
ag1
(g9147
g9116
(dp9152
g79
g376
stRp9153
ag1
(g9147
g9116
(dp9154
g79
g264
stRp9155
ag1
(g9147
g9116
(dp9156
g79
g159
stRp9157
ag1
(g9147
g9116
(dp9158
g79
g313
stRp9159
ag1
(g9147
g9116
(dp9160
g79
g173
stRp9161
ag1
(g9147
g9116
(dp9162
g79
g187
stRp9163
ag1
(g9147
g9116
(dp9164
g79
g299
stRp9165
ag1
(g9147
g9116
(dp9166
g79
g271
stRp9167
ag1
(g9147
g9116
(dp9168
g79
g334
stRp9169
ag1
(g9147
g9116
(dp9170
g79
g222
stRp9171
ag1
(g9147
g9116
(dp9172
g79
g103
stRp9173
ag1
(g9147
g9116
(dp9174
g79
g327
stRp9175
ag1
(g9147
g9116
(dp9176
g79
g215
stRp9177
ag1
(g9147
g9116
(dp9178
g79
g131
stRp9179
ag1
(g9147
g9116
(dp9180
g79
g285
stRp9181
ag1
(g9147
g9116
(dp9182
g79
g292
stRp9183
ag1
(g9147
g9116
(dp9184
g79
g152
stRp9185
ag1
(g9147
g9116
(dp9186
g79
g362
stRp9187
ag1
(g9147
g9116
(dp9188
g79
g145
stRp9189
ag1
(g9147
g9116
(dp9190
g79
g138
stRp9191
ag1
(g9147
g9116
(dp9192
g79
g250
stRp9193
ag1
(g9147
g9116
(dp9194
g79
g236
stRp9195
ag1
(g9147
g9116
(dp9196
g79
g110
stRp9197
ag1
(g9147
g9116
(dp9198
g79
g208
stRp9199
ag1
(g9147
g9116
(dp9200
g79
g243
stRp9201
ag1
(g9147
g9116
(dp9202
g79
g180
stRp9203
ag1
(g9147
g9116
(dp9204
g79
g369
stRp9205
ag1
(g9147
g9116
(dp9206
g79
g355
stRp9207
ag1
(g9147
g9116
(dp9208
g79
g201
stRp9209
ag1
(g9147
g9116
(dp9210
g79
g278
stRp9211
ag1
(g9147
g9116
(dp9212
g79
g229
stRp9213
ag1
(g9147
g9116
(dp9214
g79
g124
stRp9215
ag1
(g9147
g9116
(dp9216
g79
g166
stRp9217
ag1
(g9147
g9116
(dp9218
g79
g257
stRp9219
ag1
(g9147
g9116
(dp9220
g79
g306
stRp9221
ag1
(g9147
g9116
(dp9222
g79
g320
stRp9223
ag1
(g9147
g9116
(dp9224
g79
g194
stRp9225
ag1
(g9147
g9116
(dp9226
g79
g117
stRp9227
asS'seed'
p9228
NsS'thisIndex'
p9229
g373
sS'thisN'
p9230
I40
sS'thisTrialN'
p9231
I0
sS'nTotal'
p9232
I40
sS'_warnUseOfNext'
p9233
I01
sbag1
(g9103
g3
NtRp9234
(dp9235
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9236
sg9108
(lp9237
sg9110
I78430544
sg10
S'binary'
p9238
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9239
g26
g9119
(g9120
g93
g9121
S'b'
tRp9240
(I1
(I40
I1
tg9123
I00
S'\x00\x00\xc0@\xcd\xcc\xcc?\x00\x00@@\x00\x00\xc0@\x00\x00\xc0@\x9a\x999@\x00\x00\xc0?\x00\x00\x00@\x00\x00\xc0@\x9a\x99\x19@\x9a\x99\xd9?\x00\x00\xc0@333@\x00\x00\x00@ff\xe6?\x00\x00\xc0@33\xb3?ff\xe6?ff\x06@\x00\x00\xc0@\x00\x00\xc0@ff\x86@\x00\x00\xc0@\x9a\x99\xd9?\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@\x9a\x999@\x00\x00\xc0@\x00\x00\xc0@33\xf3?\x00\x00\xc0@333@\x00\x00\xc0@\x00\x00\xc0@\x9a\x99y@\x00\x00\x80@\x00\x00\xc0@\x00\x00\xc0@\x00\x00\xc0@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9241
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg25
g9119
(g9120
g93
g9121
S'b'
tRp9242
(I1
(I40
I1
tg9123
I00
S'}!\x12@\xceU\x95@\xfa\x8b\xe8?P\x989@\x1eV%@"5C@\xbf3\x83@\xb9VE@\xef\xd1\xec?\xff\x99\x99@\xf4\x11\xd1?\x88\x16\xb1?43s@\xe6\xac\n@]\x12q@F\xc0\xfb?\x17hV@\x87\xfc\xdf?\x9b"\x9a@\xbb\xde\xbd?\x8cf\x06@\xb1\xe1\xbd?\xc32\xb3?\x88\x89\xa8?\xaa"\x92@\xd3\x8d\xe8?\xce\x06\xe0?\xbek\xc6?\xc1"\xc2?\x9f\xab\xaa?\xd2e6@lQ\x15@E\xbc\x9b@\xbdT\x9d@\x8a4\x93?\xf5\x12A@\xb0R\xc4?\xb1\x1f2@jx\x97?l\xdd\r@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg28
g9119
(g9120
g93
g9121
S'b'
tRp9243
(I1
(I40
I1
tg9123
I00
S'ff\x86@ffF@33S@fff@\x00\x00@@\x00\x00\x80@\x9a\x99y@333@ffF@\x00\x00\x80@\x00\x00`@\x00\x00\x80@\x00\x00\x80@\x9a\x99y@ffF@ff\x86@\x00\x00`@ff\x86@\x9a\x99Y@fff@33s@33S@333@\x00\x00\x80@\x00\x00\x80@ff\x86@\x9a\x999@\xcd\xcc,@fff@ffF@\x00\x00@@\x00\x00\x80@ffF@ff\x86@\x9a\x99\x89@\x9a\x99\x89@\x00\x00\x80@\x9a\x99Y@\x9a\x99y@\x9a\x99y@'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg24
g9119
(g9120
g93
g9121
S'b'
tRp9244
(I1
(I40
I1
tg61
(S'O4'
I0
I1
tRp9245
(I3
S'|'
NNNI-1
I-1
I63
tbI00
S" \xf6p\x0c S)\x05`Z\x14\x0c\xe0Y\x14\x0c\x00X\x14\x0c\xa0P)\x05\xa0Y\x14\x0c\x80Q)\x05\x80P\x14\x0c \x8fq\x0c\x00[\x14\x0c\x00Q)\x05`P)\x05`[\x14\x0c\xa0Z\x14\x0c\x80T)\x05\x00+\x16\x0c\x00,\x16\x0c\xe0%\x16\x0c\x80&\x16\x0c`-\x16\x0c\xe0'\x16\x0c`&\x16\x0c@,\x16\x0c\xa0%\x16\x0c\xc0&\x16\x0c`Q)\x05@$\x16\x0c`(\x16\x0c\x00-\x16\x0c`\xf4p\x0c\xa0\xfbp\x0c\xa0\xf7p\x0c@\xf0p\x0c\xa0\xf6p\x0c\x00\xf6p\x0c\xc0\xf5p\x0c\xc0\xf7p\x0c \xf8p\x0c \xfcp\x0c"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg27
g9119
(g9120
g93
g9121
S'b'
tRp9246
(I1
(I40
I1
tg9123
I00
S'b\x10\x10@\xee|\x17@\x87\x16\x11@m\xe7\xbb?\x83\xc0\xaa?B`5@\xc9v\x06@\xf8S\xf3?\x83\xc0\xaa?1\x08\xb0@1\x08\x80@\xb6\xf3\x9d?^\xba\xf9?\x96CC@P\x8d\xd7?\xe9&\xd1?\xa8\xc6\xdb?\xdb\xf9\x1e@\xee|\x87@P\x8d\xb7?\x91\xed\xec?\x83\xc0\xca?\xe9&\xb1?+\x87\xc6?\xa8\xc6\xdb?P\x8d\xd7?\x1dZ\xc4?\xd7\xa3x@\x1dZ\xa4?\x83\xc0\xaa?\xee|\x8f@\xdb\xf9^@B`5@T\xe3\xbd@+\x87\xe6?1\x08\x90@\xf0\xa7f?\xc5 \xa0?\x83\xc0\x8a?\xe9&\x91?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9247
(I1
(I40
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9248
(dp9249
g9131
(dp9250
g26
I01
sg9118
I01
sg28
I01
sg25
I01
sg24
I00
sg9126
I01
sg27
I01
ssg9133
g9234
sg9134
(lp9251
g9118
ag9126
ag24
ag25
ag26
ag27
ag28
asg9136
(lp9252
I40
aI1
asbsg9138
Vsequential
p9253
sg9140
g92
(g93
(I0
tS'b'
tRp9254
(I1
(I40
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9255
g1
(g9147
g9116
(dp9256
g80
g381
sg81
g382
stRp9257
ag1
(g9147
g9116
(dp9258
g80
g390
sg81
g391
stRp9259
ag1
(g9147
g9116
(dp9260
g80
g399
sg81
g400
stRp9261
ag1
(g9147
g9116
(dp9262
g80
g408
sg81
g409
stRp9263
ag1
(g9147
g9116
(dp9264
g80
g417
sg81
g418
stRp9265
ag1
(g9147
g9116
(dp9266
g80
g426
sg81
g427
stRp9267
ag1
(g9147
g9116
(dp9268
g80
g435
sg81
g436
stRp9269
ag1
(g9147
g9116
(dp9270
g80
g444
sg81
g445
stRp9271
ag1
(g9147
g9116
(dp9272
g80
g453
sg81
g454
stRp9273
ag1
(g9147
g9116
(dp9274
g80
g462
sg81
g463
stRp9275
ag1
(g9147
g9116
(dp9276
g80
g471
sg81
g472
stRp9277
ag1
(g9147
g9116
(dp9278
g80
g480
sg81
g481
stRp9279
ag1
(g9147
g9116
(dp9280
g80
g489
sg81
g490
stRp9281
ag1
(g9147
g9116
(dp9282
g80
g498
sg81
g499
stRp9283
ag1
(g9147
g9116
(dp9284
g80
g507
sg81
g508
stRp9285
ag1
(g9147
g9116
(dp9286
g80
g516
sg81
g517
stRp9287
ag1
(g9147
g9116
(dp9288
g80
g525
sg81
g526
stRp9289
ag1
(g9147
g9116
(dp9290
g80
g534
sg81
g535
stRp9291
ag1
(g9147
g9116
(dp9292
g80
g543
sg81
g544
stRp9293
ag1
(g9147
g9116
(dp9294
g80
g552
sg81
g553
stRp9295
ag1
(g9147
g9116
(dp9296
g80
g561
sg81
g562
stRp9297
ag1
(g9147
g9116
(dp9298
g80
g570
sg81
g571
stRp9299
ag1
(g9147
g9116
(dp9300
g80
g579
sg81
g580
stRp9301
ag1
(g9147
g9116
(dp9302
g80
g588
sg81
g589
stRp9303
ag1
(g9147
g9116
(dp9304
g80
g597
sg81
g598
stRp9305
ag1
(g9147
g9116
(dp9306
g80
g606
sg81
g607
stRp9307
ag1
(g9147
g9116
(dp9308
g80
g615
sg81
g616
stRp9309
ag1
(g9147
g9116
(dp9310
g80
g624
sg81
g625
stRp9311
ag1
(g9147
g9116
(dp9312
g80
g633
sg81
g634
stRp9313
ag1
(g9147
g9116
(dp9314
g80
g642
sg81
g643
stRp9315
ag1
(g9147
g9116
(dp9316
g80
g651
sg81
g652
stRp9317
ag1
(g9147
g9116
(dp9318
g80
g660
sg81
g661
stRp9319
ag1
(g9147
g9116
(dp9320
g80
g669
sg81
g670
stRp9321
ag1
(g9147
g9116
(dp9322
g80
g678
sg81
g679
stRp9323
ag1
(g9147
g9116
(dp9324
g80
g687
sg81
g688
stRp9325
ag1
(g9147
g9116
(dp9326
g80
g696
sg81
g697
stRp9327
ag1
(g9147
g9116
(dp9328
g80
g705
sg81
g706
stRp9329
ag1
(g9147
g9116
(dp9330
g80
g714
sg81
g715
stRp9331
ag1
(g9147
g9116
(dp9332
g80
g723
sg81
g724
stRp9333
ag1
(g9147
g9116
(dp9334
g80
g732
sg81
g733
stRp9335
asg9228
Nsg9229
g736
sg9230
I40
sg9231
I0
sg9232
I40
sg9233
I01
sbag1
(g9103
g3
NtRp9336
(dp9337
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9338
sg9108
(lp9339
sg9110
I78430544
sg10
S'practice_loop'
p9340
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9341
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9342
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg33
g9119
(g9120
g93
g9121
S'b'
tRp9343
(I1
(I14
I1
tg9245
I00
S'h\x83\xa6\x0c\x90\x83\xa6\x0ch\x83\xa6\x0c\x10w\x8b\x0c\xb8\x83\xa6\x0c\xe0\x83\xa6\x0c\xa8\x84\xa6\x0c\xb0v\x8b\x0c\xe0\x83\xa6\x0c\x08\x84\xa6\x0c\xb0v\x8b\x0c\xb8\x83\xa6\x0c\x80v\x8b\x0cX\x84\xa6\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9344
(I1
(I14
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9345
(I1
(I14
I1
tg9245
I00
S'\x98o\xcc\x04Pl\xcc\x04 c\xcc\x040b\xcc\x040e\xcc\x04\x00h\xcc\x04\xc8c\xcc\x048\xe6\xe8\x04\xc0\xe5\xe8\x04\xf0\xeb\xe8\x04p\xed\xe8\x04\xa8\xe5\xe8\x04\xc8\xe9\xe8\x04\x10\xe1\xe8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9346
(dp9347
g9131
(dp9348
g9118
I01
sg33
I00
sg9126
I01
sg34
I00
ssg9133
g9336
sg9134
(lp9349
g9118
ag9126
ag33
ag34
asg9136
(lp9350
I14
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9351
(I1
(I14
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9352
g1
(g9147
g9116
(dp9353
g82
g744
sg83
g745
sg84
g749
sg85
g750
stRp9354
ag1
(g9147
g9116
(dp9355
g82
g756
sg83
g757
sg84
g761
sg85
g762
stRp9356
ag1
(g9147
g9116
(dp9357
g82
g744
sg83
g767
sg84
g749
sg85
g771
stRp9358
ag1
(g9147
g9116
(dp9359
g82
g776
sg83
g777
sg84
g781
sg85
g782
stRp9360
ag1
(g9147
g9116
(dp9361
g82
g787
sg83
g788
sg84
g792
sg85
g793
stRp9362
ag1
(g9147
g9116
(dp9363
g82
g798
sg83
g799
sg84
g803
sg85
g804
stRp9364
ag1
(g9147
g9116
(dp9365
g82
g809
sg83
g810
sg84
g814
sg85
g815
stRp9366
ag1
(g9147
g9116
(dp9367
g82
g820
sg83
g821
sg84
g825
sg85
g826
stRp9368
ag1
(g9147
g9116
(dp9369
g82
g798
sg83
g831
sg84
g803
sg85
g835
stRp9370
ag1
(g9147
g9116
(dp9371
g82
g809
sg83
g840
sg84
g814
sg85
g844
stRp9372
ag1
(g9147
g9116
(dp9373
g82
g820
sg83
g849
sg84
g825
sg85
g853
stRp9374
ag1
(g9147
g9116
(dp9375
g82
g787
sg83
g858
sg84
g792
sg85
g862
stRp9376
ag1
(g9147
g9116
(dp9377
g82
g776
sg83
g867
sg84
g781
sg85
g871
stRp9378
ag1
(g9147
g9116
(dp9379
g82
g756
sg83
g876
sg84
g761
sg85
g880
stRp9380
asg9228
Nsg9229
g882
sg9230
I14
sg9231
I0
sg9232
I14
sg9233
I01
sbag1
(g9103
g3
NtRp9381
(dp9382
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9383
sg9108
(lp9384
sg9110
I78430544
sg10
S'block_loop'
p9385
sg6
g9112
sg9113
I3
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9386
g9118
g9119
(g9120
g93
g9121
S'b'
tRp9387
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9388
(I1
(I1
I3
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@'
S'\x00\x00\x00'
NtbstRp9389
(dp9390
g9131
(dp9391
g9118
I01
sg9126
I01
ssg9133
g9381
sg9134
(lp9392
g9118
ag9126
asg9136
(lp9393
I1
aI3
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9394
(I1
(I1
I3
tg99
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbsg9142
I01
sg9143
I3
sg9144
I-1
sg9145
(lp9395
Nasg9228
Nsg9229
g6365
sg9230
I3
sg9231
I0
sg9232
I3
sg9233
I01
sbag1
(g9103
g3
NtRp9396
(dp9397
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9398
sg9108
(lp9399
sg9110
I78430544
sg10
S'trial_loop'
p9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9401
g33
g9119
(g9120
g93
g9121
S'b'
tRp9402
(I1
(I200
I1
tg9245
I00
S'Pv\xa8\x0c\x80v\xa8\x0c\xa0\x82\xa8\x0c\xc8\x82\xa8\x0c`\xf8p\x0c\xc8\x82\xa8\x0c\xb0v\xa8\x0c\xf0\x82\xa8\x0c\xe0v\xa8\x0c\x10w\xa8\x0c\xd0w\xa8\x0c@\x83\xa8\x0c`\xf8p\x0cp\x0f\xa8\x0c\xc0\xd6o\x0ch\x83\xa8\x0cPv\xa8\x0c\x90\x83\xa8\x0c\xa8\x0f\xa8\x0c\x80v\xa8\x0c\x18\x83\xa8\x0c`\xd5o\x0c\xd0\x84\xa8\x0c\x80\x84\xa8\x0c\xc8\x90\xa8\x0ch\x83\xa8\x0c0\x84\xa8\x0c\x90\x83\xa8\x0c\xc0\xd6o\x0c`\xd5o\x0c \x90\xa8\x0cPv\xa8\x0c\xc8\x82\xa8\x0c\xb0v\xa8\x0c\xb8\x83\xa8\x0c\xc0\xf6p\x0cp\x0f\xa8\x0ch\x83\xa8\x0c\xc0\xf6p\x0c`\xd5o\x0c\xe0v\xa8\x0cPv\xa8\x0c0\x84\xa8\x0c\xe0\x83\xa8\x0c@\x83\xa8\x0c\xe0v\xa8\x0c\x18\x83\xa8\x0c0x\xa8\x0c\x80\xd1o\x0cp\x0f\xa8\x0c@w\xa8\x0c\x90\x83\xa8\x0c\xc0\xf6p\x0cPv\xa8\x0c\x80\xd1o\x0c\x00x\xa8\x0c\x80v\xa8\x0c\xf0\x82\xa8\x0c\x80v\xa8\x0ch\x83\xa8\x0c\xc8\x82\xa8\x0c\xf0\x82\xa8\x0c\xa0\x82\xa8\x0c\xc0\xd6o\x0c\xe0\x83\xa8\x0c\xe0v\xa8\x0c\xc0\xf6p\x0c@\x83\xa8\x0c\xd0\x84\xa8\x0ch\x83\xa8\x0c\xf0\x82\xa8\x0c\xb8\x83\xa8\x0c`\xd5o\x0c \x90\xa8\x0c@\x83\xa8\x0c\x90\x83\xa8\x0c\x80v\xa8\x0c\xe0\x83\xa8\x0c\xb0v\xa8\x0c\x80\xd1o\x0c\xe0\x83\xa8\x0c\xb0v\xa8\x0c\x18\x83\xa8\x0c\xb0v\xa8\x0c\xa8\x0f\xa8\x0c\xa0w\xa8\x0c\xc0\xd6o\x0c\xb8\x83\xa8\x0c\xc0\xd6o\x0ch\x83\xa8\x0c\x00x\xa8\x0cpw\xa8\x0c\xa0\x82\xa8\x0c\x80v\xa8\x0c\xc8\x82\xa8\x0c\x10w\xa8\x0c`x\xa8\x0c\x90\x83\xa8\x0c\x90\x90\xa8\x0c\xd0w\xa8\x0c0x\xa8\x0c`\xd5o\x0c\xe0v\xa8\x0c\xf0\x82\xa8\x0c`\xd5o\x0cPv\xa8\x0c\xa0w\xa8\x0c\xa0\x82\xa8\x0c\xc0\xf6p\x0c\x80\xd1o\x0c\xf0\x82\xa8\x0cPv\xa8\x0c`\xd5o\x0c\xa0\x82\xa8\x0ch\x83\xa8\x0c\xe0v\xa8\x0c@\x83\xa8\x0c\xb8\x83\xa8\x0c\x80\x84\xa8\x0c`x\xa8\x0c\x18\x83\xa8\x0c\x80\xd1o\x0cp\x0f\xa8\x0c\xb8\x83\xa8\x0c\xe0\x83\xa8\x0c\xc0\xf6p\x0cp\x0f\xa8\x0c\x90\x83\xa8\x0c\x80\xd1o\x0c`\xd5o\x0c\xc8\x82\xa8\x0c\xc0\xf6p\x0c\xa8\x0f\xa8\x0c\xe0\x83\xa8\x0cX\x90\xa8\x0c \x90\xa8\x0c\xa0\x82\xa8\x0c\xc8\x82\xa8\x0c@\x83\xa8\x0c\xc0\xd6o\x0c\xe0v\xa8\x0c\xf0\x82\xa8\x0c \x90\xa8\x0c\xa8\x0f\xa8\x0cPv\xa8\x0c\xb8\x83\xa8\x0c\xf8\x84\xa8\x0cpw\xa8\x0c\x80v\xa8\x0c\xf0\x82\xa8\x0c\xc8\x82\xa8\x0c\x18\x83\xa8\x0c\xc0\xd6o\x0c \x90\xa8\x0c\x80\xd1o\x0cp\x0f\xa8\x0c\xa0\x82\xa8\x0c\x18\x83\xa8\x0c \x90\xa8\x0c`\xd5o\x0c\xd0\x84\xa8\x0c\xa0w\xa8\x0c\xf8\x84\xa8\x0c\xd0\x84\xa8\x0cpw\xa8\x0ch\x83\xa8\x0c\xf0\x82\xa8\x0c\x18\x83\xa8\x0cp\x0f\xa8\x0ch\x83\xa8\x0c\x00\x91\xa8\x0cp\x0f\xa8\x0c0x\xa8\x0c\x00x\xa8\x0c \x90\xa8\x0c\x18\x83\xa8\x0c\xb0v\xa8\x0c@\x83\xa8\x0c \x90\xa8\x0c\xc8\x82\xa8\x0c\xf0\x82\xa8\x0c\x00\x91\xa8\x0c\xa8\x84\xa8\x0c\xa0\x82\xa8\x0c\x80\xd1o\x0c\xe0\x83\xa8\x0c\xa8\x0f\xa8\x0c\xe0\x83\xa8\x0c\xc0\xd6o\x0c\xc0\xf6p\x0c\xa8\x0f\xa8\x0c\x80\xd1o\x0c@\x83\xa8\x0c@w\xa8\x0c\xb0v\xa8\x0c\xa8\x0f\xa8\x0c\x80v\xa8\x0cp\x0f\xa8\x0cX\x84\xa8\x0c\x90\x83\xa8\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9403
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9404
(I1
(I200
I1
tg9245
I00
S'`\xe8\x8b\x0c\xa0\xe8\x8b\x0c`\xeb\x8b\x0c\xa0\xeb\x8b\x0c\x00\xeb\x8b\x0c\xa0\xa1\x16\x0c\x00\xbcn\x0c \xa1\x16\x0c@\xbbn\x0c@\xea\x8b\x0c@\xeb\x8b\x0c\x80\xea\x8b\x0c\xa0\xe9\x8b\x0c@\xe8\x8b\x0c\xc0\xe9\x8b\x0c\xe0\xe9\x8b\x0c \xe8\x8b\x0c\xc0\xeb\x8b\x0c`\xea\x8b\x0c \xeb\x8b\x0c\xc0\xea\x8b\x0c`\xe9\x8b\x0c\xa0\xea\x8b\x0c\xa0\xec\x8b\x0c@\xec\x8b\x0c\x00\xed\x8b\x0c \xe9\x8b\x0c \xec\x8b\x0c \xea\x8b\x0c\xe0\xec\x8b\x0c\xa0\xe1q\x0c\xe0U\x14\x0c`%p\x0c`-p\x0c\xa0/p\x0c\x00/p\x0c\xe0.p\x0c@R)\x05@\x8bq\x0c\xc0\x8aq\x0c\x00\x8bq\x0c\x00\x8eq\x0c@\x8cq\x0c\xc0\x8cq\x0c@\x8fq\x0c\x00\x8cq\x0c\x00\x8dq\x0c`\x87q\x0c \x87q\x0c\xe0\x86q\x0c\xa0\x86q\x0c\x00\x8fq\x0c\x00\x86q\x0c\xc0/p\x0c\x00\x8aq\x0c@\x8dq\x0c\xc0\x89q\x0c`\x85q\x0c\x80\x89q\x0c\xc0\x85q\x0c\xc0\x87q\x0c@\x86q\x0c\x00\x88q\x0c\x80\x8cq\x0c\xa0\x80q\x0c\x80\x86q\x0c\x00\x89q\x0c\x80\x80q\x0c\x80\x88q\x0c\xc0\x88q\x0c\x80\x8aq\x0c\xc0\x8dq\x0c@\x80q\x0c@\x8aq\x0c \xa0\x16\x0c\x80\x8bq\x0c`\x80q\x0c\xe0\x80q\x0c \x80q\x0c@\x89q\x0c\x80\x8eq\x0c \x81q\x0c\xc0\x8eq\x0c\x00\x81q\x0c\x00\xa2\x16\x0c@\x88q\x0c\x80\x8dq\x0c\xe0\xf1p\x0c@\xf2p\x0c@\xfbp\x0c@\xf3p\x0c \xf2p\x0c\xe0\xfep\x0c\xc0\xffp\x0c\xa0\xf2p\x0c \xfep\x0c \xffp\x0c\xa0\xffp\x0c\xa0\xf8p\x0c\xe0\xffp\x0c`\xfep\x0c@\xfap\x0c \xf1p\x0c@\xf1p\x0c\x00\xffp\x0c\x00\xf1p\x0c`\xf1p\x0c\x80\xf1p\x0c\xa0\xf1p\x0c\xc0\xf1p\x0c`\xf2p\x0c\x80\xf2p\x0c\xc0\xf2p\x0c\x00\xf2p\x0c\x00\xf3p\x0c\xa0\xf3p\x0c \xf4p\x0c \xf3p\x0c@\xffp\x0c`\xf0p\x0c\x00L*\x05\xc0\x8bq\x0c \xb5n\x0c`\xf3p\x0c\x00\xf4p\x0c\xa0\xfep\x0c\x80\xf3p\x0c\xe0\xf2p\x0c\xe0\xf3p\x0c\x80\xfep\x0c@\xfep\x0c\xc0\xfep\x0c\xc0\x80q\x0c\x80\xffp\x0c@\x8eq\x0c@\xa0\x16\x0c\xe0\xea\x8b\x0c\xe0\xe8\x8b\x0c\xe0\xed\x8b\x0c\x00\xec\x8b\x0c \xed\x8b\x0c\x80\xed\x8b\x0c@\xed\x8b\x0c`\xee\x8b\x0c\xc0\xed\x8b\x0c\x80\xeb\x8b\x0c\x80\xee\x8b\x0c\xc0\xee\x8b\x0c\xe0\xee\x8b\x0c\x00\xee\x8b\x0c \xef\x8b\x0c \xee\x8b\x0c\xa0\xed\x8b\x0c\x00\xea\x8b\x0c\xc0\xef\x8b\x0c\xa0\xee\x8b\x0c@\xef\x8b\x0c\xe0\xeb\x8b\x0c\xe0\xef\x8b\x0c\xa0\xef\x8b\x0c\x80\xec\x8b\x0c\x00\xef\x8b\x0c\xc0\xec\x8b\x0c`\xed\x8b\x0c\x80\xef\x8b\x0c\xa0C*\x05@\xee\x8b\x0c`\xffp\x0c\x80`\xba\x0c@b\xba\x0c@`\xba\x0c\x80a\xba\x0c a\xba\x0c `\xba\x0c\xe0a\xba\x0c`b\xba\x0c\xc0b\xba\x0c\x80b\xba\x0c\xa0b\xba\x0c\xc0`\xba\x0c\x00c\xba\x0c\xe0b\xba\x0c@c\xba\x0c c\xba\x0c\x80c\xba\x0c\xa0c\xba\x0c\xe0`\xba\x0c`a\xba\x0c\xc0c\xba\x0c d\xba\x0c@d\xba\x0c`d\xba\x0c\x80d\xba\x0c\xa0d\xba\x0c`c\xba\x0c\xc0a\xba\x0c\x80\xd6\xb3\x04@\xdd\xb3\x04\xe0\xd9\xb3\x04\xa0\xd8\xb3\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9405
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9406
(I1
(I200
I1
tg9123
I00
S'7\xeb\xae?>\xca\xac?\xadq\xb7?r\xfe\x9f?N\xa9\x8a?\x0e\xb1\xaa?V\x88\xa8?\xb2.\xd3?\xfc\xfc\xff?\x95\xf0\x8e?\x86 \xa2?\xee-\xf3?z2\x93?\xd8\xb8\x1b@/3\xb3?\xbb\xf8\xce?\x05\x1f\xc2?\x1a\x1e\xc2?_\x10\x11@v\xdd\x9d?9\xfd\xbf?\x041\xb3?\xdc\xed\xce?z\x93\x99?\x94\x88\xa8?\xe8,\xe2?Q\xcc\xac?Y\xb8\x9b?\x82,s?H\xcc\x8c?\xbc$\x02@\x83\xe3n?a<\xc4?*\x98\xd9?Q\xa7z@>\x8dH@\xf9\xa2\xea?W\x83\xa8?\xa4\xcc\xcc?\xd92\x93?F\xcb\x9b?B\x11\x91?\xacc\x86?\xa3C\xc4?\xe6`\x86?\xdc\xc1\x9b?u\xe8\x7f?\x83\x85\xc8?\t\xfe\xbf?\x1fP\xb5?\xba\x03\x80?\xf8\xec\xce?\\\xeb\x8e?\x12]\x86?|\x99\x99?\\\xefn?\x9f|w?\x0b\xb9\xdb?\x98ww?\x9c!\x82?|-\x82?Qww?]\x89H?)\xee\xae?\xddQ\x95?\xd5\xc1j?\x19\x10\x91?9PU?\xfa\xa9\xaa?\xf4b\xa6?\xb1\xfe\x7f?S@\x84?\x1f\x83H?\x9c\x99Y?\xc44D?\x07\xde]?\x8d\x8dw?\x9d\xeen?\x80)s?\xff\x92Y?\xdb\x7f\x88?\xc3\x95Y?\x05\xc4\x8c?ym7?pt\x97?\xb5uw?;\x95\xd9?\xf0.\xa2?\xab]f?F>D?\xff\x87H?1=D?\xe5?\xa4?\xfb9\x84?\x0bxw?\xbe@D?\nqw?\xba\x0c\x91?\xe3\xbd;?\x16hw?\x16\xa9\xca?\x04\xbc;?\x05w7?\x19\xda\x9d?\x0c\xd2;?\x19\xc8L?\xc4\xb8;?$\xa7\xca?X!b?\x04\xbe;?\x06\xb7{?\x0fw7?\xa9o7?\xcfb\xc6?\x17\xfb\x8e?\x05\xad*?\x9d\x88H?7\xcd\x8c?3\xcbL?\x03BD?q\x9bY?)\xef.?\xec\x92Y?\xd2\xff\x9f?\x7f\xa4j?\x90\x98Y?\x98Ds?\xbbb\x86?\x13-3?\x1a\x87H?\xf7\x10\xb1?\xfb,\x82?R\xdd\r@\x8bdf?N\x94Y?f\xe9n?`&Q?-\xbb;? \xe9.?\xf0\x87\x88?\xd5\xef.?|B\x84?\xbcvw?\x1b\xfe\xff?p\xde]?\x00\xdd]?O\xbb;?\xebw7?\xcd\x86H?\xd5a\x86?\xab\xfd??\xe3\xc9]?\xaaDD?\x84\x8d\x88?:\r\xb1?\xab>D?|\xc7L?\x9f\xa2{?\xd6VU?\x1c-3?\x1ftw?vt7?\xef\x84H?Zr7?-\x06/?r\xaa\x8a?\xaax7?n\x1bs?\xf9\xden?\xf6UU?U\xa1H?{\x06Q?6A\xa4?\xfc"b?\xb5\x88H?\xcb\xec\x7f?M\xec.?\x0b\xfa??\x85\xcbL?\x0e\xbc;?\xe8\x81H?\x0c\x06/?\x9e\x82H?\x1e!b?\xc1q7?\xa2\xd0]?\x04\xdc\xcc?\x04\xeen?5\x9aY?\xca43?\x19^f?d\xd8\x1d?\xfe\xb1*?\xd9!b?\xc8\x99\x19?\xceCD?\xa0\x87H?S\x05Q?>\xd3;?\xad\xba\x9b?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9407
(I1
(I200
I1
tg9245
I00
S'\xa0\xea\xe8\x04 \xef\xe8\x04\xf0\xd2\x9b\x04\xb0\xd9\x9b\x04\xc8\xd0\x9b\x04@\xd7\x9b\x04\xb0\xd6\x9b\x04\x80\xd0\x9b\x04\xc0\xd5\x9b\x04\xb8\xd7\x9b\x04`\xd5\x9b\x04\x18\xd8\x9b\x04`\xd8\x9b\x04\x90\xd8\x9b\x04(\xda\x9b\x04\xc8\xdc\x9b\x048\xd3\x9b\x048\xdc\x9b\x04\x08\xd6\x9b\x040\xdb\x9b\x04\x90\xde\x9b\x04X\xd7\x9b\x04\x88\xdd\x9b\x04\xf0\xd8\x9b\x04X\xd4\x9b\x04\xa0\xd7\x9b\x04\x80\xdf\x9b\x04\x98\xd6\x9b\x04\xf0\xdb\x9b\x04@\xda\x9b\x04\x80\xdc\x9b\x04\x00\xde\x9b\x04X\xda\x9b\x04x\xd5\x9b\x04\xb0\xd0\x9b\x04\xf8\xd9\x9b\x04\x88\xd1\x9b\x04\x80\xd3\x9b\x04(\xd7\x9b\x04\x98\xdf\x9b\x04\x98\xd3\x9b\x04\xa8\xd5\x9b\x04\xb8\xda\x9b\x04(\xd1\x9b\x04P\xd3\x9b\x04\xe0\xd6\x9b\x04\xf0\xd5\x9b\x04x\xd8\x9b\x04\x88\xd4\x9b\x04\xa0\xdd\x9b\x04\xa0\xda\x9b\x04\xd0\xd7\x9b\x04@\xdd\x9b\x04\xb0\xdc\x9b\x04\xf8\xdc\x9b\x04p\xda\x9b\x048\xdf\x9b\x04\x80\xd9\x9b\x04\xa0\xd4\x9b\x048\xd0\x9b\x04\xb0\xd3\x9b\x04\xb8\xdd\x9b\x04h\xd9\x9b\x04@\xd1\x9b\x04\xc8\xd6\x9b\x04\x80\xd6\x9b\x04p\xd7\x9b\x04\xa8\xde\x9b\x04\x08\xd3\x9b\x04\xd8\xde\x9b\x04\xd8\xd2\x9b\x04\x90\xdb\x9b\x04\x98\xd9\x9b\x04\xe0\xd0\x9b\x04\x10\xdd\x9b\x04\xe0\xdc\x9b\x04`\xde\x9b\x04P\xd6\x9b\x04\x08\xdc\x9b\x04\xc8\xd9\x9b\x04\x10\xd7\x9b\x04P\xdf\x9b\x04\xe0\xd9\x9b\x04\xb0\xdf\x9b\x04\x00\xd2\x9b\x048\xd6\x9b\x04\x88\xd7\x9b\x04\x08\xdf\x9b\x04\xe8\xd1\x9b\x04\x18\xde\x9b\x04\xa0\xd1\x9b\x04\xe8\xdd\x9b\x04\x88\xda\x9b\x04(\xdd\x9b\x04h\xdf\x9b\x04 \xd9\x9b\x04\xd8\xd5\x9b\x04H\xd8\x9b\x04X\xd1\x9b\x04P\xd0\x9b\x04\xe8\xda\x9b\x04\xd0\xda\x9b\x04x\xde\x9b\x04\xc0\xdb\x9b\x04\x00\xdb\x9b\x04P\xd9\x9b\x04\xc8\xdf\x9b\x04\x98\xdc\x9b\x04\xa8\xd2\x9b\x04X\xdd\x9b\x04\xd0\xd4\x9b\x04h\xd0\x9b\x04\x08\xd9\x9b\x04H\xdb\x9b\x04\x90\xd2\x9b\x04\xd8\xdb\x9b\x04\xc0\xde\x9b\x04 \xdf\x9b\x04h\xd6\x9b\x04x\xdb\x9b\x04\x90\xd5\x9b\x040\xd5\x9b\x04@\xd4\x9b\x04p\xdd\x9b\x04\xd0\xdd\x9b\x04\x10\xd4\x9b\x04\x18\xdb\x9b\x04\xe0\xdf\x9b\x04`\xdb\x9b\x04\xa0\xd1\x1a\x0cH\xde\x1a\x0c`\xdb\x1a\x0c\x18\xde\x1a\x0c\x10\xda\x1a\x0c\xb8\xda\x1a\x0c\xc0\xdb\x1a\x0c\x10\xdd\x1a\x0cX\xdd\x1a\x0c\x88\xd1\x1a\x0c@\xda\x1a\x0c@\xdd\x1a\x0c\xb0\xdc\x1a\x0cp\xdd\x1a\x0ch\xdc\x1a\x0cP\xdf\x1a\x0c\xb0\xd6\x1a\x0c\x88\xd4\x1a\x0cX\xd7\x1a\x0c\xf8\xd9\x1a\x0c\x80\xd9\x1a\x0c\xb8\xdd\x1a\x0c`\xd2\x1a\x0c\xd8\xd2\x1a\x0c\xa0\xda\x1a\x0c\xd0\xd7\x1a\x0c\xd0\xd4\x1a\x0cP\xd9\x1a\x0cx\xdb\x1a\x0c\xa8\xd5\x1a\x0c\x18\xd5\x1a\x0c\xe0\xdf\x1a\x0c\x90\xd5\x1a\x0c\xe8\xd7\x1a\x0c \xd9\x1a\x0c\xf8\xd6\x1a\x0c\x90\xd2\x1a\x0c\xd8\xd8\x9b\x04`\xd2\x9b\x04x\xd2\x9b\x04\xc8\xd3\x9b\x04 \xdc\x9b\x04P\xdc\x9b\x04\xa8\xd8\x9b\x04 \xd3\x9b\x04\xb8\xd4\x9b\x04\x18\xd2\x9b\x04p\xd1\x9b\x04\xe0\xd3\x9b\x04\xf8\xd0\x9b\x04p\xd4\x9b\x04\xe8\xd7\x9b\x04\xf8\xd6\x9b\x04\x10\xda\x9b\x04\xc0\xd2\x9b\x04\x00\xd8\x9b\x04H\xde\x9b\x04\xa8\xdb\x9b\x04H\xd2\x9b\x04\x10\xd1\x9b\x040\xd8\x9b\x04\xf8\xd3\x9b\x040\xde\x9b\x04(\xd4\x9b\x04 \xd6\x9b\x04\xe8\xd4\x9b\x04\x18\xd5\x9b\x04\xc0\xd8\x9b\x04 \xd0\x9b\x04H\xd5\x9b\x04h\xd3\x9b\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9408
(dp9409
g9131
(dp9410
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9396
sg9134
(lp9411
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9412
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9413
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9414
g1
(g9147
g9116
(dp9415
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9416
ag1
(g9147
g9116
(dp9417
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9418
ag1
(g9147
g9116
(dp9419
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9420
ag1
(g9147
g9116
(dp9421
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9422
ag1
(g9147
g9116
(dp9423
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9424
ag1
(g9147
g9116
(dp9425
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9426
ag1
(g9147
g9116
(dp9427
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9428
ag1
(g9147
g9116
(dp9429
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9430
ag1
(g9147
g9116
(dp9431
g907
g1035
sg895
g1031
sg909
g1042
sg904
g1039
stRp9432
ag1
(g9147
g9116
(dp9433
g907
g900
sg895
g1048
sg909
g910
sg904
g1055
stRp9434
ag1
(g9147
g9116
(dp9435
g907
g1073
sg895
g1063
sg909
g1067
sg904
g1071
stRp9436
ag1
(g9147
g9116
(dp9437
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9438
ag1
(g9147
g9116
(dp9439
g907
g977
sg895
g1097
sg909
g971
sg904
g1104
stRp9440
ag1
(g9147
g9116
(dp9441
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9442
ag1
(g9147
g9116
(dp9443
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9444
ag1
(g9147
g9116
(dp9445
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9446
ag1
(g9147
g9116
(dp9447
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9448
ag1
(g9147
g9116
(dp9449
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9450
ag1
(g9147
g9116
(dp9451
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9452
ag1
(g9147
g9116
(dp9453
g907
g920
sg895
g1206
sg909
g927
sg904
g1213
stRp9454
ag1
(g9147
g9116
(dp9455
g907
g1073
sg895
g1221
sg909
g1067
sg904
g1228
stRp9456
ag1
(g9147
g9116
(dp9457
g907
g1240
sg895
g1236
sg909
g1247
sg904
g1244
stRp9458
ag1
(g9147
g9116
(dp9459
g907
g1263
sg895
g1253
sg909
g1257
sg904
g1261
stRp9460
ag1
(g9147
g9116
(dp9461
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9462
ag1
(g9147
g9116
(dp9463
g907
g1293
sg895
g1283
sg909
g1287
sg904
g1291
stRp9464
ag1
(g9147
g9116
(dp9465
g907
g1146
sg895
g1300
sg909
g1153
sg904
g1307
stRp9466
ag1
(g9147
g9116
(dp9467
g907
g937
sg895
g1315
sg909
g944
sg904
g1322
stRp9468
ag1
(g9147
g9116
(dp9469
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9470
ag1
(g9147
g9116
(dp9471
g907
g977
sg895
g1097
sg909
g971
sg904
g1104
stRp9472
ag1
(g9147
g9116
(dp9473
g907
g1240
sg895
g1356
sg909
g1247
sg904
g1363
stRp9474
ag1
(g9147
g9116
(dp9475
g907
g1375
sg895
g1371
sg909
g1382
sg904
g1379
stRp9476
ag1
(g9147
g9116
(dp9477
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9478
ag1
(g9147
g9116
(dp9479
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9480
ag1
(g9147
g9116
(dp9481
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9482
ag1
(g9147
g9116
(dp9483
g907
g1263
sg895
g1253
sg909
g1257
sg904
g1261
stRp9484
ag1
(g9147
g9116
(dp9485
g907
g1444
sg895
g1440
sg909
g1451
sg904
g1448
stRp9486
ag1
(g9147
g9116
(dp9487
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9488
ag1
(g9147
g9116
(dp9489
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9490
ag1
(g9147
g9116
(dp9491
g907
g1444
sg895
g1483
sg909
g1451
sg904
g1490
stRp9492
ag1
(g9147
g9116
(dp9493
g907
g1240
sg895
g1236
sg909
g1247
sg904
g1244
stRp9494
ag1
(g9147
g9116
(dp9495
g907
g1035
sg895
g1511
sg909
g1042
sg904
g1518
stRp9496
ag1
(g9147
g9116
(dp9497
g907
g900
sg895
g1048
sg909
g910
sg904
g1055
stRp9498
ag1
(g9147
g9116
(dp9499
g907
g937
sg895
g1315
sg909
g944
sg904
g1322
stRp9500
ag1
(g9147
g9116
(dp9501
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9502
ag1
(g9147
g9116
(dp9503
g907
g1084
sg895
g1569
sg909
g1091
sg904
g1576
stRp9504
ag1
(g9147
g9116
(dp9505
g907
g1035
sg895
g1031
sg909
g1042
sg904
g1039
stRp9506
ag1
(g9147
g9116
(dp9507
g907
g1073
sg895
g1063
sg909
g1067
sg904
g1071
stRp9508
ag1
(g9147
g9116
(dp9509
g907
g1193
sg895
g1610
sg909
g1200
sg904
g1617
stRp9510
ag1
(g9147
g9116
(dp9511
g907
g1293
sg895
g1625
sg909
g1287
sg904
g1632
stRp9512
ag1
(g9147
g9116
(dp9513
g907
g1116
sg895
g1640
sg909
g1123
sg904
g1647
stRp9514
ag1
(g9147
g9116
(dp9515
g907
g920
sg895
g1206
sg909
g927
sg904
g1213
stRp9516
ag1
(g9147
g9116
(dp9517
g907
g1176
sg895
g1668
sg909
g1183
sg904
g1675
stRp9518
ag1
(g9147
g9116
(dp9519
g907
g1444
sg895
g1483
sg909
g1451
sg904
g1490
stRp9520
ag1
(g9147
g9116
(dp9521
g907
g900
sg895
g1048
sg909
g910
sg904
g1055
stRp9522
ag1
(g9147
g9116
(dp9523
g907
g1293
sg895
g1283
sg909
g1287
sg904
g1291
stRp9524
ag1
(g9147
g9116
(dp9525
g907
g1176
sg895
g1668
sg909
g1183
sg904
g1675
stRp9526
ag1
(g9147
g9116
(dp9527
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9528
ag1
(g9147
g9116
(dp9529
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9530
ag1
(g9147
g9116
(dp9531
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9532
ag1
(g9147
g9116
(dp9533
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9534
ag1
(g9147
g9116
(dp9535
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9536
ag1
(g9147
g9116
(dp9537
g907
g1018
sg895
g1800
sg909
g1025
sg904
g1807
stRp9538
ag1
(g9147
g9116
(dp9539
g907
g937
sg895
g1315
sg909
g944
sg904
g1322
stRp9540
ag1
(g9147
g9116
(dp9541
g907
g977
sg895
g1097
sg909
g971
sg904
g1104
stRp9542
ag1
(g9147
g9116
(dp9543
g907
g1556
sg895
g1841
sg909
g1563
sg904
g1848
stRp9544
ag1
(g9147
g9116
(dp9545
g907
g1035
sg895
g1031
sg909
g1042
sg904
g1039
stRp9546
ag1
(g9147
g9116
(dp9547
g907
g1444
sg895
g1483
sg909
g1451
sg904
g1490
stRp9548
ag1
(g9147
g9116
(dp9549
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9550
ag1
(g9147
g9116
(dp9551
g907
g1263
sg895
g1895
sg909
g1257
sg904
g1902
stRp9552
ag1
(g9147
g9116
(dp9553
g907
g1146
sg895
g1300
sg909
g1153
sg904
g1307
stRp9554
ag1
(g9147
g9116
(dp9555
g907
g1018
sg895
g1800
sg909
g1025
sg904
g1807
stRp9556
ag1
(g9147
g9116
(dp9557
g907
g1263
sg895
g1253
sg909
g1257
sg904
g1261
stRp9558
ag1
(g9147
g9116
(dp9559
g907
g1240
sg895
g1356
sg909
g1247
sg904
g1363
stRp9560
ag1
(g9147
g9116
(dp9561
g907
g1375
sg895
g1371
sg909
g1382
sg904
g1379
stRp9562
ag1
(g9147
g9116
(dp9563
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9564
ag1
(g9147
g9116
(dp9565
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9566
ag1
(g9147
g9116
(dp9567
g907
g920
sg895
g1206
sg909
g927
sg904
g1213
stRp9568
ag1
(g9147
g9116
(dp9569
g907
g1556
sg895
g1841
sg909
g1563
sg904
g1848
stRp9570
ag1
(g9147
g9116
(dp9571
g907
g1001
sg895
g2027
sg909
g1008
sg904
g2034
stRp9572
ag1
(g9147
g9116
(dp9573
g907
g1293
sg895
g1283
sg909
g1287
sg904
g1291
stRp9574
ag1
(g9147
g9116
(dp9575
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9576
ag1
(g9147
g9116
(dp9577
g907
g1001
sg895
g2027
sg909
g1008
sg904
g2034
stRp9578
ag1
(g9147
g9116
(dp9579
g907
g1073
sg895
g1221
sg909
g1067
sg904
g1228
stRp9580
ag1
(g9147
g9116
(dp9581
g907
g1001
sg895
g2027
sg909
g1008
sg904
g2034
stRp9582
ag1
(g9147
g9116
(dp9583
g907
g1193
sg895
g1610
sg909
g1200
sg904
g1617
stRp9584
ag1
(g9147
g9116
(dp9585
g907
g1035
sg895
g1511
sg909
g1042
sg904
g1518
stRp9586
ag1
(g9147
g9116
(dp9587
g907
g977
sg895
g1097
sg909
g971
sg904
g1104
stRp9588
ag1
(g9147
g9116
(dp9589
g907
g1263
sg895
g1253
sg909
g1257
sg904
g1261
stRp9590
ag1
(g9147
g9116
(dp9591
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9592
ag1
(g9147
g9116
(dp9593
g907
g1146
sg895
g1300
sg909
g1153
sg904
g1307
stRp9594
ag1
(g9147
g9116
(dp9595
g907
g1176
sg895
g1668
sg909
g1183
sg904
g1675
stRp9596
ag1
(g9147
g9116
(dp9597
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9598
ag1
(g9147
g9116
(dp9599
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9600
ag1
(g9147
g9116
(dp9601
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9602
ag1
(g9147
g9116
(dp9603
g907
g954
sg895
g950
sg909
g961
sg904
g958
stRp9604
ag1
(g9147
g9116
(dp9605
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9606
ag1
(g9147
g9116
(dp9607
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9608
ag1
(g9147
g9116
(dp9609
g907
g1176
sg895
g1668
sg909
g1183
sg904
g1675
stRp9610
ag1
(g9147
g9116
(dp9611
g907
g1240
sg895
g1236
sg909
g1247
sg904
g1244
stRp9612
ag1
(g9147
g9116
(dp9613
g907
g1073
sg895
g1221
sg909
g1067
sg904
g1228
stRp9614
ag1
(g9147
g9116
(dp9615
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9616
ag1
(g9147
g9116
(dp9617
g907
g1240
sg895
g1356
sg909
g1247
sg904
g1363
stRp9618
ag1
(g9147
g9116
(dp9619
g907
g1035
sg895
g1511
sg909
g1042
sg904
g1518
stRp9620
ag1
(g9147
g9116
(dp9621
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9622
ag1
(g9147
g9116
(dp9623
g907
g1240
sg895
g1356
sg909
g1247
sg904
g1363
stRp9624
ag1
(g9147
g9116
(dp9625
g907
g900
sg895
g896
sg909
g910
sg904
g905
stRp9626
ag1
(g9147
g9116
(dp9627
g907
g1035
sg895
g1031
sg909
g1042
sg904
g1039
stRp9628
ag1
(g9147
g9116
(dp9629
g907
g937
sg895
g1315
sg909
g944
sg904
g1322
stRp9630
ag1
(g9147
g9116
(dp9631
g907
g1444
sg895
g1483
sg909
g1451
sg904
g1490
stRp9632
ag1
(g9147
g9116
(dp9633
g907
g1293
sg895
g1625
sg909
g1287
sg904
g1632
stRp9634
ag1
(g9147
g9116
(dp9635
g907
g1018
sg895
g1800
sg909
g1025
sg904
g1807
stRp9636
ag1
(g9147
g9116
(dp9637
g907
g900
sg895
g1048
sg909
g910
sg904
g1055
stRp9638
ag1
(g9147
g9116
(dp9639
g907
g1240
sg895
g1236
sg909
g1247
sg904
g1244
stRp9640
ag1
(g9147
g9116
(dp9641
g907
g937
sg895
g1315
sg909
g944
sg904
g1322
stRp9642
ag1
(g9147
g9116
(dp9643
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9644
ag1
(g9147
g9116
(dp9645
g907
g1035
sg895
g1031
sg909
g1042
sg904
g1039
stRp9646
ag1
(g9147
g9116
(dp9647
g907
g1084
sg895
g1080
sg909
g1091
sg904
g1088
stRp9648
ag1
(g9147
g9116
(dp9649
g907
g1263
sg895
g1895
sg909
g1257
sg904
g1902
stRp9650
ag1
(g9147
g9116
(dp9651
g907
g1084
sg895
g1569
sg909
g1091
sg904
g1576
stRp9652
ag1
(g9147
g9116
(dp9653
g907
g1556
sg895
g1841
sg909
g1563
sg904
g1848
stRp9654
ag1
(g9147
g9116
(dp9655
g907
g1073
sg895
g1221
sg909
g1067
sg904
g1228
stRp9656
ag1
(g9147
g9116
(dp9657
g907
g1293
sg895
g1283
sg909
g1287
sg904
g1291
stRp9658
ag1
(g9147
g9116
(dp9659
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9660
ag1
(g9147
g9116
(dp9661
g907
g1263
sg895
g1895
sg909
g1257
sg904
g1902
stRp9662
ag1
(g9147
g9116
(dp9663
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9664
ag1
(g9147
g9116
(dp9665
g907
g1444
sg895
g1440
sg909
g1451
sg904
g1448
stRp9666
ag1
(g9147
g9116
(dp9667
g907
g1116
sg895
g1640
sg909
g1123
sg904
g1647
stRp9668
ag1
(g9147
g9116
(dp9669
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9670
ag1
(g9147
g9116
(dp9671
g907
g1293
sg895
g1283
sg909
g1287
sg904
g1291
stRp9672
ag1
(g9147
g9116
(dp9673
g907
g1240
sg895
g1356
sg909
g1247
sg904
g1363
stRp9674
ag1
(g9147
g9116
(dp9675
g907
g954
sg895
g2705
sg909
g961
sg904
g2712
stRp9676
ag1
(g9147
g9116
(dp9677
g907
g1444
sg895
g1483
sg909
g1451
sg904
g1490
stRp9678
ag1
(g9147
g9116
(dp9679
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9680
ag1
(g9147
g9116
(dp9681
g907
g1556
sg895
g1841
sg909
g1563
sg904
g1848
stRp9682
ag1
(g9147
g9116
(dp9683
g907
g1146
sg895
g1300
sg909
g1153
sg904
g1307
stRp9684
ag1
(g9147
g9116
(dp9685
g907
g1375
sg895
g1371
sg909
g1382
sg904
g1379
stRp9686
ag1
(g9147
g9116
(dp9687
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9688
ag1
(g9147
g9116
(dp9689
g907
g954
sg895
g2705
sg909
g961
sg904
g2712
stRp9690
ag1
(g9147
g9116
(dp9691
g907
g1084
sg895
g1569
sg909
g1091
sg904
g1576
stRp9692
ag1
(g9147
g9116
(dp9693
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9694
ag1
(g9147
g9116
(dp9695
g907
g1035
sg895
g1511
sg909
g1042
sg904
g1518
stRp9696
ag1
(g9147
g9116
(dp9697
g907
g1018
sg895
g1800
sg909
g1025
sg904
g1807
stRp9698
ag1
(g9147
g9116
(dp9699
g907
g1375
sg895
g2863
sg909
g1382
sg904
g2870
stRp9700
ag1
(g9147
g9116
(dp9701
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9702
ag1
(g9147
g9116
(dp9703
g907
g900
sg895
g1048
sg909
g910
sg904
g1055
stRp9704
ag1
(g9147
g9116
(dp9705
g907
g1263
sg895
g1895
sg909
g1257
sg904
g1902
stRp9706
ag1
(g9147
g9116
(dp9707
g907
g1444
sg895
g1440
sg909
g1451
sg904
g1448
stRp9708
ag1
(g9147
g9116
(dp9709
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9710
ag1
(g9147
g9116
(dp9711
g907
g920
sg895
g1206
sg909
g927
sg904
g1213
stRp9712
ag1
(g9147
g9116
(dp9713
g907
g1018
sg895
g1800
sg909
g1025
sg904
g1807
stRp9714
ag1
(g9147
g9116
(dp9715
g907
g954
sg895
g2705
sg909
g961
sg904
g2712
stRp9716
ag1
(g9147
g9116
(dp9717
g907
g1073
sg895
g1063
sg909
g1067
sg904
g1071
stRp9718
ag1
(g9147
g9116
(dp9719
g907
g977
sg895
g967
sg909
g971
sg904
g975
stRp9720
ag1
(g9147
g9116
(dp9721
g907
g1375
sg895
g2863
sg909
g1382
sg904
g2870
stRp9722
ag1
(g9147
g9116
(dp9723
g907
g1293
sg895
g1625
sg909
g1287
sg904
g1632
stRp9724
ag1
(g9147
g9116
(dp9725
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9726
ag1
(g9147
g9116
(dp9727
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9728
ag1
(g9147
g9116
(dp9729
g907
g1073
sg895
g1221
sg909
g1067
sg904
g1228
stRp9730
ag1
(g9147
g9116
(dp9731
g907
g1375
sg895
g1371
sg909
g1382
sg904
g1379
stRp9732
ag1
(g9147
g9116
(dp9733
g907
g1240
sg895
g1236
sg909
g1247
sg904
g1244
stRp9734
ag1
(g9147
g9116
(dp9735
g907
g1263
sg895
g1253
sg909
g1257
sg904
g1261
stRp9736
ag1
(g9147
g9116
(dp9737
g907
g1035
sg895
g1511
sg909
g1042
sg904
g1518
stRp9738
ag1
(g9147
g9116
(dp9739
g907
g1444
sg895
g1440
sg909
g1451
sg904
g1448
stRp9740
ag1
(g9147
g9116
(dp9741
g907
g1263
sg895
g1895
sg909
g1257
sg904
g1902
stRp9742
ag1
(g9147
g9116
(dp9743
g907
g1001
sg895
g2027
sg909
g1008
sg904
g2034
stRp9744
ag1
(g9147
g9116
(dp9745
g907
g1146
sg895
g1142
sg909
g1153
sg904
g1150
stRp9746
ag1
(g9147
g9116
(dp9747
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9748
ag1
(g9147
g9116
(dp9749
g907
g1073
sg895
g1063
sg909
g1067
sg904
g1071
stRp9750
ag1
(g9147
g9116
(dp9751
g907
g1116
sg895
g1640
sg909
g1123
sg904
g1647
stRp9752
ag1
(g9147
g9116
(dp9753
g907
g1146
sg895
g1300
sg909
g1153
sg904
g1307
stRp9754
ag1
(g9147
g9116
(dp9755
g907
g1375
sg895
g2863
sg909
g1382
sg904
g2870
stRp9756
ag1
(g9147
g9116
(dp9757
g907
g1116
sg895
g1640
sg909
g1123
sg904
g1647
stRp9758
ag1
(g9147
g9116
(dp9759
g907
g1193
sg895
g1610
sg909
g1200
sg904
g1617
stRp9760
ag1
(g9147
g9116
(dp9761
g907
g1176
sg895
g1172
sg909
g1183
sg904
g1180
stRp9762
ag1
(g9147
g9116
(dp9763
g907
g1375
sg895
g2863
sg909
g1382
sg904
g2870
stRp9764
ag1
(g9147
g9116
(dp9765
g907
g1073
sg895
g1063
sg909
g1067
sg904
g1071
stRp9766
ag1
(g9147
g9116
(dp9767
g907
g1001
sg895
g997
sg909
g1008
sg904
g1005
stRp9768
ag1
(g9147
g9116
(dp9769
g907
g1084
sg895
g1569
sg909
g1091
sg904
g1576
stRp9770
ag1
(g9147
g9116
(dp9771
g907
g1375
sg895
g2863
sg909
g1382
sg904
g2870
stRp9772
ag1
(g9147
g9116
(dp9773
g907
g954
sg895
g2705
sg909
g961
sg904
g2712
stRp9774
ag1
(g9147
g9116
(dp9775
g907
g1018
sg895
g1014
sg909
g1025
sg904
g1022
stRp9776
ag1
(g9147
g9116
(dp9777
g907
g1375
sg895
g1371
sg909
g1382
sg904
g1379
stRp9778
ag1
(g9147
g9116
(dp9779
g907
g1116
sg895
g1112
sg909
g1123
sg904
g1120
stRp9780
ag1
(g9147
g9116
(dp9781
g907
g937
sg895
g933
sg909
g944
sg904
g941
stRp9782
ag1
(g9147
g9116
(dp9783
g907
g1293
sg895
g1625
sg909
g1287
sg904
g1632
stRp9784
ag1
(g9147
g9116
(dp9785
g907
g1556
sg895
g1841
sg909
g1563
sg904
g1848
stRp9786
ag1
(g9147
g9116
(dp9787
g907
g1193
sg895
g1610
sg909
g1200
sg904
g1617
stRp9788
ag1
(g9147
g9116
(dp9789
g907
g1556
sg895
g1552
sg909
g1563
sg904
g1560
stRp9790
ag1
(g9147
g9116
(dp9791
g907
g977
sg895
g1097
sg909
g971
sg904
g1104
stRp9792
ag1
(g9147
g9116
(dp9793
g907
g1444
sg895
g1440
sg909
g1451
sg904
g1448
stRp9794
ag1
(g9147
g9116
(dp9795
g907
g1193
sg895
g1610
sg909
g1200
sg904
g1617
stRp9796
ag1
(g9147
g9116
(dp9797
g907
g1293
sg895
g1625
sg909
g1287
sg904
g1632
stRp9798
ag1
(g9147
g9116
(dp9799
g907
g1084
sg895
g1569
sg909
g1091
sg904
g1576
stRp9800
ag1
(g9147
g9116
(dp9801
g907
g920
sg895
g1206
sg909
g927
sg904
g1213
stRp9802
ag1
(g9147
g9116
(dp9803
g907
g1001
sg895
g2027
sg909
g1008
sg904
g2034
stRp9804
ag1
(g9147
g9116
(dp9805
g907
g1193
sg895
g1189
sg909
g1200
sg904
g1197
stRp9806
ag1
(g9147
g9116
(dp9807
g907
g920
sg895
g916
sg909
g927
sg904
g924
stRp9808
ag1
(g9147
g9116
(dp9809
g907
g1116
sg895
g1640
sg909
g1123
sg904
g1647
stRp9810
ag1
(g9147
g9116
(dp9811
g907
g954
sg895
g2705
sg909
g961
sg904
g2712
stRp9812
ag1
(g9147
g9116
(dp9813
g907
g1176
sg895
g1668
sg909
g1183
sg904
g1675
stRp9814
asg9228
Nsg9229
g3610
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp9815
(dp9816
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p9817
sg9108
(lp9818
sg9110
I78430544
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp9819
g33
g9119
(g9120
g93
g9121
S'b'
tRp9820
(I1
(I200
I1
tg9245
I00
S'@\xa4\x15\x0cH_\x15\x0cp\xa4\x15\x0c\x90\xa5\x15\x0c\xa0\xda\x15\x0cH_\x15\x0c\x00\xa5\x15\x0c\x00\xfap\x0c\xf8^\x15\x0c\xa0\xda\x15\x0c@]\x15\x0c\xa8^\x15\x0c\x00\xfap\x0c\x80^\x15\x0cH\xdb\x15\x0c\xd8\xda\x15\x0cp\xa4\x15\x0c\xd8\xda\x15\x0c\xb8\xdb\x15\x0c \xf7p\x0c\xa8^\x15\x0cX^\x15\x0c@\xa4\x15\x0c\xd8\xda\x15\x0c\x80^\x15\x0c0^\x15\x0c@]\x15\x0c\xe0\xf9p\x0c`\xf7p\x0c\xf8^\x15\x0c\x10\xdb\x15\x0cH_\x15\x0c \xf7p\x0c\xf8^\x15\x0c\xf0\\\x15\x0c\xa0\xa4\x15\x0cX^\x15\x0c\xb8\xdb\x15\x0c \xa6\x15\x0c\xe0\xf9p\x0c\xa0\xa4\x15\x0c _\x15\x0c\xa8^\x15\x0c\xd8\xda\x15\x0c \xf7p\x0c\xe0\xf9p\x0c\xa0\xa4\x15\x0c\xc0\xa5\x15\x0c \xf7p\x0c\xb8\xdb\x15\x0c\x08^\x15\x0c\xd0\xa4\x15\x0cH_\x15\x0c\x08^\x15\x0c\x10\xdb\x15\x0c\x00\xfap\x0c\x10\xdb\x15\x0c\x00\xfap\x0c\xe0\xf9p\x0cX^\x15\x0c\x00\xa5\x15\x0cH\xdb\x15\x0c\xf0\xa5\x15\x0c \xa6\x15\x0cX^\x15\x0c0^\x15\x0c\xd0^\x15\x0c\x10\xdb\x15\x0c\xa0\xf5p\x0c\xd0^\x15\x0c@\xa4\x15\x0c \xf7p\x0c\x90]\x15\x0c\x80^\x15\x0c\x00\xfap\x0c\xa0\xa4\x15\x0cp\xa4\x15\x0c _\x15\x0cp\xa4\x15\x0c\xd8\xda\x15\x0c\x00\xfap\x0c\xa8^\x15\x0c\x08^\x15\x0c`\xf7p\x0c\xf8^\x15\x0c\xd0\xa4\x15\x0c`\xf7p\x0cP\xa6\x15\x0c\xa0\xda\x15\x0c\x10\xdb\x15\x0c\xf0\xdb\x15\x0c\x08^\x15\x0cp\xa4\x15\x0c _\x15\x0c\xe0\xf9p\x0c\xb8]\x15\x0c\xd0\xa4\x15\x0c\xd8\xda\x15\x0cH_\x15\x0c\xd8\xda\x15\x0cX^\x15\x0c _\x15\x0c0^\x15\x0c\xd0\xa4\x15\x0c _\x15\x0c\xa0\xa4\x15\x0c0^\x15\x0c\xf0\xa5\x15\x0c@\xa4\x15\x0c\x08^\x15\x0cH_\x15\x0c\xa0\xda\x15\x0c`\xf5p\x0c\x10\xdb\x15\x0c\x08^\x15\x0c\x80^\x15\x0c\xe0\xf9p\x0c@\xa4\x15\x0c\xf8^\x15\x0c\xf0\xdb\x15\x0c\xd0\xa4\x15\x0cH_\x15\x0cp\xa4\x15\x0c\x80\xdb\x15\x0c\x18]\x15\x0c@]\x15\x0c`\xa5\x15\x0c\xb8\xdb\x15\x0cX^\x15\x0c\xf0\xa5\x15\x0cH_\x15\x0c\xf8^\x15\x0c\x08^\x15\x0c \xf7p\x0c\xd8\xda\x15\x0c\xf8^\x15\x0c\xc0\xa5\x15\x0c\x00\xfap\x0c \xa6\x15\x0c\xa0\xda\x15\x0cX^\x15\x0c\xf0\\\x15\x0c\xa8^\x15\x0c\x90]\x15\x0c@\xa4\x15\x0c\x80^\x15\x0c\xf8^\x15\x0c\xd0\xa4\x15\x0c\xd0^\x15\x0c\x80^\x15\x0c\xa0\xa4\x15\x0c\xd0^\x15\x0c\xd0\xa4\x15\x0c\xf0\xdb\x15\x0cH_\x15\x0c\x80^\x15\x0c\xa8^\x15\x0c\xd0^\x15\x0c \xf7p\x0c\xa0\xda\x15\x0cp\xa4\x15\x0c\xd0\xa4\x15\x0c@\xa4\x15\x0cp\xa4\x15\x0c\xd8\xda\x15\x0c@\xa4\x15\x0cX^\x15\x0c\xf0\\\x15\x0c\xa8^\x15\x0c\x08^\x15\x0c`\xf7p\x0c _\x15\x0c`\xf7p\x0c\xa0\xda\x15\x0c\xf8^\x15\x0c0^\x15\x0c\xa0\xf5p\x0c0^\x15\x0c`\xa5\x15\x0c`\xf7p\x0c\xa0\xa4\x15\x0c\xa0\xda\x15\x0cX^\x15\x0c\xa0\xda\x15\x0c\xc0\xa5\x15\x0c\x10\xdb\x15\x0c _\x15\x0c\xd0\xa4\x15\x0c _\x15\x0c`\xf7p\x0c`\xf5p\x0c0^\x15\x0c\xf8^\x15\x0c _\x15\x0cH_\x15\x0c\xa8^\x15\x0c\xd0^\x15\x0c \xf7p\x0c\x00\xfap\x0c\xd0^\x15\x0c'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp9821
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp9822
(I1
(I200
I1
tg9245
I00
S' g\xba\x0c\xa0g\xba\x0c\xa0f\xba\x0c\xc0e\xba\x0c\xe0f\xba\x0c\xc0g\xba\x0c\x80g\xba\x0c\xc0f\xba\x0c\x00g\xba\x0c h\xba\x0c\xe0g\xba\x0c\x00i\xba\x0c i\xba\x0c@h\xba\x0c`i\xba\x0c\xa0h\xba\x0c\xe0d\xba\x0c\x80f\xba\x0c\xe0i\xba\x0c`h\xba\x0c@f\xba\x0c\xe0h\xba\x0c\xc0i\xba\x0c j\xba\x0c\xa0i\xba\x0c\x00e\xba\x0c\x00f\xba\x0c`f\xba\x0c\x80i\xba\x0c\xa0j\xba\x0c@i\xba\x0c\xc0h\xba\x0c\x80h\xba\x0c\xe0e\xba\x0c f\xba\x0c\xc0j\xba\x0c\x80j\xba\x0c@k\xba\x0c`j\xba\x0c l\xba\x0c\xe0k\xba\x0c\xe0c\xba\x0c\x80l\xba\x0c@j\xba\x0c\x00j\xba\x0c\xe0l\xba\x0c\x00l\xba\x0c@m\xba\x0c\x00k\xba\x0c k\xba\x0c`k\xba\x0c\xa0k\xba\x0c\x00m\xba\x0c\xa0l\xba\x0c`g\xba\x0c@n\xba\x0c\xc0m\xba\x0c`n\xba\x0c\xe0j\xba\x0c\x80k\xba\x0c@g\xba\x0c\x00o\xba\x0c`m\xba\x0c\x00n\xba\x0c\x80m\xba\x0c\xa0n\xba\x0c`l\xba\x0c\xa0o\xba\x0c\xc0l\xba\x0c m\xba\x0c\xe0m\xba\x0c\xc0n\xba\x0c\xe0o\xba\x0c`o\xba\x0c n\xba\x0c\x80n\xba\x0c o\xba\x0c\xa0m\xba\x0c\xe0n\xba\x0c@o\xba\x0c\xc0k\xba\x0c@\xd9\xb3\x04@l\xba\x0c\x80\xf5p\x0c \x00f\x1a@\x02f\x1a\x80\x00f\x1a\x80\x01f\x1a \x01f\x1a@\x00f\x1a\xe0\x01f\x1a@\x01f\x1a\xc0\x01f\x1a\x80o\xba\x0c\x00\x01f\x1a`\x02f\x1a\xc0\x02f\x1a \x02f\x1a`\x03f\x1a\xa0\x02f\x1a\xa0\x03f\x1a\xe0\x02f\x1a\xa0\x01f\x1a@\x04f\x1a\x00\x04f\x1a`\x01f\x1a\x80\x03f\x1a\x00\x03f\x1a\xc0\x03f\x1a\xa0\x00f\x1a`\x00f\x1a@\x05f\x1a\xe0\x03f\x1a\x00\x05f\x1a\x00\x02f\x1a\xc0\x05f\x1a\xc0\x00f\x1a\x00\x06f\x1a \x06f\x1a@\x06f\x1a \x05f\x1a\x80\x06f\x1a\xc0\x04f\x1a`\x05f\x1a\xa0\x05f\x1a\x00\x07f\x1a\xe0\x04f\x1a`\x04f\x1a\xa0\x06f\x1a\xa0\x07f\x1a \x07f\x1a\x80\x07f\x1a`\x07f\x1a\x80\x04f\x1a\xe0\x07f\x1a`\x08f\x1a\xa0\x04f\x1a\xe0\x06f\x1a\xe0\x05f\x1a \x03f\x1a\x80\x02f\x1a\xe0\x00f\x1a@\x07f\x1a\xe0\x08f\x1a\xc0\x08f\x1a\xa0\tf\x1a@\x08f\x1a`\tf\x1a\xe0\tf\x1a\x80\tf\x1a\xc0\x06f\x1a`\x06f\x1a\xc0\x07f\x1a\x80\nf\x1a\x80\x05f\x1a\xc0\tf\x1a\x00\x08f\x1a\xe0\nf\x1a \x0bf\x1a\x00\tf\x1a\x80\x0bf\x1a\xc0\nf\x1a\xa0\x0bf\x1a@\x0bf\x1a\x80\x08f\x1a\xc0\x0bf\x1a \x0cf\x1a \x04f\x1a`\x0bf\x1a@\x03f\x1a@\tf\x1a\x00\x0bf\x1a@\nf\x1a\x00\x0cf\x1a@\rf\x1a \nf\x1a\x80\x0cf\x1a`\x0cf\x1a\xc0\rf\x1a@\x0cf\x1a\x00\rf\x1a \x08f\x1a\xe0\x0cf\x1a\xe0\x0bf\x1a\x80\x0ef\x1a \rf\x1a\xa0\rf\x1a`\nf\x1a@\x0ef\x1a\xc0\x0ef\x1a\xe0\x0ef\x1a\xe0\rf\x1a`\x0ef\x1a\xa0\x0cf\x1a@\x0ff\x1a\xa0\nf\x1a\x80\rf\x1a`\rf\x1a\xa0\x0ef\x1a`\x0ff\x1a'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp9823
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp9824
(I1
(I200
I1
tg9123
I00
S'9\x18b?)+D?\x8e\xaa*?\xc4\xdd]?\xe8\x10Q?\xacKD?\xc7\xed.?\x84\xff\x7f?\x17\xdc\x1d?\xe6\x85Y?n$"?;\xbd;?T\x81H?\x91\x05Q?_33?\x0e_&?\x05\xea.?\xc64b?\xcf\xde.?\xaa\xfb\x7f?\xbbdf?\xe9\nQ?)\x99Y?\xf2#"?\xa2 b?\x0e\xa7j?\xc9NU?3x7?\xa713?\xfe\x05/?\xacqw?<lw?!\xfd??V "?\xa6{H?\x96LD?U\xff??\x1dCD?T\xef.?\x8e\x1d"?]\xb9;?#\xe0]?\x9f,s?O\xed.?\xa9\xc6L?\x15\x87H?p\x19b?\x05\xd0L?\xac\xb6;?\xdc\x9c*?\x8bdf?} \x82?\x99\xc4]?\xfd\xd8L?}2s?\xe1sw?\xfd\xa4*?\x01s7?>\xf7??\xd4\x17@?\xa8C\xa4?\xfd\x93Y?\xb7\xfe??\xec\xf8??\xda\xb5;?\x83\x9eH?\xf6UU?\x15\xaaj?N`f?\x96UU?`w7?:\xb1Y?\xc6\xfc??^+s?\xcd\xff??L33?!\xbc;?\x05m\x15?\xda\xb7;?d?U?\xb2u7?\x85TU?\r\x85\x88?!\xf2.?\xaf\x1d"?\x01s7?g\x0cQ?1\xfc??u\x81H?\xb5mU?\xf063?\xb6\xa1j?\xc2\x99Y?\x0eUf?\xa8\xba\x9b?\x9f\x0e\x91?\xf2\xaa*?\xa8\xa5j?\xfa\x08b?\x9e\xdb]?4p7?flU?\xdd\xab\x8a?\xe1T\x95?\x9a\x00@?\xd3\xd5]?\x81\xc3L?es7?\x93<D?\xe2;D?5d7?[+3?7\xaaj?&\xba;?\x88\x85H?\xc1zw?\xd4\xa1*?\xee\xa9\x8a?^\x1b\x91?"c\x86?.\xed.?x\xf8P?G53?\xcc\xe9.?6UU?\xca\x9aY?\xe0\xfe\x9f?2\xe0]?\x90""?\x8e\x0cQ?\xedv7?\x8e\xa0j?\x08C$@\xf1C\x84?f\xefn?m\xa3H?\x9c\xb7;?\xd05s?\xb533?\x9e\x9e*?8\x1b"?\xb5\x8cw?z^&? \xaa*?h\xaa*?\xe2!b?%<D?.\xf5\x1d?\xae\xaaj?7\xd8]?\'q7?\xc9-3?\\s7?A\x8d7?\xb1\xd7.?\xb5o\x97?MV\x95?8\x1f\x82?\xa1\xacY?\xb2\tQ?RAD?"GD?\xd3HU?\x00\xb8;?\xfbDD?\t\xc0;?\x0eRU?=\xaa\x8a?^\xfd\x7f?\x0e\x00\xa0?\x7f\xcb\x8c?\xeae\x86?\x81\xba;?P\x9ej?\x0bl\x86?\xc7nw?I\x1e\x82?\xf6\x85H?\x89\x1d"?\xff\xcaL?\xb4"\xa2?DAD?\x80 \x82?\x82\tQ?\xae2\xb3?\xaa\x10Q?b\xa4j?g\x83H?\x03"\x82?\xe4\xff??{!\x82?<fU?\xbc\xfe??\xe3\x87H?\xbeV&?\x9e\xc9\x8c?G@\xa4?\xe6\x04@?\xd3\x98Y?\xf4\xd9]?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp9825
(I1
(I200
I1
tg9245
I00
S'P\xdc\x1a\x0c\xa0\xd4\x1a\x0c\x18\xeb\xe8\x04 \xec\xe8\x040\xe5\xe8\x04\xa8\xe2\xe8\x04\xd8\xeb\xe8\x04\x90\xe8\xe8\x04X\xe1\xe8\x040\xee\xe8\x040\xeb\xe8\x04X\xed\xe8\x04(\xea\xe8\x04\x88\xea\xe8\x04\xb8\xed\xe8\x04\xa8\xee\xe8\x04\xb0\xe9\xe8\x04\x00\xe2\xe8\x04\xb8\xea\xe8\x04\x10\xea\xe8\x04\xc8\xe3\xe8\x04\x08\xef\xe8\x048\xec\xe8\x048\xef\xe8\x04\x10\xed\xe8\x04\xb8\xe4\xe8\x04\x18\xe8\xe8\x04`\xe2\xe8\x04\x00\xeb\xe8\x04\x80\xef\xe8\x04\x18\xe2\xe8\x04\xd8\xee\xe8\x04X\xe7\xe8\x04\xd0\xe7\xe8\x04\xd0\xe1\xe8\x04h\xec\xe8\x04@\xe1\xe8\x04X\xea\xe8\x04H\xeb\xe8\x04\x98\xec\xe8\x04`\xe8\xe8\x04\xd8\xe2\xe8\x04\xc0\xeb\xe8\x04x\xee\xe8\x04\xd8\xe5\xe8\x04\x98\xe6\xe8\x04\x80\xe3\xe8\x04P\xe3\xe8\x04\x08\xe6\xe8\x04\xf8\xec\xe8\x04\xd0\xed\xe8\x04\xf0\xe8\xe8\x04p\xe4\xe8\x04\x18\xe5\xe8\x04\x00\xee\xe8\x04\xa8\xe8\xe8\x04\xc0\xe2\xe8\x04\x80\xec\xe8\x04\x00\xe5\xe8\x04\xf8\xe6\xe8\x04 \xe9\xe8\x04\x18\xee\xe8\x04p\xea\xe8\x04\x90\xe5\xe8\x04X\xe4\xe8\x04\x80\xe6\xe8\x04p\xe1\xe8\x04h\xe0\xe8\x04h\xe6\xe8\x04\xe0\xe3\xe8\x048\xe3\xe8\x04\xe0\xe0\xe8\x04\x98\xe3\xe8\x04\xd0\xe4\xe8\x048\xe9\xe8\x04(\xe7\xe8\x04P\xec\xe8\x04 \xe6\xe8\x04\xb0\xec\xe8\x04\x88\xe4\xe8\x04\x10\xe7\xe8\x04\x98\xe9\xe8\x04\xb8\xe1\xe8\x04\xb0\xe0\xe8\x04\x88\xe7\xe8\x04@\x87\x87\x03@\xf1c\x03\x08\xffc\x03\xc8f\xcc\x04\x88d\xcc\x04\xc0e\xcc\x04\x00\xde\x1a\x0c`\xde\x1a\x0ch\xd9\x1a\x0c\xc8\xd9\x1a\x0c \xdc\x1a\x0cP\xd6\x1a\x0c\x08\xd9\x1a\x0ch\xd0\x1a\x0c\xc8\xd3\x1a\x0c0\xdb\x1a\x0c(\xd7\x1a\x0c\xf8\xd3\x1a\x0c\x80\xdf\x1a\x0cp\xda\x1a\x0c\xd0\xdd\x1a\x0c\x98\xd9\x1a\x0c\xd0\xda\x1a\x0c\x80\xd6\x1a\x0c\x18\xdb\x1a\x0c\x08\xdf\x1a\x0c\x00\xd2\x1a\x0c`\xd8\x1a\x0cx\xd8\x1a\x0c\xd8\xd8\x1a\x0ch\xd6\x1a\x0c\x00\xd5\x1a\x0c8\xd6\x1a\x0c8\xd3\x1a\x0c\x08\xd3\x1a\x0c\xa8\xde\x1a\x0c\xb0\xdf\x1a\x0c\xa8\xdb\x1a\x0c\xa8\xd2\x1a\x0c\x80\xd0\x1a\x0c\x98\xff\x9c\x048\xf0\x9c\x04\x98\xf9\x9c\x04\x80\xf6\x9c\x04\x18\xfb\x9c\x04\x10\xf7\x9c\x04\xc8\xff\x9c\x04\xb8\xf4\x9c\x04\xa8\xfe\x9c\x04P\xf6\x9c\x04H\xf5\x9c\x04\xe0\xf9\x9c\x04\x98\xf0\x9c\x04\x80\xfc\x9c\x04H\xfb\x9c\x04x\xf5\x9c\x04\xd0\xfd\x9c\x04h\xfc\x9c\x04\x08\xff\x9c\x048\xf6\x9c\x04\xc0\xfb\x9c\x04\xb0\xf9\x9c\x04\xe8\xf7\x9c\x04\xc8\xf9\x9c\x04 \xf6\x9c\x04`\xf5\x9c\x04p\xfa\x9c\x040\xf2\x9c\x04`\xf8\x9c\x04P\xff\x9c\x04\xe8\xf4\x9c\x04(\xf7\x9c\x04\xd8\xf8\x9c\x04P\xf3\x9c\x04\xc8\xf6\x9c\x04@\xfa\x9c\x04\x98\xfc\x9c\x04\x80\xff\x9c\x04\xe0\xff\x9c\x04\xa0\xe1\xe8\x04\x98\xef\xe8\x04\xc8\xef\xe8\x04@\xe7\xe8\x04\xe8\xea\xe8\x04\xa0\xe7\xe8\x04\x90\xee\xe8\x04\x80\xe9\xe8\x04\xa8\xeb\xe8\x04`\xe5\xe8\x04\xb0\xe3\xe8\x04h\xef\xe8\x04\xf8\xe0\xe8\x04\xe0\xe6\xe8\x04x\xe8\xe8\x04\xe8\xe7\xe8\x04\x08\xec\xe8\x04\xe0\xef\xe8\x040\xe2\xe8\x04\xb0\xe6\xe8\x048\xe0\xe8\x04\x10\xe4\xe8\x04(\xe4\xe8\x04\xc8\xe6\xe8\x04P\xe9\xe8\x04x\xeb\xe8\x04@\xea\xe8\x040\xe8\xe8\x04\xf0\xee\xe8\x04\xc0\xee\xe8\x04\xf8\xe3\xe8\x04\x90\xeb\xe8\x04\xe0\xec\xe8\x04\xb8\xe7\xe8\x04\xb0\xef\xe8\x04(\xed\xe8\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp9826
(dp9827
g9131
(dp9828
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g9815
sg9134
(lp9829
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp9830
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp9831
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp9832
g1
(g9147
g9116
(dp9833
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9834
ag1
(g9147
g9116
(dp9835
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9836
ag1
(g9147
g9116
(dp9837
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp9838
ag1
(g9147
g9116
(dp9839
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9840
ag1
(g9147
g9116
(dp9841
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9842
ag1
(g9147
g9116
(dp9843
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp9844
ag1
(g9147
g9116
(dp9845
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9846
ag1
(g9147
g9116
(dp9847
g3645
g3752
sg3633
g3748
sg3647
g3759
sg3642
g3756
stRp9848
ag1
(g9147
g9116
(dp9849
g3645
g3769
sg3633
g3765
sg3647
g3776
sg3642
g3773
stRp9850
ag1
(g9147
g9116
(dp9851
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp9852
ag1
(g9147
g9116
(dp9853
g3645
g3805
sg3633
g3795
sg3647
g3799
sg3642
g3803
stRp9854
ag1
(g9147
g9116
(dp9855
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9856
ag1
(g9147
g9116
(dp9857
g3645
g3752
sg3633
g3748
sg3647
g3759
sg3642
g3756
stRp9858
ag1
(g9147
g9116
(dp9859
g3645
g3846
sg3633
g3842
sg3647
g3853
sg3642
g3850
stRp9860
ag1
(g9147
g9116
(dp9861
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9862
ag1
(g9147
g9116
(dp9863
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp9864
ag1
(g9147
g9116
(dp9865
g3645
g3675
sg3633
g3889
sg3647
g3682
sg3642
g3896
stRp9866
ag1
(g9147
g9116
(dp9867
g3645
g3876
sg3633
g3904
sg3647
g3883
sg3642
g3911
stRp9868
ag1
(g9147
g9116
(dp9869
g3645
g3929
sg3633
g3919
sg3647
g3923
sg3642
g3927
stRp9870
ag1
(g9147
g9116
(dp9871
g3645
g3940
sg3633
g3936
sg3647
g3947
sg3642
g3944
stRp9872
ag1
(g9147
g9116
(dp9873
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9874
ag1
(g9147
g9116
(dp9875
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp9876
ag1
(g9147
g9116
(dp9877
g3645
g3638
sg3633
g3983
sg3647
g3648
sg3642
g3990
stRp9878
ag1
(g9147
g9116
(dp9879
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp9880
ag1
(g9147
g9116
(dp9881
g3645
g3846
sg3633
g4011
sg3647
g3853
sg3642
g4018
stRp9882
ag1
(g9147
g9116
(dp9883
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp9884
ag1
(g9147
g9116
(dp9885
g3645
g3805
sg3633
g3795
sg3647
g3799
sg3642
g3803
stRp9886
ag1
(g9147
g9116
(dp9887
g3645
g3929
sg3633
g3919
sg3647
g3923
sg3642
g3927
stRp9888
ag1
(g9147
g9116
(dp9889
g3645
g4073
sg3633
g4069
sg3647
g4080
sg3642
g4077
stRp9890
ag1
(g9147
g9116
(dp9891
g3645
g3769
sg3633
g3765
sg3647
g3776
sg3642
g3773
stRp9892
ag1
(g9147
g9116
(dp9893
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp9894
ag1
(g9147
g9116
(dp9895
g3645
g3658
sg3633
g4116
sg3647
g3665
sg3642
g4123
stRp9896
ag1
(g9147
g9116
(dp9897
g3645
g3940
sg3633
g4131
sg3647
g3947
sg3642
g4138
stRp9898
ag1
(g9147
g9116
(dp9899
g3645
g3769
sg3633
g3765
sg3647
g3776
sg3642
g3773
stRp9900
ag1
(g9147
g9116
(dp9901
g3645
g4030
sg3633
g4159
sg3647
g4037
sg3642
g4166
stRp9902
ag1
(g9147
g9116
(dp9903
g3645
g4178
sg3633
g4174
sg3647
g4185
sg3642
g4182
stRp9904
ag1
(g9147
g9116
(dp9905
g3645
g3970
sg3633
g4191
sg3647
g3977
sg3642
g4198
stRp9906
ag1
(g9147
g9116
(dp9907
g3645
g3929
sg3633
g4206
sg3647
g3923
sg3642
g4213
stRp9908
ag1
(g9147
g9116
(dp9909
g3645
g4178
sg3633
g4221
sg3647
g4185
sg3642
g4228
stRp9910
ag1
(g9147
g9116
(dp9911
g3645
g3929
sg3633
g3919
sg3647
g3923
sg3642
g3927
stRp9912
ag1
(g9147
g9116
(dp9913
g3645
g4178
sg3633
g4221
sg3647
g4185
sg3642
g4228
stRp9914
ag1
(g9147
g9116
(dp9915
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9916
ag1
(g9147
g9116
(dp9917
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp9918
ag1
(g9147
g9116
(dp9919
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp9920
ag1
(g9147
g9116
(dp9921
g3645
g3940
sg3633
g3936
sg3647
g3947
sg3642
g3944
stRp9922
ag1
(g9147
g9116
(dp9923
g3645
g3929
sg3633
g4206
sg3647
g3923
sg3642
g4213
stRp9924
ag1
(g9147
g9116
(dp9925
g3645
g4178
sg3633
g4174
sg3647
g4185
sg3642
g4182
stRp9926
ag1
(g9147
g9116
(dp9927
g3645
g3846
sg3633
g3842
sg3647
g3853
sg3642
g3850
stRp9928
ag1
(g9147
g9116
(dp9929
g3645
g3940
sg3633
g4131
sg3647
g3947
sg3642
g4138
stRp9930
ag1
(g9147
g9116
(dp9931
g3645
g3929
sg3633
g4206
sg3647
g3923
sg3642
g4213
stRp9932
ag1
(g9147
g9116
(dp9933
g3645
g4383
sg3633
g4379
sg3647
g4390
sg3642
g4387
stRp9934
ag1
(g9147
g9116
(dp9935
g3645
g4400
sg3633
g4396
sg3647
g4407
sg3642
g4404
stRp9936
ag1
(g9147
g9116
(dp9937
g3645
g3658
sg3633
g4116
sg3647
g3665
sg3642
g4123
stRp9938
ag1
(g9147
g9116
(dp9939
g3645
g4383
sg3633
g4379
sg3647
g4390
sg3642
g4387
stRp9940
ag1
(g9147
g9116
(dp9941
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp9942
ag1
(g9147
g9116
(dp9943
g3645
g3752
sg3633
g3748
sg3647
g3759
sg3642
g3756
stRp9944
ag1
(g9147
g9116
(dp9945
g3645
g4103
sg3633
g4465
sg3647
g4110
sg3642
g4472
stRp9946
ag1
(g9147
g9116
(dp9947
g3645
g3752
sg3633
g3748
sg3647
g3759
sg3642
g3756
stRp9948
ag1
(g9147
g9116
(dp9949
g3645
g3929
sg3633
g3919
sg3647
g3923
sg3642
g3927
stRp9950
ag1
(g9147
g9116
(dp9951
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp9952
ag1
(g9147
g9116
(dp9953
g3645
g3638
sg3633
g3983
sg3647
g3648
sg3642
g3990
stRp9954
ag1
(g9147
g9116
(dp9955
g3645
g3816
sg3633
g4532
sg3647
g3823
sg3642
g4539
stRp9956
ag1
(g9147
g9116
(dp9957
g3645
g4103
sg3633
g4465
sg3647
g4110
sg3642
g4472
stRp9958
ag1
(g9147
g9116
(dp9959
g3645
g4178
sg3633
g4174
sg3647
g4185
sg3642
g4182
stRp9960
ag1
(g9147
g9116
(dp9961
g3645
g3970
sg3633
g4191
sg3647
g3977
sg3642
g4198
stRp9962
ag1
(g9147
g9116
(dp9963
g3645
g4030
sg3633
g4159
sg3647
g4037
sg3642
g4166
stRp9964
ag1
(g9147
g9116
(dp9965
g3645
g3805
sg3633
g3795
sg3647
g3799
sg3642
g3803
stRp9966
ag1
(g9147
g9116
(dp9967
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp9968
ag1
(g9147
g9116
(dp9969
g3645
g3940
sg3633
g4131
sg3647
g3947
sg3642
g4138
stRp9970
ag1
(g9147
g9116
(dp9971
g3645
g3805
sg3633
g4638
sg3647
g3799
sg3642
g4645
stRp9972
ag1
(g9147
g9116
(dp9973
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp9974
ag1
(g9147
g9116
(dp9975
g3645
g3940
sg3633
g3936
sg3647
g3947
sg3642
g3944
stRp9976
ag1
(g9147
g9116
(dp9977
g3645
g3752
sg3633
g4679
sg3647
g3759
sg3642
g4686
stRp9978
ag1
(g9147
g9116
(dp9979
g3645
g3846
sg3633
g4011
sg3647
g3853
sg3642
g4018
stRp9980
ag1
(g9147
g9116
(dp9981
g3645
g3752
sg3633
g4679
sg3647
g3759
sg3642
g4686
stRp9982
ag1
(g9147
g9116
(dp9983
g3645
g4178
sg3633
g4221
sg3647
g4185
sg3642
g4228
stRp9984
ag1
(g9147
g9116
(dp9985
g3645
g3675
sg3633
g3889
sg3647
g3682
sg3642
g3896
stRp9986
ag1
(g9147
g9116
(dp9987
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp9988
ag1
(g9147
g9116
(dp9989
g3645
g3675
sg3633
g3889
sg3647
g3682
sg3642
g3896
stRp9990
ag1
(g9147
g9116
(dp9991
g3645
g3876
sg3633
g3904
sg3647
g3883
sg3642
g3911
stRp9992
ag1
(g9147
g9116
(dp9993
g3645
g3752
sg3633
g4679
sg3647
g3759
sg3642
g4686
stRp9994
ag1
(g9147
g9116
(dp9995
g3645
g3816
sg3633
g4532
sg3647
g3823
sg3642
g4539
stRp9996
ag1
(g9147
g9116
(dp9997
g3645
g4383
sg3633
g4811
sg3647
g4390
sg3642
g4818
stRp9998
ag1
(g9147
g9116
(dp9999
g3645
g4073
sg3633
g4826
sg3647
g4080
sg3642
g4833
stRp10000
ag1
(g9147
g9116
(dp10001
g3645
g3769
sg3633
g3765
sg3647
g3776
sg3642
g3773
stRp10002
ag1
(g9147
g9116
(dp10003
g3645
g4400
sg3633
g4854
sg3647
g4407
sg3642
g4861
stRp10004
ag1
(g9147
g9116
(dp10005
g3645
g4073
sg3633
g4069
sg3647
g4080
sg3642
g4077
stRp10006
ag1
(g9147
g9116
(dp10007
g3645
g4400
sg3633
g4396
sg3647
g4407
sg3642
g4404
stRp10008
ag1
(g9147
g9116
(dp10009
g3645
g3709
sg3633
g4895
sg3647
g3716
sg3642
g4902
stRp10010
ag1
(g9147
g9116
(dp10011
g3645
g4103
sg3633
g4465
sg3647
g4110
sg3642
g4472
stRp10012
ag1
(g9147
g9116
(dp10013
g3645
g4073
sg3633
g4069
sg3647
g4080
sg3642
g4077
stRp10014
ag1
(g9147
g9116
(dp10015
g3645
g4383
sg3633
g4379
sg3647
g4390
sg3642
g4387
stRp10016
ag1
(g9147
g9116
(dp10017
g3645
g3675
sg3633
g3889
sg3647
g3682
sg3642
g3896
stRp10018
ag1
(g9147
g9116
(dp10019
g3645
g3698
sg3633
g4962
sg3647
g3692
sg3642
g4969
stRp10020
ag1
(g9147
g9116
(dp10021
g3645
g3929
sg3633
g4206
sg3647
g3923
sg3642
g4213
stRp10022
ag1
(g9147
g9116
(dp10023
g3645
g3709
sg3633
g4895
sg3647
g3716
sg3642
g4902
stRp10024
ag1
(g9147
g9116
(dp10025
g3645
g4400
sg3633
g4854
sg3647
g4407
sg3642
g4861
stRp10026
ag1
(g9147
g9116
(dp10027
g3645
g3876
sg3633
g3904
sg3647
g3883
sg3642
g3911
stRp10028
ag1
(g9147
g9116
(dp10029
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10030
ag1
(g9147
g9116
(dp10031
g3645
g3876
sg3633
g3904
sg3647
g3883
sg3642
g3911
stRp10032
ag1
(g9147
g9116
(dp10033
g3645
g3970
sg3633
g4191
sg3647
g3977
sg3642
g4198
stRp10034
ag1
(g9147
g9116
(dp10035
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10036
ag1
(g9147
g9116
(dp10037
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10038
ag1
(g9147
g9116
(dp10039
g3645
g4400
sg3633
g4396
sg3647
g4407
sg3642
g4404
stRp10040
ag1
(g9147
g9116
(dp10041
g3645
g3698
sg3633
g3688
sg3647
g3692
sg3642
g3696
stRp10042
ag1
(g9147
g9116
(dp10043
g3645
g4178
sg3633
g4221
sg3647
g4185
sg3642
g4228
stRp10044
ag1
(g9147
g9116
(dp10045
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10046
ag1
(g9147
g9116
(dp10047
g3645
g4103
sg3633
g4465
sg3647
g4110
sg3642
g4472
stRp10048
ag1
(g9147
g9116
(dp10049
g3645
g3638
sg3633
g3983
sg3647
g3648
sg3642
g3990
stRp10050
ag1
(g9147
g9116
(dp10051
g3645
g4383
sg3633
g4379
sg3647
g4390
sg3642
g4387
stRp10052
ag1
(g9147
g9116
(dp10053
g3645
g3658
sg3633
g4116
sg3647
g3665
sg3642
g4123
stRp10054
ag1
(g9147
g9116
(dp10055
g3645
g3709
sg3633
g4895
sg3647
g3716
sg3642
g4902
stRp10056
ag1
(g9147
g9116
(dp10057
g3645
g4383
sg3633
g4811
sg3647
g4390
sg3642
g4818
stRp10058
ag1
(g9147
g9116
(dp10059
g3645
g4103
sg3633
g4465
sg3647
g4110
sg3642
g4472
stRp10060
ag1
(g9147
g9116
(dp10061
g3645
g4383
sg3633
g4811
sg3647
g4390
sg3642
g4818
stRp10062
ag1
(g9147
g9116
(dp10063
g3645
g3846
sg3633
g3842
sg3647
g3853
sg3642
g3850
stRp10064
ag1
(g9147
g9116
(dp10065
g3645
g3929
sg3633
g3919
sg3647
g3923
sg3642
g3927
stRp10066
ag1
(g9147
g9116
(dp10067
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10068
ag1
(g9147
g9116
(dp10069
g3645
g3769
sg3633
g5289
sg3647
g3776
sg3642
g5296
stRp10070
ag1
(g9147
g9116
(dp10071
g3645
g4073
sg3633
g4069
sg3647
g4080
sg3642
g4077
stRp10072
ag1
(g9147
g9116
(dp10073
g3645
g4400
sg3633
g4854
sg3647
g4407
sg3642
g4861
stRp10074
ag1
(g9147
g9116
(dp10075
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10076
ag1
(g9147
g9116
(dp10077
g3645
g3675
sg3633
g3889
sg3647
g3682
sg3642
g3896
stRp10078
ag1
(g9147
g9116
(dp10079
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp10080
ag1
(g9147
g9116
(dp10081
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10082
ag1
(g9147
g9116
(dp10083
g3645
g3805
sg3633
g4638
sg3647
g3799
sg3642
g4645
stRp10084
ag1
(g9147
g9116
(dp10085
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10086
ag1
(g9147
g9116
(dp10087
g3645
g3929
sg3633
g4206
sg3647
g3923
sg3642
g4213
stRp10088
ag1
(g9147
g9116
(dp10089
g3645
g3970
sg3633
g4191
sg3647
g3977
sg3642
g4198
stRp10090
ag1
(g9147
g9116
(dp10091
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp10092
ag1
(g9147
g9116
(dp10093
g3645
g3658
sg3633
g3654
sg3647
g3665
sg3642
g3662
stRp10094
ag1
(g9147
g9116
(dp10095
g3645
g3769
sg3633
g5289
sg3647
g3776
sg3642
g5296
stRp10096
ag1
(g9147
g9116
(dp10097
g3645
g4383
sg3633
g4811
sg3647
g4390
sg3642
g4818
stRp10098
ag1
(g9147
g9116
(dp10099
g3645
g3940
sg3633
g3936
sg3647
g3947
sg3642
g3944
stRp10100
ag1
(g9147
g9116
(dp10101
g3645
g3876
sg3633
g3904
sg3647
g3883
sg3642
g3911
stRp10102
ag1
(g9147
g9116
(dp10103
g3645
g3769
sg3633
g5289
sg3647
g3776
sg3642
g5296
stRp10104
ag1
(g9147
g9116
(dp10105
g3645
g3846
sg3633
g3842
sg3647
g3853
sg3642
g3850
stRp10106
ag1
(g9147
g9116
(dp10107
g3645
g3752
sg3633
g4679
sg3647
g3759
sg3642
g4686
stRp10108
ag1
(g9147
g9116
(dp10109
g3645
g4178
sg3633
g4221
sg3647
g4185
sg3642
g4228
stRp10110
ag1
(g9147
g9116
(dp10111
g3645
g3709
sg3633
g4895
sg3647
g3716
sg3642
g4902
stRp10112
ag1
(g9147
g9116
(dp10113
g3645
g3970
sg3633
g4191
sg3647
g3977
sg3642
g4198
stRp10114
ag1
(g9147
g9116
(dp10115
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10116
ag1
(g9147
g9116
(dp10117
g3645
g3816
sg3633
g3812
sg3647
g3823
sg3642
g3820
stRp10118
ag1
(g9147
g9116
(dp10119
g3645
g3752
sg3633
g4679
sg3647
g3759
sg3642
g4686
stRp10120
ag1
(g9147
g9116
(dp10121
g3645
g3638
sg3633
g3983
sg3647
g3648
sg3642
g3990
stRp10122
ag1
(g9147
g9116
(dp10123
g3645
g3846
sg3633
g4011
sg3647
g3853
sg3642
g4018
stRp10124
ag1
(g9147
g9116
(dp10125
g3645
g3769
sg3633
g5289
sg3647
g3776
sg3642
g5296
stRp10126
ag1
(g9147
g9116
(dp10127
g3645
g4400
sg3633
g4854
sg3647
g4407
sg3642
g4861
stRp10128
ag1
(g9147
g9116
(dp10129
g3645
g3805
sg3633
g4638
sg3647
g3799
sg3642
g4645
stRp10130
ag1
(g9147
g9116
(dp10131
g3645
g3846
sg3633
g4011
sg3647
g3853
sg3642
g4018
stRp10132
ag1
(g9147
g9116
(dp10133
g3645
g4178
sg3633
g4174
sg3647
g4185
sg3642
g4182
stRp10134
ag1
(g9147
g9116
(dp10135
g3645
g3805
sg3633
g3795
sg3647
g3799
sg3642
g3803
stRp10136
ag1
(g9147
g9116
(dp10137
g3645
g4400
sg3633
g4396
sg3647
g4407
sg3642
g4404
stRp10138
ag1
(g9147
g9116
(dp10139
g3645
g4073
sg3633
g4826
sg3647
g4080
sg3642
g4833
stRp10140
ag1
(g9147
g9116
(dp10141
g3645
g3658
sg3633
g4116
sg3647
g3665
sg3642
g4123
stRp10142
ag1
(g9147
g9116
(dp10143
g3645
g3846
sg3633
g4011
sg3647
g3853
sg3642
g4018
stRp10144
ag1
(g9147
g9116
(dp10145
g3645
g3816
sg3633
g4532
sg3647
g3823
sg3642
g4539
stRp10146
ag1
(g9147
g9116
(dp10147
g3645
g3805
sg3633
g4638
sg3647
g3799
sg3642
g4645
stRp10148
ag1
(g9147
g9116
(dp10149
g3645
g3940
sg3633
g4131
sg3647
g3947
sg3642
g4138
stRp10150
ag1
(g9147
g9116
(dp10151
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10152
ag1
(g9147
g9116
(dp10153
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10154
ag1
(g9147
g9116
(dp10155
g3645
g4400
sg3633
g4396
sg3647
g4407
sg3642
g4404
stRp10156
ag1
(g9147
g9116
(dp10157
g3645
g3638
sg3633
g3634
sg3647
g3648
sg3642
g3643
stRp10158
ag1
(g9147
g9116
(dp10159
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10160
ag1
(g9147
g9116
(dp10161
g3645
g3876
sg3633
g3872
sg3647
g3883
sg3642
g3880
stRp10162
ag1
(g9147
g9116
(dp10163
g3645
g3638
sg3633
g3983
sg3647
g3648
sg3642
g3990
stRp10164
ag1
(g9147
g9116
(dp10165
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10166
ag1
(g9147
g9116
(dp10167
g3645
g4030
sg3633
g4026
sg3647
g4037
sg3642
g4034
stRp10168
ag1
(g9147
g9116
(dp10169
g3645
g3816
sg3633
g4532
sg3647
g3823
sg3642
g4539
stRp10170
ag1
(g9147
g9116
(dp10171
g3645
g4383
sg3633
g4379
sg3647
g4390
sg3642
g4387
stRp10172
ag1
(g9147
g9116
(dp10173
g3645
g4073
sg3633
g4826
sg3647
g4080
sg3642
g4833
stRp10174
ag1
(g9147
g9116
(dp10175
g3645
g3698
sg3633
g4962
sg3647
g3692
sg3642
g4969
stRp10176
ag1
(g9147
g9116
(dp10177
g3645
g4073
sg3633
g4069
sg3647
g4080
sg3642
g4077
stRp10178
ag1
(g9147
g9116
(dp10179
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10180
ag1
(g9147
g9116
(dp10181
g3645
g3769
sg3633
g5289
sg3647
g3776
sg3642
g5296
stRp10182
ag1
(g9147
g9116
(dp10183
g3645
g4030
sg3633
g4159
sg3647
g4037
sg3642
g4166
stRp10184
ag1
(g9147
g9116
(dp10185
g3645
g3940
sg3633
g3936
sg3647
g3947
sg3642
g3944
stRp10186
ag1
(g9147
g9116
(dp10187
g3645
g4030
sg3633
g4159
sg3647
g4037
sg3642
g4166
stRp10188
ag1
(g9147
g9116
(dp10189
g3645
g3675
sg3633
g3671
sg3647
g3682
sg3642
g3679
stRp10190
ag1
(g9147
g9116
(dp10191
g3645
g4073
sg3633
g4826
sg3647
g4080
sg3642
g4833
stRp10192
ag1
(g9147
g9116
(dp10193
g3645
g4178
sg3633
g4174
sg3647
g4185
sg3642
g4182
stRp10194
ag1
(g9147
g9116
(dp10195
g3645
g3709
sg3633
g4895
sg3647
g3716
sg3642
g4902
stRp10196
ag1
(g9147
g9116
(dp10197
g3645
g3970
sg3633
g3966
sg3647
g3977
sg3642
g3974
stRp10198
ag1
(g9147
g9116
(dp10199
g3645
g3709
sg3633
g3705
sg3647
g3716
sg3642
g3713
stRp10200
ag1
(g9147
g9116
(dp10201
g3645
g3846
sg3633
g3842
sg3647
g3853
sg3642
g3850
stRp10202
ag1
(g9147
g9116
(dp10203
g3645
g4103
sg3633
g4099
sg3647
g4110
sg3642
g4107
stRp10204
ag1
(g9147
g9116
(dp10205
g3645
g3698
sg3633
g4962
sg3647
g3692
sg3642
g4969
stRp10206
ag1
(g9147
g9116
(dp10207
g3645
g4400
sg3633
g4854
sg3647
g4407
sg3642
g4861
stRp10208
ag1
(g9147
g9116
(dp10209
g3645
g3698
sg3633
g4962
sg3647
g3692
sg3642
g4969
stRp10210
ag1
(g9147
g9116
(dp10211
g3645
g4073
sg3633
g4826
sg3647
g4080
sg3642
g4833
stRp10212
ag1
(g9147
g9116
(dp10213
g3645
g4383
sg3633
g4811
sg3647
g4390
sg3642
g4818
stRp10214
ag1
(g9147
g9116
(dp10215
g3645
g4030
sg3633
g4159
sg3647
g4037
sg3642
g4166
stRp10216
ag1
(g9147
g9116
(dp10217
g3645
g3769
sg3633
g3765
sg3647
g3776
sg3642
g3773
stRp10218
ag1
(g9147
g9116
(dp10219
g3645
g3698
sg3633
g4962
sg3647
g3692
sg3642
g4969
stRp10220
ag1
(g9147
g9116
(dp10221
g3645
g3658
sg3633
g4116
sg3647
g3665
sg3642
g4123
stRp10222
ag1
(g9147
g9116
(dp10223
g3645
g3816
sg3633
g4532
sg3647
g3823
sg3642
g4539
stRp10224
ag1
(g9147
g9116
(dp10225
g3645
g3805
sg3633
g4638
sg3647
g3799
sg3642
g4645
stRp10226
ag1
(g9147
g9116
(dp10227
g3645
g3940
sg3633
g4131
sg3647
g3947
sg3642
g4138
stRp10228
ag1
(g9147
g9116
(dp10229
g3645
g3752
sg3633
g3748
sg3647
g3759
sg3642
g3756
stRp10230
ag1
(g9147
g9116
(dp10231
g3645
g3805
sg3633
g3795
sg3647
g3799
sg3642
g3803
stRp10232
asg9228
Nsg9229
g6348
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbag1
(g9103
g3
NtRp10233
(dp10234
g9106
V#!/usr/bin/env python2\u000a# -*- coding: utf-8 -*-\u000a\u000a######################## CITATIONS ########################## \u000a##### Binary choice, BDM, auction routines, and instructions are modified from:\u000a##### \u000a##### De Martino, B., Fleming, S. M., Garrett, N., & Dolan, R. J. (2012). Confidence in value-based choice. Nature Neuroscience, 16(1), 105-110. \u000a#####\u000a##### Food item images are original.\u000a\u000a"""\u000aThis experiment was created using PsychoPy2 Experiment Builder (v1.80.01), July 16, 2014, at 03:20\u000aIf you publish work using this script please cite the relevant PsychoPy publications\u000a  Peirce, JW (2007) PsychoPy - Psychophysics software in Python. Journal of Neuroscience Methods, 162(1-2), 8-13.\u000a  Peirce, JW (2009) Generating stimuli for neuroscience using PsychoPy. Frontiers in Neuroinformatics, 2:10. doi: 10.3389/neuro.11.010.2008\u000a"""\u000a\u000afrom __future__ import division  # so that 1/3=0.333 instead of 1/3=0\u000afrom psychopy import visual, core, data, event, logging, sound, gui\u000afrom psychopy.constants import *  # things bdm STARTED, FINISHED\u000aimport numpy as np  # whole numpy lib is available, prepend 'np.'\u000afrom numpy import sin, cos, tan, log, log10, pi, average, sqrt, std, deg2rad, rad2deg, linspace, asarray\u000afrom numpy.random import random, randint, normal, shuffle\u000aimport os  # handy system and path functions\u000afrom pyglet.window import key # to detect key state, whether key is held down, to move slider on key hold\u000aimport pandas as pd\u000aimport datetime\u000afrom psychopy.iohub import launchHubServer\u000aimport pylink\u000a\u000a# Initialize IOHub for eye tracker\u000aio=launchHubServer(iohub_config_name='iohub_config.yaml')\u000atracker = io.devices.tracker\u000a\u000a# Store info about the experiment session\u000aexpName = 'infer_design1'  # from the Builder filename that created this script\u000aexpInfo = {u'session': u'001', u'participant': u'', u'eye': u'', u'glasses': u'', u'contacts': u''}\u000adlg = gui.DlgFromDict(dictionary=expInfo, title=expName)\u000aif dlg.OK == False: core.quit()  # user pressed cancel\u000aexpInfo['date'] = data.getDateStr()  # add a simple timestamp\u000aexpInfo['expName'] = expName\u000a\u000a# Setup filename for saving\u000afilename = 'data/%s_%s_%s' %(expInfo['participant'], expName, expInfo['date'])\u000a\u000a# An ExperimentHandler isn't essential but helps with data saving\u000athisExp = data.ExperimentHandler(name=expName, version='',\u000a    extraInfo=expInfo, runtimeInfo=None,\u000a    originPath=None,\u000a    savePickle=True, saveWideText=True,\u000a    dataFileName=filename)\u000a#save a log file for detail verbose info\u000alogFile = logging.LogFile(filename+'.log', level=logging.EXP)\u000alogging.console.setLevel(logging.WARNING)  # this outputs to the screen, not a file\u000a\u000aendExpNow = False  # flag for 'escape' or other condition => quit the exp\u000a\u000a# Start Code - component code to be run before the window creation\u000a\u000a# set up variable to track current state of key press, to move slider when keys held down\u000akeyState=key.KeyStateHandler()\u000a\u000a# Setup the Window\u000ascreenwidth = 1920\u000ascreenheight = 1080\u000awin = visual.Window(size=(screenwidth, screenheight), fullscr=True, screen=0, allowGUI=False, allowStencil=False,\u000a    monitor='testMonitor', color='black', colorSpace='rgb',\u000a    blendMode='avg', useFBO=True,\u000a    )\u000awin.winHandle.push_handlers(keyState)\u000a\u000a\u000a# store frame rate of monitor if we can measure it successfully\u000aexpInfo['frameRate']=win.getActualFrameRate()\u000aif expInfo['frameRate']!=None:\u000a    frameDur = 1.0/round(expInfo['frameRate'])\u000aelse:\u000a    frameDur = 1.0/60.0 # couldn't get a reliable measure so guess\u000a\u000a\u000a######################## COMPONENTS ##########################\u000a\u000a# Set up directory path for stimuli. This avoids us having to put the entire image path in the conditions spreadsheet.\u000adir_path = 'stimuli/itempics/modified/small/'\u000a\u000a# Initialize components for Routine "instr_main"\u000ainstr_mainClock = core.Clock()\u000ainstr_main_txt = visual.TextStim(win=win, ori=0, name='instr_main_txt',\u000a    text=u'Welcome!\u005cn\u005cnPlease read the instructions carefully and get the experimenter when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_bdm"\u000ainstr_bdmClock = core.Clock()\u000ainstr_bdm_txt = visual.TextStim(win=win, ori=0, name='instr_bdm_txt',\u000a    text=u'The bidding task is about to begin. Use the LEFT and RIGHT arrow keys to move the cursor along the slider, then press the DOWN arrow to enter your bid.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "fixation"\u000afixationClock = core.Clock()\u000afixation_text = visual.TextStim(win=win, ori=0, name='fixation_text',\u000a    text=u'+',    font=u'Arial',\u000a    pos=[0, 0], height=0.1, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "bdm"\u000abdmClock = core.Clock()\u000abdm_pic = visual.ImageStim(win=win, name='bdm_pic',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000abdm_bid = visual.RatingScale(win=win, name='bdm_bid', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, -0.6], low=0, high=3, precision=100, labels=[u'\u005cxa30', u'\u005cxa33'],\u000a    scale=u'', markerStart=u'1.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_choice"\u000ainstr_choiceClock = core.Clock()\u000ainstr_choice_txt = visual.TextStim(win=win, ori=0, name='instr_choice_txt',\u000a    text=u'The choice task is about to begin. Choose your preferred item by pressing the LEFT or RIGHT arrow keys, then use the slider to indicate how confident you are that you made the best choice.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "choice"\u000achoiceClock = core.Clock()\u000achoice_pic_left = visual.ImageStim(win=win, name='choice_pic_left',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000achoice_pic_right = visual.ImageStim(win=win, name='choice_pic_right',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "choice_selection"\u000achoice_selectionClock = core.Clock()\u000astar_left_selection = visual.TextStim(win=win, ori=0, name='star_left_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000astar_right_selection = visual.TextStim(win=win, ori=0, name='star_right_selection',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.8], height=0.5, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000a\u000a# Initialize components for Routine "confidence"\u000aconfidenceClock = core.Clock()\u000aconfidence_rating = visual.RatingScale(win=win, name='confidence_rating', marker=u'triangle', markerColor=u'orange', leftKeys=None, rightKeys=None,\u000a    size=1.0, pos=[0.0, 0.0], low=1, high=6, precision=20,\u000a    scale=u'', markerStart=u'3.5', tickHeight=u'1', showAccept=False, acceptKeys=[u'down', u'return'])\u000a\u000a# Initialize components for Routine "instr_infer_intro"\u000ainstr_infer_introClock = core.Clock()\u000ainstr_infer_intro_txt = visual.TextStim(win=win, ori=0, name='instr_infer_intro_txt',\u000a    text=u'Thanks! Now please get the experimenter, who will give you the instructions for the second part of the experiment. \u005cn\u005cnPlease read these instructions carefully and get the experimenter again when you\u005c're finished. Take as much time as you need.',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer_practice"\u000ainstr_infer_practiceClock = core.Clock()\u000ainstr_infer_practice_txt = visual.TextStim(win=win, ori=0, name='instr_infer_practice_txt',\u000a    text=u'First, you\u005c'll do some practice trials. These are just for you to get used to the task; your responses won\u005c't count. Unlike in the real trials, the choices you will be learning here were generated randomly by a computer.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "instr_infer"\u000ainstr_inferClock = core.Clock()\u000ainstr_infer_txt = visual.TextStim(win=win, ori=0, name='instr_infer_txt',\u000a    text=u'Great! Now that you\u005c've done some practice trials, we\u005c're ready to start the real trials. If you have any questions, please get the experimenter now. Otherwise, you can begin whenever you\u005c're ready. \u005cn\u005cnUnlike in the practice trials, the choices you will be learning here were made by an actual person.\u005cn\u005cn[press space bar to begin]',    font=u'Arial',\u000a    pos=[0, 0], height=0.06, wrapWidth=1.5,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "get_ready"\u000aget_readyClock = core.Clock()\u000aget_ready_text = visual.TextStim(win=win, ori=0, name='get_ready_text',\u000a    text=u'Get ready!',    font=u'Arial',\u000a    pos=[0, 0], height=0.12, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Initialize components for Routine "trial"\u000atrialClock = core.Clock()\u000aimg_left_infer = visual.ImageStim(win=win, name='img_left_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[-0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=0.0)\u000aimg_right_infer = visual.ImageStim(win=win, name='img_right_infer',\u000a    image='sin', mask=None,\u000a    ori=0, pos=[0.5, 0], size=None,\u000a    color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a    flipHoriz=False, flipVert=False,\u000a    texRes=128, interpolate=False, depth=-1.0)\u000a\u000a# Initialize components for Routine "trial_post_response"\u000atrial_post_responseClock = core.Clock()\u000aselection_arrow_left = visual.TextStim(win=win, ori=0, name='selection_arrow_left',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[-0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-2.0)\u000aselection_arrow_right = visual.TextStim(win=win, ori=0, name='selection_arrow_right',\u000a    text=u'*',    font=u'Arial',\u000a    pos=[0.5, -0.09], height=0.5, wrapWidth=None,\u000a    color=u'red', colorSpace=u'rgb', opacity=1,\u000a    depth=-3.0)\u000afeedback_box_left = visual.Rect(win=win, name='feedback_box_left',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[-0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-4.0, interpolate=True)\u000afeedback_box_right = visual.Rect(win=win, name='feedback_box_right',\u000a    width=[0.9, 0.9][0], height=[0.9, 0.9][1],\u000a    ori=0, pos=[0.5, 0],\u000a    lineWidth=5, lineColor=u'yellow', lineColorSpace=u'rgb',\u000a    fillColor=None, fillColorSpace=u'rgb',\u000a    opacity=1, depth=-5.0, interpolate=True)\u000a\u000a# Initialize components for Routine "rest_prompt"\u000arest_promptClock = core.Clock()\u000arest_prompt_txt = visual.TextStim(win=win, ori=0, name='rest_prompt_txt',\u000a    text=u'Great! Now take a rest and press the space bar when you\u005cu2019re ready to begin the next block.',    font=u'Arial',\u000a    pos=[0, 0], height=0.08, wrapWidth=None,\u000a    color=u'white', colorSpace=u'rgb', opacity=1,\u000a    depth=0.0)\u000a\u000a# Create counters for the number of correct and incorrect guesses made by subjects to determine extra payment.\u000acorrect_counter = 0\u000aincorrect_counter = 0\u000a\u000a# Create list of lists to store binary choice and BDM data to generate food reward at the end of the experiment\u000aprefs = [['left', 'right', 'choice', 'bid']]\u000abids = [['item', 'bid']] # For the bids collected during the first BDM routine, at the beginning of the experiment\u000a\u000a### CHOICE & INFERENCE RANDOMIZATION ###\u000a\u000a# Define two functions to generate constrained pseudorandom sequences of item pair presentations for the binary choice and inference\u000a# parts of the task. The constraint ensures that the same pair of items does not appear twice in a row (flipped or not).\u000a# In the conditions spreadsheet that the item pairs are drawn from, the flipped version of the same item pair is 20\u000a# rows apart.\u000a\u000a# Binary choice randomization\u000adef genseq_choice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(40, 40, replace=False) # Generate a pseudorandom sequence of 40 numbers\u000a        for x in range(1,40):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference practice block randomization\u000adef genseq_infer_practice():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(14, 14, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,14):\u000a            if (ans[x]-ans[x-1]) % 7 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a# Inference randomization\u000adef genseq_infer():\u000a    done = False\u000a    while done==False:\u000a        counter = 0\u000a        ans = np.random.choice(200, 200, replace=False) # Generate a pseudorandom sequence of 200 numbers\u000a        for x in range(1,200):\u000a            if (ans[x]-ans[x-1]) % 20 == 0: # Is the difference between any sequential numbers divisible by 20?\u000a                counter += 1\u000a        if counter==0: # If not, end the loop and return the array\u000a            done = True\u000a            return ans\u000a        else: # If so, continue the loop and try again\u000a            done = False\u000a\u000a\u000a# Set independent sequences for each of the two choice blocks, the inference practice block, and the three inference rest blocks. Each rest block contains 10 presentations of\u000a# each pair.\u000a\u000achoiceseq = genseq_choice()\u000apracticeseq = genseq_infer_practice()\u000ablock1seq = genseq_infer()\u000ablock2seq = genseq_infer()\u000ablock3seq = genseq_infer()\u000a\u000a\u000a# Choose a pilot participant whose choices will form the basis of the learning task\u000apartners = ['P1','P2','P3','P4','P5','P6','P8','P9','P10','P11','P12'] # List of pilot participants, P7 excluded for perfectly inconsistent choices\u000apartner = np.random.choice(partners,1) # Choose one at random\u000apartner_file = 'conditions/choices/infer_design1_value_pairs_' + partner[0] + '.csv' # Path to that participant's choice data\u000a\u000a# Create separate CSV files, one for each choice, practice, and rest block, with the item pairs in the pseudorandomly generated order.\u000a# These CSV files will be used as PsychoPy's conditions spreadsheets and run sequentially in the choice, practice, and inference loops below.\u000a\u000a\u000achoicecond_src = pd.read_csv('conditions/choice_design1_binary.csv', index_col=None, header=0)\u000achoicecond = choicecond_src.copy()\u000afor x in range(40):\u000a    seq = choiceseq[x]\u000a    choicecond.iloc[x] = choicecond_src.iloc[seq]\u000achoicecond.to_csv(path_or_buf=filename+'_choicecond.csv', index=False)\u000a\u000apracticecond_src = pd.read_csv('conditions/choices/infer_design1_value_pairs_practice.csv', index_col=None, header=0)\u000apracticecond = practicecond_src.copy()\u000afor x in range(14):\u000a    seq = practiceseq[x]\u000a    practicecond.iloc[x] = practicecond_src.iloc[seq]\u000apracticecond.to_csv(path_or_buf=filename+'_practicecond.csv', index=False)\u000a\u000ablock1cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock1cond = block1cond_src.copy()\u000afor x in range(200):\u000a    seq = block1seq[x]\u000a    block1cond.iloc[x] = block1cond_src.iloc[seq]\u000ablock1cond.to_csv(path_or_buf=filename+'_block1cond.csv', index=False)\u000a\u000ablock2cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock2cond = block2cond_src.copy()\u000afor x in range(200):\u000a    seq = block2seq[x]\u000a    block2cond.iloc[x] = block2cond_src.iloc[seq]\u000ablock2cond.to_csv(path_or_buf=filename+'_block2cond.csv', index=False)\u000a\u000ablock3cond_src = pd.read_csv(partner_file, index_col=None, header=0)\u000ablock3cond = block3cond_src.copy()\u000afor x in range(200):\u000a    seq = block3seq[x]\u000a    block3cond.iloc[x] = block3cond_src.iloc[seq]\u000ablock3cond.to_csv(path_or_buf=filename+'_block3cond.csv', index=False)\u000a\u000a\u000a# Create some handy timers\u000aglobalClock = core.Clock()  # to track the time since experiment started\u000aroutineTimer = core.CountdownTimer()  # to track time remaining of each (non-slip) routine \u000a\u000a#------Prepare to start Routine "instr_main"-------\u000at = 0\u000ainstr_mainClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_main_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_main_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_mainComponents = []\u000ainstr_mainComponents.append(instr_main_txt)\u000ainstr_mainComponents.append(instr_main_resp)\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_main"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_mainClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_main_txt* updates\u000a    if t >= 0.0 and instr_main_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_main_txt.frameNStart = frameN  # exact frame index\u000a        instr_main_txt.setAutoDraw(True)\u000a    \u000a    # *instr_main_resp* updates\u000a    if t >= 5.0 and instr_main_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_main_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_main_resp.frameNStart = frameN  # exact frame index\u000a        instr_main_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_main_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_main_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_main_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_main_resp.rt = instr_main_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_mainComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_main"-------\u000afor thisComponent in instr_mainComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_main_resp.keys in ['', [], None]:  # No response was made\u000a   instr_main_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_main_resp.keys',instr_main_resp.keys)\u000aif instr_main_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_main_resp.rt', instr_main_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a\u000a#------Prepare to start Routine "instr_bdm"-------\u000at = 0\u000ainstr_bdmClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_bdm_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_bdm_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_bdmComponents = []\u000ainstr_bdmComponents.append(instr_bdm_txt)\u000ainstr_bdmComponents.append(instr_bdm_resp)\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_bdm"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_bdmClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_bdm_txt* updates\u000a    if t >= 0.0 and instr_bdm_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_txt.frameNStart = frameN  # exact frame index\u000a        instr_bdm_txt.setAutoDraw(True)\u000a    \u000a    # *instr_bdm_resp* updates\u000a    if t >= 2.0 and instr_bdm_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_bdm_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_bdm_resp.frameNStart = frameN  # exact frame index\u000a        instr_bdm_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_bdm_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_bdm_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_bdm_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_bdm_resp.rt = instr_bdm_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_bdmComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_bdm"-------\u000afor thisComponent in instr_bdmComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_bdm_resp.keys in ['', [], None]:  # No response was made\u000a   instr_bdm_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_bdm_resp.keys',instr_bdm_resp.keys)\u000athisExp.addData('partnered_pilot_participant', partner)\u000aif instr_bdm_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_bdm_resp.rt', instr_bdm_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BDM LOOP 1 ##########################\u000a\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abdm_loop1 = data.TrialHandler(nReps=1, method=u'random', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(u'conditions/choice_design1_bdm.xlsx'),\u000a    seed=None, name='bdm_loop1')\u000athisExp.addLoop(bdm_loop1)  # add the loop to the experiment\u000athisbdm_loop1 = bdm_loop1.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisbdm_loop1.rgb)\u000aif thisbdm_loop1 != None:\u000a    for paramName in thisbdm_loop1.keys():\u000a        exec(paramName + '= thisbdm_loop1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the inference task\u000aif instr_bdm_resp.keys=='s':\u000a    bdm_loop1.finished = True\u000a\u000afor thisbdm_loop1 in bdm_loop1:\u000a    currentLoop = bdm_loop1\u000a    # abbreviate parameter names if possible (e.g. rgb = thisbdm_loop1.rgb)\u000a    if thisbdm_loop1 != None:\u000a        for paramName in thisbdm_loop1.keys():\u000a            exec(paramName + '= thisbdm_loop1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "bdm"-------\u000a    t = 0\u000a    bdmClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    bdm_pic.setImage(dir_path+bdm_img)\u000a    bdm_bid.reset()\u000a    # jitter the starting position of the BDM scale from a uniform distribution between 1 and 2, rounded to the nearest decimal place\u000a    bdm_marker_start = float(np.round(np.random.uniform(1, 2, 1)[0], 1))\u000a    bdm_bid.setMarkerPos(bdm_marker_start)\u000a    # keep track of which components have finished\u000a    bdmComponents = []\u000a    bdmComponents.append(fixation_text)\u000a    bdmComponents.append(bdm_pic)\u000a    bdmComponents.append(bdm_bid)\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "bdm"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = bdmClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *bdm_pic* updates\u000a        if t >= 1.0 and bdm_pic.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            bdm_pic.tStart = t  # underestimates by a little under one frame\u000a            bdm_pic.frameNStart = frameN  # exact frame index\u000a            bdm_pic.setAutoDraw(True)\u000a        # *bdm_bid* updates\u000a        if t >= 1.0:\u000a            bdm_bid.draw()\u000a            continueRoutine = bdm_bid.noResponse\u000a            if bdm_bid.noResponse == False:\u000a                bdm_bid.response = bdm_bid.getRating()\u000a                bdm_bid.rt = bdm_bid.getRT()\u000a            elif bdm_bid.noResponse==True:\u000a                if keyState[key.LEFT]==True and bdm_bid.markerPlacedAt >0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.LEFT]==True and bdm_bid.markerPlacedAt==0.01:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt - 0.01\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt <2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.02\u000a                    bdm_bid.draw()\u000a                elif keyState[key.RIGHT]==True and bdm_bid.markerPlacedAt==2.99:\u000a                    bdm_bid.markerPlacedAt = bdm_bid.markerPlacedAt + 0.01\u000a                    bdm_bid.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in bdmComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "bdm"-------\u000a    for thisComponent in bdmComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for bdm (TrialHandler)\u000a    bdm_loop1.addData('bdm_bid1.response', bdm_bid.getRating())\u000a    bdm_loop1.addData('bdm_bid1.rt', bdm_bid.getRT())\u000a    bdm_loop1.addData('bdm_marker_start', bdm_marker_start)\u000a\u000a    # Add the item and the subject's bid to the 'bids' list, which will be merged with the 'prefs' list later in order to run the auction\u000a    bids.append([bdm_img, bdm_bid.response])\u000a    \u000a    thisExp.nextEntry()\u000a    \u000a# completed 1 repeat of 'bdm_loop1'\u000a\u000a\u000a#------Prepare to start Routine "instr_choice"-------\u000at = 0\u000ainstr_choiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_choice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_choice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_choiceComponents = []\u000ainstr_choiceComponents.append(instr_choice_txt)\u000ainstr_choiceComponents.append(instr_choice_resp)\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_choice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_choiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_choice_txt* updates\u000a    if t >= 0.0 and instr_choice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_txt.frameNStart = frameN  # exact frame index\u000a        instr_choice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_choice_resp* updates\u000a    if t >= 2.0 and instr_choice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_choice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_choice_resp.frameNStart = frameN  # exact frame index\u000a        instr_choice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_choice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_choice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space', 's'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_choice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_choice_resp.rt = instr_choice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_choiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_choice"-------\u000afor thisComponent in instr_choiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_choice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_choice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_choice_resp.keys',instr_choice_resp.keys)\u000aif instr_choice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_choice_resp.rt', instr_choice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BINARY LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000abinary = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_choicecond.csv'),\u000a    seed=None, name='binary')\u000athisExp.addLoop(binary)  # add the loop to the experiment\u000athisBinary1 = binary.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBinary1.rgb)\u000aif thisBinary1 != None:\u000a    for paramName in thisBinary1.keys():\u000a        exec(paramName + '= thisBinary1.' + paramName)\u000a\u000a# Check if the 'skip' key was pressed in the instructions routine; if so, end the loop and move on to the BDM\u000aif instr_choice_resp.keys=='s':\u000a    binary.finished = True\u000a\u000afor thisBinary1 in binary:\u000a    currentLoop = binary\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBinary1.rgb)\u000a    if thisBinary1 != None:\u000a        for paramName in thisBinary1.keys():\u000a            exec(paramName + '= thisBinary1.' + paramName)\u000a    \u000a    #------Prepare to start Routine "choice"-------\u000a    t = 0\u000a    choiceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    choice_pic_left.setImage(dir_path+choice_left)\u000a    choice_pic_right.setImage(dir_path+choice_right)\u000a    event.clearEvents(eventType='keyboard') # Clear keyboard event log to avoid last key press from prior loop being used\u000a    key_resp_choice = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_choice.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    choiceComponents = []\u000a    choiceComponents.append(fixation_text)\u000a    choiceComponents.append(choice_pic_left)\u000a    choiceComponents.append(choice_pic_right)\u000a    choiceComponents.append(key_resp_choice)\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    \u000a    #-------Start Routine "choice"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = choiceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (1.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *choice_pic_left* updates\u000a        if t >= 1.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 1.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a\u000a        # *key_resp_choice* updates\u000a        if t >= 1.0 and key_resp_choice.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_choice.tStart = t  # underestimates by a little under one frame\u000a            key_resp_choice.frameNStart = frameN  # exact frame index\u000a            key_resp_choice.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_choice.clock.reset()  # now t=0\u000a        if key_resp_choice.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_choice.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_choice.rt = key_resp_choice.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choiceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "choice"-------\u000a    for thisComponent in choiceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_choice.keys in ['', [], None]:  # No response was made\u000a       key_resp_choice.keys=None\u000a    # store data for binary (TrialHandler)\u000a    binary.addData('key_resp_choice.keys',key_resp_choice.keys)\u000a    if key_resp_choice.keys != None:  # we had a response\u000a        binary.addData('key_resp_choice.rt', key_resp_choice.rt)\u000a\u000a    # define a function to append binary choices and the bid for the chosen item to the preference list\u000a    # lft is the left image displayed during that choice trial\u000a    # rt is the right image displayed\u000a    def rec_choice(lft, rt): \u000a        bd = False\u000a        if key_resp_choice.keys=='left':\u000a            chc = lft\u000a        elif key_resp_choice.keys=='right':\u000a            chc = rt\u000a        for x in range(len(bids)):\u000a            if bids[x][0]==chc:\u000a                bd = bids[x][1]\u000a        prefs.append([lft, rt, chc, bd])\u000a\u000a    # call the function\u000a    rec_choice(choice_left, choice_right)\u000a    \u000a\u000a    #------Prepare to start Routine "choice_selection"-------\u000a    t = 0\u000a    choice_selectionClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(1.000000)\u000a    # keep track of which components have finished\u000a    choice_selectionComponents = []\u000a    choice_selectionComponents.append(choice_pic_left)\u000a    choice_selectionComponents.append(choice_pic_right)\u000a    choice_selectionComponents.append(star_left_selection)\u000a    choice_selectionComponents.append(star_right_selection)\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "choice_selection"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = choice_selectionClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *choice_pic_left* updates\u000a        if t >= 0.0 and choice_pic_left.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_left.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_left.frameNStart = frameN  # exact frame index\u000a            choice_pic_left.setAutoDraw(True)\u000a        elif choice_pic_left.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_left.setAutoDraw(False)\u000a        \u000a        # *choice_pic_right* updates\u000a        if t >= 0.0 and choice_pic_right.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            choice_pic_right.tStart = t  # underestimates by a little under one frame\u000a            choice_pic_right.frameNStart = frameN  # exact frame index\u000a            choice_pic_right.setAutoDraw(True)\u000a        elif choice_pic_right.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            choice_pic_right.setAutoDraw(False)\u000a        \u000a        # *star_left_selection* updates\u000a        if key_resp_choice.keys=='left':\u000a            if t >= 0.0 and star_left_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_left_selection.tStart = t  # underestimates by a little under one frame\u000a                star_left_selection.frameNStart = frameN  # exact frame index\u000a                star_left_selection.setAutoDraw(True)\u000a            elif star_left_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_left_selection.setAutoDraw(False)\u000a        \u000a        # *star_right_selection* updates\u000a        if key_resp_choice.keys=='right':\u000a            if t >= 0.0 and star_right_selection.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                star_right_selection.tStart = t  # underestimates by a little under one frame\u000a                star_right_selection.frameNStart = frameN  # exact frame index\u000a                star_right_selection.setAutoDraw(True)\u000a            elif star_right_selection.status == STARTED and t >= (0.0 + (1.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                star_right_selection.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in choice_selectionComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "choice_selection"-------\u000a    for thisComponent in choice_selectionComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    #thisExp.nextEntry()\u000a\u000a    #------Prepare to start Routine "confidence"-------\u000a    t = 0\u000a    confidenceClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    confidence_rating.reset()\u000a    # jitter the starting position of the confidence rating scale from a uniform distribution between 1.7 and 3.3 (the middle third of the scale), rounded to the nearest decimal place\u000a    confidence_marker_start = float(np.round(np.random.uniform(1.7, 3.3, 1)[0], 1))\u000a    confidence_rating.setMarkerPos(confidence_marker_start)\u000a    # keep track of which components have finished\u000a    confidenceComponents = []\u000a    confidenceComponents.append(confidence_rating)\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "confidence"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = confidenceClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *confidence_rating* updates\u000a        if t > 0.5:\u000a            confidence_rating.draw()\u000a            continueRoutine = confidence_rating.noResponse\u000a            if confidence_rating.noResponse == False:\u000a                confidence_rating.response = confidence_rating.getRating()\u000a                confidence_rating.rt = confidence_rating.getRT()\u000a            elif confidence_rating.noResponse==True:\u000a                if keyState[key.LEFT]==True and confidence_rating.markerPlacedAt >0:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.LEFT]==True and confidence_rating.markerPlacedAt==0.1:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt - 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt <4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                elif keyState[key.RIGHT]==True and confidence_rating.markerPlacedAt==4.9:\u000a                    confidence_rating.markerPlacedAt = confidence_rating.markerPlacedAt + 0.1\u000a                    confidence_rating.draw()\u000a                    \u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in confidenceComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "confidence"-------\u000a    for thisComponent in confidenceComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # store data for confidence (TrialHandler)\u000a    binary.addData('confidence_rating1.response', confidence_rating.getRating())\u000a    binary.addData('confidence_rating1.rt', confidence_rating.getRT())\u000a    binary.addData('confidence_marker_start', confidence_marker_start+1) # Add 1 to convert from 0-5 to 1-6 scale\u000a\u000a    thisExp.nextEntry()\u000a\u000a\u000a# completed 1 repeat of 'binary'        \u000a\u000a#------Prepare to start Routine "instr_infer_intro"-------\u000at = 0\u000ainstr_infer_introClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_intro_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_intro_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_introComponents = []\u000ainstr_infer_introComponents.append(instr_infer_intro_txt)\u000ainstr_infer_introComponents.append(instr_infer_intro_resp)\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_intro"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_introClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_intro_txt* updates\u000a    if t >= 0.0 and instr_infer_intro_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_intro_resp* updates\u000a    if t >= 5.0 and instr_infer_intro_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_intro_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_intro_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_intro_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_intro_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_intro_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_intro_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_intro_resp.rt = instr_infer_intro_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_introComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_intro"-------\u000afor thisComponent in instr_infer_introComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_intro_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_intro_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_intro_resp.keys',instr_infer_intro_resp.keys)\u000aif instr_infer_intro_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_intro_resp.rt', instr_infer_intro_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a#------Prepare to start Routine "instr_infer_practice"-------\u000at = 0\u000ainstr_infer_practiceClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_practice_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_practice_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_infer_practiceComponents = []\u000ainstr_infer_practiceComponents.append(instr_infer_practice_txt)\u000ainstr_infer_practiceComponents.append(instr_infer_practice_resp)\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer_practice"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_infer_practiceClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_practice_txt* updates\u000a    if t >= 0.0 and instr_infer_practice_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_practice_resp* updates\u000a    if t >= 5.0 and instr_infer_practice_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_practice_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_practice_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_practice_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_practice_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_practice_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_practice_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_practice_resp.rt = instr_infer_practice_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_infer_practiceComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer_practice"-------\u000afor thisComponent in instr_infer_practiceComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_practice_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_practice_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_practice_resp.keys',instr_infer_practice_resp.keys)\u000aif instr_infer_practice_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_practice_resp.rt', instr_infer_practice_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## PRACTICE LOOP ##########################\u000a\u000a# set up handler to look after randomisation of conditions etc\u000apractice_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=data.importConditions(filename+'_practicecond.csv'),\u000a    seed=None, name='practice_loop')\u000athisExp.addLoop(practice_loop)  # add the loop to the experiment\u000athisPractice_loop = practice_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisPractice_loop.rgb)\u000aif thisPractice_loop != None:\u000a    for paramName in thisPractice_loop.keys():\u000a        exec(paramName + '= thisPractice_loop.' + paramName)\u000a\u000a  \u000afor thisPractice_loop in practice_loop:\u000a    currentLoop = practice_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisPractice_loop.rgb)\u000a    if thisPractice_loop != None:\u000a        for paramName in thisPractice_loop.keys():\u000a            exec(paramName + '= thisPractice_loop.' + paramName)    \u000a    \u000a        \u000a    # Define class for setting the feedback image\u000a    class set_feedback:\u000a        options = ['correct', 'wrong']\u000a        feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a        if feedback=='correct':\u000a            feedback_img = img_correct\u000a        elif feedback=='wrong':\u000a            feedback_img = img_wrong\u000a\u000a        if feedback_img==img_left:\u000a            feedback_side = 'left'\u000a        elif feedback_img==img_right:\u000a            feedback_side = 'right'\u000a\u000a\u000a    #------Prepare to start Routine "trial"-------\u000a    t = 0\u000a    trialtime = datetime.datetime.now()\u000a    trialClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    img_left_infer.setImage(dir_path+img_left)\u000a    img_right_infer.setImage(dir_path+img_right)\u000a    infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    infer_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    trialComponents = []\u000a    trialComponents.append(fixation_text)\u000a    trialComponents.append(img_left_infer)\u000a    trialComponents.append(img_right_infer)\u000a    trialComponents.append(infer_resp)\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = trialClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *fixation_text* updates\u000a        if t >= 0 and fixation_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            fixation_text.tStart = t  # underestimates by a little under one frame\u000a            fixation_text.frameNStart = frameN  # exact frame index\u000a            fixation_text.setAutoDraw(True)\u000a        elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a            fixation_text.setAutoDraw(False)\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a                  \u000a        # *infer_resp* updates\u000a        if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            infer_resp.tStart = t  # underestimates by a little under one frame\u000a            infer_resp.frameNStart = frameN  # exact frame index\u000a            infer_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            infer_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if infer_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['left', 'right'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                infer_resp.rt = infer_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a\u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a    \u000a    #-------Ending Routine "trial"-------\u000a    for thisComponent in trialComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if infer_resp.keys in ['', [], None]:  # No response was made\u000a       infer_resp.keys=None\u000a    # # store data for practice_loop (TrialHandler)\u000a    # practice_loop.addData('infer_resp.keys',infer_resp.keys)\u000a    # if infer_resp.keys != None:  # we had a response\u000a    #     practice_loop.addData('infer_resp.rt', infer_resp.rt)\u000a    practice_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a    practice_loop.addData('trial_start_time', trialtime)\u000a    \u000a    # # Increase correct and incorrect response counters by 1 based on S's response\u000a    # if infer_resp.keys=='left' and img_correct==img_left:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='left' and img_correct==img_right:\u000a    #     incorrect_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_right:\u000a    #     correct_counter += 1\u000a    # elif infer_resp.keys=='right' and img_correct==img_left:\u000a    #     incorrect_counter += 1\u000a    \u000a\u000a    #------Prepare to start Routine "trial_post_response"-------\u000a    t = 0\u000a    trial_post_responseClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # keep track of which components have finished\u000a    trial_post_responseComponents = []\u000a    trial_post_responseComponents.append(img_left_infer)\u000a    trial_post_responseComponents.append(img_right_infer)\u000a    trial_post_responseComponents.append(selection_arrow_left)\u000a    trial_post_responseComponents.append(selection_arrow_right)\u000a    trial_post_responseComponents.append(feedback_box_left)\u000a    trial_post_responseComponents.append(feedback_box_right)\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    #-------Start Routine "trial_post_response"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = trial_post_responseClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a\u000a        # *img_left_infer* updates\u000a        if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_left_infer.tStart = t  # underestimates by a little under one frame\u000a            img_left_infer.frameNStart = frameN  # exact frame index\u000a            img_left_infer.setAutoDraw(True)\u000a        elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_left_infer.setAutoDraw(False)\u000a        \u000a        # *img_right_infer* updates\u000a        if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            img_right_infer.tStart = t  # underestimates by a little under one frame\u000a            img_right_infer.frameNStart = frameN  # exact frame index\u000a            img_right_infer.setAutoDraw(True)\u000a        elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a            img_right_infer.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'left':\u000a            # *selection_arrow_left* updates\u000a            if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                selection_arrow_left.setAutoDraw(True)\u000a            elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_left.setAutoDraw(False)\u000a        \u000a        if infer_resp.keys == 'right':\u000a            # *selection_arrow_right* updates\u000a            if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                selection_arrow_right.setAutoDraw(True)\u000a            elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                selection_arrow_right.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'left':\u000a            # *feedback_box_left* updates\u000a            if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_left.frameNStart = frameN  # exact frame index\u000a                feedback_box_left.setAutoDraw(True)\u000a            elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                feedback_box_left.setAutoDraw(False)\u000a        \u000a        if set_feedback.feedback_side == 'right':\u000a            # *feedback_box_right* updates\u000a            if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                feedback_box_right.frameNStart = frameN  # exact frame index\u000a                feedback_box_right.setAutoDraw(True)\u000a            elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                feedback_box_right.setAutoDraw(False)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a    \u000a    #-------Ending Routine "trial_post_response"-------\u000a    for thisComponent in trial_post_responseComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000a    \u000a    thisExp.nextEntry()\u000a                        \u000a# completed 1 repeat of 'practice_loop'\u000a\u000a\u000a#------Prepare to start Routine "instr_infer"-------\u000at = 0\u000ainstr_inferClock.reset()  # clock \u000aframeN = -1\u000a# update component parameters for each repeat\u000ainstr_infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000ainstr_infer_resp.status = NOT_STARTED\u000a# keep track of which components have finished\u000ainstr_inferComponents = []\u000ainstr_inferComponents.append(instr_infer_txt)\u000ainstr_inferComponents.append(instr_infer_resp)\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, 'status'):\u000a        thisComponent.status = NOT_STARTED\u000a\u000a#-------Start Routine "instr_infer"-------\u000acontinueRoutine = True\u000awhile continueRoutine:\u000a    # get current time\u000a    t = instr_inferClock.getTime()\u000a    frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a    # update/draw components on each frame\u000a    \u000a    # *instr_infer_txt* updates\u000a    if t >= 0.0 and instr_infer_txt.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_txt.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_txt.frameNStart = frameN  # exact frame index\u000a        instr_infer_txt.setAutoDraw(True)\u000a    \u000a    # *instr_infer_resp* updates\u000a    if t >= 5.0 and instr_infer_resp.status == NOT_STARTED:\u000a        # keep track of start time/frame for later\u000a        instr_infer_resp.tStart = t  # underestimates by a little under one frame\u000a        instr_infer_resp.frameNStart = frameN  # exact frame index\u000a        instr_infer_resp.status = STARTED\u000a        # keyboard checking is just starting\u000a        instr_infer_resp.clock.reset()  # now t=0\u000a        event.clearEvents(eventType='keyboard')\u000a    if instr_infer_resp.status == STARTED:\u000a        theseKeys = event.getKeys(keyList=['space'])\u000a        \u000a        # check for quit:\u000a        if "escape" in theseKeys:\u000a            endExpNow = True\u000a        if len(theseKeys) > 0:  # at least one key was pressed\u000a            instr_infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a            instr_infer_resp.rt = instr_infer_resp.clock.getTime()\u000a            # a response ends the routine\u000a            continueRoutine = False\u000a    \u000a    # check if all components have finished\u000a    if not continueRoutine:  # a component has requested a forced-end of Routine\u000a        routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a        break\u000a    continueRoutine = False  # will revert to True if at least one component still running\u000a    for thisComponent in instr_inferComponents:\u000a        if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a            continueRoutine = True\u000a            break  # at least one component has not yet finished\u000a    \u000a    # check for quit (the Esc key)\u000a    if endExpNow or event.getKeys(keyList=["escape"]):\u000a        core.quit()\u000a    \u000a    # refresh the screen\u000a    if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a        win.flip()\u000a    else:  # this Routine was not non-slip safe so reset non-slip timer\u000a        routineTimer.reset()\u000a\u000a#-------Ending Routine "instr_infer"-------\u000afor thisComponent in instr_inferComponents:\u000a    if hasattr(thisComponent, "setAutoDraw"):\u000a        thisComponent.setAutoDraw(False)\u000a# check responses\u000aif instr_infer_resp.keys in ['', [], None]:  # No response was made\u000a   instr_infer_resp.keys=None\u000a# store data for thisExp (ExperimentHandler)\u000athisExp.addData('instr_infer_resp.keys',instr_infer_resp.keys)\u000aif instr_infer_resp.keys != None:  # we had a response\u000a    thisExp.addData('instr_infer_resp.rt', instr_infer_resp.rt)\u000athisExp.nextEntry()\u000a\u000a\u000a######################## BLOCK LOOP ##########################\u000a\u000a# This loop runs a second nested loop that shows each item pair 10 times, followed by a rest break prompt.\u000a\u000a# set up handler to look after randomisation of conditions etc\u000ablock_loop = data.TrialHandler(nReps=3, method=u'sequential', \u000a    extraInfo=expInfo, originPath=None,\u000a    trialList=[None],\u000a    seed=None, name='block_loop')\u000athisExp.addLoop(block_loop)  # add the loop to the experiment\u000athisBlock_loop = block_loop.trialList[0]  # so we can initialise stimuli with some values\u000a# abbreviate parameter names if possible (e.g. rgb=thisBlock_loop.rgb)\u000aif thisBlock_loop != None:\u000a    for paramName in thisBlock_loop.keys():\u000a        exec(paramName + '= thisBlock_loop.' + paramName)\u000a\u000a# Set up counter to keep track of block loop cycle, so that the rest prompt is only shown twice\u000ablock_loop_counter = 0\u000a\u000a\u000afor thisBlock_loop in block_loop:\u000a    currentLoop = block_loop\u000a    # abbreviate parameter names if possible (e.g. rgb = thisBlock_loop.rgb)\u000a    if thisBlock_loop != None:\u000a        for paramName in thisBlock_loop.keys():\u000a            exec(paramName + '= thisBlock_loop.' + paramName)\u000a    \u000a    # Increase loop counter by one\u000a    block_loop_counter += 1\u000a    \u000a    # Change the condition file for the feedback block based on which block loop we're on\u000a    condfilename = filename+u'_block'+str(block_loop_counter)+u'cond.csv'\u000a    \u000a    # Minimize the psychopy window so the calibration window can be seen\u000a    win.winHandle.minimize()\u000a    #Do the eye tracker setup at the beginning of each block\u000a    tracker.runSetupProcedure()\u000a    # Re-display the psychopy window after setup is completed\u000a    win.winHandle.maximize()\u000a    win.winHandle.activate()\u000a    \u000a\u000a    \u000a    #------Prepare to start Routine "get_ready"-------\u000a    t = 0\u000a    get_readyClock.reset()  # clock \u000a    frameN = -1\u000a    routineTimer.add(3.000000)\u000a    # update component parameters for each repeat\u000a    get_ready_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    get_ready_resp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    get_readyComponents = []\u000a    get_readyComponents.append(get_ready_text)\u000a    get_readyComponents.append(get_ready_resp)\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a    \u000a    \u000a    #-------Start Routine "get_ready"-------\u000a    continueRoutine = True\u000a    while continueRoutine and routineTimer.getTime() > 0:\u000a        # get current time\u000a        t = get_readyClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *get_ready_text* updates\u000a        if t >= 0.0 and get_ready_text.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_text.tStart = t  # underestimates by a little under one frame\u000a            get_ready_text.frameNStart = frameN  # exact frame index\u000a            get_ready_text.setAutoDraw(True)\u000a        \u000a        # *get_ready_resp* updates\u000a        if t >= 0.0 and get_ready_resp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            get_ready_resp.tStart = t  # underestimates by a little under one frame\u000a            get_ready_resp.frameNStart = frameN  # exact frame index\u000a            get_ready_resp.status = STARTED\u000a            # keyboard checking is just starting\u000a            get_ready_resp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if get_ready_resp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['p'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                get_ready_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                get_ready_resp.rt = get_ready_resp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in get_readyComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "get_ready"-------\u000a    for thisComponent in get_readyComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if get_ready_resp.keys in ['', [], None]:  # No response was made\u000a       get_ready_resp.keys=None\u000a    # store data for thisExp (ExperimentHandler)\u000a    thisExp.addData('get_ready_resp.keys',get_ready_resp.keys)\u000a    if get_ready_resp.keys != None:  # we had a response\u000a        thisExp.addData('get_ready_resp.rt', get_ready_resp.rt)\u000a    thisExp.nextEntry()\u000a\u000a    ######################## TRIAL LOOP ##########################\u000a\u000a    # set up handler to look after randomisation of conditions etc\u000a    trial_loop = data.TrialHandler(nReps=1, method=u'sequential', \u000a        extraInfo=expInfo, originPath=None,\u000a        trialList=data.importConditions(condfilename),\u000a        seed=None, name='trial_loop')\u000a    thisExp.addLoop(trial_loop)  # add the loop to the experiment\u000a    thisTrial_loop = trial_loop.trialList[0]  # so we can initialise stimuli with some values\u000a    # abbreviate parameter names if possible (e.g. rgb=thisTrial_loop.rgb)\u000a    if thisTrial_loop != None:\u000a        for paramName in thisTrial_loop.keys():\u000a            exec(paramName + '= thisTrial_loop.' + paramName)\u000a    \u000a      \u000a    for thisTrial_loop in trial_loop:\u000a        currentLoop = trial_loop\u000a        # abbreviate parameter names if possible (e.g. rgb = thisTrial_loop.rgb)\u000a        if thisTrial_loop != None:\u000a            for paramName in thisTrial_loop.keys():\u000a                exec(paramName + '= thisTrial_loop.' + paramName)    \u000a        \u000a            \u000a        # Define class for setting the feedback image\u000a        class set_feedback:\u000a            options = ['correct', 'wrong']\u000a            feedback = np.random.choice(options, replace=True, p=[0.8, 0.2])\u000a            if feedback=='correct':\u000a                feedback_img = img_correct\u000a            elif feedback=='wrong':\u000a                feedback_img = img_wrong\u000a\u000a            if feedback_img==img_left:\u000a                feedback_side = 'left'\u000a            elif feedback_img==img_right:\u000a                feedback_side = 'right'\u000a                        \u000a        # Start getting data from the eye tracker\u000a        tracker.enableEventReporting(True)\u000a        # Send beginning-of-trial messages to eye tracker data file\u000a        trial_number = (block_loop.thisN * 200) + trial_loop.thisTrialN # Trial number out of 599 (starts at 0)\u000a        tracker.sendCommand("record_status_message 'INFERRING, Block %d/3, Trial %d/600 '" % (block_loop.thisN + 1, trial_number + 1))\u000a        tracker.sendMessage("TRIALID %d" % trial_number)\u000a        tracker.sendMessage("!V TRIAL_VAR_DATA %d" % trial_number)\u000a\u000a        \u000a        #------Prepare to start Routine "trial"-------\u000a        t = 0\u000a        trialtime = datetime.datetime.now()\u000a        trialClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        img_left_infer.setImage(dir_path+img_left)\u000a        img_right_infer.setImage(dir_path+img_right)\u000a        infer_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        infer_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        trialComponents = []\u000a        trialComponents.append(fixation_text)\u000a        trialComponents.append(img_left_infer)\u000a        trialComponents.append(img_right_infer)\u000a        trialComponents.append(infer_resp)\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        \u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a        \u000a        #-------Start Routine "trial"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = trialClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *fixation_text* updates\u000a            if t >= 0 and fixation_text.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==0:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                fixation_text.tStart = t  # underestimates by a little under one frame\u000a                fixation_text.frameNStart = frameN  # exact frame index\u000a                fixation_text.setAutoDraw(True)\u000a                if eye_sync_messages_sent==0:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    tracker.sendMessage("SYNCTIME %d" %drawTime)\u000a                    eye_sync_messages_sent = 1\u000a            elif fixation_text.status == STARTED and t>= (0 + (2.0-win.monitorFramePeriod*0.75)):\u000a                fixation_text.setAutoDraw(False)\u000a            \u000a            # *img_left_infer* updates\u000a            if t >= 2.0 and img_left_infer.status == NOT_STARTED:\u000a                if eye_sync_messages_sent==1:\u000a                    startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 2.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a                if eye_sync_messages_sent==1:\u000a                    drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                    tracker.sendMessage("%d DISPLAY ON ITEMS" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                    eye_sync_messages_sent = 2\u000a                      \u000a            # *infer_resp* updates\u000a            if t >= 2.0 and infer_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                infer_resp.tStart = t  # underestimates by a little under one frame\u000a                infer_resp.frameNStart = frameN  # exact frame index\u000a                infer_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                infer_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if infer_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['left', 'right'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    infer_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    infer_resp.rt = infer_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trialComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a        \u000a        #-------Ending Routine "trial"-------\u000a        for thisComponent in trialComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if infer_resp.keys in ['', [], None]:  # No response was made\u000a           infer_resp.keys=None\u000a        # store data for trial_loop (TrialHandler)\u000a        trial_loop.addData('infer_resp.keys',infer_resp.keys)\u000a        if infer_resp.keys != None:  # we had a response\u000a            trial_loop.addData('infer_resp.rt', infer_resp.rt)\u000a        trial_loop.addData('set_feedback.feedback_img', set_feedback.feedback_img)\u000a        trial_loop.addData('trial_start_time', trialtime)\u000a        \u000a        # Increase correct and incorrect response counters by 1 based on S's response\u000a        if infer_resp.keys=='left' and img_correct==img_left:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='left' and img_correct==img_right:\u000a            incorrect_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_right:\u000a            correct_counter += 1\u000a        elif infer_resp.keys=='right' and img_correct==img_left:\u000a            incorrect_counter += 1\u000a        \u000a\u000a        #------Prepare to start Routine "trial_post_response"-------\u000a        t = 0\u000a        trial_post_responseClock.reset()  # clock \u000a        frameN = -1\u000a        routineTimer.add(3.000000)\u000a        # keep track of which components have finished\u000a        trial_post_responseComponents = []\u000a        trial_post_responseComponents.append(img_left_infer)\u000a        trial_post_responseComponents.append(img_right_infer)\u000a        trial_post_responseComponents.append(selection_arrow_left)\u000a        trial_post_responseComponents.append(selection_arrow_right)\u000a        trial_post_responseComponents.append(feedback_box_left)\u000a        trial_post_responseComponents.append(feedback_box_right)\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a        # Set indicator variable for whether eye tracker messages were sent during the first loop of the routine\u000a        eye_sync_messages_sent = 0\u000a\u000a        #-------Start Routine "trial_post_response"-------\u000a        continueRoutine = True\u000a        while continueRoutine and routineTimer.getTime() > 0:\u000a            # get current time\u000a            t = trial_post_responseClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a\u000a            # *img_left_infer* updates\u000a            if t >= 0.0 and img_left_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_left_infer.tStart = t  # underestimates by a little under one frame\u000a                img_left_infer.frameNStart = frameN  # exact frame index\u000a                img_left_infer.setAutoDraw(True)\u000a            elif img_left_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_left_infer.setAutoDraw(False)\u000a            \u000a            # *img_right_infer* updates\u000a            if t >= 0.0 and img_right_infer.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                img_right_infer.tStart = t  # underestimates by a little under one frame\u000a                img_right_infer.frameNStart = frameN  # exact frame index\u000a                img_right_infer.setAutoDraw(True)\u000a            elif img_right_infer.status == STARTED and t >= (0.0 + (3.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                img_right_infer.setAutoDraw(False)\u000a            \u000a            if infer_resp.keys == 'left':\u000a                # *selection_arrow_left* updates\u000a                if t >= 0.0 and selection_arrow_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_left.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_left.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_left.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_left.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if infer_resp.keys == 'right':\u000a                # *selection_arrow_right* updates\u000a                if t >= 0.0 and selection_arrow_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==0:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    selection_arrow_right.tStart = t  # underestimates by a little under one frame\u000a                    selection_arrow_right.frameNStart = frameN  # exact frame index\u000a                    selection_arrow_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==0:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 1\u000a                elif selection_arrow_right.status == STARTED and t >= (0.0 + (0.5-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    if eye_sync_messages_sent==1:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    selection_arrow_right.setAutoDraw(False)\u000a                    if eye_sync_messages_sent==1:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON SELECTION OFF" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 2\u000a            \u000a            if set_feedback.feedback_side == 'left':\u000a                # *feedback_box_left* updates\u000a                if t >= 1.0 and feedback_box_left.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_left.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_left.frameNStart = frameN  # exact frame index\u000a                    feedback_box_left.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_left.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period left\u000a                    feedback_box_left.setAutoDraw(False)\u000a            \u000a            if set_feedback.feedback_side == 'right':\u000a                # *feedback_box_right* updates\u000a                if t >= 1.0 and feedback_box_right.status == NOT_STARTED:\u000a                    if eye_sync_messages_sent==2:\u000a                        startTime = pylink.currentTime() # Get time at start of stimulus drawing\u000a                    # keep track of start time/frame for later\u000a                    feedback_box_right.tStart = t  # underestimates by a little under one frame\u000a                    feedback_box_right.frameNStart = frameN  # exact frame index\u000a                    feedback_box_right.setAutoDraw(True)\u000a                    if eye_sync_messages_sent==2:\u000a                        drawTime = (pylink.currentTime() - startTime) # Calculate time it took to draw both items\u000a                        tracker.sendMessage("%d DISPLAY ON FEEDBACK" %drawTime) # Send messages to eye tracker data file to mark stimulus onset\u000a                        eye_sync_messages_sent = 3\u000a                elif feedback_box_right.status == STARTED and t >= (1.0 + (2.0-win.monitorFramePeriod*0.75)): #most of one frame period right\u000a                    feedback_box_right.setAutoDraw(False)\u000a\u000a\u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in trial_post_responseComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # Close iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a        \u000a        #-------Ending Routine "trial_post_response"-------\u000a        for thisComponent in trial_post_responseComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a\u000a\u000a\u000a        thisExp.nextEntry()\u000a                            \u000a    # completed 5 repeats of 'trial_loop'\u000a    \u000a    if block_loop_counter <= 2: # If this is the first or second cycle of the loop, display the rest break prompt\u000a\u000a        #------Prepare to start Routine "rest_prompt"-------\u000a        t = 0\u000a        rest_promptClock.reset()  # clock \u000a        frameN = -1\u000a        # update component parameters for each repeat\u000a        rest_prompt_resp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a        rest_prompt_resp.status = NOT_STARTED\u000a        # keep track of which components have finished\u000a        rest_promptComponents = []\u000a        rest_promptComponents.append(rest_prompt_txt)\u000a        rest_promptComponents.append(rest_prompt_resp)\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, 'status'):\u000a                thisComponent.status = NOT_STARTED\u000a\u000a        #-------Start Routine "rest_prompt"-------\u000a        continueRoutine = True\u000a        while continueRoutine:\u000a            # get current time\u000a            t = rest_promptClock.getTime()\u000a            frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a            # update/draw components on each frame\u000a            \u000a            # *rest_prompt_txt* updates\u000a            if t >= 0.0 and rest_prompt_txt.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_txt.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_txt.frameNStart = frameN  # exact frame index\u000a                rest_prompt_txt.setAutoDraw(True)\u000a            \u000a            # *rest_prompt_resp* updates\u000a            if t >= 2.0 and rest_prompt_resp.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                rest_prompt_resp.tStart = t  # underestimates by a little under one frame\u000a                rest_prompt_resp.frameNStart = frameN  # exact frame index\u000a                rest_prompt_resp.status = STARTED\u000a                # keyboard checking is just starting\u000a                rest_prompt_resp.clock.reset()  # now t=0\u000a                event.clearEvents(eventType='keyboard')\u000a            if rest_prompt_resp.status == STARTED:\u000a                theseKeys = event.getKeys(keyList=['space'])\u000a                \u000a                # check for quit:\u000a                if "escape" in theseKeys:\u000a                    endExpNow = True\u000a                if len(theseKeys) > 0:  # at least one key was pressed\u000a                    rest_prompt_resp.keys = theseKeys[-1]  # just the last key pressed\u000a                    rest_prompt_resp.rt = rest_prompt_resp.clock.getTime()\u000a                    # a response ends the routine\u000a                    continueRoutine = False\u000a            \u000a            # check if all components have finished\u000a            if not continueRoutine:  # a component has requested a forced-end of Routine\u000a                routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a                break\u000a            continueRoutine = False  # will revert to True if at least one component still running\u000a            for thisComponent in rest_promptComponents:\u000a                if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                    continueRoutine = True\u000a                    break  # at least one component has not yet finished\u000a            \u000a            # check for quit (the Esc key)\u000a            if endExpNow or event.getKeys(keyList=["escape"]):\u000a                tracker.enableEventReporting(False) # End eye tracker data recording\u000a                tracker.sendMessage("EXPERIMENT ABORTED")\u000a                io.quit() # CLose iohub\u000a                core.quit()\u000a            \u000a            # refresh the screen\u000a            if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a                win.flip()\u000a            else:  # this Routine was not non-slip safe so reset non-slip timer\u000a                routineTimer.reset()\u000a\u000a        #-------Ending Routine "rest_prompt"-------\u000a        for thisComponent in rest_promptComponents:\u000a            if hasattr(thisComponent, "setAutoDraw"):\u000a                thisComponent.setAutoDraw(False)\u000a        # check responses\u000a        if rest_prompt_resp.keys in ['', [], None]:  # No response was made\u000a           rest_prompt_resp.keys=None\u000a        # store data for thisExp (ExperimentHandler)\u000a        thisExp.addData('rest_prompt_resp.keys',rest_prompt_resp.keys)\u000a        if rest_prompt_resp.keys != None:  # we had a response\u000a            thisExp.addData('rest_prompt_resp.rt', rest_prompt_resp.rt)\u000a\u000a\u000a    thisExp.nextEntry()\u000a    \u000a# completed 3 repeats of 'block_loop'\u000a\u000a\u000a# store data for total number of correct and incorrect responses    \u000athisExp.addData('correct_counter', correct_counter)\u000athisExp.addData('incorrect_counter', incorrect_counter)\u000athisExp.nextEntry()     \u000a\u000atracker.setConnectionState(False) # Close and transfer eye-tracking data, then close down eye tracker connection\u000a\u000a\u000a######################## AUCTION ##########################\u000a\u000aif len(prefs)==41 and len(bids)==41: # If S completed the entire binary choice and BDM routines, run the auction\u000a\u000a    # run the auction\u000a    class auction:\u000a        rand_itm = randint(1, (len(prefs))) # pick index for S's chosen item from a random choice\u000a        price = float((randint(1, 300)))/100 # assign a price to the item randomly from between 0.01 and 3 pounds\u000a        bid = prefs[rand_itm][3]\u000a        # check if S's bid for that item was above or below the price\u000a        if bid >= price:\u000a            win_item=True\u000a        elif bid < price:\u000a            win_item=False\u000a\u000a        # set text for the auction screen\u000a        if win_item==True:\u000a            auc_res_txt = u'Congratulations! You won the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' matched or exceeded the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = price\u000a        elif win_item==False:\u000a            auc_res_txt = u'Sorry, you did not win the following item at auction. \u005cnThis was your preferred item out of a randomly selected pair from one of the choice tasks.'\u000a            auc_prc_txt = u'Your bid of \u005cxa3' + '{0:.2f}'.format(bid) + u' was lower than the randomly generated price of \u005cxa3' + '{0:.2f}'.format(price) + '.\u005cn\u005cn[Press space bar to continue]'\u000a            cost = 0\u000a\u000a        # find the image path of the auction item\u000a        rand_itm_img = prefs[rand_itm][2]\u000a\u000a    # add up each component of S's payment\u000a    class score:\u000a        base = 25\u000a        rwrd = 0.01\u000a        loss = 0\u000a        rwrd_tot = rwrd * correct_counter\u000a        loss_tot = loss * incorrect_counter\u000a        pre_pymt = base + rwrd_tot - loss_tot\u000a        final_pymt = pre_pymt - auction.cost\u000a\u000a        pymt_expl_bdwn = u'\u005cxa3' + '{0:.2f}'.format(base) + u' base payment'+ u'\u005cn+ \u005cxa3' + '{0:.2f}'.format(rwrd_tot) + ' reward for ' + str(correct_counter) + u' correct responses (\u005cxa3' + '{0:.2f}'.format(rwrd) + u' each)' + u'\u005cn- \u005cxa3' + '{0:.2f}'.format(auction.cost) + ' cost of auction item' \u000a        pymt_expl_tot = u'Your total payment is: \u005cxa3' + '{0:.2f}'.format(final_pymt) + '\u005cn\u005cnThank you for participating! Please call the experimenter into the room.'\u000a\u000a\u000a    # Initialize components for Routine "auc_disp"\u000a    auc_dispClock = core.Clock()\u000a    pic_auc_itm = visual.ImageStim(win=win, name='pic_auc_itm',\u000a        image=dir_path+auction.rand_itm_img, mask=None,\u000a        ori=0, pos=[0, 0], size=None,\u000a        color=[1,1,1], colorSpace=u'rgb', opacity=1,\u000a        flipHoriz=False, flipVert=False,\u000a        texRes=128, interpolate=False, depth=0.0)\u000a    auc_txt1 = visual.TextStim(win=win, ori=0, name='auc_txt1',\u000a        text=auction.auc_res_txt, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    auc_txt2 = visual.TextStim(win=win, ori=0, name='auc_txt2',\u000a        text=auction.auc_prc_txt, font=u'Arial',\u000a        pos=[0, -0.6], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a\u000a    #------Prepare to start Routine "auc_disp"-------\u000a    t = 0\u000a    auc_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_auc_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_auc_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    auc_dispComponents = []\u000a    auc_dispComponents.append(pic_auc_itm)\u000a    auc_dispComponents.append(auc_txt1)\u000a    auc_dispComponents.append(auc_txt2)\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *pic_auc_itm* updates\u000a        if t >= 0.2 and pic_auc_itm.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a            pic_auc_itm.frameNStart = frameN  # exact frame index\u000a            pic_auc_itm.setAutoDraw(True)\u000a        \u000a        # *auc_txt1* updates\u000a        if t >= 0.2 and auc_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt1.tStart = t  # underestimates by a little under one frame\u000a            auc_txt1.frameNStart = frameN  # exact frame index\u000a            auc_txt1.setAutoDraw(True)\u000a\u000a        # *auc_txt2* updates\u000a        if t >= 0.2 and auc_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_txt2.tStart = t  # underestimates by a little under one frame\u000a            auc_txt2.frameNStart = frameN  # exact frame index\u000a            auc_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_auc_disp* updates\u000a        if t >= 0.2 and key_resp_auc_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_auc_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_auc_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_auc_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_auc_disp.clock.reset()  # now t=0\u000a        if key_resp_auc_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_auc_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_auc_disp.rt = key_resp_auc_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_disp"-------\u000a    for thisComponent in auc_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_auc_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_auc_disp.keys=None\u000a    # store data for thisExp (TrialHandler)\u000a    thisExp.addData('auction.win_item', auction.win_item)\u000a    thisExp.addData('auction.price', auction.price)\u000a    thisExp.addData('auction.bid', auction.bid)\u000a    thisExp.addData('auction.rand_itm_img', auction.rand_itm_img)\u000a    thisExp.addData('score.base', score.base)\u000a    thisExp.addData('score.rwrd', score.rwrd)\u000a    thisExp.addData('score.loss', score.loss)\u000a    thisExp.addData('correct_counter', correct_counter)\u000a    thisExp.addData('incorrect_counter', incorrect_counter)\u000a    thisExp.addData('score.final_pymt', score.final_pymt)\u000a    thisExp.nextEntry()\u000a\u000a\u000a    # Initialize components for Routine "pymt_disp"\u000a    pymt_dispClock = core.Clock()\u000a    pymt_disp_txt1 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt1',\u000a        text=score.pymt_expl_bdwn, font=u'Arial',\u000a        pos=[0, 0.6], height=0.07, wrapWidth=1.5,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a    pymt_disp_txt2 = visual.TextStim(win=win, ori=0, name='pymt_disp_txt2',\u000a        text=score.pymt_expl_tot, font=u'Arial',\u000a        pos=[0, -0.65], height=0.1, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "pymt_disp"-------\u000a    t = 0\u000a    pymt_dispClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    key_resp_pymt_disp = event.BuilderKeyResponse()  # create an object of type KeyResponse\u000a    key_resp_pymt_disp.status = NOT_STARTED\u000a    # keep track of which components have finished\u000a    pymt_dispComponents = []\u000a    pymt_dispComponents.append(pic_auc_itm)\u000a    pymt_dispComponents.append(pymt_disp_txt1)\u000a    pymt_dispComponents.append(pymt_disp_txt2)\u000a    pymt_dispComponents.append(key_resp_pymt_disp)\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "pymt_disp"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = pymt_dispClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        if auction.win_item==True:\u000a            # *pic_auc_itm* updates\u000a            if t >= 0.0 and pic_auc_itm.status == NOT_STARTED:\u000a                # keep track of start time/frame for later\u000a                pic_auc_itm.tStart = t  # underestimates by a little under one frame\u000a                pic_auc_itm.frameNStart = frameN  # exact frame index\u000a                pic_auc_itm.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt1* updates\u000a        if t >= 0.0 and pymt_disp_txt1.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt1.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt1.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt1.setAutoDraw(True)\u000a\u000a        # *pymt_disp_txt2* updates\u000a        if t >= 0.0 and pymt_disp_txt2.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            pymt_disp_txt2.tStart = t  # underestimates by a little under one frame\u000a            pymt_disp_txt2.frameNStart = frameN  # exact frame index\u000a            pymt_disp_txt2.setAutoDraw(True)\u000a        \u000a        # *key_resp_pymt_disp* updates\u000a        if t >= 3.0 and key_resp_pymt_disp.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            key_resp_pymt_disp.tStart = t  # underestimates by a little under one frame\u000a            key_resp_pymt_disp.frameNStart = frameN  # exact frame index\u000a            key_resp_pymt_disp.status = STARTED\u000a            # keyboard checking is just starting\u000a            key_resp_pymt_disp.clock.reset()  # now t=0\u000a            event.clearEvents(eventType='keyboard')\u000a        if key_resp_pymt_disp.status == STARTED:\u000a            theseKeys = event.getKeys(keyList=['space'])\u000a            \u000a            # check for quit:\u000a            if "escape" in theseKeys:\u000a                endExpNow = True\u000a            if len(theseKeys) > 0:  # at least one key was pressed\u000a                key_resp_pymt_disp.keys = theseKeys[-1]  # just the last key pressed\u000a                key_resp_pymt_disp.rt = key_resp_pymt_disp.clock.getTime()\u000a                # a response ends the routine\u000a                continueRoutine = False\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in pymt_dispComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "pymt_disp"-------\u000a    for thisComponent in pymt_dispComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a    # check responses\u000a    if key_resp_pymt_disp.keys in ['', [], None]:  # No response was made\u000a       key_resp_pymt_disp.keys=None\u000a\u000aelse: # If S didn't complete the entire binary choice and BDM routines during this session, prompt a manual auction\u000a    # Initialize components for Routine "auc_manual"\u000a    auc_manualClock = core.Clock()\u000a    auc_manual_txt = visual.TextStim(win=win, ori=0, name='auc_manual_txt',\u000a        text=u'Thank you! This completes the experiment. Please get the experimenter, who will run the auction and calculate your final payment.\u005cn\u005cnCorrect: ' + str(correct_counter) + '\u005cnIncorrect: ' + str(incorrect_counter),    font=u'Arial',\u000a        pos=[0, 0], height=0.07, wrapWidth=None,\u000a        color=u'white', colorSpace=u'rgb', opacity=1,\u000a        depth=0.0)\u000a\u000a    #------Prepare to start Routine "auc_manual"-------\u000a    t = 0\u000a    auc_manualClock.reset()  # clock \u000a    frameN = -1\u000a    # update component parameters for each repeat\u000a    # keep track of which components have finished\u000a    auc_manualComponents = []\u000a    auc_manualComponents.append(auc_manual_txt)\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, 'status'):\u000a            thisComponent.status = NOT_STARTED\u000a\u000a    #-------Start Routine "auc_manual"-------\u000a    continueRoutine = True\u000a    while continueRoutine:\u000a        # get current time\u000a        t = auc_manualClock.getTime()\u000a        frameN = frameN + 1  # number of completed frames (so 0 is the first frame)\u000a        # update/draw components on each frame\u000a        \u000a        # *auc_manual_txt* updates\u000a        if t >= 0.0 and auc_manual_txt.status == NOT_STARTED:\u000a            # keep track of start time/frame for later\u000a            auc_manual_txt.tStart = t  # underestimates by a little under one frame\u000a            auc_manual_txt.frameNStart = frameN  # exact frame index\u000a            auc_manual_txt.setAutoDraw(True)\u000a        \u000a        # check if all components have finished\u000a        if not continueRoutine:  # a component has requested a forced-end of Routine\u000a            routineTimer.reset()  # if we abort early the non-slip timer needs reset\u000a            break\u000a        continueRoutine = False  # will revert to True if at least one component still running\u000a        for thisComponent in auc_manualComponents:\u000a            if hasattr(thisComponent, "status") and thisComponent.status != FINISHED:\u000a                continueRoutine = True\u000a                break  # at least one component has not yet finished\u000a        \u000a        # check for quit (the Esc key)\u000a        if endExpNow or event.getKeys(keyList=["escape"]):\u000a            core.quit()\u000a        \u000a        # refresh the screen\u000a        if continueRoutine:  # don't flip if this routine is over or we'll get a blank screen\u000a            win.flip()\u000a        else:  # this Routine was not non-slip safe so reset non-slip timer\u000a            routineTimer.reset()\u000a\u000a    #-------Ending Routine "auc_manual"-------\u000a    for thisComponent in auc_manualComponents:\u000a        if hasattr(thisComponent, "setAutoDraw"):\u000a            thisComponent.setAutoDraw(False)\u000a\u000athisExp.nextEntry()\u000a\u000aio.quit() # Close iohub\u000a\u000a\u000awin.close()\u000acore.quit()\u000a
p10235
sg9108
(lp10236
sg9110
I78430544
sg10
g9400
sg6
g9112
sg9113
I1
sg52
I01
sg53
g54
sg9114
g1
(g9115
g9116
(dp10237
g33
g9119
(g9120
g93
g9121
S'b'
tRp10238
(I1
(I200
I1
tg9245
I00
S"\xd0$\x87\x1a\x90@\x87\x1a\xf8$\x87\x1a %\x87\x1aH%\x87\x1a\x88&\x87\x1a\x90K\x86\x1ap%\x87\x1a\x00'\x87\x1a 1\x87\x1a\xc0%\x87\x1a\xd0$\x87\x1a\xc8@\x87\x1a\xe8%\x87\x1a\xc0K\x86\x1a\x10&\x87\x1a\x80L\x86\x1a\xf0K\x86\x1a\x10&\x87\x1a\x98%\x87\x1a\xa01\x87\x1a@1\x87\x1a`1\x87\x1a\x90@\x87\x1a\xb0&\x87\x1ap%\x87\x1a\xd0$\x87\x1aH%\x87\x1a`&\x87\x1a\x00A\x87\x1a\xf0K\x86\x1ap%\x87\x1a\x10&\x87\x1a\xd8&\x87\x1a\x00A\x87\x1a@1\x87\x1a %\x87\x1a\x801\x87\x1a\x98%\x87\x1a\x801\x87\x1a\xe8%\x87\x1a\x90K\x86\x1a\xa0M\x86\x1a`1\x87\x1a\x00A\x87\x1a\x90@\x87\x1a\x00A\x87\x1a\x801\x87\x1a\xf0K\x86\x1a\x98%\x87\x1a\x801\x87\x1a\xc8@\x87\x1a\xc0%\x87\x1a\x00A\x87\x1a\xd0$\x87\x1a\x00A\x87\x1a\x801\x87\x1a\xd0$\x87\x1aH%\x87\x1a('\x87\x1ap%\x87\x1a\xc8@\x87\x1ap%\x87\x1a %\x87\x1a`&\x87\x1a\x90K\x86\x1a %\x87\x1a\xe0L\x86\x1a\xe8%\x87\x1a\xc8@\x87\x1a\x801\x87\x1a\xc0K\x86\x1a L\x86\x1a\x90@\x87\x1a\xf0K\x86\x1a\xc0K\x86\x1a %\x87\x1a\x10&\x87\x1a L\x86\x1a\xc8@\x87\x1a\xf0K\x86\x1aPL\x86\x1a\xf8$\x87\x1a\x10&\x87\x1a %\x87\x1ap%\x87\x1aH%\x87\x1a\x98%\x87\x1a\xe0A\x87\x1a\xf8$\x87\x1a`1\x87\x1a\xf0K\x86\x1a('\x87\x1a 1\x87\x1a\x10&\x87\x1aH%\x87\x1a L\x86\x1a\x90@\x87\x1a\xc0%\x87\x1ap%\x87\x1a\x00A\x87\x1a\xc8@\x87\x1a\xf8$\x87\x1a\x00A\x87\x1apA\x87\x1a\xe0L\x86\x1a\x801\x87\x1a 1\x87\x1a\xc0%\x87\x1a\xd0$\x87\x1a\x90@\x87\x1a\xe0L\x86\x1a 1\x87\x1a('\x87\x1a\x801\x87\x1a\xa01\x87\x1a`1\x87\x1a\xc8@\x87\x1a\x88&\x87\x1a\x00A\x87\x1a\xe8%\x87\x1a\x90@\x87\x1a\x10&\x87\x1a L\x86\x1a\xe8%\x87\x1a8A\x87\x1a\xc0%\x87\x1a\xf0K\x86\x1a\xb0L\x86\x1a 1\x87\x1a`1\x87\x1a\x98%\x87\x1a8A\x87\x1a L\x86\x1a\x10&\x87\x1a\xc0K\x86\x1a L\x86\x1a\x90K\x86\x1aH%\x87\x1a\xf0K\x86\x1a\x80L\x86\x1a\xe8%\x87\x1a %\x87\x1a\xf8$\x87\x1a@1\x87\x1a L\x86\x1a('\x87\x1a\xc0%\x87\x1a\xc0K\x86\x1a\x98%\x87\x1a\xf8$\x87\x1a\x10&\x87\x1ap%\x87\x1a\xc0%\x87\x1a`1\x87\x1a\xc8@\x87\x1a\x88&\x87\x1a`1\x87\x1aH%\x87\x1a 1\x87\x1a\xa0M\x86\x1a\x90K\x86\x1a@1\x87\x1a %\x87\x1a\x98%\x87\x1a\xe8%\x87\x1a\xb0L\x86\x1a L\x86\x1a\x90@\x87\x1a 1\x87\x1a\x00'\x87\x1a 1\x87\x1a@1\x87\x1a\xe8%\x87\x1a@M\x86\x1a\x90K\x86\x1a`1\x87\x1a\x801\x87\x1aH%\x87\x1a\xd0$\x87\x1a\xf8$\x87\x1a\xd0$\x87\x1a\x10&\x87\x1a\xb0&\x87\x1a\x00'\x87\x1apA\x87\x1a\xc8@\x87\x1a\xc01\x87\x1a\x80L\x86\x1aH%\x87\x1a\x90K\x86\x1a@1\x87\x1ap%\x87\x1a\x00A\x87\x1a\xc0K\x86\x1a\xc0%\x87\x1a\xc8@\x87\x1a\xc0K\x86\x1a`1\x87\x1a@M\x86\x1a"
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9118
g9119
(g9120
g93
g9121
S'b'
tRp10239
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?\x00\x00\x80?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg38
g9119
(g9120
g93
g9121
S'b'
tRp10240
(I1
(I200
I1
tg9245
I00
S' \xdd\xb3\x04`2\x87\x1a`3\x87\x1a 3\x87\x1a\xa03\x87\x1a\x003\x87\x1a\xe03\x87\x1a\x802\x87\x1a\x004\x87\x1a@4\x87\x1a@3\x87\x1a 4\x87\x1a\xa04\x87\x1a\xc04\x87\x1a\xe02\x87\x1a\x002\x87\x1a\xe04\x87\x1a@5\x87\x1a 5\x87\x1a\x805\x87\x1a`5\x87\x1a\xc05\x87\x1a\xe05\x87\x1a\x803\x87\x1a 6\x87\x1a\x006\x87\x1a`6\x87\x1a@6\x87\x1a\xa06\x87\x1a\x806\x87\x1a\xe06\x87\x1a\xc06\x87\x1a 7\x87\x1a\x007\x87\x1a\xe01\x87\x1a@7\x87\x1a`7\x87\x1a\x807\x87\x1a\xe07\x87\x1a\x008\x87\x1a 8\x87\x1a\xc03\x87\x1a`8\x87\x1a@8\x87\x1a\xa05\x87\x1a\x808\x87\x1a\xe08\x87\x1a\x009\x87\x1a 9\x87\x1a\xa07\x87\x1a\xa02\x87\x1a\x809\x87\x1a`9\x87\x1a\x804\x87\x1a\xa09\x87\x1a\xc09\x87\x1a\xe09\x87\x1a\x00:\x87\x1a\xc0o\xba\x0c@:\x87\x1a :\x87\x1a\xc0:\x87\x1a`4\x87\x1a\xe0:\x87\x1a`:\x87\x1a\x005\x87\x1a 2\x87\x1a\xa08\x87\x1a\x80:\x87\x1a\xe0;\x87\x1a`<\x87\x1a\x00;\x87\x1a\x80;\x87\x1a@9\x87\x1a@;\x87\x1a\xa0<\x87\x1a`;\x87\x1a\xc02\x87\x1a\xa0:\x87\x1a@2\x87\x1a =\x87\x1a\x00<\x87\x1a\x80=\x87\x1a\xc07\x87\x1a\xa0;\x87\x1a ;\x87\x1a <\x87\x1a`=\x87\x1a\xc0;\x87\x1a\x00=\x87\x1a\xe0>\x87\x1a\xc0=\x87\x1a`>\x87\x1a\xc0<\x87\x1a >\x87\x1a\xe0=\x87\x1a ?\x87\x1a\x80>\x87\x1a\xc0>\x87\x1a\xa0>\x87\x1a\xe0?\x87\x1a\x00>\x87\x1a\xc08\x87\x1a\x80<\x87\x1a\x80?\x87\x1a@?\x87\x1a@<\x87\x1a\xc0?\x87\x1a\xe0<\x87\x1a\x00?\x87\x1a\xa0?\x87\x1a\xa0=\x87\x1a \xd8\xb3\x04`?\x87\x1a@\x92\xb2\x1a \x92\xb2\x1a\xc0\x90\xb2\x1a@\x91\xb2\x1a\x00\x92\xb2\x1a\xe0\x90\xb2\x1a`\x90\xb2\x1a\x00\xda\xb3\x04\xc0\x92\xb2\x1a\x00\x91\xb2\x1a \x93\xb2\x1a\xe0\x92\xb2\x1a\x80\x90\xb2\x1a@\x93\xb2\x1a\xc0\x93\xb2\x1a\xc0\x91\xb2\x1a\x80\x92\xb2\x1a`\x92\xb2\x1a\xe0\x93\xb2\x1a\xa0\x92\xb2\x1a\x80\x94\xb2\x1a\x80\x93\xb2\x1a`\x91\xb2\x1a`\x94\xb2\x1a\xa0\x90\xb2\x1a\xa0\x93\xb2\x1a \x95\xb2\x1a@\x90\xb2\x1a`\x93\xb2\x1a\xa0\x91\xb2\x1a\xa0\x95\xb2\x1a@\x95\xb2\x1a \x91\xb2\x1a\xa0\x94\xb2\x1a\x00\x95\xb2\x1a\x00\x93\xb2\x1a@\x94\xb2\x1a\x00\x96\xb2\x1a`\x96\xb2\x1a\x00\x94\xb2\x1a\xe0\x96\xb2\x1a \x96\xb2\x1a\x80\x95\xb2\x1a@\x97\xb2\x1a\xa0\x96\xb2\x1a\xa0\x97\xb2\x1a@\x96\xb2\x1a`\x95\xb2\x1a\xc0\x95\xb2\x1a\xe0\x91\xb2\x1a \x98\xb2\x1a \x94\xb2\x1a\x00\x97\xb2\x1a\xc0\x96\xb2\x1a\xc0\x98\xb2\x1a\x80\x96\xb2\x1a\xe0\x98\xb2\x1a\x00\x99\xb2\x1a\x80\x91\xb2\x1a`\x99\xb2\x1a\xc0\x97\xb2\x1a\xe0\x94\xb2\x1a \x99\xb2\x1a\x80\x99\xb2\x1a\xc0\x99\xb2\x1a \x9a\xb2\x1a\xa0\x99\xb2\x1a \x90\xb2\x1a@\x99\xb2\x1a\xe0\x99\xb2\x1a`\x98\xb2\x1a\x80\x98\xb2\x1a`\x9a\xb2\x1a\xa0\x9a\xb2\x1a\xe0\x95\xb2\x1a\x00\x98\xb2\x1a@\x98\xb2\x1a`\x97\xb2\x1a\xe0\x97\xb2\x1a\x80\x9b\xb2\x1a \x9b\xb2\x1a \x97\xb2\x1a\xe0\x9b\xb2\x1a\x00\x9c\xb2\x1a\x80\x9c\xb2\x1a@\x9b\xb2\x1a'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg9126
g9119
(g9120
g93
g9121
S'b'
tRp10241
(I1
(I200
I1
tg9123
I00
S'\x00\x00\x00\x00\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@\x00\x00\xa0@\x00\x00\xc0@\x00\x00\xe0@\x00\x00\x00A\x00\x00\x10A\x00\x00 A\x00\x000A\x00\x00@A\x00\x00PA\x00\x00`A\x00\x00pA\x00\x00\x80A\x00\x00\x88A\x00\x00\x90A\x00\x00\x98A\x00\x00\xa0A\x00\x00\xa8A\x00\x00\xb0A\x00\x00\xb8A\x00\x00\xc0A\x00\x00\xc8A\x00\x00\xd0A\x00\x00\xd8A\x00\x00\xe0A\x00\x00\xe8A\x00\x00\xf0A\x00\x00\xf8A\x00\x00\x00B\x00\x00\x04B\x00\x00\x08B\x00\x00\x0cB\x00\x00\x10B\x00\x00\x14B\x00\x00\x18B\x00\x00\x1cB\x00\x00 B\x00\x00$B\x00\x00(B\x00\x00,B\x00\x000B\x00\x004B\x00\x008B\x00\x00<B\x00\x00@B\x00\x00DB\x00\x00HB\x00\x00LB\x00\x00PB\x00\x00TB\x00\x00XB\x00\x00\\B\x00\x00`B\x00\x00dB\x00\x00hB\x00\x00lB\x00\x00pB\x00\x00tB\x00\x00xB\x00\x00|B\x00\x00\x80B\x00\x00\x82B\x00\x00\x84B\x00\x00\x86B\x00\x00\x88B\x00\x00\x8aB\x00\x00\x8cB\x00\x00\x8eB\x00\x00\x90B\x00\x00\x92B\x00\x00\x94B\x00\x00\x96B\x00\x00\x98B\x00\x00\x9aB\x00\x00\x9cB\x00\x00\x9eB\x00\x00\xa0B\x00\x00\xa2B\x00\x00\xa4B\x00\x00\xa6B\x00\x00\xa8B\x00\x00\xaaB\x00\x00\xacB\x00\x00\xaeB\x00\x00\xb0B\x00\x00\xb2B\x00\x00\xb4B\x00\x00\xb6B\x00\x00\xb8B\x00\x00\xbaB\x00\x00\xbcB\x00\x00\xbeB\x00\x00\xc0B\x00\x00\xc2B\x00\x00\xc4B\x00\x00\xc6B\x00\x00\xc8B\x00\x00\xcaB\x00\x00\xccB\x00\x00\xceB\x00\x00\xd0B\x00\x00\xd2B\x00\x00\xd4B\x00\x00\xd6B\x00\x00\xd8B\x00\x00\xdaB\x00\x00\xdcB\x00\x00\xdeB\x00\x00\xe0B\x00\x00\xe2B\x00\x00\xe4B\x00\x00\xe6B\x00\x00\xe8B\x00\x00\xeaB\x00\x00\xecB\x00\x00\xeeB\x00\x00\xf0B\x00\x00\xf2B\x00\x00\xf4B\x00\x00\xf6B\x00\x00\xf8B\x00\x00\xfaB\x00\x00\xfcB\x00\x00\xfeB\x00\x00\x00C\x00\x00\x01C\x00\x00\x02C\x00\x00\x03C\x00\x00\x04C\x00\x00\x05C\x00\x00\x06C\x00\x00\x07C\x00\x00\x08C\x00\x00\tC\x00\x00\nC\x00\x00\x0bC\x00\x00\x0cC\x00\x00\rC\x00\x00\x0eC\x00\x00\x0fC\x00\x00\x10C\x00\x00\x11C\x00\x00\x12C\x00\x00\x13C\x00\x00\x14C\x00\x00\x15C\x00\x00\x16C\x00\x00\x17C\x00\x00\x18C\x00\x00\x19C\x00\x00\x1aC\x00\x00\x1bC\x00\x00\x1cC\x00\x00\x1dC\x00\x00\x1eC\x00\x00\x1fC\x00\x00 C\x00\x00!C\x00\x00"C\x00\x00#C\x00\x00$C\x00\x00%C\x00\x00&C\x00\x00\'C\x00\x00(C\x00\x00)C\x00\x00*C\x00\x00+C\x00\x00,C\x00\x00-C\x00\x00.C\x00\x00/C\x00\x000C\x00\x001C\x00\x002C\x00\x003C\x00\x004C\x00\x005C\x00\x006C\x00\x007C\x00\x008C\x00\x009C\x00\x00:C\x00\x00;C\x00\x00<C\x00\x00=C\x00\x00>C\x00\x00?C\x00\x00@C\x00\x00AC\x00\x00BC\x00\x00CC\x00\x00DC\x00\x00EC\x00\x00FC\x00\x00GC'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg39
g9119
(g9120
g93
g9121
S'b'
tRp10242
(I1
(I200
I1
tg9123
I00
S'\xa0\xc2L?C\x18b?\xc4\x84H?\xeb\tQ?q\x11b?\xd7\x12@?\xf8 b?K\x99Y?\x96\xaaj?\xa4\xdd\x1d?\xa4\xdb\x1d?\xc0\xe5L?\xd0\xd3\x1d?\xa1x7?7\x1f"?\xe1\xba;?t!b?\xfa\x15@?\x93v7?AMU?sff?\xda\x0cQ?\xba\xbc;?*vf?/r7?v>D?\xe8^&?\x19\x0cb?\xa8\x82H?aM3?Y\xeb.?\x8f/3?C\xfc\x7f?\xfa\xedn?\xacPU?<\x04/?c\x1d"?\xd3CD?E\x83H?\x8c\xe6.?\x10\xaaj?y\xf7.?\xbb2s?\x15\x89H?\xd7_&? \xf9\x7f?\xa9\xaaj?7\xbb\x9b?\xec\x89H?&\xfb??\xdb<D?Lg&?\xe5\xfd??g\xc7*?\x05NU?U\x03@?\x13\xf5??\xbch&?\x98\xedP?\x11\x91\x88?t\xb9{?\xffd&?h\x01@?\x14q7?\x8a\x91Y?\xfd\xd9;?\xe5-3?\x17e&?\x98\xfb??1\x04@?\x9f\x0bQ?qx7?\\\tQ?\xd3\x9dj?2\x1db?\xe6\x8b&?\x05\x9cY?\xb78b?\xa2\xff??\xd233?%\xe7.?\x0e\xfcP?c\xe3.?3\xb4Y?\x98\xaa*?!$"?\x1c\x00Q?8\xff??\xac-3?\xda\xc5*?3\x1b"?\x8d\xbb;?l!\x82?U b?3\xcdL?F\x11b?\x13-3?\xee\x08Q?j?D?o\xfe??\xd6\xf7\x7f?\xceq\xa6?91\xb3?\xf1\xbb;?\x9dv\x97?l\x0cQ?\xba7b?\xb7\xfc??\xc7pw?\xad\xd7]?\x0c\xf4??\xf2\xe7.?\x8amU?\xce4s?\xd1\x1d"?\x06?D?T@D?\xce\xb8;?\xc543?\xfc\x0cQ?~.3?\xce`7?\x11gf?Lww?>\xebL?].3?P\xc9L?\xda!"?\x1f#"?o`f?\\K3?\x91\xccL?\xe2q7?\xb9\x99Y?\xb7\xc6L?\x19w7?\'ZD?\x8b\xad*?tGf?&\x88H?\x9623?\x92\xaaj?\xbd)Q?\x8a33?\x95\xe8.?4\xf9??\xcd\xc5L?\x96\xf1.?_L3?\xe3.3?wTU?\x10\x1d\x82?\xe0e&?\xa6x7?\xbf\x9b\x19?\x1a03?&\x11Q?\xf9\xd2\x1d?U"3?\xaf\x1d"?zW\x95?\x1e\xa3*?\xfe\xb6;?\x94e&?\x98\xaa*?\xc5\xdd\x1d?\xdf\xf5\x1d?JSU?\xfd]f?R\x1a"?\x90bf?;\xf1.?5\x9bH?\x1f\x87H?\xae\x1db?T\x99Y?\x8c\x89H?\x92!"?\xe6H&?\xe2df?\xbd,3?.\xa6j?\xa0\xc0L?\xf8\xb4{?@fU?\x93\xe7.?\x94\x9a*?(!b?{p7?\xb1Uf?\x82\xcb;?\xe9)s?=-s?X\x12Q?\xb5e&?\x98O\x15?\x1b\xc5*?\xfb.3?\x83\xde]?I\x98Y?'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
Ntbsg34
g9119
(g9120
g93
g9121
S'b'
tRp10243
(I1
(I200
I1
tg9245
I00
S'(g\xcc\x04@d\xcc\x04\x80\\\x9d\x04HU\x9d\x04HR\x9d\x04hY\x9d\x04\xc8\\\x9d\x04\x00[\x9d\x04\xf0^\x9d\x04x[\x9d\x04\xb0\\\x9d\x04\x10W\x9d\x04\x88Q\x9d\x04(Z\x9d\x04\x10]\x9d\x04\x80S\x9d\x04`X\x9d\x04x^\x9d\x04\xc8_\x9d\x04 _\x9d\x04HX\x9d\x04\x90U\x9d\x04(W\x9d\x040X\x9d\x04XW\x9d\x04\x08Y\x9d\x04\x80_\x9d\x04(Q\x9d\x04H^\x9d\x040^\x9d\x04 Y\x9d\x04\xb0Y\x9d\x04xU\x9d\x04\xa8^\x9d\x04\xc8Y\x9d\x04\xa0]\x9d\x04 \\\x9d\x04\x90[\x9d\x048_\x9d\x04\xb0_\x9d\x04h\\\x9d\x04\x18[\x9d\x04\x80V\x9d\x04X\xda\x1a\x0c\xd0\xd1\x1a\x0cp\xd4\x1a\x0cX\xd1\x1a\x0c\xe0\xd6\x1a\x0c0\xd8\x1a\x0c\x80\xd3\x1a\x0c\x10\xd7\x1a\x0c\xc0\xde\x1a\x0c\xe8\xdd\x1a\x0cx\xde\x1a\x0cX\xd4\x1a\x0c\xa8\xd8\x1a\x0c8\xd0\x1a\x0c\x88\xd7\x1a\x0c8\xd9\x1a\x0cH\xd8\x1a\x0c\x90\xd8\x1a\x0c\x18\xd2\x1a\x0c\x98\xd3\x1a\x0c\xb0\xd0\x1a\x0c \xd3\x1a\x0c\xa0\xdd\x1a\x0cH\xd2\x1a\x0c \xd0\x1a\x0c`\xd5\x1a\x0c\xc8\xdf\x1a\x0c(\xd1\x1a\x0ch\xd3\x1a\x0c\x08\xd6\x1a\x0c\xb8\xd4\x1a\x0c@\xd1\x1a\x0c\x10\xd1\x1a\x0c8\xdc\x1a\x0c0\xd2\x1a\x0c(\xdd\x1a\x0c\xf0\xd2\x1a\x0c\xd8R\x9d\x04\x98\\\x9d\x04pZ\x9d\x04\xb0S\x9d\x04\xe8W\x9d\x04\x18U\x9d\x04\xc0^\x9d\x04\x18X\x9d\x04X]\x9d\x04@Z\x9d\x04\xf8Y\x9d\x04@]\x9d\x04\xa8[\x9d\x04\x00R\x9d\x048Y\x9d\x04\x10Z\x9d\x04\x10Q\x9d\x04\x88T\x9d\x04\xd8X\x9d\x04\xc0X\x9d\x04\xd0Q\x9d\x04(]\x9d\x04\xa0Q\x9d\x04\xf8V\x9d\x04\xd0W\x9d\x04\x00X\x9d\x04\xc0U\x9d\x04\xd8^\x9d\x04`U\x9d\x04\xf8\\\x9d\x04\x88W\x9d\x04XZ\x9d\x04p]\x9d\x04\x98Y\x9d\x04pQ\x9d\x04\x88]\x9d\x040[\x9d\x04\xf0X\x9d\x04hS\x9d\x04\xd8[\x9d\x04H[\x9d\x04\x90^\x9d\x04\x08S\x9d\x04h_\x9d\x040R\x9d\x04\xe0S\x9d\x04\x80P\x9d\x04\xb8Q\x9d\x048P\x9d\x04`R\x9d\x04\xe0P\x9d\x04XT\x9d\x04\xe0Y\x9d\x04PY\x9d\x04PS\x9d\x040U\x9d\x04\xf8S\x9d\x04@Q\x9d\x04\x90X\x9d\x04\x80Y\x9d\x04\xd0T\x9d\x04PP\x9d\x04\xa0T\x9d\x04\x98S\x9d\x04\x08V\x9d\x04`[\x9d\x04\x98V\x9d\x04@T\x9d\x04\xf0[\x9d\x04PV\x9d\x04\x08\\\x9d\x04\xb8Z\x9d\x04\xe0_\x9d\x04\xc0[\x9d\x04P\\\x9d\x04\xf0R\x9d\x04hP\x9d\x04\xb0P\x9d\x04\xf8P\x9d\x04\xa8R\x9d\x048V\x9d\x04@W\x9d\x04(T\x9d\x04\xc8S\x9d\x04xR\x9d\x04\xd0]\x9d\x04\xe8T\x9d\x04pT\x9d\x04\xd0Z\x9d\x04\xc0R\x9d\x04\xe0V\x9d\x04 S\x9d\x04\x18^\x9d\x04XQ\x9d\x04\x88Z\x9d\x04hV\x9d\x04 P\x9d\x04xX\x9d\x04\x00U\x9d\x04 V\x9d\x04\x98_\x9d\x04\x90R\x9d\x04\xe8Q\x9d\x04\xe8Z\x9d\x04\xa8U\x9d\x04\xb8]\x9d\x04\xa0W\x9d\x04\xd8U\x9d\x04\xb0V\x9d\x04\xb8T\x9d\x04\xc8V\x9d\x04\xc8P\x9d\x04\xa8X\x9d\x04\x18R\x9d\x048\\\x9d\x04\x08_\x9d\x04\x00^\x9d\x04`^\x9d\x04P_\x9d\x04\xa0Z\x9d\x04'
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
NtbstRp10244
(dp10245
g9131
(dp10246
g9118
I01
sg38
I00
sg33
I00
sg9126
I01
sg39
I01
sg34
I00
ssg9133
g10233
sg9134
(lp10247
g9118
ag9126
ag38
ag39
ag33
ag34
asg9136
(lp10248
I200
aI1
asbsg9138
g9253
sg9140
g92
(g93
(I0
tS'b'
tRp10249
(I1
(I200
I1
tg99
I00
S'\x00\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x03\x00\x00\x00\x04\x00\x00\x00\x05\x00\x00\x00\x06\x00\x00\x00\x07\x00\x00\x00\x08\x00\x00\x00\t\x00\x00\x00\n\x00\x00\x00\x0b\x00\x00\x00\x0c\x00\x00\x00\r\x00\x00\x00\x0e\x00\x00\x00\x0f\x00\x00\x00\x10\x00\x00\x00\x11\x00\x00\x00\x12\x00\x00\x00\x13\x00\x00\x00\x14\x00\x00\x00\x15\x00\x00\x00\x16\x00\x00\x00\x17\x00\x00\x00\x18\x00\x00\x00\x19\x00\x00\x00\x1a\x00\x00\x00\x1b\x00\x00\x00\x1c\x00\x00\x00\x1d\x00\x00\x00\x1e\x00\x00\x00\x1f\x00\x00\x00 \x00\x00\x00!\x00\x00\x00"\x00\x00\x00#\x00\x00\x00$\x00\x00\x00%\x00\x00\x00&\x00\x00\x00\'\x00\x00\x00(\x00\x00\x00)\x00\x00\x00*\x00\x00\x00+\x00\x00\x00,\x00\x00\x00-\x00\x00\x00.\x00\x00\x00/\x00\x00\x000\x00\x00\x001\x00\x00\x002\x00\x00\x003\x00\x00\x004\x00\x00\x005\x00\x00\x006\x00\x00\x007\x00\x00\x008\x00\x00\x009\x00\x00\x00:\x00\x00\x00;\x00\x00\x00<\x00\x00\x00=\x00\x00\x00>\x00\x00\x00?\x00\x00\x00@\x00\x00\x00A\x00\x00\x00B\x00\x00\x00C\x00\x00\x00D\x00\x00\x00E\x00\x00\x00F\x00\x00\x00G\x00\x00\x00H\x00\x00\x00I\x00\x00\x00J\x00\x00\x00K\x00\x00\x00L\x00\x00\x00M\x00\x00\x00N\x00\x00\x00O\x00\x00\x00P\x00\x00\x00Q\x00\x00\x00R\x00\x00\x00S\x00\x00\x00T\x00\x00\x00U\x00\x00\x00V\x00\x00\x00W\x00\x00\x00X\x00\x00\x00Y\x00\x00\x00Z\x00\x00\x00[\x00\x00\x00\\\x00\x00\x00]\x00\x00\x00^\x00\x00\x00_\x00\x00\x00`\x00\x00\x00a\x00\x00\x00b\x00\x00\x00c\x00\x00\x00d\x00\x00\x00e\x00\x00\x00f\x00\x00\x00g\x00\x00\x00h\x00\x00\x00i\x00\x00\x00j\x00\x00\x00k\x00\x00\x00l\x00\x00\x00m\x00\x00\x00n\x00\x00\x00o\x00\x00\x00p\x00\x00\x00q\x00\x00\x00r\x00\x00\x00s\x00\x00\x00t\x00\x00\x00u\x00\x00\x00v\x00\x00\x00w\x00\x00\x00x\x00\x00\x00y\x00\x00\x00z\x00\x00\x00{\x00\x00\x00|\x00\x00\x00}\x00\x00\x00~\x00\x00\x00\x7f\x00\x00\x00\x80\x00\x00\x00\x81\x00\x00\x00\x82\x00\x00\x00\x83\x00\x00\x00\x84\x00\x00\x00\x85\x00\x00\x00\x86\x00\x00\x00\x87\x00\x00\x00\x88\x00\x00\x00\x89\x00\x00\x00\x8a\x00\x00\x00\x8b\x00\x00\x00\x8c\x00\x00\x00\x8d\x00\x00\x00\x8e\x00\x00\x00\x8f\x00\x00\x00\x90\x00\x00\x00\x91\x00\x00\x00\x92\x00\x00\x00\x93\x00\x00\x00\x94\x00\x00\x00\x95\x00\x00\x00\x96\x00\x00\x00\x97\x00\x00\x00\x98\x00\x00\x00\x99\x00\x00\x00\x9a\x00\x00\x00\x9b\x00\x00\x00\x9c\x00\x00\x00\x9d\x00\x00\x00\x9e\x00\x00\x00\x9f\x00\x00\x00\xa0\x00\x00\x00\xa1\x00\x00\x00\xa2\x00\x00\x00\xa3\x00\x00\x00\xa4\x00\x00\x00\xa5\x00\x00\x00\xa6\x00\x00\x00\xa7\x00\x00\x00\xa8\x00\x00\x00\xa9\x00\x00\x00\xaa\x00\x00\x00\xab\x00\x00\x00\xac\x00\x00\x00\xad\x00\x00\x00\xae\x00\x00\x00\xaf\x00\x00\x00\xb0\x00\x00\x00\xb1\x00\x00\x00\xb2\x00\x00\x00\xb3\x00\x00\x00\xb4\x00\x00\x00\xb5\x00\x00\x00\xb6\x00\x00\x00\xb7\x00\x00\x00\xb8\x00\x00\x00\xb9\x00\x00\x00\xba\x00\x00\x00\xbb\x00\x00\x00\xbc\x00\x00\x00\xbd\x00\x00\x00\xbe\x00\x00\x00\xbf\x00\x00\x00\xc0\x00\x00\x00\xc1\x00\x00\x00\xc2\x00\x00\x00\xc3\x00\x00\x00\xc4\x00\x00\x00\xc5\x00\x00\x00\xc6\x00\x00\x00\xc7\x00\x00\x00'
tbsg9142
I01
sg9143
I1
sg9144
I-1
sg9145
(lp10250
g1
(g9147
g9116
(dp10251
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10252
ag1
(g9147
g9116
(dp10253
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10254
ag1
(g9147
g9116
(dp10255
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10256
ag1
(g9147
g9116
(dp10257
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10258
ag1
(g9147
g9116
(dp10259
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10260
ag1
(g9147
g9116
(dp10261
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10262
ag1
(g9147
g9116
(dp10263
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10264
ag1
(g9147
g9116
(dp10265
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10266
ag1
(g9147
g9116
(dp10267
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10268
ag1
(g9147
g9116
(dp10269
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10270
ag1
(g9147
g9116
(dp10271
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10272
ag1
(g9147
g9116
(dp10273
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10274
ag1
(g9147
g9116
(dp10275
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10276
ag1
(g9147
g9116
(dp10277
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10278
ag1
(g9147
g9116
(dp10279
g6383
g6611
sg6371
g6607
sg6385
g6618
sg6380
g6615
stRp10280
ag1
(g9147
g9116
(dp10281
g6383
g6628
sg6371
g6624
sg6385
g6635
sg6380
g6632
stRp10282
ag1
(g9147
g9116
(dp10283
g6383
g6479
sg6371
g6641
sg6385
g6486
sg6380
g6648
stRp10284
ag1
(g9147
g9116
(dp10285
g6383
g6660
sg6371
g6656
sg6385
g6667
sg6380
g6664
stRp10286
ag1
(g9147
g9116
(dp10287
g6383
g6628
sg6371
g6673
sg6385
g6635
sg6380
g6680
stRp10288
ag1
(g9147
g9116
(dp10289
g6383
g6519
sg6371
g6688
sg6385
g6513
sg6380
g6695
stRp10290
ag1
(g9147
g9116
(dp10291
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10292
ag1
(g9147
g9116
(dp10293
g6383
g6720
sg6371
g6716
sg6385
g6727
sg6380
g6724
stRp10294
ag1
(g9147
g9116
(dp10295
g6383
g6737
sg6371
g6733
sg6385
g6744
sg6380
g6741
stRp10296
ag1
(g9147
g9116
(dp10297
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10298
ag1
(g9147
g9116
(dp10299
g6383
g6430
sg6371
g6763
sg6385
g6437
sg6380
g6770
stRp10300
ag1
(g9147
g9116
(dp10301
g6383
g6496
sg6371
g6778
sg6385
g6503
sg6380
g6785
stRp10302
ag1
(g9147
g9116
(dp10303
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10304
ag1
(g9147
g9116
(dp10305
g6383
g6447
sg6371
g6806
sg6385
g6454
sg6380
g6813
stRp10306
ag1
(g9147
g9116
(dp10307
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10308
ag1
(g9147
g9116
(dp10309
g6383
g6838
sg6371
g6834
sg6385
g6845
sg6380
g6842
stRp10310
ag1
(g9147
g9116
(dp10311
g6383
g6660
sg6371
g6656
sg6385
g6667
sg6380
g6664
stRp10312
ag1
(g9147
g9116
(dp10313
g6383
g6496
sg6371
g6778
sg6385
g6503
sg6380
g6785
stRp10314
ag1
(g9147
g9116
(dp10315
g6383
g6628
sg6371
g6624
sg6385
g6635
sg6380
g6632
stRp10316
ag1
(g9147
g9116
(dp10317
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10318
ag1
(g9147
g9116
(dp10319
g6383
g6838
sg6371
g6903
sg6385
g6845
sg6380
g6910
stRp10320
ag1
(g9147
g9116
(dp10321
g6383
g6720
sg6371
g6716
sg6385
g6727
sg6380
g6724
stRp10322
ag1
(g9147
g9116
(dp10323
g6383
g6430
sg6371
g6763
sg6385
g6437
sg6380
g6770
stRp10324
ag1
(g9147
g9116
(dp10325
g6383
g6948
sg6371
g6944
sg6385
g6955
sg6380
g6952
stRp10326
ag1
(g9147
g9116
(dp10327
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10328
ag1
(g9147
g9116
(dp10329
g6383
g6948
sg6371
g6944
sg6385
g6955
sg6380
g6952
stRp10330
ag1
(g9147
g9116
(dp10331
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10332
ag1
(g9147
g9116
(dp10333
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10334
ag1
(g9147
g9116
(dp10335
g6383
g7023
sg6371
g7013
sg6385
g7017
sg6380
g7021
stRp10336
ag1
(g9147
g9116
(dp10337
g6383
g6737
sg6371
g7030
sg6385
g6744
sg6380
g7037
stRp10338
ag1
(g9147
g9116
(dp10339
g6383
g6838
sg6371
g6834
sg6385
g6845
sg6380
g6842
stRp10340
ag1
(g9147
g9116
(dp10341
g6383
g6396
sg6371
g7058
sg6385
g6403
sg6380
g7065
stRp10342
ag1
(g9147
g9116
(dp10343
g6383
g6838
sg6371
g6834
sg6385
g6845
sg6380
g6842
stRp10344
ag1
(g9147
g9116
(dp10345
g6383
g6948
sg6371
g6944
sg6385
g6955
sg6380
g6952
stRp10346
ag1
(g9147
g9116
(dp10347
g6383
g6660
sg6371
g7099
sg6385
g6667
sg6380
g7106
stRp10348
ag1
(g9147
g9116
(dp10349
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10350
ag1
(g9147
g9116
(dp10351
g6383
g6948
sg6371
g6944
sg6385
g6955
sg6380
g6952
stRp10352
ag1
(g9147
g9116
(dp10353
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10354
ag1
(g9147
g9116
(dp10355
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10356
ag1
(g9147
g9116
(dp10357
g6383
g6838
sg6371
g6834
sg6385
g6845
sg6380
g6842
stRp10358
ag1
(g9147
g9116
(dp10359
g6383
g6376
sg6371
g7179
sg6385
g6386
sg6380
g7186
stRp10360
ag1
(g9147
g9116
(dp10361
g6383
g6838
sg6371
g6903
sg6385
g6845
sg6380
g6910
stRp10362
ag1
(g9147
g9116
(dp10363
g6383
g6948
sg6371
g7207
sg6385
g6955
sg6380
g7214
stRp10364
ag1
(g9147
g9116
(dp10365
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10366
ag1
(g9147
g9116
(dp10367
g6383
g6447
sg6371
g6806
sg6385
g6454
sg6380
g6813
stRp10368
ag1
(g9147
g9116
(dp10369
g6383
g6720
sg6371
g6716
sg6385
g6727
sg6380
g6724
stRp10370
ag1
(g9147
g9116
(dp10371
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10372
ag1
(g9147
g9116
(dp10373
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10374
ag1
(g9147
g9116
(dp10375
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10376
ag1
(g9147
g9116
(dp10377
g6383
g6430
sg6371
g6763
sg6385
g6437
sg6380
g6770
stRp10378
ag1
(g9147
g9116
(dp10379
g6383
g6396
sg6371
g7058
sg6385
g6403
sg6380
g7065
stRp10380
ag1
(g9147
g9116
(dp10381
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10382
ag1
(g9147
g9116
(dp10383
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10384
ag1
(g9147
g9116
(dp10385
g6383
g6611
sg6371
g6607
sg6385
g6618
sg6380
g6615
stRp10386
ag1
(g9147
g9116
(dp10387
g6383
g6594
sg6371
g7365
sg6385
g6601
sg6380
g7372
stRp10388
ag1
(g9147
g9116
(dp10389
g6383
g6577
sg6371
g7380
sg6385
g6584
sg6380
g7387
stRp10390
ag1
(g9147
g9116
(dp10391
g6383
g6948
sg6371
g6944
sg6385
g6955
sg6380
g6952
stRp10392
ag1
(g9147
g9116
(dp10393
g6383
g6611
sg6371
g7408
sg6385
g6618
sg6380
g7415
stRp10394
ag1
(g9147
g9116
(dp10395
g6383
g7023
sg6371
g7423
sg6385
g7017
sg6380
g7430
stRp10396
ag1
(g9147
g9116
(dp10397
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10398
ag1
(g9147
g9116
(dp10399
g6383
g6660
sg6371
g7099
sg6385
g6667
sg6380
g7106
stRp10400
ag1
(g9147
g9116
(dp10401
g6383
g6611
sg6371
g6607
sg6385
g6618
sg6380
g6615
stRp10402
ag1
(g9147
g9116
(dp10403
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10404
ag1
(g9147
g9116
(dp10405
g6383
g6628
sg6371
g6624
sg6385
g6635
sg6380
g6632
stRp10406
ag1
(g9147
g9116
(dp10407
g6383
g7023
sg6371
g7013
sg6385
g7017
sg6380
g7021
stRp10408
ag1
(g9147
g9116
(dp10409
g6383
g6577
sg6371
g7380
sg6385
g6584
sg6380
g7387
stRp10410
ag1
(g9147
g9116
(dp10411
g6383
g6660
sg6371
g6656
sg6385
g6667
sg6380
g6664
stRp10412
ag1
(g9147
g9116
(dp10413
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10414
ag1
(g9147
g9116
(dp10415
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10416
ag1
(g9147
g9116
(dp10417
g6383
g6628
sg6371
g6624
sg6385
g6635
sg6380
g6632
stRp10418
ag1
(g9147
g9116
(dp10419
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10420
ag1
(g9147
g9116
(dp10421
g6383
g6496
sg6371
g6778
sg6385
g6503
sg6380
g6785
stRp10422
ag1
(g9147
g9116
(dp10423
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10424
ag1
(g9147
g9116
(dp10425
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10426
ag1
(g9147
g9116
(dp10427
g6383
g6737
sg6371
g7030
sg6385
g6744
sg6380
g7037
stRp10428
ag1
(g9147
g9116
(dp10429
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10430
ag1
(g9147
g9116
(dp10431
g6383
g6737
sg6371
g7030
sg6385
g6744
sg6380
g7037
stRp10432
ag1
(g9147
g9116
(dp10433
g6383
g6660
sg6371
g6656
sg6385
g6667
sg6380
g6664
stRp10434
ag1
(g9147
g9116
(dp10435
g6383
g6720
sg6371
g7685
sg6385
g6727
sg6380
g7692
stRp10436
ag1
(g9147
g9116
(dp10437
g6383
g6530
sg6371
g7700
sg6385
g6537
sg6380
g7707
stRp10438
ag1
(g9147
g9116
(dp10439
g6383
g6628
sg6371
g6673
sg6385
g6635
sg6380
g6680
stRp10440
ag1
(g9147
g9116
(dp10441
g6383
g6447
sg6371
g6806
sg6385
g6454
sg6380
g6813
stRp10442
ag1
(g9147
g9116
(dp10443
g6383
g7023
sg6371
g7423
sg6385
g7017
sg6380
g7430
stRp10444
ag1
(g9147
g9116
(dp10445
g6383
g6396
sg6371
g6392
sg6385
g6403
sg6380
g6400
stRp10446
ag1
(g9147
g9116
(dp10447
g6383
g6547
sg6371
g7767
sg6385
g6554
sg6380
g7774
stRp10448
ag1
(g9147
g9116
(dp10449
g6383
g6496
sg6371
g6778
sg6385
g6503
sg6380
g6785
stRp10450
ag1
(g9147
g9116
(dp10451
g6383
g6838
sg6371
g6903
sg6385
g6845
sg6380
g6910
stRp10452
ag1
(g9147
g9116
(dp10453
g6383
g6577
sg6371
g7380
sg6385
g6584
sg6380
g7387
stRp10454
ag1
(g9147
g9116
(dp10455
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10456
ag1
(g9147
g9116
(dp10457
g6383
g6838
sg6371
g6903
sg6385
g6845
sg6380
g6910
stRp10458
ag1
(g9147
g9116
(dp10459
g6383
g6530
sg6371
g7700
sg6385
g6537
sg6380
g7707
stRp10460
ag1
(g9147
g9116
(dp10461
g6383
g6611
sg6371
g7408
sg6385
g6618
sg6380
g7415
stRp10462
ag1
(g9147
g9116
(dp10463
g6383
g6948
sg6371
g7207
sg6385
g6955
sg6380
g7214
stRp10464
ag1
(g9147
g9116
(dp10465
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10466
ag1
(g9147
g9116
(dp10467
g6383
g6547
sg6371
g7767
sg6385
g6554
sg6380
g7774
stRp10468
ag1
(g9147
g9116
(dp10469
g6383
g6376
sg6371
g7179
sg6385
g6386
sg6380
g7186
stRp10470
ag1
(g9147
g9116
(dp10471
g6383
g6396
sg6371
g7058
sg6385
g6403
sg6380
g7065
stRp10472
ag1
(g9147
g9116
(dp10473
g6383
g6611
sg6371
g7408
sg6385
g6618
sg6380
g7415
stRp10474
ag1
(g9147
g9116
(dp10475
g6383
g6530
sg6371
g7700
sg6385
g6537
sg6380
g7707
stRp10476
ag1
(g9147
g9116
(dp10477
g6383
g6720
sg6371
g7685
sg6385
g6727
sg6380
g7692
stRp10478
ag1
(g9147
g9116
(dp10479
g6383
g6948
sg6371
g7207
sg6385
g6955
sg6380
g7214
stRp10480
ag1
(g9147
g9116
(dp10481
g6383
g6594
sg6371
g7365
sg6385
g6601
sg6380
g7372
stRp10482
ag1
(g9147
g9116
(dp10483
g6383
g6737
sg6371
g6733
sg6385
g6744
sg6380
g6741
stRp10484
ag1
(g9147
g9116
(dp10485
g6383
g6577
sg6371
g7380
sg6385
g6584
sg6380
g7387
stRp10486
ag1
(g9147
g9116
(dp10487
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10488
ag1
(g9147
g9116
(dp10489
g6383
g6838
sg6371
g6903
sg6385
g6845
sg6380
g6910
stRp10490
ag1
(g9147
g9116
(dp10491
g6383
g6594
sg6371
g7365
sg6385
g6601
sg6380
g7372
stRp10492
ag1
(g9147
g9116
(dp10493
g6383
g6396
sg6371
g7058
sg6385
g6403
sg6380
g7065
stRp10494
ag1
(g9147
g9116
(dp10495
g6383
g6628
sg6371
g6673
sg6385
g6635
sg6380
g6680
stRp10496
ag1
(g9147
g9116
(dp10497
g6383
g7023
sg6371
g7423
sg6385
g7017
sg6380
g7430
stRp10498
ag1
(g9147
g9116
(dp10499
g6383
g6594
sg6371
g7365
sg6385
g6601
sg6380
g7372
stRp10500
ag1
(g9147
g9116
(dp10501
g6383
g6376
sg6371
g6372
sg6385
g6386
sg6380
g6381
stRp10502
ag1
(g9147
g9116
(dp10503
g6383
g6547
sg6371
g7767
sg6385
g6554
sg6380
g7774
stRp10504
ag1
(g9147
g9116
(dp10505
g6383
g6660
sg6371
g6656
sg6385
g6667
sg6380
g6664
stRp10506
ag1
(g9147
g9116
(dp10507
g6383
g6547
sg6371
g7767
sg6385
g6554
sg6380
g7774
stRp10508
ag1
(g9147
g9116
(dp10509
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10510
ag1
(g9147
g9116
(dp10511
g6383
g6737
sg6371
g6733
sg6385
g6744
sg6380
g6741
stRp10512
ag1
(g9147
g9116
(dp10513
g6383
g6519
sg6371
g6688
sg6385
g6513
sg6380
g6695
stRp10514
ag1
(g9147
g9116
(dp10515
g6383
g6376
sg6371
g7179
sg6385
g6386
sg6380
g7186
stRp10516
ag1
(g9147
g9116
(dp10517
g6383
g7023
sg6371
g7013
sg6385
g7017
sg6380
g7021
stRp10518
ag1
(g9147
g9116
(dp10519
g6383
g6628
sg6371
g6673
sg6385
g6635
sg6380
g6680
stRp10520
ag1
(g9147
g9116
(dp10521
g6383
g6611
sg6371
g6607
sg6385
g6618
sg6380
g6615
stRp10522
ag1
(g9147
g9116
(dp10523
g6383
g7023
sg6371
g7423
sg6385
g7017
sg6380
g7430
stRp10524
ag1
(g9147
g9116
(dp10525
g6383
g6479
sg6371
g6641
sg6385
g6486
sg6380
g6648
stRp10526
ag1
(g9147
g9116
(dp10527
g6383
g6447
sg6371
g6806
sg6385
g6454
sg6380
g6813
stRp10528
ag1
(g9147
g9116
(dp10529
g6383
g6660
sg6371
g7099
sg6385
g6667
sg6380
g7106
stRp10530
ag1
(g9147
g9116
(dp10531
g6383
g6479
sg6371
g6641
sg6385
g6486
sg6380
g6648
stRp10532
ag1
(g9147
g9116
(dp10533
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10534
ag1
(g9147
g9116
(dp10535
g6383
g6430
sg6371
g6426
sg6385
g6437
sg6380
g6434
stRp10536
ag1
(g9147
g9116
(dp10537
g6383
g6413
sg6371
g6409
sg6385
g6420
sg6380
g6417
stRp10538
ag1
(g9147
g9116
(dp10539
g6383
g6720
sg6371
g6716
sg6385
g6727
sg6380
g6724
stRp10540
ag1
(g9147
g9116
(dp10541
g6383
g7023
sg6371
g7013
sg6385
g7017
sg6380
g7021
stRp10542
ag1
(g9147
g9116
(dp10543
g6383
g6720
sg6371
g7685
sg6385
g6727
sg6380
g7692
stRp10544
ag1
(g9147
g9116
(dp10545
g6383
g6547
sg6371
g7767
sg6385
g6554
sg6380
g7774
stRp10546
ag1
(g9147
g9116
(dp10547
g6383
g6611
sg6371
g7408
sg6385
g6618
sg6380
g7415
stRp10548
ag1
(g9147
g9116
(dp10549
g6383
g6519
sg6371
g6688
sg6385
g6513
sg6380
g6695
stRp10550
ag1
(g9147
g9116
(dp10551
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10552
ag1
(g9147
g9116
(dp10553
g6383
g6628
sg6371
g6624
sg6385
g6635
sg6380
g6632
stRp10554
ag1
(g9147
g9116
(dp10555
g6383
g6496
sg6371
g6778
sg6385
g6503
sg6380
g6785
stRp10556
ag1
(g9147
g9116
(dp10557
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10558
ag1
(g9147
g9116
(dp10559
g6383
g6737
sg6371
g6733
sg6385
g6744
sg6380
g6741
stRp10560
ag1
(g9147
g9116
(dp10561
g6383
g6577
sg6371
g7380
sg6385
g6584
sg6380
g7387
stRp10562
ag1
(g9147
g9116
(dp10563
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10564
ag1
(g9147
g9116
(dp10565
g6383
g6737
sg6371
g7030
sg6385
g6744
sg6380
g7037
stRp10566
ag1
(g9147
g9116
(dp10567
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10568
ag1
(g9147
g9116
(dp10569
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10570
ag1
(g9147
g9116
(dp10571
g6383
g7023
sg6371
g7423
sg6385
g7017
sg6380
g7430
stRp10572
ag1
(g9147
g9116
(dp10573
g6383
g6479
sg6371
g6641
sg6385
g6486
sg6380
g6648
stRp10574
ag1
(g9147
g9116
(dp10575
g6383
g6720
sg6371
g6716
sg6385
g6727
sg6380
g6724
stRp10576
ag1
(g9147
g9116
(dp10577
g6383
g6430
sg6371
g6763
sg6385
g6437
sg6380
g6770
stRp10578
ag1
(g9147
g9116
(dp10579
g6383
g6519
sg6371
g6509
sg6385
g6513
sg6380
g6517
stRp10580
ag1
(g9147
g9116
(dp10581
g6383
g6594
sg6371
g7365
sg6385
g6601
sg6380
g7372
stRp10582
ag1
(g9147
g9116
(dp10583
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10584
ag1
(g9147
g9116
(dp10585
g6383
g7023
sg6371
g7013
sg6385
g7017
sg6380
g7021
stRp10586
ag1
(g9147
g9116
(dp10587
g6383
g6396
sg6371
g7058
sg6385
g6403
sg6380
g7065
stRp10588
ag1
(g9147
g9116
(dp10589
g6383
g6530
sg6371
g7700
sg6385
g6537
sg6380
g7707
stRp10590
ag1
(g9147
g9116
(dp10591
g6383
g6519
sg6371
g6688
sg6385
g6513
sg6380
g6695
stRp10592
ag1
(g9147
g9116
(dp10593
g6383
g6530
sg6371
g6526
sg6385
g6537
sg6380
g6534
stRp10594
ag1
(g9147
g9116
(dp10595
g6383
g6720
sg6371
g7685
sg6385
g6727
sg6380
g7692
stRp10596
ag1
(g9147
g9116
(dp10597
g6383
g6594
sg6371
g6590
sg6385
g6601
sg6380
g6598
stRp10598
ag1
(g9147
g9116
(dp10599
g6383
g6660
sg6371
g7099
sg6385
g6667
sg6380
g7106
stRp10600
ag1
(g9147
g9116
(dp10601
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10602
ag1
(g9147
g9116
(dp10603
g6383
g6737
sg6371
g6733
sg6385
g6744
sg6380
g6741
stRp10604
ag1
(g9147
g9116
(dp10605
g6383
g6948
sg6371
g7207
sg6385
g6955
sg6380
g7214
stRp10606
ag1
(g9147
g9116
(dp10607
g6383
g6447
sg6371
g6443
sg6385
g6454
sg6380
g6451
stRp10608
ag1
(g9147
g9116
(dp10609
g6383
g6376
sg6371
g7179
sg6385
g6386
sg6380
g7186
stRp10610
ag1
(g9147
g9116
(dp10611
g6383
g6413
sg6371
g6460
sg6385
g6420
sg6380
g6467
stRp10612
ag1
(g9147
g9116
(dp10613
g6383
g6376
sg6371
g7179
sg6385
g6386
sg6380
g7186
stRp10614
ag1
(g9147
g9116
(dp10615
g6383
g6628
sg6371
g6673
sg6385
g6635
sg6380
g6680
stRp10616
ag1
(g9147
g9116
(dp10617
g6383
g6430
sg6371
g6763
sg6385
g6437
sg6380
g6770
stRp10618
ag1
(g9147
g9116
(dp10619
g6383
g6519
sg6371
g6688
sg6385
g6513
sg6380
g6695
stRp10620
ag1
(g9147
g9116
(dp10621
g6383
g6530
sg6371
g7700
sg6385
g6537
sg6380
g7707
stRp10622
ag1
(g9147
g9116
(dp10623
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10624
ag1
(g9147
g9116
(dp10625
g6383
g6948
sg6371
g7207
sg6385
g6955
sg6380
g7214
stRp10626
ag1
(g9147
g9116
(dp10627
g6383
g6479
sg6371
g6641
sg6385
g6486
sg6380
g6648
stRp10628
ag1
(g9147
g9116
(dp10629
g6383
g6447
sg6371
g6806
sg6385
g6454
sg6380
g6813
stRp10630
ag1
(g9147
g9116
(dp10631
g6383
g6479
sg6371
g6475
sg6385
g6486
sg6380
g6483
stRp10632
ag1
(g9147
g9116
(dp10633
g6383
g6720
sg6371
g7685
sg6385
g6727
sg6380
g7692
stRp10634
ag1
(g9147
g9116
(dp10635
g6383
g6496
sg6371
g6492
sg6385
g6503
sg6380
g6500
stRp10636
ag1
(g9147
g9116
(dp10637
g6383
g6838
sg6371
g6834
sg6385
g6845
sg6380
g6842
stRp10638
ag1
(g9147
g9116
(dp10639
g6383
g6611
sg6371
g6607
sg6385
g6618
sg6380
g6615
stRp10640
ag1
(g9147
g9116
(dp10641
g6383
g6547
sg6371
g6543
sg6385
g6554
sg6380
g6551
stRp10642
ag1
(g9147
g9116
(dp10643
g6383
g6577
sg6371
g6573
sg6385
g6584
sg6380
g6581
stRp10644
ag1
(g9147
g9116
(dp10645
g6383
g6611
sg6371
g7408
sg6385
g6618
sg6380
g7415
stRp10646
ag1
(g9147
g9116
(dp10647
g6383
g6737
sg6371
g7030
sg6385
g6744
sg6380
g7037
stRp10648
ag1
(g9147
g9116
(dp10649
g6383
g6660
sg6371
g7099
sg6385
g6667
sg6380
g7106
stRp10650
asg9228
Nsg9229
g9086
sg9230
I200
sg9231
I0
sg9232
I200
sg9233
I01
sbasS'savePickle'
p10651
I00
sb.